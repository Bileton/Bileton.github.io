<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>8086汇编</title>
    <url>/2025/03/02/8086%E6%B1%87%E7%BC%96/</url>
    <content><![CDATA[<h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><p>8086CPU中有14个寄存器，分别是AX、BX、CX、DX、SI、DI、BP、SP、IP、CS、SS、DS、ES、PSW。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通用寄存器：AX、BX、CX、DX</span><br><span class="line">变址寄存器：SI、DI</span><br><span class="line">指针寄存器：BP、SP</span><br><span class="line">指令指针寄存器：IP</span><br><span class="line">段寄存器：CS、SS、DS、ES    //ES：附加段寄存器</span><br><span class="line">标志寄存器：PSW</span><br><span class="line">8086CPU所有的寄存器都是16位的，可以存放2个字节</span><br></pre></td></tr></table></figure>

<h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><p>以AX为例</p>
<p><img src="/2025/03/02/8086%E6%B1%87%E7%BC%96/1.jpg"></p>
<p>一个16位寄存器可以存储一个16位的数据，它可以存储的最大值为2的16次方减1（65535）。</p>
<p>为保证兼容这四个通用寄存器都可分为两个独立使用的8位寄存器来使用：</p>
<table>
<thead>
<tr>
<th>16位</th>
<th>高8位</th>
<th>低8位</th>
</tr>
</thead>
<tbody><tr>
<td>AX</td>
<td>AH</td>
<td>AL</td>
</tr>
<tr>
<td>BX</td>
<td>BH</td>
<td>BL</td>
</tr>
<tr>
<td>CX</td>
<td>CH</td>
<td>CL</td>
</tr>
<tr>
<td>DX</td>
<td>DH</td>
<td>DL</td>
</tr>
</tbody></table>
<h2 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h2><p>段寄存器用来存放段地址。</p>
<p>8086CPU有4个段寄存器：CS、DS、SS、ES。这四个段寄存器提供内存单元的段地址。</p>
<h3 id="CS和IP"><a href="#CS和IP" class="headerlink" title="CS和IP"></a>CS和IP</h3><p>CS和IP是8086CPU中两个最关键的寄存器，它们指示 了CPU当前要读取指令的地址。</p>
<p>CS为代码段寄存器，IP为指令指针寄存器，任意时刻，设CS中的内容为M，IP中的内容为N，8086CPU将从内存M*16+N单元开始，读取一条指令并执行。</p>
<h3 id="DS和-address"><a href="#DS和-address" class="headerlink" title="DS和[address]"></a>DS和[address]</h3><p>在8086CPU中，内存地址由段地址和偏移地址组成，读写一个内存单元的时候，必须先给出这个内存单元的地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用DS寄存器存放要访问的数据的段地址</span><br><span class="line">偏移地址用[...]形式直接给出</span><br></pre></td></tr></table></figure>

<h3 id="SS和SP"><a href="#SS和SP" class="headerlink" title="SS和SP"></a>SS和SP</h3><p>栈顶的段地址存放在存放在SS中，偏移地址存放在SP中。任意时刻，SS:SP指向栈顶元素。</p>
<p><img src="/2025/03/02/8086%E6%B1%87%E7%BC%96/2.jpg"></p>
<p>栈操作机制：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push 指令执行步骤</span><br><span class="line">SP=SP-2；</span><br><span class="line">向SS:SP指向的字单元中送入数据。</span><br><span class="line"></span><br><span class="line">pop指令的执行步骤</span><br><span class="line">从SS:SP指向的字单元中读取数据</span><br><span class="line">SP=SP+2</span><br></pre></td></tr></table></figure>

<h2 id="索引寄存器"><a href="#索引寄存器" class="headerlink" title="索引寄存器"></a>索引寄存器</h2><h3 id="si和di"><a href="#si和di" class="headerlink" title="si和di"></a>si和di</h3><p>SI（Source Index） 和 DI（Destination Index） 是两个16位的索引寄存器，主要用于字符串&#x2F;数组操作和内存块数据传输。</p>
<p><strong>代码示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 将字符串从源复制到目标</span><br><span class="line">DATA SEGMENT</span><br><span class="line">    source DB &#x27;Hello, 8086!&#x27;, &#x27;$&#x27;</span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">EXTRA SEGMENT</span><br><span class="line">    dest DB 13 DUP(?)</span><br><span class="line">EXTRA ENDS</span><br><span class="line"></span><br><span class="line">CODE SEGMENT</span><br><span class="line">    ASSUME DS:DATA, ES:EXTRA, CS:CODE</span><br><span class="line">START:</span><br><span class="line">    MOV AX, DATA</span><br><span class="line">    MOV DS, AX       ; DS指向源数据段</span><br><span class="line">    MOV AX, EXTRA</span><br><span class="line">    MOV ES, AX       ; ES指向目标数据段</span><br><span class="line"></span><br><span class="line">    LEA SI, source   ; SI = 源地址</span><br><span class="line">    LEA DI, dest     ; DI = 目标地址</span><br><span class="line">    MOV CX, 12       ; 复制12个字符</span><br><span class="line">    CLD              ; DF=0，地址递增</span><br><span class="line">    REP MOVSB        ; 逐个字节复制</span><br><span class="line"></span><br><span class="line">    ; 结束程序</span><br><span class="line">    MOV AH, 4CH</span><br><span class="line">    INT 21H</span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></figure>

<h1 id="内存与数据"><a href="#内存与数据" class="headerlink" title="内存与数据"></a>内存与数据</h1><h2 id="内存单元的描述"><a href="#内存单元的描述" class="headerlink" title="内存单元的描述"></a>内存单元的描述</h2><p>要完整的描述一个内存单元，需要两种信息：</p>
<ul>
<li>内存单元的地址</li>
<li>内存单元的长度（类型）</li>
</ul>
<h2 id="不同的寻址方式"><a href="#不同的寻址方式" class="headerlink" title="不同的寻址方式"></a>不同的寻址方式</h2><p><img src="/2025/03/02/8086%E6%B1%87%E7%BC%96/3.jpg"></p>
<h2 id="数据的处理"><a href="#数据的处理" class="headerlink" title="数据的处理"></a>数据的处理</h2><p>处理数据要清楚数据在内存中的位置和要处理的数据的长度</p>
<h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><p>ADD</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD 目标操作数, 源操作数	;目标操作数 = 目标操作数 + 源操作数</span><br></pre></td></tr></table></figure>

<p>SUB</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SUB 目标操作数, 源操作数	;目标操作数 = 目标操作数 - 源操作数</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>8086汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>ARM汇编</title>
    <url>/2024/12/16/ARM%E6%B1%87%E7%BC%96/</url>
    <content><![CDATA[<h1 id="ARM架构"><a href="#ARM架构" class="headerlink" title="ARM架构"></a>ARM架构</h1><p>ARM是一种精简指令集计算机架构（处理器架构）。</p>
<h2 id="ARMv8-A"><a href="#ARMv8-A" class="headerlink" title="ARMv8-A"></a>ARMv8-A</h2><p>Armv8-A架构支持处理器同时运行64位和32位程序，处理器在AArch64执行状态下运行64位程序，在AArch32执行状态下运行32位程序。</p>
<h2 id="指令集架构"><a href="#指令集架构" class="headerlink" title="指令集架构"></a>指令集架构</h2><h3 id="AArch64（64位模式）"><a href="#AArch64（64位模式）" class="headerlink" title="AArch64（64位模式）"></a>AArch64（64位模式）</h3><p>引入了新的指令集，<strong>A64指令集</strong>，由32位宽的指令组成。</p>
<h3 id="AArch32（32位模式）"><a href="#AArch32（32位模式）" class="headerlink" title="AArch32（32位模式）"></a>AArch32（32位模式）</h3><p>向后兼容32位的ARMv7-A指令集。</p>
<p>支持<strong>ARM指令集</strong>（固定32位指令长度）和<strong>Thumb指令集</strong>（16位和32位混合指令长度），称为<strong>A32</strong>和<strong>T32</strong>指令集	。</p>
<p>ARMv8-A的双模式设计实现了从32位到64位的过渡。</p>
<h2 id="AArch64执行状态"><a href="#AArch64执行状态" class="headerlink" title="AArch64执行状态"></a>AArch64执行状态</h2><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><ul>
<li><p>A64共有31个64位寄存器（X0到X30）。</p>
</li>
<li><p>每个寄存器均支持 64 位和 32 位访问（例如 <code>X0</code> 和 <code>W0</code> 分别表示寄存器的高 64 位和低 32 位部分）。</p>
</li>
</ul>
<p><strong>Arm架构程序调用标准</strong></p>
<ul>
<li>X0~X7是参数寄存器，传递参数并返回结果。</li>
<li>X8用于传递间接结果的地址位置。</li>
<li>X9~X15是调用者保存的临时寄存器。</li>
<li>X16~X18是子程序内调用临时寄存器。</li>
<li>X19~X28是被调用者保存的寄存器。</li>
<li>X29用作栈帧寄存器（FP），跟踪栈帧。</li>
<li>X30用作链接寄存器（LR），保存函数返回地址。</li>
</ul>
<table>
<thead>
<tr>
<th>寄存器</th>
<th>名称</th>
<th>寄存器宽度</th>
</tr>
</thead>
<tbody><tr>
<td>PC</td>
<td>程序计数器</td>
<td>64位</td>
</tr>
<tr>
<td>SP</td>
<td>栈指针寄存器</td>
<td>64位</td>
</tr>
<tr>
<td>WSP</td>
<td>栈指针寄存器</td>
<td>32位</td>
</tr>
<tr>
<td>XZR</td>
<td>零寄存器</td>
<td>64位</td>
</tr>
<tr>
<td>WZR</td>
<td>零寄存器</td>
<td>32位</td>
</tr>
<tr>
<td>LR（X30）</td>
<td>链接寄存器</td>
<td>64位</td>
</tr>
<tr>
<td>ELR</td>
<td>异常链接寄存器</td>
<td>64位</td>
</tr>
<tr>
<td>PSTATE</td>
<td>程序状态寄存器</td>
<td>64位</td>
</tr>
<tr>
<td>SPSR_ELx</td>
<td>保存进程状态寄存器</td>
<td>32位</td>
</tr>
</tbody></table>
<ul>
<li><strong>程序计数器</strong></li>
</ul>
<p>​	PC保存当前指令的地址。所有指令在加载之前都必须从PC引用的内存位置加载。</p>
<ul>
<li><strong>栈指针</strong></li>
</ul>
<p>​	SP用于跟踪当前线程的栈位置，通常指向该线程栈的逻辑“顶部”。</p>
<ul>
<li><strong>零寄存器</strong></li>
</ul>
<p>​	它被定义为始终保存0值。</p>
<ul>
<li><strong>链接寄存器</strong></li>
</ul>
<p>​	它主要用于存储调用函数时的返回地址。</p>
<ul>
<li><strong>栈帧指针</strong></li>
</ul>
<p>​	跟踪栈帧。</p>
<h2 id="AArch32执行状态"><a href="#AArch32执行状态" class="headerlink" title="AArch32执行状态"></a>AArch32执行状态</h2><h3 id="寄存器-1"><a href="#寄存器-1" class="headerlink" title="寄存器"></a>寄存器</h3><ul>
<li><p>16 个 32 位通用寄存器（<code>R0</code> 到 <code>R15</code>）。</p>
</li>
<li><p>PC（程序计数器）占用 <code>R15</code>，<code>R14</code> 通常作为链接寄存器（LR），<code>R13</code> 通常作为栈指针（SP）。</p>
</li>
</ul>
<h1 id="寄存器-2"><a href="#寄存器-2" class="headerlink" title="寄存器"></a>寄存器</h1><p><strong>ARM64</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参数寄存器：X0~X7</span><br><span class="line">间接结果寄存器：X8</span><br><span class="line">临时寄存器：X9-X15</span><br><span class="line">内部过程调用临时寄存器：X16-X17</span><br><span class="line">平台保留寄存器：X18</span><br><span class="line">被调用者保存的寄存器：X19-X28</span><br><span class="line">栈帧指针寄存器：X29</span><br><span class="line">链接寄存器：X30</span><br></pre></td></tr></table></figure>

<h1 id="数据处理指令"><a href="#数据处理指令" class="headerlink" title="数据处理指令"></a>数据处理指令</h1><p><strong>指令的基本语法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;操作码&gt; &lt;目标寄存器&gt;, &lt;操作数1&gt;, &lt;操作数2&gt;</span><br><span class="line"></span><br><span class="line">&lt;操作码&gt;：指令的操作代码，决定了具体的功能（如加法、减法、逻辑操作等）。</span><br><span class="line">&lt;目标寄存器&gt;：结果存储的目标寄存器。</span><br><span class="line">&lt;操作数1&gt; 和 &lt;操作数2&gt;：参与运算的两个操作数，可以是寄存器或立即数。</span><br></pre></td></tr></table></figure>

<ul>
<li>在A32&#x2F;T32指令中目标寄存器表示为Rd</li>
<li>在A64指令中目标寄存器表示为Xd或Wd</li>
<li>在A32&#x2F;T32指令中输入寄存器表示为Rm、Rn或Ra</li>
<li>在A64指令中输入寄存器表示为Xn或Xm</li>
</ul>
<h2 id="条件标志位"><a href="#条件标志位" class="headerlink" title="条件标志位"></a>条件标志位</h2><ul>
<li><p><strong>N</strong>(Negative)：</p>
<p>结果为负数，则值为1；</p>
<p>结果是正数或零，则值为0。</p>
</li>
<li><p><strong>Z</strong>(Zero)：</p>
<p>结果为 0，则值为1。</p>
<p>否则，值为0。</p>
</li>
<li><p><strong>C</strong>(Carry)：</p>
<p>如果结果产生了进位条件，则值为1；</p>
<p>否则，值为0。</p>
</li>
<li><p><strong>V</strong>(Overflow)：</p>
<p>如果指令结果导致溢出条件，则值为1。</p>
</li>
</ul>
<h2 id="算术指令"><a href="#算术指令" class="headerlink" title="算术指令"></a>算术指令</h2><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p>加法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add x0,x1,x2  ;x0=x1+x2</span><br></pre></td></tr></table></figure>

<h3 id="adds"><a href="#adds" class="headerlink" title="adds"></a>adds</h3><p>加法运算并更新条件标志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adds x0,x1,x2  ;x0=x1+x2 and set flags</span><br></pre></td></tr></table></figure>

<h3 id="adr"><a href="#adr" class="headerlink" title="adr"></a>adr</h3><p>计算 标签（Label）的地址 并将其加载到目标寄存器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADR &lt;Rd&gt;, &lt;label&gt;</span><br></pre></td></tr></table></figure>



<h3 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h3><p>减法</p>
<h3 id="mul"><a href="#mul" class="headerlink" title="mul"></a>mul</h3><p><code>MUL</code> 指令用于无符号乘法。它将两个寄存器的值相乘，并将结果存储在目标寄存器中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MUL destination, operand1, operand2</span><br></pre></td></tr></table></figure>



<h3 id="muls"><a href="#muls" class="headerlink" title="muls"></a>muls</h3><p><code>MULS</code> 与 <code>MUL</code> 指令类似，但是它还会更新条件码（N, Z, C, V），即用于设置 ARM 标志寄存器的状态。用于无符号乘法，格式和 <code>MUL</code> 类似。</p>
<h3 id="mla"><a href="#mla" class="headerlink" title="mla"></a>mla</h3><p><code>MLA</code> 指令用于乘法累加操作，即将两个数相乘后将结果加到一个寄存器上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MLA destination, operand1, operand2, operand3</span><br></pre></td></tr></table></figure>



<h3 id="sdiv-udiv"><a href="#sdiv-udiv" class="headerlink" title="sdiv&#x2F;udiv"></a>sdiv&#x2F;udiv</h3><p>除法</p>
<h2 id="移位和循环移位"><a href="#移位和循环移位" class="headerlink" title="移位和循环移位"></a>移位和循环移位</h2><h3 id="lsl（Logical-Shift-Left）"><a href="#lsl（Logical-Shift-Left）" class="headerlink" title="lsl（Logical Shift Left）"></a>lsl（Logical Shift Left）</h3><p>逻辑左移，左移后相当于乘以 2 的若干次方。</p>
<p>将一个值的二进制位整体向左移动，用 <strong>0</strong> 填充右边空出的位，丢弃左边溢出的位。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsl r0,r1,#2  ;r0 = r1 &lt;&lt; 2</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add r0,r1,r2,lsl #2  ;r0 = r1 + (r2&lt;&lt;2)</span><br></pre></td></tr></table></figure>



<h3 id="lsr（Logical-Shift-Right）"><a href="#lsr（Logical-Shift-Right）" class="headerlink" title="lsr（Logical Shift Right）"></a>lsr（Logical Shift Right）</h3><p>逻辑右移，逻辑右移后，每位的值变成原来数值的 <strong>1&#x2F;2</strong>。</p>
<p>左侧空出的位用 0 填充，右侧移出的位被丢弃。</p>
<h3 id="asr（Arithmetic-Shift-Left）"><a href="#asr（Arithmetic-Shift-Left）" class="headerlink" title="asr（Arithmetic Shift Left）"></a>asr（Arithmetic Shift Left）</h3><p>算术右移</p>
<p>将一个值的二进制位整体向右移动。它与逻辑右移的主要区别在于，左侧空出的位用符号位填充（最高位的值，0 或 1），以保持数值的符号不变。</p>
<h3 id="rrx"><a href="#rrx" class="headerlink" title="rrx"></a>rrx</h3><p>带扩展的循环右移</p>
<p>在普通 <code>ROR</code> 的基础上，利用 <strong>进位标志位（C）</strong> 的值作为循环右移的高位，右移后最右侧的位会填入进位标志位（<code>C</code>）</p>
<ul>
<li>始终右移 1 位</li>
<li>进位标志位参与操作</li>
</ul>
<h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><h3 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h3><p>位与</p>
<h3 id="ORR"><a href="#ORR" class="headerlink" title="ORR"></a>ORR</h3><p>将两个操作数的每一位进行逻辑或，结果写入目标寄存器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ORR &lt;Wd&gt;, &lt;Wn&gt;, &lt;Wm&gt;&#123;, &lt;shift&gt; #&lt;amount&gt;&#125;  // 32位操作</span><br><span class="line">ORR &lt;Xd&gt;, &lt;Xn&gt;, &lt;Xm&gt;&#123;, &lt;shift&gt; #&lt;amount&gt;&#125;  // 64位操作</span><br></pre></td></tr></table></figure>

<h3 id="EOR（Exclusive-OR）"><a href="#EOR（Exclusive-OR）" class="headerlink" title="EOR（Exclusive OR）"></a>EOR（Exclusive OR）</h3><p>按位异或</p>
<h3 id="LSR（Logical-Shift-Right）"><a href="#LSR（Logical-Shift-Right）" class="headerlink" title="LSR（Logical Shift Right）"></a>LSR（<strong>Logical Shift Right</strong>）</h3><p>逻辑右移指令，用于将寄存器中的数值向右移动指定的位数，高位补零。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LSR&#123;S&#125;&#123;cond&#125; Rd, Rm, #imm      @ 立即数移位</span><br><span class="line">LSR&#123;S&#125;&#123;cond&#125; Rd, Rm, Rs       @ 寄存器指定移位量</span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV R0, #16         @ R0 = 16</span><br><span class="line">LSR R1, R0, #2      @ R1 = 16 / 4 = 4</span><br></pre></td></tr></table></figure>

<h3 id="UBFIZ-Unsigned-Bitfield-Insert-and-Zero"><a href="#UBFIZ-Unsigned-Bitfield-Insert-and-Zero" class="headerlink" title="UBFIZ (Unsigned Bitfield Insert and Zero)"></a>UBFIZ (Unsigned Bitfield Insert and Zero)</h3><p>是 ARM 架构中的一个位域操作指令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UBFIZ Wd, Wn, #lsb, #width   // 32位寄存器版本</span><br><span class="line">UBFIZ Xd, Xn, #lsb, #width   // 64位寄存器版本</span><br><span class="line"></span><br><span class="line">Wd/Xd：目标寄存器</span><br><span class="line">Wn/Xn：源寄存器</span><br><span class="line">lsb：目标中的最低有效位位置（左移量）</span><br><span class="line">width：要插入的位数</span><br></pre></td></tr></table></figure>

<ul>
<li><p>将源寄存器 Wn&#x2F;Xn 的低 width 位向左移动 lsb 位</p>
</li>
<li><p>将结果放入目标寄存器 Wd&#x2F;Xd</p>
</li>
<li><p>目标寄存器中的其他位都设置为 0</p>
</li>
</ul>
<h2 id="条件指令"><a href="#条件指令" class="headerlink" title="条件指令"></a>条件指令</h2><h3 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a>cmp</h3><p>比较</p>
<h3 id="TST"><a href="#TST" class="headerlink" title="TST"></a>TST</h3><p>用于按位测试两个操作数的逻辑与（AND）结果，并根据结果更新条件标志（Condition Flags），但不会修改任何寄存器的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TST&#123;cond&#125; Rn, Operand2</span><br></pre></td></tr></table></figure>

<p>根据 <code>AND</code> 操作的结果更新以下标志位：</p>
<ul>
<li>N (Negative)：结果的最高位（符号位）为1时置位。</li>
<li>Z (Zero)：结果为0时置位。</li>
<li>C (Carry) 和 V (Overflow)：不受影响（除非 <code>Operand2</code> 包含移位操作）。</li>
</ul>
<h2 id="移动指令"><a href="#移动指令" class="headerlink" title="移动指令"></a>移动指令</h2><h3 id="mov"><a href="#mov" class="headerlink" title="mov"></a>mov</h3><p>用于将值从一个寄存器传递到另一个寄存器，或者将一个立即数加载到目标寄存器。</p>
<h3 id="movz"><a href="#movz" class="headerlink" title="movz"></a>movz</h3><p>将一个 16 位立即数 加载到目标寄存器的指定位置，并将其他位清零。</p>
<h3 id="movk"><a href="#movk" class="headerlink" title="movk"></a>movk</h3><p>将一个 16 位立即数 加载到目标寄存器的指定位置，但保持寄存器中其他位的原值不变。</p>
<h3 id="movn"><a href="#movn" class="headerlink" title="movn"></a>movn</h3><p>将一个 16 位立即数的按位取反值 加载到目标寄存器的指定位置，并将其他位清零。</p>
<h3 id="MVN"><a href="#MVN" class="headerlink" title="MVN"></a>MVN</h3><p>将 源操作数（Source Operand） 的每一位取反（0→1，1→0），并将结果存入 目标寄存器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MVN&#123;&lt;cond&gt;&#125;&#123;S&#125; &lt;Rd&gt;, &lt;Operand&gt;</span><br></pre></td></tr></table></figure>



<h1 id="内存访问指令"><a href="#内存访问指令" class="headerlink" title="内存访问指令"></a>内存访问指令</h1><h2 id="加载和存储指令"><a href="#加载和存储指令" class="headerlink" title="加载和存储指令"></a>加载和存储指令</h2><h3 id="LDR（Load-Register）"><a href="#LDR（Load-Register）" class="headerlink" title="LDR（Load Register）"></a>LDR（Load Register）</h3><p>从内存地址加载一个字（通常是32位）到指定的寄存器中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDR R0, [R1]      ; 将内存地址R1中的值加载到寄存器R0</span><br><span class="line">LDR R2, [R3, #4]  ; 将R3 + 4地址中的值加载到寄存器R2</span><br></pre></td></tr></table></figure>

<h3 id="LDRB（Load-Register-Byte）"><a href="#LDRB（Load-Register-Byte）" class="headerlink" title="LDRB（Load Register Byte）"></a>LDRB（Load Register Byte）</h3><p>从内存中加载一个字节（8位）到寄存器，并将该字节零扩展（Zero-Extend）为32位。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDRB&#123;cond&#125;&#123;B&#125; Rt, [Rn, Operand2]&#123;!&#125;</span><br><span class="line">LDRB&#123;cond&#125;&#123;B&#125; Rt, [Rn], Operand2</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDR R1, =buffer     @ R1指向缓冲区首地址</span><br><span class="line">LDRB R0, [R1]       @ 从缓冲区加载第一个字节到R0（零扩展为32位）</span><br></pre></td></tr></table></figure>

<h3 id="LDP（Load-Pair-of-Registers）"><a href="#LDP（Load-Pair-of-Registers）" class="headerlink" title="LDP（Load Pair of Registers）"></a>LDP（Load Pair of Registers）</h3><p>一条高效的双寄存器加载指令，用于从内存中连续加载两个寄存器的值</p>
<h3 id="LDUR（Load-Unscaled-Register）"><a href="#LDUR（Load-Unscaled-Register）" class="headerlink" title="LDUR（Load Unscaled Register）"></a>LDUR（Load Unscaled Register）</h3><p>是一条用于从内存加载数据到寄存器的指令。它与常见的 <code>LDR</code>（Load Register）指令类似，但在偏移量范围和寻址模式上有特殊设计。</p>
<p>从 基址寄存器 (<code>Xn</code> 或 <code>SP</code>) + 偏移量 (<code>simm</code>) 的内存地址加载数据到目标寄存器。</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SUB</span> <span class="built_in">SP</span>, <span class="built_in">SP</span>, <span class="number">#32</span>       <span class="comment">// 分配栈空间</span></span><br><span class="line"><span class="keyword">STR</span> <span class="built_in">X0</span>, [<span class="built_in">SP</span>, <span class="number">#16</span>]     <span class="comment">// 存储变量到栈</span></span><br><span class="line"><span class="symbol">LDUR</span> <span class="built_in">X1</span>, [<span class="built_in">SP</span>, <span class="number">#16</span>]    <span class="comment">// 从栈加载变量（偏移量为正）</span></span><br><span class="line"><span class="symbol">LDUR</span> <span class="built_in">X2</span>, [<span class="built_in">SP</span>, #-<span class="number">8</span>]    <span class="comment">// 加载 SP 之前的内存数据（偏移量为负）</span></span><br></pre></td></tr></table></figure>

<h3 id="LDRSW（Load-Register-Signed-Word）"><a href="#LDRSW（Load-Register-Signed-Word）" class="headerlink" title="LDRSW（Load Register Signed Word）"></a>LDRSW（Load Register Signed Word）</h3><p>用于从内存中加载 32 位有符号整数，并将其符号扩展至 64 位目标寄存器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDRSW &lt;Xd&gt;, [&lt;Xn|SP&gt;&#123;, #&lt;pimm&gt;&#125;]   ; 立即数偏移模式</span><br><span class="line">LDRSW &lt;Xd&gt;, [&lt;Xn|SP&gt;, &lt;Xm&gt;&#123;, &lt;extend&gt; &#123;#&lt;amount&gt;&#125;&#125;]  ; 寄存器偏移模式</span><br></pre></td></tr></table></figure>



<h3 id="STR（Store-Register）"><a href="#STR（Store-Register）" class="headerlink" title="STR（Store Register）"></a>STR（Store Register）</h3><p>将寄存器中的数据存储到内存地址中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STR R0, [R1]      ; 将寄存器R0的值存储到R1指向的内存地址</span><br><span class="line">STR R2, [R3, #8]  ; 将R2的值存储到R3 + 8的内存地址</span><br></pre></td></tr></table></figure>

<h3 id="STRB（Store-Register-Byte）"><a href="#STRB（Store-Register-Byte）" class="headerlink" title="STRB（Store Register Byte）"></a>STRB（Store Register Byte）</h3><p>将寄存器中的低8位数据（一个字节）存储到内存中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STRB&#123;cond&#125;&#123;B&#125; Rt, [Rn, Operand2]&#123;!&#125;</span><br><span class="line">STRB&#123;cond&#125;&#123;B&#125; Rt, [Rn], Operand2</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV R0, #&#x27;A&#x27;        @ R0 = ASCII字符&#x27;A&#x27;（0x41）</span><br><span class="line">LDR R1, =buffer     @ R1指向缓冲区首地址</span><br><span class="line">STRB R0, [R1]       @ 将&#x27;A&#x27;存储到缓冲区</span><br></pre></td></tr></table></figure>

<h3 id="STP（Store-Pair）"><a href="#STP（Store-Pair）" class="headerlink" title="STP（Store Pair）"></a>STP（Store Pair）</h3><p>将 两个寄存器 的值存储到 连续的内存地址 中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STP &lt;寄存器1&gt;, &lt;寄存器2&gt;, [&lt;基址寄存器&gt;&#123;, #偏移量&#125;]</span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STP X0, X1, [X2]        ; 将X0存入X2，X1存入X2+8</span><br><span class="line">STP W3, W4, [SP, #-8]!  ; 前变址：SP减8，存入W3和W4（32位，占8字节）</span><br><span class="line">STP X5, X6, [X7, #16]   ; 将X5存入X7+16，X6存入X7+24</span><br></pre></td></tr></table></figure>



<h3 id="EXTR（Extract-Register）"><a href="#EXTR（Extract-Register）" class="headerlink" title="EXTR（Extract Register）"></a>EXTR（Extract Register）</h3><p>是一条用于 提取寄存器位域 的指令。它可以从两个寄存器的组合位域中提取指定范围的位，并将结果存入目标寄存器。</p>
<h1 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h1><h2 id="分支指令"><a href="#分支指令" class="headerlink" title="分支指令"></a>分支指令</h2><h3 id="B（Branch）"><a href="#B（Branch）" class="headerlink" title="B（Branch）"></a>B（Branch）</h3><p>B指令用于无条件跳转到一个由立即数偏移指定的目标地址。</p>
<p>执行该指令时，程序计数器（PC）被更新为目标地址，从而实现流程的跳转。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;无条件跳转到标签label</span><br><span class="line">B label  ; 无条件跳转到标签label指定的 label</span><br></pre></td></tr></table></figure>

<h3 id="BX（Branch-and-Exchange）"><a href="#BX（Branch-and-Exchange）" class="headerlink" title="BX（Branch and Exchange）"></a>BX（Branch and Exchange）</h3><p>BX 指令用于从一个寄存器中取得目标地址并跳转，并且可以用于 ARM 和 Thumb 模式之间的切换。</p>
<p>它会检查目标地址的最低位：</p>
<ul>
<li>如果最低位为 <strong>1</strong>，则表示需要进入 Thumb 模式；</li>
<li>如果最低位为 <strong>0</strong>，则保持在 ARM 模式。</li>
</ul>
<p>常用于子程序返回（例如：<code>BX LR</code>）；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BX LR  ; 使用链接寄存器 LR 跳转，通常用于返回。</span><br></pre></td></tr></table></figure>

<h3 id="BL（Branch-with-Link）"><a href="#BL（Branch-with-Link）" class="headerlink" title="BL（Branch with Link）"></a>BL（Branch with Link）</h3><p>用于调用子程序。</p>
<p>BL 指令除了进行跳转外，还会将返回地址（即 BL 指令下一条指令的地址）保存到链接寄存器 LR中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BL function  ; 调用 function 子程序，并将返回地址保存到 LR</span><br></pre></td></tr></table></figure>

<h3 id="BR"><a href="#BR" class="headerlink" title="BR"></a>BR</h3><p>BR 指令出现在 ARMv8 的 AArch64 指令集中，用于实现从寄存器中取得目标地址进行无条件跳转。</p>
<p>与 BX 指令类似，BR 指令也是基于寄存器的跳转，但不涉及状态交换（因为 AArch64 不存在 ARM&#x2F;Thumb 模式之分）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 示例1：通过寄存器 X1 中的地址跳转</span><br><span class="line">MOV X1, #0x4000      // 将目标地址 0x4000 存入 X1</span><br><span class="line">BR X1                // 跳转到 X1 中的地址</span><br><span class="line"></span><br><span class="line">// 示例2：从子程序返回（在 AArch64 中常用 RET 指令，但也可使用 BR）</span><br><span class="line">// 假设链接寄存器在 X30 中</span><br><span class="line">BR X30               // 跳转到 X30 保存的返回地址</span><br></pre></td></tr></table></figure>

<h3 id="CBZ（Compare-and-Branch-on-Zero）"><a href="#CBZ（Compare-and-Branch-on-Zero）" class="headerlink" title="CBZ（Compare and Branch on Zero）"></a>CBZ（Compare and Branch on Zero）</h3><p>根据寄存器的值是否为<strong>零</strong>来决定是否跳转到目标地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CBZ  Rn, label</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>当 <code>Rn == 0</code> 时</strong>：程序跳转到 <code>label</code> 处执行。</li>
<li><strong>当 <code>Rn ≠ 0</code> 时</strong>：继续顺序执行下一条指令。</li>
</ul>
<h3 id="CBNZ（Compare-and-Branch-on-Non-Zero）"><a href="#CBNZ（Compare-and-Branch-on-Non-Zero）" class="headerlink" title="CBNZ（Compare and Branch on Non-Zero）"></a>CBNZ（Compare and Branch on Non-Zero）</h3><p>检测寄存器是否非零并决定是否跳转。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CBNZ  Rn, label</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>当 <code>Rn ≠ 0</code> 时</strong>：跳转到 <code>label</code> 执行。</li>
<li><strong>当 <code>Rn = 0</code> 时</strong>：顺序执行下一条指令。</li>
</ul>
<h3 id="B-NE"><a href="#B-NE" class="headerlink" title="B.NE"></a>B.NE</h3><p>条件分支指令，当处理器状态寄存器（PSTATE）中的 Z（Zero）标志为0 时跳转到指定地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">B.NE label</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>当 Z &#x3D; 0 时</strong>：跳转到 <code>label</code> 执行。</li>
<li><strong>当 Z &#x3D; 1 时</strong>：顺序执行下一条指令。</li>
</ul>
<h1 id="指令大全"><a href="#指令大全" class="headerlink" title="指令大全"></a>指令大全</h1><h2 id="MVN（Move-Not）"><a href="#MVN（Move-Not）" class="headerlink" title="MVN（Move Not）"></a>MVN（Move Not）</h2><p>是一条逻辑运算指令，用于对源操作数进行 按位取反 操作，并将结果存入目标寄存器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MVN X0, X1  ; X0 = ~X1</span><br></pre></td></tr></table></figure>

<h2 id="ROR（Rotate-Right）"><a href="#ROR（Rotate-Right）" class="headerlink" title="ROR（Rotate Right）"></a>ROR（Rotate Right）</h2><p>循环右移</p>
<p>将一个二进制数的位向右移动指定的位数，并将被“移出”的位重新填充到左侧。</p>
<p><strong>固定位宽循环右移</strong></p>
<p>操作数<code>num</code>为 <code>n</code> 位的整数，循环右移 <code>k</code> 位：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ror</span>(<span class="params">num: <span class="built_in">int</span>, k: <span class="built_in">int</span>, bits: <span class="built_in">int</span> = <span class="number">32</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    k = k % bits  <span class="comment"># 处理 k ≥ bits 的情况</span></span><br><span class="line">    mask = (<span class="number">1</span> &lt;&lt; bits) - <span class="number">1</span>  <span class="comment"># 生成指定位数的掩码（如 32 位掩码 0xFFFFFFFF）</span></span><br><span class="line">    num &amp;= mask  <span class="comment"># 确保数值在指定位宽范围内</span></span><br><span class="line">    right = num &gt;&gt; k  <span class="comment"># 右移 k 位</span></span><br><span class="line">    left = num &lt;&lt; (bits - k)  <span class="comment"># 左移补位</span></span><br><span class="line">    <span class="keyword">return</span> (left | right) &amp; mask</span><br></pre></td></tr></table></figure>

<h2 id="EON（Exclusive-OR-Not）"><a href="#EON（Exclusive-OR-Not）" class="headerlink" title="EON（Exclusive OR Not）"></a>EON（Exclusive OR Not）</h2><p>是一条按位逻辑运算指令，用于执行 异或非（XOR-NOT）操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Xn ^ (~Xm)</span><br></pre></td></tr></table></figure>

<h2 id="UXTW（Unsigned-Extend-Word-to-Doubleword）"><a href="#UXTW（Unsigned-Extend-Word-to-Doubleword）" class="headerlink" title="UXTW（Unsigned Extend Word to Doubleword）"></a>UXTW（Unsigned Extend Word to Doubleword）</h2><p><code>UXTW</code> 是一个用于 无符号扩展（Unsigned Extend） 的操作符</p>
<p>它的作用是将一个 32 位寄存器（W寄存器） 的值无符号扩展到 64 位（X寄存器），并可用于地址计算或算术运算。</p>
<p><strong>核心功能</strong></p>
<ul>
<li><strong>无符号扩展</strong>：将 32 位 <code>W</code> 寄存器的值 <strong>无符号扩展</strong> 为 64 位，高位补零。</li>
<li><strong>移位操作</strong>：可对扩展后的值进行左移（如 <code>UXTW #2</code> 表示左移 2 位）。</li>
<li><strong>典型用途</strong>：在地址计算或算术运算中，将 32 位索引或偏移量扩展为 64 位。</li>
</ul>
<h2 id="SXTW（Sign-Extend-Word）"><a href="#SXTW（Sign-Extend-Word）" class="headerlink" title="SXTW（Sign Extend Word）"></a>SXTW（Sign Extend Word）</h2><p>是一种 扩展修饰符，用于将 32 位寄存器（<code>W</code> 寄存器）的值 有符号扩展** 为 64 位，通常与其他指令（如 <code>ADD</code>、<code>LDR</code> 等）结合使用。</p>
<p> <strong>核心功能</strong></p>
<ul>
<li><strong>有符号扩展</strong>：将 32 位 <code>W</code> 寄存器的值 <strong>有符号扩展</strong> 为 64 位，高位补符号位（<code>0</code> 或 <code>1</code>）。</li>
<li><strong>移位操作</strong>：可对扩展后的值进行左移（如 <code>SXTW #2</code> 表示左移 2 位）。</li>
<li><strong>典型用途</strong>：在地址计算或算术运算中，将 32 位有符号索引或偏移量扩展为 64 位。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SXTW X0, W0       ; X0 = 符号扩展(W0)</span><br></pre></td></tr></table></figure>



<h2 id="BFXIL（Bit-Field-Extract-and-Insert-Low）"><a href="#BFXIL（Bit-Field-Extract-and-Insert-Low）" class="headerlink" title="BFXIL（Bit Field Extract and Insert Low）"></a>BFXIL（Bit Field Extract and Insert Low）</h2><p>是一条 位域操作指令，用于从源寄存器中提取一个位域，并将其插入到目标寄存器的 低有效位部分。</p>
<ol>
<li>从源寄存器 <code>&lt;Xn&gt;</code> 的 <code>[lsb, lsb + width - 1]</code> 位提取一个位域。</li>
<li>将该位域插入到目标寄存器 <code>&lt;Xd&gt;</code> 的 <code>[0, width - 1]</code> 位（低有效位部分）。</li>
<li>目标寄存器的高位（<code>[width, 63]</code> 或 <code>[width, 31]</code>）保持不变。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Xd[width-1:0] = Xn[lsb+width-1:lsb]  // 低 width 位被替换</span><br><span class="line">Xd[63:width] 保持不变                 // 高位不变</span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;bfxil w30, w24, #3, #5&quot; w30=0xffff9480 w24=0xfffffca4 =&gt; w30=0xffff9494</span><br><span class="line"></span><br><span class="line">W30 = 0xFFFF9480	bin:11111111 11111111 10010100 10000000</span><br><span class="line">W24 = 0xFFFFFCA4	bin:11111111 11111111 11111100 10100100</span><br><span class="line"></span><br><span class="line">起始位 lsb = 3, 宽度 width = 5</span><br><span class="line">提取 W24 的 [3:7] 位 </span><br><span class="line">从右向左数，最低位为 0 : 10100</span><br><span class="line"></span><br><span class="line">插入目标位域：[4:0]</span><br><span class="line">低 8 位更新为：10010100（0x94）</span><br><span class="line">w30 = 0xffff9494</span><br></pre></td></tr></table></figure>



<p><strong>Python实现</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bfxil_visual</span>(<span class="params">dest, src, lsb, width, is_64bit=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    更具可视化的BFXIL实现，展示中间步骤</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    dest - 目标值</span></span><br><span class="line"><span class="string">    src - 源值</span></span><br><span class="line"><span class="string">    lsb - 源中的起始位位置</span></span><br><span class="line"><span class="string">    width - 提取的位宽</span></span><br><span class="line"><span class="string">    is_64bit - 是否为64位操作，默认为False(32位)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    更新后的dest值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 确定操作位宽</span></span><br><span class="line">    max_bits = <span class="number">64</span> <span class="keyword">if</span> is_64bit <span class="keyword">else</span> <span class="number">32</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 显示输入值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;源值(src)      = <span class="subst">&#123;<span class="built_in">bin</span>(src)[<span class="number">2</span>:].zfill(max_bits)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;目标值(dest)    = <span class="subst">&#123;<span class="built_in">bin</span>(dest)[<span class="number">2</span>:].zfill(max_bits)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;lsb           = <span class="subst">&#123;lsb&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;width         = <span class="subst">&#123;width&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 步骤1: 创建源掩码并提取位</span></span><br><span class="line">    src_mask = ((<span class="number">1</span> &lt;&lt; width) - <span class="number">1</span>) &lt;&lt; lsb</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;源掩码         = <span class="subst">&#123;<span class="built_in">bin</span>(src_mask)[<span class="number">2</span>:].zfill(max_bits)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    extracted_with_position = src &amp; src_mask</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;提取的位(带位置) = <span class="subst">&#123;<span class="built_in">bin</span>(extracted_with_position)[<span class="number">2</span>:].zfill(max_bits)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    extracted = (extracted_with_position &gt;&gt; lsb)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;提取的位(移位后) = <span class="subst">&#123;<span class="built_in">bin</span>(extracted)[<span class="number">2</span>:].zfill(max_bits)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 步骤2: 创建目标掩码并清除低位</span></span><br><span class="line">    dest_mask = ~((<span class="number">1</span> &lt;&lt; width) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_64bit:</span><br><span class="line">        dest_mask &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;目标掩码       = <span class="subst">&#123;<span class="built_in">bin</span>(dest_mask)[<span class="number">2</span>:].zfill(max_bits)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    dest_cleared = dest &amp; dest_mask</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;目标(清除低位)  = <span class="subst">&#123;<span class="built_in">bin</span>(dest_cleared)[<span class="number">2</span>:].zfill(max_bits)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 步骤3: 合并结果</span></span><br><span class="line">    result = dest_cleared | extracted</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;最终结果       = <span class="subst">&#123;<span class="built_in">bin</span>(result)[<span class="number">2</span>:].zfill(max_bits)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_64bit:</span><br><span class="line">        result &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bfxil</span>(<span class="params">dest, src, lsb, width, is_64bit=<span class="literal">False</span></span>):</span><br><span class="line">    max_bits = <span class="number">64</span> <span class="keyword">if</span> is_64bit <span class="keyword">else</span> <span class="number">32</span></span><br><span class="line">    src_mask = ((<span class="number">1</span> &lt;&lt; width) - <span class="number">1</span>) &lt;&lt; lsb</span><br><span class="line">    extracted_with_position = src &amp; src_mask</span><br><span class="line">    extracted = (extracted_with_position &gt;&gt; lsb)</span><br><span class="line">    dest_mask = ~((<span class="number">1</span> &lt;&lt; width) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_64bit:</span><br><span class="line">        dest_mask &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">    dest_cleared = dest &amp; dest_mask</span><br><span class="line">    result = dest_cleared | extracted</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_64bit:</span><br><span class="line">        result &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(bfxil(<span class="number">0xffff9480</span>,<span class="number">0xfffffca4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="literal">False</span>)))</span><br></pre></td></tr></table></figure>

<h2 id="BFI（Bit-Field-Insert）"><a href="#BFI（Bit-Field-Insert）" class="headerlink" title="BFI（Bit Field Insert）"></a>BFI（Bit Field Insert）</h2><p>是 ARM AArch64 架构中的 位域插入指令，用于将源寄存器的指定位域插入到目标寄存器的任意位置，同时保持目标寄存器其他位不变。</p>
<ol>
<li><strong>从源寄存器提取 <code>width</code> 位</strong>（最低有效位开始）。</li>
<li><strong>插入到目标寄存器的 <code>[lsb, lsb + width - 1]</code> 位</strong>。</li>
<li><strong>目标寄存器其他位保持不变</strong>。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Xd[lsb + width - 1 : lsb] = Xn[width - 1 : 0]</span><br><span class="line">Xd[其他位] 保持不变</span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x120a0684: &quot;bfi w30, w24, #6, #8&quot; w30=0x2 w24=0xa =&gt; w30=0x282</span><br><span class="line"></span><br><span class="line">从 W24 提取 8 位（#8）</span><br><span class="line">提取最低 8 位（[7:0]）：00001010（0xA）</span><br><span class="line"></span><br><span class="line">插入到 W30 的 [6:13] 位（#6 + #8）</span><br><span class="line">目标寄存器 W30 = 0x2（00000010）</span><br><span class="line">插入后：1010000010 （0x282）</span><br></pre></td></tr></table></figure>



<p><strong>Python实现</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bfi_visual</span>(<span class="params">dest, src, lsb, width, is_64bit=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    更具可视化的BFI实现，展示中间步骤</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    dest - 目标值</span></span><br><span class="line"><span class="string">    src - 源值</span></span><br><span class="line"><span class="string">    lsb - 目标中的起始位位置</span></span><br><span class="line"><span class="string">    width - 插入的位宽</span></span><br><span class="line"><span class="string">    is_64bit - 是否为64位操作，默认为False(32位)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    更新后的dest值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 确定操作位宽</span></span><br><span class="line">    max_bits = <span class="number">64</span> <span class="keyword">if</span> is_64bit <span class="keyword">else</span> <span class="number">32</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 显示输入值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;源值(src)       = <span class="subst">&#123;<span class="built_in">bin</span>(src)[<span class="number">2</span>:].zfill(max_bits)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;目标值(dest)    = <span class="subst">&#123;<span class="built_in">bin</span>(dest)[<span class="number">2</span>:].zfill(max_bits)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;lsb            = <span class="subst">&#123;lsb&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;width          = <span class="subst">&#123;width&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 步骤1: 创建源掩码并提取位</span></span><br><span class="line">    src_mask = (<span class="number">1</span> &lt;&lt; width) - <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;源掩码          = <span class="subst">&#123;<span class="built_in">bin</span>(src_mask)[<span class="number">2</span>:].zfill(max_bits)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    src_bits = src &amp; src_mask</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;提取的源位      = <span class="subst">&#123;<span class="built_in">bin</span>(src_bits)[<span class="number">2</span>:].zfill(max_bits)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 步骤2: 创建目标掩码</span></span><br><span class="line">    insert_mask = src_mask &lt;&lt; lsb</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;插入位置掩码    = <span class="subst">&#123;<span class="built_in">bin</span>(insert_mask)[<span class="number">2</span>:].zfill(max_bits)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    dest_mask = ~insert_mask</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_64bit:</span><br><span class="line">        dest_mask &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;目标掩码        = <span class="subst">&#123;<span class="built_in">bin</span>(dest_mask)[<span class="number">2</span>:].zfill(max_bits)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 步骤3: 清除目标中对应位置</span></span><br><span class="line">    dest_cleared = dest &amp; dest_mask</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;目标(已清除位)  = <span class="subst">&#123;<span class="built_in">bin</span>(dest_cleared)[<span class="number">2</span>:].zfill(max_bits)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 步骤4: 将源位移到正确位置</span></span><br><span class="line">    src_positioned = src_bits &lt;&lt; lsb</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;源位(定位后)    = <span class="subst">&#123;<span class="built_in">bin</span>(src_positioned)[<span class="number">2</span>:].zfill(max_bits)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 步骤5: 合并结果</span></span><br><span class="line">    result = dest_cleared | src_positioned</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;最终结果        = <span class="subst">&#123;<span class="built_in">bin</span>(result)[<span class="number">2</span>:].zfill(max_bits)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_64bit:</span><br><span class="line">        result &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bfi</span>(<span class="params">dest, src, lsb, width, is_64bit=<span class="literal">False</span></span>):</span><br><span class="line">    max_bits = <span class="number">64</span> <span class="keyword">if</span> is_64bit <span class="keyword">else</span> <span class="number">32</span></span><br><span class="line">    src_mask = (<span class="number">1</span> &lt;&lt; width) - <span class="number">1</span></span><br><span class="line">    src_bits = src &amp; src_mask</span><br><span class="line">    insert_mask = src_mask &lt;&lt; lsb</span><br><span class="line">    dest_mask = ~insert_mask</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_64bit:</span><br><span class="line">        dest_mask &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">    dest_cleared = dest &amp; dest_mask</span><br><span class="line">    src_positioned = src_bits &lt;&lt; lsb</span><br><span class="line">    result = dest_cleared | src_positioned</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_64bit:</span><br><span class="line">        result &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(bfi(<span class="number">0x2</span>,<span class="number">0xa</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="literal">True</span>)))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>ARM汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>AndroidDemo Hook案例</title>
    <url>/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.example.androiddemo</p>
<h1 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h1><p>一个登录界面</p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/1.jpg"></p>
<p>把apk丢进jadx进行分析</p>
<p>查看<code>AndroidManifest.xml</code>文件</p>
<p>程序启动的第一个<code>Activity</code>是<code>com.example.androiddemo.Activity.LoginActivity</code></p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/2.jpg"></p>
<h2 id="LoginActivity"><a href="#LoginActivity" class="headerlink" title="LoginActivity"></a>LoginActivity</h2><p>如下，调用了一个<code>a</code>方法来对用户名和密码进行校验</p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/3.jpg"></p>
<h3 id="a"><a href="#a" class="headerlink" title="a"></a>a</h3><p>如下，对<code>Username</code>进行了一次<code>HmacSHA256</code>签名</p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/4.jpg"></p>
<p>当<code>Username</code>的<code>HmacSHA256</code>签名与<code>Password</code>相同时，可以登录成功。</p>
<h3 id="hook-a"><a href="#hook-a" class="headerlink" title="hook a"></a>hook a</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">LoginActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.androiddemo.Activity.LoginActivity&quot;</span>)</span><br><span class="line">        <span class="title class_">LoginActivity</span>.<span class="property">a</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">str1,str2</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str1:&quot;</span>,str1);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str2:&quot;</span>,str2);</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">a</span>(str1,str2);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>,result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_a</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bileton</span><br><span class="line">77cd249b2fa536da37dcd3fc6993fe94aefb61a70328aa4cd12984a053f6a7c3</span><br></pre></td></tr></table></figure>

<p>输入用户名和密码</p>
<p>登录成功</p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/5.jpg"></p>
<h2 id="进入下一关"><a href="#进入下一关" class="headerlink" title="进入下一关"></a>进入下一关</h2><p>点击进入下一关，会出现<code>Check Failed</code></p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/6.jpg"></p>
<h2 id="FridaActivity1"><a href="#FridaActivity1" class="headerlink" title="FridaActivity1"></a>FridaActivity1</h2><p>查看源码，得知点击登录之后，会进入<code>FridaActivity1</code></p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/7.jpg"></p>
<p>如下是<code>FridaActivity1</code>的内容</p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/9.jpg"></p>
<p>绕过方式很简单，可以直接修改<code>a</code>方法的返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">FridaActivity1</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.androiddemo.Activity.FridaActivity1&quot;</span>);</span><br><span class="line">        <span class="title class_">FridaActivity1</span>.<span class="property">a</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">a</span>(data);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>,result)</span><br><span class="line">            result =  <span class="string">&quot;R4jSLLLLLLLLLLOrLE7/5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL=&quot;</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced result:&quot;</span>,result)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_a</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">result: R4jSLLLLLLLLLRknplkBpZDpis69kh7i+YAPTmMn2ABsOLLLLL==</span><br><span class="line">replaced result: R4jSLLLLLLLLLLOrLE7/5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL=</span><br></pre></td></tr></table></figure>

<p>还有另一种绕过方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">FridaActivity1</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.androiddemo.Activity.FridaActivity1&quot;</span>);</span><br><span class="line">        <span class="title class_">FridaActivity1</span>.<span class="property">a</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">original_data</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;original_data:&quot;</span>,original_data);</span><br><span class="line">            <span class="keyword">var</span> my_data = <span class="title class_">FridaActivity1</span>.<span class="title function_">b</span>(<span class="string">&quot;bileton&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data:&quot;</span>,my_data);</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">a</span>(my_data);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>,result);</span><br><span class="line">            result =  <span class="string">&quot;R4jSLLLLLLLLLLOrLE7/5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL=&quot;</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced result:&quot;</span>,result)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_a</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">original_data: 31,-117,8,0,0,0,0,0,0,0,123,-79,126,-5,-117,125,-109,-97,-74,46,125,-70,-66,-19,-7,-126,70,43,0,-15,-40,-110,-30,16,0,0,0</span><br><span class="line">data: 31,-117,8,0,0,0,0,0,0,0,75,-54,-52,73,45,-55,-49,3,0,-26,-70,19,-27,7,0,0,0</span><br><span class="line">result: R4jSLLLLLLLLLOlTzOuiyc8MLDa5O+URLLLL</span><br><span class="line">replaced result: R4jSLLLLLLLLLLOrLE7/5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL=</span><br></pre></td></tr></table></figure>

<p>进入到了第二关</p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/8.jpg"></p>
<h1 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h1><p>第一关结束跳转到了<code>FridaActivity2</code></p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/10.jpg"></p>
<p>需要把<code>static_bool_var</code>和<code>bool_var</code>的值都修改为<code>true</code>才能进入<code>FridaActivity3</code></p>
<p>这里可以主动调用<code>setStatic_bool_var</code>方法和<code>setBool_var</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_activity2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">FridaActivity2</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.androiddemo.Activity.FridaActivity2&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;static_bool_var:&quot;</span>,<span class="title class_">FridaActivity2</span>.<span class="property">static_bool_var</span>.<span class="property">value</span>);</span><br><span class="line">        <span class="title class_">FridaActivity2</span>.<span class="title function_">setStatic_bool_var</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced_static_bool_var:&quot;</span>,<span class="title class_">FridaActivity2</span>.<span class="property">static_bool_var</span>.<span class="property">value</span>);</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.example.androiddemo.Activity.FridaActivity2&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj.bool_var:&quot;</span>,obj.<span class="property">bool_var</span>.<span class="property">value</span>);</span><br><span class="line">                obj.<span class="title function_">setBool_var</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced_obj.bool_var:&quot;</span>,obj.<span class="property">bool_var</span>.<span class="property">value</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static_bool_var: false</span><br><span class="line">replaced_static_bool_var: true</span><br><span class="line">obj.bool_var: false</span><br><span class="line">replaced_obj.bool_var: true</span><br></pre></td></tr></table></figure>

<p>点击进入第三关</p>
<h1 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h1><p>第二关结束跳转到了<code>FridaActivity3</code></p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/11.jpg"></p>
<p>需要把<code>static_bool_var</code>、<code>bool_var</code>、<code>same_name_bool_var</code>三个值都设置为<code>true</code>才能进入<code>FridaActivity4</code></p>
<p>这里存在一个坑点是存在一个与字段名<code>same_name_bool_var</code>相同的方法名<code>same_name_bool_var</code>，操作字段名的话需要在其名字前面加上一个<code>_</code>，即<code>_same_name_bool_var</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_activity3</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">FridaActivity3</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.androiddemo.Activity.FridaActivity3&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;static_bool_var:&quot;</span>,<span class="title class_">FridaActivity3</span>.<span class="property">static_bool_var</span>.<span class="property">value</span>);</span><br><span class="line">    <span class="title class_">FridaActivity3</span>.<span class="property">static_bool_var</span>.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced_static_bool_var:&quot;</span>,<span class="title class_">FridaActivity3</span>.<span class="property">static_bool_var</span>.<span class="property">value</span>);</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.example.androiddemo.Activity.FridaActivity3&quot;</span>,&#123;</span><br><span class="line">        <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj.bool_var:&quot;</span>,obj.<span class="property">bool_var</span>.<span class="property">value</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj._same_name_bool_var:&quot;</span>,obj.<span class="property">_same_name_bool_var</span>.<span class="property">value</span>);</span><br><span class="line">            obj.<span class="property">bool_var</span>.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">            obj.<span class="property">_same_name_bool_var</span>.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced_obj.bool_var:&quot;</span>,obj.<span class="property">bool_var</span>.<span class="property">value</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced_obj._same_name_bool_var:&quot;</span>,obj.<span class="property">_same_name_bool_var</span>.<span class="property">value</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static_bool_var: false</span><br><span class="line">replaced_static_bool_var: true</span><br><span class="line">obj.bool_var: false</span><br><span class="line">obj._same_name_bool_var: false</span><br><span class="line">replaced_obj.bool_var: true</span><br><span class="line">replaced_obj._same_name_bool_var: true</span><br></pre></td></tr></table></figure>

<p>点击进入第四关</p>
<h1 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h1><p>第三关结束跳转到了<code>FridaActivity4</code></p>
<p>如下是第四关的源代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FridaActivity4</span> <span class="keyword">extends</span> <span class="title class_">BaseFridaActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// com.example.androiddemo.Activity.BaseFridaActivity</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNextCheckTitle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;当前第4关&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClasses</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check1</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check2</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check3</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check4</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check5</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check6</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">InnerClasses</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// com.example.androiddemo.Activity.BaseFridaActivity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCheck</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (InnerClasses.check1() &amp;&amp; InnerClasses.check2() &amp;&amp; InnerClasses.check3() &amp;&amp; InnerClasses.check4() &amp;&amp; InnerClasses.check5() &amp;&amp; InnerClasses.check6()) &#123;</span><br><span class="line">            CheckSuccess();</span><br><span class="line">            startActivity(<span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, (Class&lt;?&gt;) FridaActivity5.class));</span><br><span class="line">            finishActivity(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.CheckFailed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里出现了内部类，需要把内部类中的方法返回值都设置为<code>true</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_activity4</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">InnerClasses</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.androiddemo.Activity.FridaActivity4$InnerClasses&quot;</span>);</span><br><span class="line">    <span class="title class_">InnerClasses</span>.<span class="property">check1</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">InnerClasses</span>.<span class="property">check2</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">InnerClasses</span>.<span class="property">check3</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">InnerClasses</span>.<span class="property">check4</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">InnerClasses</span>.<span class="property">check5</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">InnerClasses</span>.<span class="property">check6</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击进入第五关</p>
<h1 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h1><p>第四关结束跳转到了<code>FridaActivity5</code></p>
<p><strong>查看<code>check</code>逻辑</strong></p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/12.jpg"></p>
<p><strong>尝试hook <code>check</code>方法</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_activity5</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">CheckInterface</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.androiddemo.Dynamic.CheckInterface&quot;</span>);</span><br><span class="line">        <span class="title class_">CheckInterface</span>[<span class="string">&quot;check&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CheckInterface.check is called`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;check&quot;</span>]();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CheckInterface.check result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有输出</p>
<p>查看<code>getDynamicDexCheck</code>方法</p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/13.jpg"></p>
<p><strong>hook getDynamicDexCheck</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_activity5</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">FridaActivity5</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.androiddemo.Activity.FridaActivity5&quot;</span>);</span><br><span class="line">        <span class="title class_">FridaActivity5</span>[<span class="string">&quot;getDynamicDexCheck&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`FridaActivity5.getDynamicDexCheck is called`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;getDynamicDexCheck&quot;</span>]();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`FridaActivity5.getDynamicDexCheck result=<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(result)&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FridaActivity5.getDynamicDexCheck is called</span><br><span class="line">FridaActivity5.getDynamicDexCheck result=&quot;&lt;instance: com.example.androiddemo.Dynamic.CheckInterface, $className: com.example.androiddemo.Dynamic.DynamicCheck&gt;&quot;</span><br></pre></td></tr></table></figure>

<p><strong>查看loaddex()方法</strong></p>
<p>源码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loaddex</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">cacheDir</span> <span class="operator">=</span> getCacheDir();</span><br><span class="line">    <span class="keyword">if</span> (!cacheDir.exists()) &#123;</span><br><span class="line">        cacheDir.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> cacheDir.getAbsolutePath() + File.separator + <span class="string">&quot;DynamicPlugin.dex&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(str);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">            copyFiles(<span class="built_in">this</span>, <span class="string">&quot;DynamicPlugin.dex&quot;</span>, file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.DynamicDexCheck = (CheckInterface) <span class="keyword">new</span> <span class="title class_">DexClassLoader</span>(str, cacheDir.getAbsolutePath(), <span class="literal">null</span>, getClassLoader()).loadClass(<span class="string">&quot;com.example.androiddemo.Dynamic.DynamicCheck&quot;</span>).newInstance();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.DynamicDexCheck == <span class="literal">null</span>) &#123;</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;loaddex Failed!&quot;</span>, <span class="number">1</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">        e2.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> CheckInterface <span class="title function_">getDynamicDexCheck</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.DynamicDexCheck == <span class="literal">null</span>) &#123;</span><br><span class="line">        loaddex();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.DynamicDexCheck;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 <code>DexClassLoader</code>动态加载一个 <code>.dex</code> 文件（<code>DynamicPlugin.dex</code>），然后通过反射创建并实例化其中的一个类 <code>com.example.androiddemo.Dynamic.DynamicCheck</code>，并将其转换为 <code>CheckInterface</code> 接口的实例。</p>
<p><strong>enumerateClassLoader()</strong></p>
<p>枚举类加载器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">enumclassLoader</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoaders</span>(&#123;</span><br><span class="line">                <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">loader</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Found ClassLoader: &quot;</span> + loader);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ClassLoader enumeration complete&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Found</span> <span class="title class_">ClassLoader</span>: dalvik.<span class="property">system</span>.<span class="property">PathClassLoader</span>[<span class="title class_">DexPathList</span>[[directory <span class="string">&quot;.&quot;</span>],nativeLibraryDirectories=[<span class="regexp">/system/</span>lib64, <span class="regexp">/system/</span>lib64]]]</span><br><span class="line"><span class="title class_">Found</span> <span class="title class_">ClassLoader</span>: java.<span class="property">lang</span>.<span class="property">BootClassLoader</span>@1a74373</span><br><span class="line"><span class="title class_">Found</span> <span class="title class_">ClassLoader</span>: dalvik.<span class="property">system</span>.<span class="property">PathClassLoader</span>[<span class="title class_">DexPathList</span>[[zip file <span class="string">&quot;/data/app/com.example.androiddemo-gOT-dni2KR2j2MT4Q9cP5g==/base.apk&quot;</span>],nativeLibraryDirectories=[<span class="regexp">/data/</span>app/com.<span class="property">example</span>.<span class="property">androiddemo</span>-gOT-dni2KR2j2MT4Q9cP5g==<span class="regexp">/lib/</span>arm64, <span class="regexp">/data/</span>app/com.<span class="property">example</span>.<span class="property">androiddemo</span>-gOT-dni2KR2j2MT4Q9cP5g==<span class="regexp">/base.apk!/</span>lib/arm64-v8a, <span class="regexp">/system/</span>lib64]]]</span><br><span class="line"><span class="title class_">Found</span> <span class="title class_">ClassLoader</span>: dalvik.<span class="property">system</span>.<span class="property">DexClassLoader</span>[<span class="title class_">DexPathList</span>[[dex file <span class="string">&quot;/data/user/0/com.example.androiddemo/cache/DynamicPlugin.dex&quot;</span>],nativeLibraryDirectories=[<span class="regexp">/system/</span>lib64]]]</span><br><span class="line"><span class="title class_">ClassLoader</span> enumeration complete</span><br></pre></td></tr></table></figure>

<p><code>dalvik.system.DexClassLoader</code>就是要找的类加载器</p>
<p>修改<code>DexClassLoader</code>对<code>check</code>进行hook</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">enumclassLoader</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoaders</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">loader</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(loader.<span class="title function_">findClass</span>(<span class="string">&quot;com.example.androiddemo.Dynamic.DynamicCheck&quot;</span>))&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;loader:&quot;</span>,loader)</span><br><span class="line">                        <span class="title class_">Java</span>.<span class="property">classFactory</span>.<span class="property">loader</span> = loader;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ClassLoader enumeration complete&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">DynamicCheck</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.androiddemo.Dynamic.DynamicCheck&quot;</span>);</span><br><span class="line">        <span class="title class_">DynamicCheck</span>[<span class="string">&quot;check&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`DynamicCheck.check is called`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;check&quot;</span>]();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`DynamicCheck.check result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            result = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`DynamicCheck.check replaced result=<span class="subst">$&#123;result&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hook结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enumclassLoader()</span><br><span class="line">loader: dalvik.system.DexClassLoader[DexPathList[[dex file &quot;/data/user/0/com.example.androiddemo/cache/DynamicPlugin.dex&quot;],nativeLibraryDirectories=[/system/lib64]]]</span><br><span class="line">ClassLoader enumeration complete</span><br><span class="line">DynamicCheck.check is called</span><br><span class="line">DynamicCheck.check result=false</span><br><span class="line">DynamicCheck.check replaced result=true</span><br></pre></td></tr></table></figure>

<p>点击进入第六关</p>
<h1 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h1><p>第五关结束跳转到了<code>FridaActivity6</code></p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/14.jpg"></p>
<p>这里有三个check函数，他们的逻辑都是一样的，如下</p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/15.jpg"></p>
<p><strong>hook check</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_activity6</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">Frida6Class0</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.androiddemo.Activity.Frida6.Frida6Class0&quot;</span>);</span><br><span class="line">        <span class="title class_">Frida6Class0</span>[<span class="string">&quot;check&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Frida6Class0.check is called`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;check&quot;</span>]();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Frida6Class0.check result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            result = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Frida6Class0.check replaced result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">Frida6Class1</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.androiddemo.Activity.Frida6.Frida6Class1&quot;</span>);</span><br><span class="line">        <span class="title class_">Frida6Class1</span>[<span class="string">&quot;check&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Frida6Class1.check is called`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;check&quot;</span>]();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Frida6Class1.check result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            result = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Frida6Class1.check replaced result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">Frida6Class2</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.androiddemo.Activity.Frida6.Frida6Class2&quot;</span>);</span><br><span class="line">        <span class="title class_">Frida6Class2</span>[<span class="string">&quot;check&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Frida6Class2.check is called`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;check&quot;</span>]();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Frida6Class2.check result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            result = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Frida6Class2.check replaced result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Frida6Class0.check is called</span><br><span class="line">Frida6Class0.check result=false</span><br><span class="line">Frida6Class0.check replaced result=true</span><br><span class="line">Frida6Class1.check is called</span><br><span class="line">Frida6Class1.check result=false</span><br><span class="line">Frida6Class1.check replaced result=true</span><br><span class="line">Frida6Class2.check is called</span><br><span class="line">Frida6Class2.check result=false</span><br><span class="line">Frida6Class2.check replaced result=true</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>AndroidDemo</tag>
      </tags>
  </entry>
  <entry>
    <title>Android系统启动流程分析</title>
    <url>/2024/12/19/Android%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>本篇以从按下开机键开始至设备桌面图标出现进行分析。</p>
<h1 id="Boot-ROM"><a href="#Boot-ROM" class="headerlink" title="Boot ROM"></a>Boot ROM</h1><p>设备通电后，硬件自检，确保各个硬件组件（CPU、内存、存储设备等）处于正常工作状态。</p>
<p>这个阶段过程通常是由硬件自身的引导程序完成的。</p>
<p>这个引导程序通常是写死在芯片里（ROM），不依赖操作系统。</p>
<h1 id="Bootloader"><a href="#Bootloader" class="headerlink" title="Bootloader"></a>Bootloader</h1><p>&emsp;​&emsp;长按开机键，设备通电，从Boot ROM开始，Boot ROM是芯片上的一段只读存储器，存储设备的启动代码，一般是固定的，用于检测基本硬件的存在，验证 Bootloader 的完整性和安全性，并加载BootLoader到RAM，将控制权移交给BootLoader。</p>
<p>&emsp;​&emsp;​BootLoader对硬件进行基本初始化，从存储设备中读取Android系统Linux内核镜像，通常是boot.img文件，将内核加载到内存中，并将控制权移交给内核。</p>
<h1 id="Linux内核启动"><a href="#Linux内核启动" class="headerlink" title="Linux内核启动"></a>Linux内核启动</h1><p>&emsp;​&emsp;内核启动后会完成复杂的硬件初始化并挂载根文件系统，然后执行第一个用户空间进程<code>init</code>，将控制权移交给<code>init</code>。</p>
<h1 id="init进程"><a href="#init进程" class="headerlink" title="init进程"></a>init进程</h1><p>&emsp;​&emsp;<code>init</code>是Android的第一个用户空间进程，它的PID为1。<code>init</code>解析<code>init.rc</code>脚本文件，定义系统初始化的行为等。</p>
<p>&emsp;​&emsp;启动Zygote进程，<code>Zygote</code>在<code>init.rc</code>文件中定义并通过<code>init</code>启动。</p>
<p>&emsp;​&emsp;<code>init</code>调用<code>/system/bin/app_process</code>可执行文件启动 ART（Android Runtime）或 Dalvik 虚拟机，并执行 <code>ZygoteInit.main()</code>来启动<code>Zygote</code>。</p>
<p>&emsp;​&emsp;<code>init</code>把控制权移交给了<code>Zygote</code>。</p>
<h1 id="Zygote进程"><a href="#Zygote进程" class="headerlink" title="Zygote进程"></a>Zygote进程</h1><p>&emsp;​&emsp;Zygote 是 Android 应用运行时环境的核心，加载虚拟机、类、系统资源，启动SystemServer进程。SystemServer进程是Zygote进程孵化的第一个进程。</p>
<p><strong>Zygote的任务</strong></p>
<p>&emsp;​&emsp;等待应用启动请求，接收请求后，fork() 创建子进程，所有的App进程都是由Zygote孵化而来的。</p>
<h1 id="SystemServer"><a href="#SystemServer" class="headerlink" title="SystemServer"></a>SystemServer</h1><p>&emsp;​&emsp;SystemServer是一个很重要的进程，系统里面重要的服务都是在这个进程里面开启的，比如ActivityManagerService、PackageManagerService、WindowManagerService，负责管理应用程序和系统资源。</p>
<h1 id="Launcher"><a href="#Launcher" class="headerlink" title="Launcher"></a>Launcher</h1><p>&emsp;​&emsp;当 <code>SystemServer</code> 启动完成后，Android 系统会启动第一个前台进程：Launcher。</p>
<p>&emsp;​&emsp;<code>ActivityManagerService</code> 会根据 <code>AndroidManifest.xml</code> 中的配置，启动标记为 <code>MAIN</code> 和 <code>LAUNCHER</code> 的应用，Launcher 加载桌面布局和图标资源。</p>
<p>&emsp;​&emsp;Launcher进程是Zygote孵化出来的第一个App进程。</p>
<p>​	</p>
<p>​	</p>
<p>​	</p>
]]></content>
      <categories>
        <category>Android系统</category>
      </categories>
      <tags>
        <tag>Android系统启动流程</tag>
      </tags>
  </entry>
  <entry>
    <title>Android里的Java类</title>
    <url>/2025/01/05/Android%E9%87%8C%E7%9A%84Java%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="DexClassLoader"><a href="#DexClassLoader" class="headerlink" title="DexClassLoader"></a>DexClassLoader</h1><p>Android 提供的用于动态加载 <code>.dex</code> 文件、<code>.apk</code> 文件或 <code>.jar</code> 文件的核心工具。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">DexClassLoader</span><span class="params">(</span></span><br><span class="line"><span class="params">    String dexPath,      // .dex/.apk/.jar 文件的路径</span></span><br><span class="line"><span class="params">    String optimizedDirectory, // 解压和优化后的 .odex 文件存放路径</span></span><br><span class="line"><span class="params">    String librarySearchPath,  // 关联的本地库(.so)</span>文件的路径，可为 <span class="literal">null</span></span><br><span class="line">    ClassLoader parent         <span class="comment">// 父类加载器（委托机制使用）</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// dexPath：必填，一个完整的文件路径</span></span><br><span class="line"><span class="comment">// optimizedDirectory：必填，存放优化后的文件，，一个可写的目录路径。</span></span><br><span class="line"><span class="comment">// librarySearchPath：可选</span></span><br><span class="line"><span class="comment">// parent：必填：父类加载器（ClassLoader），用于实现 Java 的类加载委托机制。</span></span><br></pre></td></tr></table></figure>

<h2 id="findClass"><a href="#findClass" class="headerlink" title="findClass"></a>findClass</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException</span><br></pre></td></tr></table></figure>



<h1 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h1><p><code>android.util.Log</code>是Android中的日志工具类，这个类中提供了5个方法。</p>
<ul>
<li><code>Log.v()</code>：用于打印那些最为繁琐、意义最小的日志信息。对应级别verbose。</li>
<li><code>Log.d()</code>：用于打印一些调试信息，这些信息对调试程序和分析问题应该是有帮助的。对应级别是debug。</li>
<li><code>Log.i()</code>：用于打印一些比较重要的数据，这些数据应该是可以帮助分析用户行为的数据。对应级别info。</li>
<li><code>Log.w()</code>：用于打印一些警告信息，提示程序在这个地方可能会有潜在风险，最好去修复一下出现警告的地方。对应级别warn。</li>
<li><code>Log.e()</code>：用于打印程序中的错误信息当有错误信息打印出来的时候，一般都代表程序出现问题了，要尽快修复。对用级别error。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Log.v(String tag, String msg);</span><br></pre></td></tr></table></figure>

<h1 id="Toast"><a href="#Toast" class="headerlink" title="Toast"></a>Toast</h1><p><code>Toast</code> 是一种非常简单的界面元素，用于在屏幕上显示短暂的消息，通常用于向用户显示提示信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Toast.makeText(Context context, CharSequence text, <span class="type">int</span> duration).show();</span><br><span class="line"></span><br><span class="line"><span class="comment">// context：一个 Context 对象，通常传入当前的 Activity 或 Application。</span></span><br><span class="line"><span class="comment">// text：要显示的文本内容，可以是字符串或者字符串资源。</span></span><br><span class="line"><span class="comment">// duration：显示的时间，可以选择两种常用的持续时间：</span></span><br><span class="line">	<span class="comment">// Toast.LENGTH_SHORT：短暂显示，通常显示 2 秒钟左右。</span></span><br><span class="line">	<span class="comment">// Toast.LENGTH_LONG：长时间显示，通常显示 3.5 秒钟左右。</span></span><br></pre></td></tr></table></figure>

<p>使用示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;Hello, World!&quot;</span>, Toast.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure>

<h1 id="Pair"><a href="#Pair" class="headerlink" title="Pair"></a>Pair</h1><p><code>android.util.Pair</code> 是 Android 提供的一个简单的数据结构类，用于存储两个相关联的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pair</span>&lt;F, S&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> F first;  <span class="comment">// 第一个对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> S second; <span class="comment">// 第二个对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">(F first, S second)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.first = first;</span><br><span class="line">        <span class="built_in">this</span>.second = second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong><code>first</code></strong>: 存储第一个对象。</li>
<li><strong><code>second</code></strong>: 存储第二个对象。</li>
</ul>
<p>这两个字段都是 <code>final</code>，一旦赋值后就无法修改。</p>
<h1 id="SharedPreferences"><a href="#SharedPreferences" class="headerlink" title="SharedPreferences"></a>SharedPreferences</h1><p><code>android.content.SharedPreferences</code>是 Android 中用于存储应用程序的偏好设置和简单数据（如配置选项、用户设置、应用状态等）的一个接口。它提供了一种轻量级的键值对存储方式，适用于存储简单的原始数据类型（如 <code>int</code>、<code>boolean</code>、<code>String</code> 等）。</p>
<h2 id="getString"><a href="#getString" class="headerlink" title="getString()"></a>getString()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">getString</span><span class="params">(String key, String defValue)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// key：想要获取的值的键（String 类型）。这个 key 用于标识存储的 String 数据。</span></span><br><span class="line"><span class="comment">// defValue：当 key 对应的值不存在时，返回的默认值（String 类型）。这是一个可以自定义的备用值。</span></span><br><span class="line"><span class="comment">// return：如果 key 存在于 SharedPreferences 中，返回与该 key 相关联的 String 值；如果不存在，返回提供的 defValue。</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java类</tag>
      </tags>
  </entry>
  <entry>
    <title>Android系统目录</title>
    <url>/2025/01/03/Android%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h1 id="system"><a href="#system" class="headerlink" title="system"></a>system</h1><h2 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h2><h3 id="app-process"><a href="#app-process" class="headerlink" title="app_process"></a>app_process</h3><p><code>app_process</code> 是 Android 系统中用于启动应用的一个二进制程序。</p>
<h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><h3 id="net"><a href="#net" class="headerlink" title="net"></a>net</h3><h4 id="wlan0"><a href="#wlan0" class="headerlink" title="wlan0"></a>wlan0</h4><p><code>/sys/class/net/wlan0/address</code>，Wi-Fi MAC地址</p>
<p><img src="/2025/01/03/Android%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95/2.jpg"></p>
<h2 id="build-prop"><a href="#build-prop" class="headerlink" title="build.prop"></a>build.prop</h2><p>一个关键的配置文件，包含了设备的核心属性和系统级设置。</p>
<h1 id="data"><a href="#data" class="headerlink" title="data"></a>data</h1><h2 id="data-1"><a href="#data-1" class="headerlink" title="data"></a>data</h2><p><code>/data/data/&lt;package_name&gt;/</code>，在这个目录下，通常存储应用的数据。</p>
<h2 id="system-1"><a href="#system-1" class="headerlink" title="system"></a>system</h2><p><code>/data/system/</code>存储着与Android系统相关的配置文件和设置。</p>
<h2 id="app"><a href="#app" class="headerlink" title="app"></a>app</h2><p><code>data/app/</code>存储已安装应用的 APK 文件以及应用的私有数据。</p>
<h2 id="user"><a href="#user" class="headerlink" title="user"></a>user</h2><ul>
<li>在 Android 系统中，<code>/data/user/</code> 目录是一个用于支持多用户环境的目录。它存储了与每个用户账户相关的数据。</li>
</ul>
<p><code>/data/user/</code> 目录包含每个用户的私有数据，并为每个用户分配一个唯一的 ID（从 0 开始）。</p>
<ul>
<li>主用户路径<code>/data/user/0</code></li>
</ul>
<h1 id="proc"><a href="#proc" class="headerlink" title="proc"></a>proc</h1><h2 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h2><h3 id="kernel"><a href="#kernel" class="headerlink" title="kernel"></a>kernel</h3><p><code>/proc/sys/kernel/random/uuid</code>是 Linux 系统中的一个伪文件，用于生成 UUID（Universally Unique Identifier，即全局唯一标识符）。</p>
<p><img src="/2025/01/03/Android%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95/1.jpg"></p>
]]></content>
      <categories>
        <category>Android系统</category>
      </categories>
      <tags>
        <tag>Android系统目录</tag>
      </tags>
  </entry>
  <entry>
    <title>Android系统相关命令</title>
    <url>/2025/01/11/Android%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="getprop"><a href="#getprop" class="headerlink" title="getprop"></a>getprop</h1><p><code>getprop</code> 是 Android 系统中常用的命令，用于获取设备的属性值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getprop [属性名]</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>无参数</strong>: 直接运行 <code>getprop</code>，会列出系统中所有的属性及其值。</p>
</li>
<li><p><strong>指定属性名</strong>: 指定某个属性名时，会返回该属性的值。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getprop ro.debuggable	# 检查当前 Android 设备是否处于可调试模式。（0为不可调试）</span><br><span class="line">getprop ro.serialno		# 获取设备的序列号</span><br><span class="line">getgrop wlan.lge.wifimac	# LG 安卓设备中用于存储 Wi-Fi 网卡 MAC 地址的系统属性。</span><br><span class="line">getprop ro.product.cpu.abi # 查看系统架构</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android系统</category>
      </categories>
      <tags>
        <tag>Android系统相关命令</tag>
      </tags>
  </entry>
  <entry>
    <title>App启动及加载流程分析</title>
    <url>/2025/03/09/App%E5%90%AF%E5%8A%A8%E5%8F%8A%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐</span><br><span class="line">第一阶段：Launcher 处理</span><br><span class="line">Launcher.startActivity()</span><br><span class="line">↓</span><br><span class="line">ActivityTaskManager.startActivity()</span><br><span class="line">↓ (Binder 跨进程)</span><br><span class="line">ActivityManagerService.startActivity()</span><br><span class="line">└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘</span><br><span class="line">↓</span><br><span class="line">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐</span><br><span class="line">第二阶段：进程创建</span><br><span class="line">Process.start()</span><br><span class="line">↓</span><br><span class="line">ZygoteProcess.start()</span><br><span class="line">↓</span><br><span class="line">Zygote.fork()</span><br><span class="line">↓</span><br><span class="line">ActivityThread.main()</span><br><span class="line">└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘</span><br><span class="line">↓</span><br><span class="line">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐</span><br><span class="line">第三阶段：SO 加载</span><br><span class="line">LoadedApk.loadLibrary()</span><br><span class="line">↓</span><br><span class="line">System.loadLibrary()</span><br><span class="line">↓</span><br><span class="line">Runtime.loadLibrary0()</span><br><span class="line">↓</span><br><span class="line">DexPathList.findLibrary()</span><br><span class="line">└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘</span><br><span class="line">↓</span><br><span class="line">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐</span><br><span class="line">第四阶段：DEX 加载</span><br><span class="line">PathClassLoader.loadClass()</span><br><span class="line">↓</span><br><span class="line">BaseDexClassLoader.loadClass()</span><br><span class="line">↓</span><br><span class="line">DexPathList.findClass()</span><br><span class="line">↓</span><br><span class="line">DexFile.loadClassBinaryName()</span><br><span class="line">└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘</span><br><span class="line">↓</span><br><span class="line">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐</span><br><span class="line">第五阶段：Application 创建</span><br><span class="line">LoadedApk.makeApplication()</span><br><span class="line">↓</span><br><span class="line">Instrumentation.newApplication()</span><br><span class="line">↓</span><br><span class="line">Application.attach()</span><br><span class="line">↓</span><br><span class="line">Application.onCreate()</span><br><span class="line">└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘</span><br><span class="line">↓</span><br><span class="line">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐</span><br><span class="line">第六阶段：Activity 启动</span><br><span class="line">ActivityThread.handleLaunchActivity()</span><br><span class="line">↓</span><br><span class="line">ActivityThread.performLaunchActivity()</span><br><span class="line">↓</span><br><span class="line">Instrumentation.newActivity()</span><br><span class="line">↓</span><br><span class="line">Activity.onCreate()</span><br><span class="line">└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘</span><br><span class="line">↓</span><br><span class="line">┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┐</span><br><span class="line">第七阶段：视图绘制</span><br><span class="line">Activity.setContentView()</span><br><span class="line">↓</span><br><span class="line">PhoneWindow.setContentView()</span><br><span class="line">↓</span><br><span class="line">LayoutInflater.inflate()</span><br><span class="line">↓</span><br><span class="line">ViewRootImpl.performTraversals()</span><br><span class="line">↓</span><br><span class="line">measure() → layout() → draw()</span><br><span class="line">└ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┘</span><br></pre></td></tr></table></figure>

<h1 id="so加载深入分析"><a href="#so加载深入分析" class="headerlink" title="so加载深入分析"></a>so加载深入分析</h1><h2 id="Java层"><a href="#Java层" class="headerlink" title="Java层"></a>Java层</h2><p>Android 在 java 层加载 so 的接口是 System.loadLibrary()</p>
<p><img src="/2025/03/09/App%E5%90%AF%E5%8A%A8%E5%8F%8A%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/1.jpg"></p>
<h3 id="System-loadLibrary"><a href="#System-loadLibrary" class="headerlink" title="System.loadLibrary()"></a>System.loadLibrary()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadLibrary</span><span class="params">(String libName)</span> &#123;</span><br><span class="line">	Runtime.getRuntime().loadLibrary(libName, VMStack.getCallingClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它是调用了 Runtime 类的 loadLibrary()</p>
<h3 id="loadLibrary"><a href="#loadLibrary" class="headerlink" title="loadLibrary()"></a>loadLibrary()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadLibrary</span><span class="params">(String nickname)</span> &#123;</span><br><span class="line">	loadLibrary(nickname, VMStack.getCallingClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>loadLibrary(String nickname) 调 用 了 它 的 一 个 重 载 函 数 loadLibrary(String libraryName, ClassLoader loader)</p>
<h3 id="loadLibrary-1"><a href="#loadLibrary-1" class="headerlink" title="loadLibrary()"></a>loadLibrary()</h3><p>其关键代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">loadLibrary</span><span class="params">(String libraryName, ClassLoader loader)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (loader != <span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> loader.findLibrary(libraryName);<span class="comment">//so 路径</span></span><br><span class="line">		...</span><br><span class="line">		<span class="type">String</span> <span class="variable">error</span> <span class="operator">=</span> doLoad(filename, loader);<span class="comment">//加载</span></span><br><span class="line">		...</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获得 so 文件的绝对路径 filename，调用 doLoad()来加载 so 文件。</p>
<h3 id="doLoad"><a href="#doLoad" class="headerlink" title="doLoad()"></a>doLoad()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">doLoad</span><span class="params">(String name, ClassLoader loader)</span> &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">ldLibraryPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (loader != <span class="literal">null</span> &amp;&amp; loader <span class="keyword">instanceof</span> BaseDexClassLoader) &#123;</span><br><span class="line">		ldLibraryPath = ((BaseDexClassLoader) loader).getLdLibraryPath();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> nativeLoad(name, loader, ldLibraryPath);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用 nativeLoad()来加载 name 指向的.so 文件，nativeLoad()是 Runtime类的一个 native 函数，在 native 层对应的函数为 Runtime_nativeLoad()。</p>
<h2 id="Native层"><a href="#Native层" class="headerlink" title="Native层"></a>Native层</h2><h3 id="Runtime-nativeLoad"><a href="#Runtime-nativeLoad" class="headerlink" title="Runtime_nativeLoad()"></a>Runtime_nativeLoad()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> jstring <span class="title">Runtime_nativeLoad</span><span class="params">(JNIEnv* env, jclass, jstring javaFilename, </span></span></span><br><span class="line"><span class="params"><span class="function">                                  jobject javaLoader, jstring javaLdLibraryPath)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将 Java 字符串转换为 C++ 字符串</span></span><br><span class="line">    <span class="function">ScopedUtfChars <span class="title">filename</span><span class="params">(env, javaFilename)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (filename.<span class="built_in">c_str</span>() == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>; <span class="comment">// 转换失败，返回 null</span></span><br><span class="line">    &#125;</span><br><span class="line">    std::string detail; <span class="comment">// 用于存储加载库时的详细信息</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取当前线程的访问权限</span></span><br><span class="line">        <span class="function">ScopedObjectAccess <span class="title">soa</span><span class="params">(env)</span></span>;</span><br><span class="line">        <span class="comment">// 创建一个 HandleScope 用于管理局部引用</span></span><br><span class="line">        <span class="function">StackHandleScope&lt;1&gt; <span class="title">hs</span><span class="params">(soa.Self())</span></span>;</span><br><span class="line">        <span class="comment">// 将 Java 的 ClassLoader 对象解码为 C++ 的 mirror::ClassLoader 对象</span></span><br><span class="line">        <span class="function">Handle&lt;mirror::ClassLoader&gt; <span class="title">classLoader</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            hs.NewHandle(soa.Decode&lt;mirror::ClassLoader*&gt;(javaLoader)))</span></span>;</span><br><span class="line">        <span class="comment">// 获取当前的 JavaVM 实例</span></span><br><span class="line">        JavaVMExt* vm = Runtime::<span class="built_in">Current</span>()-&gt;<span class="built_in">GetJavaVM</span>();</span><br><span class="line">        <span class="comment">// 加载本地库</span></span><br><span class="line">        <span class="type">bool</span> success = vm-&gt;<span class="built_in">LoadNativeLibrary</span>(filename.<span class="built_in">c_str</span>(), classLoader, &amp;detail);</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>; <span class="comment">// 加载成功，返回 null</span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用 JavaVMExt 类的 LoadNativeLibrary()函数来加载.so 文件，filename 是.so 文件的路径，detail 用于存储加载过程中的 log 信息。</p>
<h3 id="LoadNativeLibrary"><a href="#LoadNativeLibrary" class="headerlink" title="LoadNativeLibrary()"></a>LoadNativeLibrary()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">JavaVMExt::LoadNativeLibrary</span><span class="params">(<span class="type">const</span> std::string&amp; path,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  Handle&lt;mirror::ClassLoader&gt; class_loader,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  std::string* detail)</span> </span>&#123;</span><br><span class="line">    detail-&gt;<span class="built_in">clear</span>();</span><br><span class="line">    <span class="comment">// 首先检查是否加载过该.so，加载过就不需要重复加载</span></span><br><span class="line">    SharedLibrary* library;</span><br><span class="line">    Thread* self = Thread::<span class="built_in">Current</span>();</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">MutexLock <span class="title">mu</span><span class="params">(self, libraries_lock)</span></span>;</span><br><span class="line">        library = libraries-&gt;<span class="built_in">Get</span>(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (library != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (library-&gt;<span class="built_in">GetClassLoader</span>() != class_loader.<span class="built_in">Get</span>()) &#123;</span><br><span class="line">            <span class="built_in">StringAppendF</span>(detail, <span class="string">&quot;Shared library \&quot;%s\&quot; already opened by &quot;</span></span><br><span class="line">                          <span class="string">&quot;ClassLoader %p; can&#x27;t open in ClassLoader %p&quot;</span>,</span><br><span class="line">                          path.<span class="built_in">c_str</span>(), library-&gt;<span class="built_in">GetClassLoader</span>(), class_loader.<span class="built_in">Get</span>());</span><br><span class="line">            <span class="built_in">LOG</span>(WARNING) &lt;&lt; detail;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ... </span><br><span class="line">        <span class="keyword">if</span> (!library-&gt;<span class="built_in">CheckOnLoadResult</span>()) &#123;</span><br><span class="line">            <span class="built_in">StringAppendF</span>(detail, <span class="string">&quot;JNI_OnLoad failed on a previous attempt &quot;</span></span><br><span class="line">                          <span class="string">&quot;to load \&quot;%s\&quot;&quot;</span>, path.<span class="built_in">c_str</span>());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 之前没有加载过</span></span><br><span class="line">    self-&gt;<span class="built_in">TransitionFromRunnableToSuspended</span>(kWaitingForJniOnLoad);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* path_str = path.<span class="built_in">empty</span>() ? <span class="literal">nullptr</span> : path.<span class="built_in">c_str</span>();</span><br><span class="line">    <span class="type">void</span>* handle = <span class="built_in">dlopen</span>(path_str, RTLD_LAZY); <span class="comment">// 用 dlopen 加载.so 文件</span></span><br><span class="line">    ...</span><br><span class="line">    self-&gt;<span class="built_in">TransitionFromSuspendedToRunnable</span>();</span><br><span class="line">	...</span><br><span class="line">    <span class="type">bool</span> created_library = <span class="literal">false</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">MutexLock <span class="title">mu</span><span class="params">(self, libraries_lock)</span></span>;</span><br><span class="line">        library = libraries-&gt;<span class="built_in">Get</span>(path);</span><br><span class="line">        <span class="keyword">if</span> (library == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="comment">// 加载完成后，新建 SharedLibrary 对象，并以 path 为键值将其存入 libraries</span></span><br><span class="line">            library = <span class="keyword">new</span> <span class="built_in">SharedLibrary</span>(path, handle, class_loader.<span class="built_in">Get</span>());</span><br><span class="line">            libraries-&gt;<span class="built_in">Put</span>(path, library);</span><br><span class="line">            created_library = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	...</span><br><span class="line">    <span class="type">bool</span> was_successful = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">void</span>* sym = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">UNLIKELY</span>(needs_native_bridge)) &#123;</span><br><span class="line">        library-&gt;<span class="built_in">SetNeedsNativeBridge</span>();</span><br><span class="line">        sym = library-&gt;<span class="built_in">FindSymbolWithNativeBridge</span>(<span class="string">&quot;JNI_OnLoad&quot;</span>, <span class="literal">nullptr</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sym = <span class="built_in">dlsym</span>(handle, <span class="string">&quot;JNI_OnLoad&quot;</span>); <span class="comment">// 找到 JNI_OnLoad 函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sym == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">VLOG</span>(jni) &lt;&lt; <span class="string">&quot;[No JNI_OnLoad found in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;]&quot;</span>;</span><br><span class="line">        was_successful = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="built_in">int</span> (*JNI_OnLoadFn)(JavaVM*, <span class="type">void</span>*);</span><br><span class="line">        JNI_OnLoadFn jni_on_load = <span class="built_in">reinterpret_cast</span>&lt;JNI_OnLoadFn&gt;(sym);</span><br><span class="line">		...</span><br><span class="line">        <span class="type">int</span> version = <span class="number">0</span>;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">ScopedThreadStateChange <span class="title">tsc</span><span class="params">(self, kNative)</span></span>;</span><br><span class="line">            <span class="built_in">VLOG</span>(jni) &lt;&lt; <span class="string">&quot;[Calling JNI_OnLoad in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;]&quot;</span>;</span><br><span class="line">            version = (*jni_on_load)(<span class="keyword">this</span>, <span class="literal">nullptr</span>); <span class="comment">// 调用 JNI_OnLoad 函数</span></span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> was_successful;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上可知，LoadNativeLibrary()函数执行的主要流程为：判断该.so 文件是否已经加载了</p>
<ul>
<li>如果已经加载了，检查class_loader 是否一样；</li>
<li>如果没有加载，调用 dlopen()函数加载该.so 文件；</li>
<li>调用 dlsym()找到 JNI_OnLoad 函数的地址；</li>
<li>调用 JNI_OnLoad 函数。</li>
<li>至此，一个.so 文件就加载完成了。</li>
</ul>
<p>接下来了解一个.so 文件是如何载入内存、如何链接的。</p>
<h3 id="dlopen"><a href="#dlopen" class="headerlink" title="dlopen()"></a>dlopen()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="title">dlopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename, <span class="type">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dlopen_ext</span>(filename, flags, <span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> dlopen()调用了dlopen_ext()。</p>
<h3 id="dlopen-ext"><a href="#dlopen-ext" class="headerlink" title="dlopen_ext()"></a>dlopen_ext()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">dlopen_ext</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename, <span class="type">int</span> flags, <span class="type">const</span> android_dlextinfo* extinfo)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用互斥锁保护全局状态，防止多线程竞争</span></span><br><span class="line">    <span class="function">ScopedPthreadMutexLocker <span class="title">locker</span><span class="params">(&amp;g_dl_mutex)</span></span>;</span><br><span class="line">    <span class="comment">// 调用 do_dlopen 实际加载动态库</span></span><br><span class="line">    soinfo* result = <span class="built_in">do_dlopen</span>(filename, flags, extinfo);</span><br><span class="line">    <span class="comment">// 如果加载失败，格式化错误信息并返回 nullptr</span></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        __bionic_format_dlerror(<span class="string">&quot;dlopen failed&quot;</span>, <span class="built_in">linker_get_error_buffer</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回加载成功的库句柄</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用 do_dlopen() 来加载 filename 指向的.so 文件，返回值为 soinfo 对象的指针，因而 dlopen()函数的返回的指针指向一个 soinfo 对象。</p>
<h3 id="do-dlopen"><a href="#do-dlopen" class="headerlink" title="do_dlopen()"></a>do_dlopen()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">soinfo* <span class="title">do_dlopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">int</span> flags, <span class="type">const</span> android_dlextinfo* extinfo)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 设置数据段为可读写，以便修改全局状态</span></span><br><span class="line">    <span class="built_in">protect_data</span>(PROT_READ | PROT_WRITE);</span><br><span class="line">    <span class="comment">// 查找并加载指定的动态库</span></span><br><span class="line">    soinfo* si = <span class="built_in">find_library</span>(name, flags, extinfo);</span><br><span class="line">    <span class="comment">// 如果加载成功，调用库的构造函数</span></span><br><span class="line">    <span class="keyword">if</span> (si != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        si-&gt;<span class="built_in">CallConstructors</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 恢复数据段的只读保护</span></span><br><span class="line">    <span class="built_in">protect_data</span>(PROT_READ);</span><br><span class="line">    <span class="comment">// 返回加载的库信息</span></span><br><span class="line">    <span class="keyword">return</span> si;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用 find_library()函数得到 soinfo 的对象，然后调用si-&gt;CallConstructors()进行初始化。</p>
<p>先分析find_library()。</p>
<h3 id="find-library"><a href="#find-library" class="headerlink" title="find_library()"></a>find_library()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> soinfo* <span class="title">find_library</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">int</span> dlflags, <span class="type">const</span> android_dlextinfo* extinfo)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    soinfo* si;</span><br><span class="line">    <span class="comment">// 调用 find_libraries 查找并加载指定的库</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">find_libraries</span>(&amp;name, <span class="number">1</span>, &amp;si, <span class="literal">nullptr</span>, <span class="number">0</span>, dlflags, extinfo)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>; <span class="comment">// 如果加载失败，返回 nullptr</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回加载成功的库信息</span></span><br><span class="line">    <span class="keyword">return</span> si;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里面调用了find_libraries()</p>
<h3 id="find-libraries"><a href="#find-libraries" class="headerlink" title="find_libraries()"></a>find_libraries()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">find_libraries</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* <span class="type">const</span> library_names[], <span class="type">size_t</span> library_names_size,</span></span></span><br><span class="line"><span class="params"><span class="function">                           soinfo* soinfos[], soinfo* ld_preloads[], <span class="type">size_t</span> ld_preloads_size,</span></span></span><br><span class="line"><span class="params"><span class="function">                           <span class="type">int</span> dlflags, <span class="type">const</span> android_dlextinfo* extinfo)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//library_names 是.so 文件名的数组，当然这里它只有一个元素</span></span><br><span class="line">    <span class="comment">//library_names_size=1</span></span><br><span class="line">    <span class="comment">//soinfos 也只有一个 soinfo 对象的指针,将加载 library_names 中 so 的结果存入 soinfos</span></span><br><span class="line">    <span class="comment">//ld_preloads=null</span></span><br><span class="line">    <span class="comment">//ld_preloads_size=0</span></span><br><span class="line">    <span class="comment">//extinfo=null</span></span><br><span class="line">    <span class="comment">// Step 0: 准备工作</span></span><br><span class="line">    LoadTaskList load_tasks;</span><br><span class="line">    <span class="comment">// 将待加载的库名添加到任务队列中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; library_names_size; ++i) &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>* name = library_names[i];</span><br><span class="line">        load_tasks.<span class="built_in">push_back</span>(LoadTask::<span class="built_in">create</span>(name, <span class="literal">nullptr</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用于存储加载的库及其依赖库的链表</span></span><br><span class="line">    SoinfoLinkedList found_libs;</span><br><span class="line">    <span class="type">size_t</span> soinfos_size = <span class="number">0</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Step 1: 使用广度优先搜索加载库及其依赖库</span></span><br><span class="line">    <span class="keyword">for</span> (LoadTask::unique_ptr <span class="built_in">task</span>(load_tasks.<span class="built_in">pop_front</span>()); task.<span class="built_in">get</span>() != <span class="literal">nullptr</span>; task.<span class="built_in">reset</span>(load_tasks.<span class="built_in">pop_front</span>())) &#123;</span><br><span class="line">        <span class="comment">// 加载库</span></span><br><span class="line">        soinfo* si = <span class="built_in">find_library_internal</span>(load_tasks, task-&gt;<span class="built_in">get_name</span>(), dlflags, extinfo);</span><br><span class="line">        <span class="comment">// 检查递归依赖</span></span><br><span class="line">        ...</span><br><span class="line">        soinfo* needed_by = task-&gt;<span class="built_in">get_needed_by</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">is_recursive</span>(si, needed_by)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新引用计数和依赖关系</span></span><br><span class="line">        si-&gt;ref_count++;</span><br><span class="line">        <span class="keyword">if</span> (needed_by != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            needed_by-&gt;<span class="built_in">add_child</span>(si);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将加载的库添加到链表中</span></span><br><span class="line">        found_libs.<span class="built_in">push_front</span>(si);</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 如果当前库是待加载的库，则将其存入 soinfos 数组</span></span><br><span class="line">        <span class="keyword">if</span> (soinfos_size &lt; library_names_size) &#123;</span><br><span class="line">            soinfos[soinfos_size++] = si;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Step 2: 链接所有加载的库</span></span><br><span class="line">    soinfo* si;</span><br><span class="line">    <span class="keyword">while</span> ((si = found_libs.<span class="built_in">pop_front</span>()) != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果库尚未链接，则进行链接</span></span><br><span class="line">        <span class="keyword">if</span> ((si-&gt;flags &amp; FLAG_LINKED) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!si-&gt;<span class="built_in">LinkImage</span>(extinfo)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            si-&gt;flags |= FLAG_LINKED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>find_libraries()将数组 library_names[]中的 so 文件加载到内存，并进行链接。这里将 find_libraries()分为三个部分来进行分析。第一部分：初始化阶段；第二部分：采用宽度优先搜索加载 so；第三部分：对加载的 so 进行链接。</p>
<h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><p>要加载的 so 可能依赖于其他库，linker 采用宽度优先搜索依次加载 so 及其依赖库。搜索树中父节点的依赖库为其子节点，根节点是待加载的.so 文件。</p>
<p>load_tasks 是用于宽度优先搜索的栈，对其进行初始化。found_libs 是.so 文件和其依赖库的列表。</p>
<h3 id="载入-so-到内存"><a href="#载入-so-到内存" class="headerlink" title="载入 so 到内存"></a>载入 so 到内存</h3><p>这部分对.so 文件及其依赖库按照宽度优先的顺序依次进行加载，最关键的是调用 find_library_internal()函数，用于加载 so。</p>
<h3 id="find-library-internal"><a href="#find-library-internal" class="headerlink" title="find_library_internal()"></a>find_library_internal()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> soinfo* <span class="title">find_library_internal</span><span class="params">(LoadTaskList&amp; load_tasks, <span class="type">const</span> <span class="type">char</span>* name,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="type">int</span> dlflags, <span class="type">const</span> android_dlextinfo* extinfo)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检查库是否已经加载</span></span><br><span class="line">    soinfo* si = <span class="built_in">find_loaded_library_by_name</span>(name);</span><br><span class="line">    <span class="comment">// 如果库未加载，则尝试加载</span></span><br><span class="line">    <span class="keyword">if</span> (si == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">TRACE</span>(<span class="string">&quot;[ &#x27;%s&#x27; has not been found by name. Trying harder...]&quot;</span>, name);</span><br><span class="line">        si = <span class="built_in">load_library</span>(load_tasks, name, dlflags, extinfo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回加载的库信息</span></span><br><span class="line">    <span class="keyword">return</span> si;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>find_library_internal()首先会检查 name 指向的.so 是否已经加载，如果没有，就调用 load_library()加载。</p>
<h3 id="load-library"><a href="#load-library" class="headerlink" title="load_library()"></a>load_library()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> soinfo* <span class="title">load_library</span><span class="params">(LoadTaskList&amp; load_tasks, <span class="type">const</span> <span class="type">char</span>* name, <span class="type">int</span> dlflags,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="type">const</span> android_dlextinfo* extinfo)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> fd = <span class="number">-1</span>; <span class="comment">// .so 文件的文件描述符</span></span><br><span class="line">    <span class="type">off64_t</span> file_offset = <span class="number">0</span>;</span><br><span class="line">    <span class="function">ScopedFd <span class="title">file_guard</span><span class="params">(<span class="number">-1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Part 1: 打开 .so 文件</span></span><br><span class="line">    <span class="keyword">if</span> (extinfo != <span class="literal">nullptr</span> &amp;&amp; (extinfo-&gt;flags &amp; ANDROID_DLEXT_USE_LIBRARY_FD) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果提供了文件描述符，则直接使用</span></span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 打开 .so 文件</span></span><br><span class="line">        fd = <span class="built_in">open_library</span>(name);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 文件偏移必须是 PAGE_SIZE 的整数倍，这里 file_offset=0</span></span><br><span class="line">    <span class="keyword">if</span> ((file_offset % PAGE_SIZE) != <span class="number">0</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取 .so 文件的状态信息</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">stat</span> file_stat;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">TEMP_FAILURE_RETRY</span>(<span class="built_in">fstat</span>(fd, &amp;file_stat)) != <span class="number">0</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查是否已经以不同的名称加载了该库（例如符号链接）</span></span><br><span class="line">    <span class="keyword">for</span> (soinfo* si = solist; si != <span class="literal">nullptr</span>; si = si-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (si-&gt;<span class="built_in">get_st_dev</span>() != <span class="number">0</span> &amp;&amp;</span><br><span class="line">            si-&gt;<span class="built_in">get_st_ino</span>() != <span class="number">0</span> &amp;&amp;</span><br><span class="line">            si-&gt;<span class="built_in">get_st_dev</span>() == file_stat.st_dev &amp;&amp;</span><br><span class="line">            si-&gt;<span class="built_in">get_st_ino</span>() == file_stat.st_ino &amp;&amp;</span><br><span class="line">            si-&gt;<span class="built_in">get_file_offset</span>() == file_offset) &#123;</span><br><span class="line">            <span class="built_in">TRACE</span>(<span class="string">&quot;library \&quot;%s\&quot; is already loaded under different name/path \&quot;%s\&quot; - will return existing soinfo&quot;</span>, name, si-&gt;name);</span><br><span class="line">            <span class="keyword">return</span> si;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Part 2: 读取 ELF 头并加载段</span></span><br><span class="line">    <span class="function">ElfReader <span class="title">elf_reader</span><span class="params">(name, fd, file_offset)</span></span>; <span class="comment">// file_offset=0</span></span><br><span class="line">    <span class="keyword">if</span> (!elf_reader.<span class="built_in">Load</span>(extinfo)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">// Part 3: 分配 soinfo 并初始化</span></span><br><span class="line">    soinfo* si = <span class="built_in">soinfo_alloc</span>(<span class="built_in">SEARCH_NAME</span>(name), &amp;file_stat, file_offset);</span><br><span class="line">    <span class="keyword">if</span> (si == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置 soinfo 的加载信息</span></span><br><span class="line">    si-&gt;base = elf_reader.<span class="built_in">load_start</span>(); <span class="comment">// 加载 .so 文件时 mmap 得到的空间的首地址</span></span><br><span class="line">    si-&gt;size = elf_reader.<span class="built_in">load_size</span>();  <span class="comment">// ReserveAddressSpace 中开辟的内存空间的大小</span></span><br><span class="line">    si-&gt;load_bias = elf_reader.<span class="built_in">load_bias</span>(); <span class="comment">// 加载段时的基址，load_bias + p_vaddr 为段的实际内存地址</span></span><br><span class="line">    si-&gt;phnum = elf_reader.<span class="built_in">phdr_count</span>(); <span class="comment">// program header 的个数</span></span><br><span class="line">    si-&gt;phdr = elf_reader.<span class="built_in">loaded_phdr</span>(); <span class="comment">// program header table 在内存中的起始地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 预链接库（解析 .dynamic section）</span></span><br><span class="line">    <span class="keyword">if</span> (!si-&gt;<span class="built_in">PrelinkImage</span>()) &#123;</span><br><span class="line">        <span class="built_in">soinfo_free</span>(si);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将该 .so 文件依赖的库添加到待加载队列中</span></span><br><span class="line">    for_each_dt_needed(si, [&amp;] (<span class="type">const</span> <span class="type">char</span>* name) &#123;</span><br><span class="line">        load_tasks.<span class="built_in">push_back</span>(LoadTask::<span class="built_in">create</span>(name, si)); <span class="comment">// si 依赖于名为 name 的库</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回加载的库信息</span></span><br><span class="line">    <span class="keyword">return</span> si;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将 load_library()分为三个部分来进行分析。第一部分：主要作用是打开.so 文件，并判断是否已经加载；第二部分：加载.so文件的可加载段；第三部分：创建 soinfo 对象，解析.dynamicsection，并将该.so 文件的依赖库添加到待加载的队列中。</p>
<h3 id="打开-so-文件"><a href="#打开-so-文件" class="headerlink" title="打开 so 文件"></a>打开 so 文件</h3><p>内存 页 的 大 小 PAGE_SIZE 为 4096 ， 定 义 位 于 头文件&#x2F;bionic&#x2F;libc&#x2F;include&#x2F;limits.h，现在最好通过 sysconf(_SC_PAGE_SIZE)来获取 PAGE_SIZE 的值，sysconf()位于&#x2F;bionic&#x2F;libc&#x2F;bionic&#x2F;sysconf.cpp，从sysconf 的实现可以知道，sysconf(_SC_PAGESIZE)也可以用来获取 PAGE_SIZE 的值。然后检查.so 文件是否以不同的文件名被加载过了。Linux 下一个文件可以有多个链接文件，因而不同的文件名可能指向的是同一个文件。</p>
<h3 id="映射-so-文件到内存"><a href="#映射-so-文件到内存" class="headerlink" title="映射 so 文件到内存"></a>映射 so 文件到内存</h3><p>用 ElfReader 类解析 ELF 头，并根据 program header table加载段。其成员函数 Load()实现如下：</p>
<p>Load()</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ElfReader::Load</span><span class="params">(<span class="type">const</span> android_dlextinfo* extinfo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ReadElfHeader</span>() &amp;&amp;</span><br><span class="line">           <span class="built_in">VerifyElfHeader</span>() &amp;&amp;</span><br><span class="line">           <span class="built_in">ReadProgramHeader</span>() &amp;&amp;</span><br><span class="line">           <span class="built_in">ReserveAddressSpace</span>(extinfo) &amp;&amp;</span><br><span class="line">           <span class="built_in">LoadSegments</span>() &amp;&amp;</span><br><span class="line">           <span class="built_in">FindPhdr</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>**ReadElfHeader()**用于读取 ELF 的头，并将结果赋给 ElfReader 的成员变量Elf32_Ehdr header_，Elf32_Ehdr 的定义可以在&#x2F;art&#x2F;runtime&#x2F;elf.h 中找到,自动生成的文件&#x2F;bionic&#x2F;libc&#x2F;kernel&#x2F;uapi&#x2F;linux&#x2F;elf.h 中也有相关 elf 的定义。</p>
</li>
<li><p>**VerifyElfHeader()**用于检查 ELF 头某些字段是否合法。</p>
</li>
<li><p>**ReadProgramHeader()**将 program header table 从.so 文件通过 mmap64 映射到只读私有匿名内存。</p>
</li>
<li><p>**ReserveAddressSpace()**通过 mmap 创建足够大的匿名内存空间，以便能够容纳所有可以加载的段</p>
</li>
<li><p><strong>LoadSegments()</strong></p>
<p>  遍历 program header table，找到可加载段，并通过 mmap 将可加载段从文件映射到内存。</p>
</li>
<li><p><strong>FindPhdr()</strong></p>
<p>  检查 program header table 是否已经在内存中了，即检查可加载段中是否包含 program header table。</p>
</li>
</ul>
<h3 id="解析-dynamic-section"><a href="#解析-dynamic-section" class="headerlink" title="解析 dynamic section"></a>解析 dynamic section</h3><p>load_library()函数中创建一个了 soinfo 对象，并对相关字段进行赋值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">si-&gt;base：加载 so 文件时，mmap 得到的内存空间的首地址。</span><br><span class="line">si-&gt;size：ReserveAddressSpace 中开启的内存空间的大小；</span><br><span class="line">si-&gt;load_bias ： 加载的偏移地址， 对 于 一个可加载段来说，si-&gt;load_bias+p_vaddr 是它在内存中的地址；</span><br><span class="line">si-&gt;phnum：program header 的个数；</span><br><span class="line">si-&gt;phdr：program header table 在内存中的起始地址。</span><br></pre></td></tr></table></figure>

<p>调用 PrelinkImage()解析.so 文件的.dynamic section；将该.so 文件依赖的库添加到待加载的队列中。</p>
<p>在分析 PrelinkImage()之前，先看一下.dynamic section 中 entry 的数据结构，如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Dynamic table entry for ELF32.</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Elf32_Dyn</span> &#123;</span><br><span class="line">    Elf32_Sword d_tag; <span class="comment">// Type of dynamic table entry.</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        Elf32_Word d_val; <span class="comment">// Integer value of entry.</span></span><br><span class="line">        Elf32_Addr d_ptr; <span class="comment">// Pointer value of entry.</span></span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>略写</p>
<h3 id="链接阶段"><a href="#链接阶段" class="headerlink" title="链接阶段"></a>链接阶段</h3><p>对加载的 so 进行链接操作，链接的顺序与加载的顺序刚好相反。</p>
<p>调用 LinkImage()进行链接</p>
<h3 id="LinkImage"><a href="#LinkImage" class="headerlink" title="LinkImage()"></a>LinkImage()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">soinfo::LinkImage</span><span class="params">(<span class="type">const</span> android_dlextinfo* extinfo)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(__LP64__)</span></span><br><span class="line">    <span class="comment">// 如果存在文本重定位，则需要解除段的写保护</span></span><br><span class="line">    <span class="keyword">if</span> (has_text_relocations) &#123;</span><br><span class="line">        <span class="built_in">DL_WARN</span>(<span class="string">&quot;%s has text relocations. This is wasting memory and prevents &quot;</span></span><br><span class="line">                <span class="string">&quot;security hardening. Please fix.&quot;</span>, name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解除段的写保护，使其可读写</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">phdr_table_unprotect_segments</span>(phdr, phnum, load_bias) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">DL_ERR</span>(<span class="string">&quot;can&#x27;t unprotect loadable segments for \&quot;%s\&quot;: %s&quot;</span>,</span><br><span class="line">                   name, <span class="built_in">strerror</span>(errno));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(USE_RELA)</span></span><br><span class="line">    <span class="comment">// 处理 RELA 重定位表（64 位架构）</span></span><br><span class="line">    ...</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="comment">// 处理 REL 重定位表（32 位架构）</span></span><br><span class="line">    <span class="keyword">if</span> (rel != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">DEBUG</span>(<span class="string">&quot;[ relocating %s ]&quot;</span>, name);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Relocate</span>(rel, rel_count)) &#123; <span class="comment">// 对重定位表中所指的符号进行重定位</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 PLT 重定位表（与调用导入函数相关）</span></span><br><span class="line">    <span class="keyword">if</span> (plt_rel != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">DEBUG</span>(<span class="string">&quot;[ relocating %s plt ]&quot;</span>, name);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Relocate</span>(plt_rel, plt_rel_count)) &#123; <span class="comment">// 对重定位表中所指的符号进行重定位</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">DEBUG</span>(<span class="string">&quot;[ finished linking %s ]&quot;</span>, name);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(__LP64__)</span></span><br><span class="line">    <span class="comment">// 如果存在文本重定位，重新保护段为只读</span></span><br><span class="line">    <span class="keyword">if</span> (has_text_relocations) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">phdr_table_protect_segments</span>(phdr, phnum, load_bias) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">DL_ERR</span>(<span class="string">&quot;can&#x27;t protect segments for \&quot;%s\&quot;: %s&quot;</span>,</span><br><span class="line">                   name, <span class="built_in">strerror</span>(errno));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启用 GNU RELRO 保护</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">phdr_table_protect_gnu_relro</span>(phdr, phnum, load_bias) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">DL_ERR</span>(<span class="string">&quot;can&#x27;t enable GNU RELRO protection for \&quot;%s\&quot;: %s&quot;</span>,</span><br><span class="line">               name, <span class="built_in">strerror</span>(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对.rel.dyn 和.rel.plt 两个重定位表都是调用Relocate()来进行重定位的。在分析 Relocate()之前，先看一下重定位表项的数</p>
<p>据结构</p>
<p>略写</p>
<h3 id="链接完成后"><a href="#链接完成后" class="headerlink" title="链接完成后"></a>链接完成后</h3><p>so 文件加载到内存，并链接完成后，就开始调用 so 中的初始化函数。</p>
<p>回到 do_dlopen()继续分析：</p>
<p>在do_dlopen()中调用 CallConstructors()进行初始化操作。</p>
<h3 id="CallConstructors"><a href="#CallConstructors" class="headerlink" title="CallConstructors()"></a>CallConstructors()</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">soinfo::CallConstructors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果构造函数已经调用过，则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (constructors_called) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">// 递归调用所有依赖库的构造函数</span></span><br><span class="line">    <span class="built_in">get_children</span>().for_each([] (soinfo* si) &#123;</span><br><span class="line">        si-&gt;<span class="built_in">CallConstructors</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">// DT_INIT 应该先于 DT_INIT_ARRAY 调用（如果两者都存在）</span></span><br><span class="line">    <span class="built_in">CallFunction</span>(<span class="string">&quot;DT_INIT&quot;</span>, init_func); <span class="comment">// 调用 init_func 函数</span></span><br><span class="line">    <span class="built_in">CallArray</span>(<span class="string">&quot;DT_INIT_ARRAY&quot;</span>, init_array, init_array_count, <span class="literal">false</span>); <span class="comment">// 调用 init_array 数组中的函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CallConstructors() 主 要 是 执 行 了 两 段 初 始 化 代 码 ： init_func 和init_array,这两个变量是在 PrelinkImage()中解析 dynamic section 时赋值的。通常加壳逻辑就放在 init_func 或 init_array 中，它们先于 jni_onLoad 执行。</p>
<p>至此，完成了 so 的加载分析。</p>
<h2 id="native-层函数调用关系图"><a href="#native-层函数调用关系图" class="headerlink" title="native 层函数调用关系图"></a>native 层函数调用关系图</h2><p><img src="/2025/03/09/App%E5%90%AF%E5%8A%A8%E5%8F%8A%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/2.jpg"></p>
<p><img src="/2025/03/09/App%E5%90%AF%E5%8A%A8%E5%8F%8A%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/3.jpg"></p>
]]></content>
      <categories>
        <category>Android系统</category>
      </categories>
      <tags>
        <tag>App启动及加载流程分析</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS</title>
    <url>/2025/02/06/CSS/</url>
    <content><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>层叠样式表（Cascading  Style Sheets）,是一种样式表语言，用来描述HTML文档的呈现。</p>
<h1 id="CSS引入方式"><a href="#CSS引入方式" class="headerlink" title="CSS引入方式"></a>CSS引入方式</h1><h2 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h2><p>书写位置：<code>title</code>标签下方，<code>style</code>标签里</p>
<p>CSS书写规则：<code>选择器 &#123; 属性名 : 属性值;&#125;</code></p>
<p><strong>示例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"> <span class="selector-tag">p</span> &#123;<span class="attribute">color</span>: red;&#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a Html document!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<p><img src="/2025/02/06/CSS/1.jpg"></p>
<h2 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h2><p>将CSS代码写在单独的CSS文件中（.css）。</p>
<p>在HTML里使用<code>link</code>标签引入。</p>
<p><strong>示例</strong></p>
<p>html文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入当前目录下的 ht_css.css 样式表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./ht_css.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a Html document!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>css文件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<p><img src="/2025/02/06/CSS/1.jpg"></p>
<h2 id="行内样式"><a href="#行内样式" class="headerlink" title="行内样式"></a>行内样式</h2><p>配合Javascript使用，CSS写在标签的style属性值里。</p>
<p><strong>示例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 20px;&quot;</span>&gt;</span>This is a Html document!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2025/02/06/CSS/1.jpg"></p>
<h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><h2 id="宽度高度背景色"><a href="#宽度高度背景色" class="headerlink" title="宽度高度背景色"></a>宽度高度背景色</h2><ul>
<li><p><strong>width</strong></p>
<p>  宽度</p>
</li>
<li><p><strong>height</strong></p>
<p>  高度</p>
</li>
<li><p><strong>background-color</strong></p>
<p>  背景色</p>
</li>
</ul>
<p><strong>示例</strong></p>
<p>用宽度高度背景色画盒子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml"> </span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 定义红色盒子 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        .red &#123;</span></span><br><span class="line"><span class="language-xml">            width: 100px;</span></span><br><span class="line"><span class="language-xml">            height: 100px;</span></span><br><span class="line"><span class="language-xml">            background-color: red;</span></span><br><span class="line"><span class="language-xml">        &#125; </span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 定义绿色盒子 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        .green &#123;</span></span><br><span class="line"><span class="language-xml">            width: 200px;</span></span><br><span class="line"><span class="language-xml">            height: 200px;</span></span><br><span class="line"><span class="language-xml">            background-color: green;</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>div_red<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;green&quot;</span>&gt;</span>div_green<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/2025/02/06/CSS/4.jpg"></p>
<h2 id="文字控制属性"><a href="#文字控制属性" class="headerlink" title="文字控制属性"></a>文字控制属性</h2><ul>
<li><p><strong>font-size</strong></p>
<p>  字体大小，单位是<code>px</code>。</p>
<p>  在谷歌浏览器中文字默认大小<code>16px</code>。</p>
</li>
<li><p><strong>font-weight</strong></p>
<p>  字体粗细</p>
<p>  <strong>属性值</strong></p>
<ul>
<li><p><strong>数字</strong></p>
<p>  正常：400</p>
<p>  加粗：700</p>
</li>
<li><p><strong>关键字</strong></p>
<p>  正常：normal</p>
<p>  加粗：bold</p>
</li>
</ul>
</li>
<li><p><strong>font-style</strong></p>
<p>  字体样式</p>
<p>  <strong>属性值</strong></p>
<ul>
<li>正常（不倾斜）：normal</li>
<li>倾斜：italic</li>
</ul>
</li>
<li><p><strong>line-height</strong></p>
<p>  行高</p>
<p>  行高&#x3D;上间距+文本高度+下间距</p>
<p>  <strong>属性值</strong></p>
<ul>
<li>数字+<code>px</code></li>
<li>数字（设置为数字，<code>line-height</code> 会与<code>font-size</code>成比例，计算方式是 <code>line-height</code> &#x3D; <code>字体大小 * 数值</code>。）</li>
</ul>
</li>
<li><p><strong>font-family</strong></p>
<p>  字体族</p>
</li>
<li><p><strong>font</strong></p>
<p>  复合属性</p>
<p>  属性的简写方式，一个属性对应多个值的写法，各属性值之间用空格隔开。</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font: [font-style] [font-variant] [font-weight] [font-size] / [line-height] [font-family];</span><br><span class="line"></span><br><span class="line">font-size 和 font-family 是必选的，其它部分可以省略。</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>text-indent</strong></p>
<p>  文本缩进</p>
<p>  <strong>属性值</strong></p>
<ul>
<li>数字+<code>px</code></li>
<li>数字+<code>em</code>（1em &#x3D; 当前标签的字号大小）</li>
</ul>
</li>
<li><p><strong>text-align</strong></p>
<p>  文本对齐</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td>左对齐</td>
</tr>
<tr>
<td>center</td>
<td>居中对齐</td>
</tr>
<tr>
<td>right</td>
<td>右对齐</td>
</tr>
</tbody></table>
</li>
<li><p><strong>text-decoration</strong></p>
<p>  修饰线</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>无</td>
</tr>
<tr>
<td>underline</td>
<td>下划线</td>
</tr>
<tr>
<td>line-through</td>
<td>删除线</td>
</tr>
<tr>
<td>overline</td>
<td>上划线</td>
</tr>
</tbody></table>
</li>
<li><p><strong>color</strong></p>
<p>  颜色</p>
<table>
<thead>
<tr>
<th>颜色表示方式</th>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>颜色关键字</td>
<td>颜色英文单词</td>
<td>red、green、blue…</td>
</tr>
<tr>
<td>rgb表示法</td>
<td>rgb(r,g,b)</td>
<td>r,g,b表示三原色，取值：0-255</td>
</tr>
<tr>
<td>rgba表示法</td>
<td>rgba(r,g,b,a)</td>
<td>a表示透明度，取值0-1</td>
</tr>
<tr>
<td>十六进制表示法</td>
<td>#RRGGBB</td>
<td>#000000,#ffcc00,简写：#000，#fc0</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h2><ul>
<li><p><strong>background-color</strong>（bgc）</p>
<p>  背景色</p>
</li>
<li><p><strong>background-image</strong></p>
<p>  背景图</p>
<p>  <strong>属性值</strong></p>
<p>  url(背景图的url或者背景图的路径)</p>
</li>
<li><p><strong>background-repeat</strong></p>
<p>  平铺方式</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>no-repeat</td>
<td>不平铺</td>
</tr>
<tr>
<td>repeat</td>
<td>平铺（默认效果）</td>
</tr>
<tr>
<td>repeat-x</td>
<td>水平方向平铺</td>
</tr>
<tr>
<td>repeat-y</td>
<td>垂直方向平铺</td>
</tr>
</tbody></table>
</li>
<li><p><strong>background-position</strong>（bgp）</p>
<p>  背景图位置</p>
<p>  <strong>属性值</strong></p>
<ul>
<li><p><strong>关键字</strong></p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>位置</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td>左侧</td>
</tr>
<tr>
<td>right</td>
<td>右侧</td>
</tr>
<tr>
<td>center</td>
<td>居中</td>
</tr>
<tr>
<td>top</td>
<td>顶部</td>
</tr>
<tr>
<td>bottom</td>
<td>底部</td>
</tr>
</tbody></table>
</li>
<li><p><strong>坐标</strong>（数字+<code>px</code>，正负都可以）</p>
<p>  水平：正数向右；负数向左</p>
<p>  垂直：正数向下；负数向下</p>
</li>
</ul>
<p>  可以只写一个关键字，另一个方向默认为居中；数字只写一个值表示水平方向，垂直方向为居中。</p>
</li>
<li><p><strong>background-size</strong></p>
<p>  背景图缩放</p>
<p>  <strong>属性值</strong></p>
<ul>
<li><p><strong>关键字</strong></p>
<p>  cover：等比例缩放图片以完全覆盖背景区，可能背景图片部分看不见</p>
<p>  contain：等比例缩放背景图片以完全装入背景区，可能背景区部分空白</p>
</li>
<li><p><strong>百分比</strong></p>
<p>  根据盒子尺寸计算图片大小</p>
</li>
<li><p>数字+<code>px</code></p>
</li>
</ul>
</li>
<li><p><strong>background-attachment</strong></p>
<p>  背景图固定</p>
<p>  <strong>属性值</strong></p>
<p>  fixed</p>
</li>
<li><p><strong>background</strong>（bg）</p>
<p>  复合属性</p>
<p>  <strong>属性值</strong>：背景色 背景图 背景图平铺方式 背景图位置&#x2F;背景图缩放 背景图固定</p>
</li>
</ul>
<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><p>查找标签，设置样式。</p>
<h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h2><p>使用标签名作为选择器，选中同名标签设置相同的样式，但是无法差异化同名标签的样式。</p>
<h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p>查找标签，差异化设置标签的显示效果。</p>
<ul>
<li>定义类选择器：<code>.类名</code>。</li>
<li>使用类选择器：标签添加<code>class = 类名</code>。</li>
<li>一个类选择器可以给多个标签使用。</li>
<li>一个标签可以使用多个类名，class属性值里可以写多个类名，类名用空格隔开。</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 定义类选择器 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        .green &#123;</span></span><br><span class="line"><span class="language-xml">            color: green;</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用类选择器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;green&quot;</span>&gt;</span>This is a Html document!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/2025/02/06/CSS/2.jpg"></p>
<h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h2><p>查找标签，差异化设置标签的显示效果。</p>
<p>id选择器一般配合Javascript使用，很少用来设置CSS样式。</p>
<ul>
<li>定义id选择器：<code>#id名</code></li>
<li>使用id选择器：标签添加 <code>id = &quot;id名&quot;</code></li>
<li>同一个id选择器在一个页面只能使用一次</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 定义id选择器 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        #green &#123;</span></span><br><span class="line"><span class="language-xml">            color: green;</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用id选择器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;green&quot;</span>&gt;</span>This is a Html document!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/2025/02/06/CSS/2.jpg"></p>
<h2 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h2><p>查找页面所有标签，设置相同样式。</p>
<p>通配符不需要调用，浏览器会自动查找所有标签，设置相同样式。</p>
<p>通配符选择器使用<code>*</code>来定义。</p>
<p><strong>示例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 定义通配符选择器 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        * &#123;</span></span><br><span class="line"><span class="language-xml">            color: green;</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> &gt;</span>This is a Html document!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        This is a div label!</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>This is a span label!<span class="tag">&lt;/<span class="name">span</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/2025/02/06/CSS/3.jpg"></p>
<h2 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h2><p>由两个或多个基础选择器，通过不同的方式组合而成。</p>
<h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>用于选择某个元素内部的所有指定后代元素，无论它们嵌套在多少层。</p>
<p>写法：父选择器 子选择器{ CSS属性 } ，父子选择器之间用空格隔开。</p>
<p><strong>示例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div p &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 会被选中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>嵌套的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 也会被选中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h3><p>子选择器只选择直接子元素，不会匹配更深层的后代。</p>
<p>写法：父选择器 &gt; 子选择器{ CSS属性 } ，父子选择器之间用 &gt; 隔开。</p>
<p><strong>示例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div &gt; p &#123;</span><br><span class="line">    color: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>直接子元素段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 会被选中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>嵌套的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 不会被选中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><p>并集选择器可以同时选择多个不同类型的元素。</p>
<p><strong>示例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">h1, p, .box &#123;</span><br><span class="line">    background-color: lightgray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="comment">&lt;!-- 受影响 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 受影响 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>我是box<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 受影响 --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><p>交集选择器选择同时匹配多个条件的元素。</p>
<p><strong>示例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div.box &#123;</span><br><span class="line">    border: 2px solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>我是box<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 受影响 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>普通div<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 不受影响 --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><h3 id="用户交互伪类"><a href="#用户交互伪类" class="headerlink" title="用户交互伪类"></a>用户交互伪类</h3><ul>
<li><p><strong>link</strong></p>
<p>  访问前的状态。</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:link &#123;</span><br><span class="line">    color: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>visited</strong></p>
<p>  访问后的状态。</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:link &#123;</span><br><span class="line">    color: #999;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>hover</strong></p>
<p>  当鼠标悬停在元素上时触发。</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:link &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>active</strong></p>
<p>  当元素被点击时触发。</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:link &#123;</span><br><span class="line">    color: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h1><h2 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h2><p>子级默认继承父级的文字控制属性。</p>
<h2 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h2><ul>
<li>相同的属性会覆盖：后面的属性会覆盖前面的CSS属性。</li>
<li>不同的属性会叠加：不同的CSS属性都生效。</li>
</ul>
<h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>也叫权重，当一个标签使用了多种选择器时，基于不同种类的选择器的匹配规则。</p>
<p>规则：选择器优先级高的样式生效。</p>
<p>公式：通配符选择器&lt;标签选择器&lt;类选择器&lt;id选择器&lt;行内样式&lt;!important（选中标签的范围越大，优先级越低）</p>
<h3 id="叠加计算规则"><a href="#叠加计算规则" class="headerlink" title="叠加计算规则"></a>叠加计算规则</h3><p>如果是复合选择器，则需要权重叠加计算。</p>
<p>规则：</p>
<ul>
<li><p>比较 行内样式、id选择器、类选择器和标签选择器的个数，从左至右比较选择器的个数，同一级个数多的优先级高，如果个数相同，则向后比较。</p>
</li>
<li><p>!important权重最高</p>
</li>
<li><p>继承权重最低</p>
</li>
</ul>
<h1 id="Emmet写法"><a href="#Emmet写法" class="headerlink" title="Emmet写法"></a>Emmet写法</h1><p>代码的简写方式，输入缩写会自动生成对应的代码。</p>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><table>
<thead>
<tr>
<th>说明</th>
<th>标签结构</th>
<th>Emmet</th>
</tr>
</thead>
<tbody><tr>
<td>类选择器</td>
<td><code>&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</code></td>
<td>标签名.类名</td>
</tr>
<tr>
<td>id选择器</td>
<td><code>&lt;div id=&quot;box&quot;&gt;&lt;/div&gt;</code></td>
<td>标签名#id名</td>
</tr>
<tr>
<td>同级标签</td>
<td><code>&lt;div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</code></td>
<td>div+p</td>
</tr>
<tr>
<td>父子级标签</td>
<td><code>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</code></td>
<td>div&gt;p</td>
</tr>
<tr>
<td>多个相同标签</td>
<td><code>&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;</code></td>
<td>span*3</td>
</tr>
<tr>
<td>有内容的标签</td>
<td><code>&lt;div&gt;111&lt;/div&gt;</code></td>
<td>div{内容}</td>
</tr>
</tbody></table>
<h1 id="显示模式"><a href="#显示模式" class="headerlink" title="显示模式"></a>显示模式</h1><h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><ul>
<li>独占一行</li>
<li>宽度默认是父级的100%</li>
<li>添加宽高属性生效</li>
</ul>
<h2 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h2><ul>
<li>一行共存多个</li>
<li>尺寸由内容有关</li>
<li>设置宽高不生效</li>
</ul>
<h2 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h2><ul>
<li>一行共存多个</li>
<li>默认尺寸与内容有关</li>
<li>设置高生效</li>
</ul>
<h2 id="转换显示模式"><a href="#转换显示模式" class="headerlink" title="转换显示模式"></a>转换显示模式</h2><p>属性名：display</p>
<p><strong>属性值</strong></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>block</td>
<td>块级</td>
</tr>
<tr>
<td>inline-block</td>
<td>行内块</td>
</tr>
<tr>
<td>inline</td>
<td>行内</td>
</tr>
</tbody></table>
<h1 id="案例效果"><a href="#案例效果" class="headerlink" title="案例效果"></a>案例效果</h1><h2 id="热词"><a href="#热词" class="headerlink" title="热词"></a>热词</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#3064bb</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: wheat;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#608dd9</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/2025/02/06/CSS/5.jpg"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言</title>
    <url>/2024/02/01/C%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h1 id="C语言基础编程"><a href="#C语言基础编程" class="headerlink" title="C语言基础编程"></a>C语言基础编程</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h2><p>宏定义是 C&#x2F;C++ 语言中的一种预处理指令，用于在编译之前对代码进行文本替换。通过宏定义，可以定义常量、代码片段或者参数化的宏，以提高代码的可读性、可维护性以及复用性。</p>
<p>宏定义由 <code>#define</code> 指令实现，属于预处理阶段的内容。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> 宏名 替换文本</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14159</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 100</span></span><br></pre></td></tr></table></figure>

<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="char"><a href="#char" class="headerlink" title="char"></a>char</h3><p>长度：1字节</p>
<ul>
<li><p>unsigned char</p>
</li>
<li><p>short</p>
<p>  2字节</p>
</li>
<li><p>unsigned short</p>
</li>
<li><p>int </p>
<p>  4字节</p>
</li>
<li><p>unsigned int</p>
</li>
<li><p>long</p>
</li>
<li><p>unsigned long</p>
</li>
<li><p>long long</p>
<p>  8字节</p>
</li>
<li><p>unsigned long long</p>
</li>
<li><p>float</p>
<p>  4字节</p>
<p>  <code>float</code> 类型的变量需要在值后加 <code>f</code> 或 <code>F</code> 后缀，例如：<code>3.14f</code>。</p>
</li>
<li><p>double</p>
<p>  8字节</p>
</li>
<li><p>void</p>
</li>
</ul>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">算术运算符</span><br><span class="line">+</span><br><span class="line">-</span><br><span class="line">*</span><br><span class="line">/</span><br><span class="line">%</span><br><span class="line">++</span><br><span class="line">--</span><br><span class="line">比较运算符</span><br><span class="line">==</span><br><span class="line">!=</span><br><span class="line">&gt;</span><br><span class="line">&lt;</span><br><span class="line">&gt;=</span><br><span class="line">&lt;=</span><br><span class="line">逻辑运算符</span><br><span class="line">&amp;&amp;</span><br><span class="line">||</span><br><span class="line">!</span><br><span class="line">位运算符</span><br><span class="line">&amp;</span><br><span class="line">|</span><br><span class="line">^</span><br><span class="line">~</span><br><span class="line">&lt;&lt;</span><br><span class="line">&gt;&gt;</span><br><span class="line">赋值运算符</span><br><span class="line">=</span><br><span class="line">+=</span><br><span class="line">-=</span><br><span class="line">*=</span><br><span class="line">/=</span><br><span class="line">%=</span><br><span class="line">&lt;&lt;=</span><br><span class="line">&gt;&gt;=</span><br><span class="line">&amp;=</span><br><span class="line">^=</span><br><span class="line">|=</span><br><span class="line">其他运算符</span><br><span class="line"><span class="keyword">sizeof</span>()  	<span class="comment">// 返回变量或数据类型的大小</span></span><br><span class="line">&amp;			<span class="comment">// 取地址</span></span><br><span class="line">*			<span class="comment">// 解引用</span></span><br><span class="line">?:			<span class="comment">// 三元运算符</span></span><br></pre></td></tr></table></figure>

<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(expression)&#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(expression)&#123;</span><br><span class="line">...;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      ...;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(expression)&#123;</span><br><span class="line">...;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(expression)&#123;</span><br><span class="line">...;</span><br><span class="line">  &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      ...;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">1</span>:</span><br><span class="line">        <span class="comment">// 语句块1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">2</span>:</span><br><span class="line">        <span class="comment">// 语句块2</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 默认语句块</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式);</span><br></pre></td></tr></table></figure>

<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句; 条件表达式; 更新语句) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p><code>continue</code> 用于跳过当前循环的剩余部分，直接进入下一次迭代。</p>
<h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>用于跳出最近的循环或 <code>switch</code> 语句。</p>
<h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="一维数组的定义方式"><a href="#一维数组的定义方式" class="headerlink" title="一维数组的定义方式"></a>一维数组的定义方式</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">return_type <span class="title function_">function_name</span><span class="params">( parameter <span class="built_in">list</span> )</span></span><br><span class="line">&#123;</span><br><span class="line">   body of the function</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>结构体（<code>struct</code>）是一种用户自定义的数据类型，可以将不同类型的数据组合在一起，形成一个更复杂的数据结构。</p>
<h3 id="结构体的定义与使用"><a href="#结构体的定义与使用" class="headerlink" title="结构体的定义与使用"></a>结构体的定义与使用</h3><p><strong>访问结构体成员</strong></p>
<p>通过点操作符 (<code>.</code>) 来访问结构体的成员。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">person1</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 给成员赋值</span></span><br><span class="line">    <span class="built_in">strcpy</span>(person1.name, <span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">    person1.age = <span class="number">30</span>;</span><br><span class="line">    person1.height = <span class="number">5.5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印成员</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Name: %s\n&quot;</span>, person1.name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Age: %d\n&quot;</span>, person1.age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Height: %.2f\n&quot;</span>, person1.height);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结构体指针</strong></p>
<p>通过指针来访问结构体成员，使用箭头操作符 (<code>-&gt;</code>) 来代替点操作符。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">person1</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> *<span class="title">ptr</span> =</span> &amp;person1;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(ptr-&gt;name, <span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">    ptr-&gt;age = <span class="number">25</span>;</span><br><span class="line">    ptr-&gt;height = <span class="number">5.9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Name: %s\n&quot;</span>, ptr-&gt;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Age: %d\n&quot;</span>, ptr-&gt;age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Height: %.2f\n&quot;</span>, ptr-&gt;height);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><p>C 语言的文件读写操作主要依赖 <strong>标准 I&#x2F;O 库</strong>（<code>stdio.h</code>），通过 <code>FILE *</code> 指针来管理文件。</p>
<h3 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">FILE *<span class="title function_">fopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">const</span> <span class="type">char</span> *mode)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// filename：文件路径</span></span><br><span class="line"><span class="comment">// mode：文件模式（如 r 读取，w 写入等）</span></span><br></pre></td></tr></table></figure>

<h4 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h4><table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>打开一个已有的文本文件，允许读取文件。</td>
</tr>
<tr>
<td>w</td>
<td>打开一个文本文件，允许写入文件。如果文件不存在，则会创建一个新文件。如果文件存在，则该会被截断为零长度，重新写入，会覆盖原来的内容。</td>
</tr>
<tr>
<td>a</td>
<td>打开一个文本文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。</td>
</tr>
<tr>
<td>r+</td>
<td>打开一个文本文件，允许读写文件。</td>
</tr>
<tr>
<td>w+</td>
<td>打开一个文本文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。</td>
</tr>
<tr>
<td>a+</td>
<td>打开一个文本文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。</td>
</tr>
</tbody></table>
<h3 id="write"><a href="#write" class="headerlink" title="write"></a>write</h3><h4 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite()"></a>fwrite()</h4><p>将数据写入二进制文件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">fwrite</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> count, FILE *stream)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ptr：指向要写入的数据的指针，通常是一个变量或者数组的地址。</span></span><br><span class="line"><span class="comment">// size：每个数据项的字节数，通常是单个数据类型的大小。例如，sizeof(int)、sizeof(char)、sizeof(struct) 等。</span></span><br><span class="line"><span class="comment">// count：要写入的元素个数。即 ptr 指向的数据的元素个数。</span></span><br><span class="line"><span class="comment">// stream：文件指针，指向已经打开的文件。</span></span><br><span class="line"><span class="comment">// return：返回成功写入的元素数量（即 count），如果出现错误或文件未打开，会返回 0。</span></span><br></pre></td></tr></table></figure>

<h4 id="fputc"><a href="#fputc" class="headerlink" title="fputc()"></a>fputc()</h4><p>向文件写入一个字符。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *stream)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ch：要写入的字符（作为 int 传递）。</span></span><br><span class="line"><span class="comment">// stream：指向已打开的文件的指针。</span></span><br><span class="line"><span class="comment">// return：成功时返回写入的字符，失败时返回 EOF（-1）。</span></span><br></pre></td></tr></table></figure>

<h4 id="fputs"><a href="#fputs" class="headerlink" title="fputs()"></a>fputs()</h4><p>将字符串写入文件。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputs</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, FILE *stream)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// str：要写入的字符串（以 \0 结尾）。</span></span><br><span class="line"><span class="comment">// stream：指向已打开的文件的指针。</span></span><br><span class="line"><span class="comment">// return：成功时返回 非负整数（通常为 0），失败时返回 EOF（通常为 -1）</span></span><br></pre></td></tr></table></figure>

<h4 id="fprintf"><a href="#fprintf" class="headerlink" title="fprintf()"></a>fprintf()</h4><p>将格式化数据写入文件。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fprintf</span><span class="params">(FILE *stream, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// stream：指向已打开的文件的指针。</span></span><br><span class="line"><span class="comment">// format：格式化字符串，与 printf() 用法相同。</span></span><br><span class="line"><span class="comment">// ...：要写入的变量数据。</span></span><br><span class="line"><span class="comment">// 成功时返回写入的字符数，失败时返回负值。</span></span><br></pre></td></tr></table></figure>





<h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><h4 id="fread"><a href="#fread" class="headerlink" title="fread()"></a>fread()</h4><p>从二进制文件读取数据</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">fread</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> count, FILE *stream)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ptr：指向存储读取数据的内存区域的指针。</span></span><br><span class="line"><span class="comment">// size：每个数据项的字节数，通常是单个数据类型的大小。</span></span><br><span class="line"><span class="comment">// count：要读取的元素个数。</span></span><br><span class="line"><span class="comment">// stream：文件指针，指向已经打开的文件。</span></span><br><span class="line"><span class="comment">// return：返回成功读取的元素个数。如果发生错误或到达文件末尾（EOF），则返回值小于请求的 count。</span></span><br></pre></td></tr></table></figure>

<h4 id="fgetc"><a href="#fgetc" class="headerlink" title="fgetc()"></a>fgetc()</h4><p>从文件读取一个字符。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fgetc</span><span class="params">(FILE *stream)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// stream：指向已打开的文件的指针。</span></span><br><span class="line"><span class="comment">// return：成功时返回读取的字符（作为 int 返回），失败时返回 EOF（通常为 -1）。</span></span><br></pre></td></tr></table></figure>

<h4 id="fgets"><a href="#fgets" class="headerlink" title="fgets()"></a>fgets()</h4><p>从文件读取一行字符串。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">fgets</span><span class="params">(<span class="type">char</span> *str, <span class="type">int</span> n, FILE *stream)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// str：用于存储读取字符串的字符数组（缓冲区）。</span></span><br><span class="line"><span class="comment">// n：最多读取 n-1 个字符，遇到 换行符 (\n) 或文件结束 (EOF) 停止，最后自动添加 \0 结束符。</span></span><br><span class="line"><span class="comment">// stream：指向已打开的文件的指针。</span></span><br><span class="line"><span class="comment">// return：成功时返回 str（字符串的指针）,失败或到达 EOF 时返回 NULL。</span></span><br></pre></td></tr></table></figure>

<h4 id="fscanf"><a href="#fscanf" class="headerlink" title="fscanf()"></a>fscanf()</h4><p>从文件中读取格式化数据。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fscanf</span><span class="params">(FILE *stream, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// stream：指向已打开的文件的指针。</span></span><br><span class="line"><span class="comment">// format：格式化字符串，与 scanf() 用法相同。</span></span><br><span class="line"><span class="comment">// ...：指向存储读取数据的变量指针。</span></span><br><span class="line"><span class="comment">// return：成功读取的变量个数，读取失败（如文件结束 EOF）时返回 负值。</span></span><br></pre></td></tr></table></figure>

<h3 id="文件指针操作"><a href="#文件指针操作" class="headerlink" title="文件指针操作"></a>文件指针操作</h3><h4 id="ftell"><a href="#ftell" class="headerlink" title="ftell()"></a>ftell()</h4><p>获取文件指针当前位置。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">ftell</span><span class="params">(FILE *stream)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// stream：指向已打开文件的指针。</span></span><br><span class="line"><span class="comment">// 成功：返回当前文件指针的位置（从文件开头算起的字节数），失败：返回 -1L，需使用 perror() 或 ferror() 检查错误。</span></span><br></pre></td></tr></table></figure>



<h4 id="fseek"><a href="#fseek" class="headerlink" title="fseek()"></a>fseek()</h4><p>移动文件指针。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fseek</span><span class="params">(FILE *stream, <span class="type">long</span> offset, <span class="type">int</span> origin)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// stream：指向已打开文件的指针。</span></span><br><span class="line"><span class="comment">// offset：偏移量（以字节为单位）。</span></span><br><span class="line"><span class="comment">// origin：</span></span><br><span class="line">	<span class="comment">// SEEK_SET：文件开头 + offset（从文件头部定位）。</span></span><br><span class="line">	<span class="comment">// SEEK_CUR：当前文件指针位置 + offset（从当前位置定位）。</span></span><br><span class="line">	<span class="comment">// SEEK_END：文件末尾 + offset（从文件尾部定位，通常 offset 为负数）。</span></span><br><span class="line"><span class="comment">// return：成功：返回 0，失败：返回 -1，可以用 perror() 检查错误。</span></span><br></pre></td></tr></table></figure>



<h4 id="rewind"><a href="#rewind" class="headerlink" title="rewind()"></a>rewind()</h4><p>重置文件指针。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">rewind</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure>

<p>将文件指针重置到文件开头（相当于 <code>fseek(fp, 0, SEEK_SET);</code>）。</p>
<p>不会返回错误，也不会返回值。</p>
<h1 id="内存分区"><a href="#内存分区" class="headerlink" title="内存分区"></a>内存分区</h1><h2 id="代码区"><a href="#代码区" class="headerlink" title="代码区"></a>代码区</h2><p>存放程序的机器指令，也就是程序的可执行代码。</p>
<h2 id="静态区（全局区）"><a href="#静态区（全局区）" class="headerlink" title="静态区（全局区）"></a>静态区（全局区）</h2><p>用于全局变量、静态变量和常量（全局常量、字符串常量）的存储。这部分内存的生命周期从程序开始直到程序结束。</p>
<h2 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a>栈（stack）</h2><p>用于存储局部变量和函数调用时的上下文（如返回地址与参数等）。</p>
<h2 id="堆（heap）"><a href="#堆（heap）" class="headerlink" title="堆（heap）"></a>堆（heap）</h2><p>动态分配的内存区域，用于存放程序运行时动态创建的数据。</p>
<h1 id="stdio-h"><a href="#stdio-h" class="headerlink" title="stdio.h"></a>stdio.h</h1><h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">%d 十进制有符号整数</span><br><span class="line">%u 十进制无符号整数</span><br><span class="line">%f 浮点数</span><br><span class="line">%c 单个字符</span><br><span class="line">%s 字符串</span><br><span class="line">%x 十六进制无符号整数</span><br><span class="line">%X 大写十六进制无符号整数</span><br></pre></td></tr></table></figure>



<h2 id="库变量"><a href="#库变量" class="headerlink" title="库变量"></a>库变量</h2><h3 id="size-t"><a href="#size-t" class="headerlink" title="size_t"></a>size_t</h3><p>无符号整数类型，它是 sizeof 关键字的结果。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span></span><br></pre></td></tr></table></figure>

<h3 id="FILE"><a href="#FILE" class="headerlink" title="FILE"></a>FILE</h3><p>文件流类型，适合存储文件流信息的对象类型。</p>
<h3 id="fpos-t"><a href="#fpos-t" class="headerlink" title="fpos_t"></a>fpos_t</h3><p>文件位置类型，适合存储文件中任何位置的对象类型。</p>
<h2 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h2><h3 id="printf"><a href="#printf" class="headerlink" title="printf()"></a>printf()</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// format：格式化字符串，用于指定输出的内容和格式。</span></span><br><span class="line"><span class="comment">// ...：可变参数，表示要输出的数据，可以是变量或值。</span></span><br><span class="line"><span class="comment">// 返回值：返回成功打印的字符数量（不包括格式字符串中的额外字符，如 \n、% 等）。如果发生错误，通常返回 -1。</span></span><br></pre></td></tr></table></figure>



<h3 id="sprintf"><a href="#sprintf" class="headerlink" title="sprintf()"></a>sprintf()</h3><p>用于将格式化的数据写入字符串。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sprintf</span><span class="params">(<span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// str: 一个字符数组，用于存储格式化后的输出结果。</span></span><br><span class="line"><span class="comment">// format: 一个格式字符串，指定输出的格式。</span></span><br><span class="line"><span class="comment">// ...: 根据格式字符串提供的其他参数，用于格式化输出。</span></span><br><span class="line"><span class="comment">// 返回值：返回写入 str 中的字符数，不包括结尾的 \0 字符。如果发生错误，返回一个负值。</span></span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> n = <span class="number">42</span>;</span><br><span class="line">    <span class="type">float</span> pi = <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 sprintf 格式化数据并写入 buffer</span></span><br><span class="line">    <span class="type">int</span> written = <span class="built_in">sprintf</span>(buffer, <span class="string">&quot;The answer is %d and pi is approximately %.2f.&quot;</span>, n, pi);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Formatted string: %s\n&quot;</span>, buffer);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Number of characters written: %d\n&quot;</span>, written);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Formatted <span class="built_in">string</span>: The answer is <span class="number">42</span> and pi is approximately <span class="number">3.14</span>.</span><br><span class="line">Number of characters written: <span class="number">46</span></span><br></pre></td></tr></table></figure>

<h3 id="snprintf"><a href="#snprintf" class="headerlink" title="snprintf()"></a>snprintf()</h3><p>用于将格式化的数据写入字符串。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">snprintf</span><span class="params">(<span class="type">char</span> *str, <span class="type">size_t</span> size, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// str: 一个字符数组，用于存储格式化后的输出。</span></span><br><span class="line"><span class="comment">// size: 字符数组的大小，即 str 能容纳的最大字符数（包括终止的 \0 字符）。</span></span><br><span class="line"><span class="comment">// format: 一个格式字符串，指定输出的格式。</span></span><br><span class="line"><span class="comment">// ...: 依据格式字符串提供的其他参数。</span></span><br><span class="line"><span class="comment">// 返回值：返回写入 str 中的字符数，不包括结尾的 \0 字符。如果返回值大于或等于 size，说明输出被截断了。</span></span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> n = <span class="number">42</span>;</span><br><span class="line">    <span class="type">float</span> pi = <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 snprintf 格式化数据并写入 buffer</span></span><br><span class="line">    <span class="type">int</span> written = <span class="built_in">snprintf</span>(buffer, <span class="keyword">sizeof</span>(buffer), <span class="string">&quot;The answer is %d and pi is approximately %.2f.&quot;</span>, n, pi);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Formatted string: %s\n&quot;</span>, buffer);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Number of characters written: %d\n&quot;</span>, written);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Formatted <span class="built_in">string</span>: The answer is <span class="number">42</span> and pi is approximately <span class="number">3.14</span>.</span><br><span class="line">Number of characters written: <span class="number">46</span></span><br></pre></td></tr></table></figure>
<h1 id="stdlib-h"><a href="#stdlib-h" class="headerlink" title="stdlib.h"></a>stdlib.h</h1><h2 id="库函数-1"><a href="#库函数-1" class="headerlink" title="库函数"></a>库函数</h2><h3 id="calloc"><a href="#calloc" class="headerlink" title="calloc()"></a>calloc()</h3><p>用于分配一块连续内存，并初始化为零。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">calloc</span><span class="params">(<span class="type">size_t</span> num, <span class="type">size_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// num：要分配的元素数量。</span></span><br><span class="line"><span class="comment">// size：每个元素的大小（字节数）。</span></span><br><span class="line"><span class="comment">// 返回值：返回一个 void* 类型的指针，指向分配的内存块。如果分配失败，返回 NULL。</span></span><br></pre></td></tr></table></figure>

<h3 id="malloc"><a href="#malloc" class="headerlink" title="malloc()"></a>malloc()</h3><p>用于动态分配指定字节数的内存空间，并返回指向这块内存的指针。内存内容未初始化，可能包含任意值（垃圾数据）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">malloc</span><span class="params">(<span class="type">size_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// size：要分配的内存块的字节数。</span></span><br><span class="line"><span class="comment">// 返回值：返回一个 void* 类型的指针，指向分配的内存块。如果分配失败，返回 NULL。</span></span><br></pre></td></tr></table></figure>

<h3 id="realloc"><a href="#realloc" class="headerlink" title="realloc()"></a>realloc()</h3><p>用于重新调整已经分配内存的大小。它可以增加或减少已分配内存的空间。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">realloc</span><span class="params">(<span class="type">void</span>* ptr, <span class="type">size_t</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ptr：指向已分配内存的指针。可以是 malloc 或 calloc 返回的指针。</span></span><br><span class="line"><span class="comment">// size：新的内存块大小（字节数）。</span></span><br><span class="line"><span class="comment">// 返回值：返回一个指向新分配内存的指针。</span></span><br></pre></td></tr></table></figure>

<h3 id="free"><a href="#free" class="headerlink" title="free()"></a>free()</h3><p>用于释放由 <code>malloc</code>、<code>calloc</code> 或 <code>realloc</code> 分配的动态内存，避免内存泄漏。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span>* ptr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ptr：指向要释放内存块的指针。</span></span><br></pre></td></tr></table></figure>



<h1 id="string-h"><a href="#string-h" class="headerlink" title="string.h"></a>string.h</h1><h2 id="strlen"><a href="#strlen" class="headerlink" title="strlen()"></a>strlen()</h2><p>用于计算字符串的长度。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">strlen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// str: 一个指向以 null 结尾的字符串的指针。</span></span><br><span class="line"><span class="comment">// 返回值：返回 str 字符串的长度，不包括末尾的 null 字符（&#x27;\0&#x27;）。</span></span><br></pre></td></tr></table></figure>

<h2 id="memset"><a href="#memset" class="headerlink" title="memset()"></a>memset()</h2><p>用于将一块内存区域的内容设置为指定的值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">memset</span><span class="params">(<span class="type">void</span>* ptr, <span class="type">int</span> value, <span class="type">size_t</span> num)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ptr: 指向要设置的内存块的指针。</span></span><br><span class="line"><span class="comment">// value: 要设置的值（以 int 类型传入，但实际上会转为 unsigned char 类型赋值）。</span></span><br><span class="line"><span class="comment">// num: 要设置的字节数。</span></span><br><span class="line"><span class="comment">// 返回值：memset 返回指向 ptr 的指针，通常用于链式调用。</span></span><br></pre></td></tr></table></figure>

<h2 id="memcmp"><a href="#memcmp" class="headerlink" title="memcmp()"></a>memcmp()</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">memcmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *s1, <span class="type">const</span> <span class="type">void</span> *s2, <span class="type">size_t</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// s1：指向第一个内存区域的指针。</span></span><br><span class="line"><span class="comment">// s2：指向第二个内存区域的指针。</span></span><br><span class="line"><span class="comment">// n：要比较的字节数。</span></span><br></pre></td></tr></table></figure>

<p>如果返回 <strong>0</strong>，则表示前 <code>n</code> 个字节内的内容相同。</p>
<p>如果返回非 0 值，则表示存在不同的字节。其具体含义为：</p>
<ul>
<li>返回一个 <strong>负值</strong>，表示在第一个不同的字节处，<code>s1</code> 的值小于 <code>s2</code> 中对应字节的值。</li>
<li>返回一个 <strong>正值</strong>，表示在第一个不同的字节处，<code>s1</code> 的值大于 <code>s2</code> 中对应字节的值。</li>
</ul>
<p>比较时，<code>memcmp</code> 会将每个字节当作 <code>unsigned char</code> 来处理，这样可以避免因为符号位的不同而导致的比较问题。</p>
<h2 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy()"></a>memcpy()</h2><p>通过逐字节复制的方式将一块内存数据从源地址拷贝到目标地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> *memcpy(<span class="keyword">void</span> *dest, const <span class="keyword">void</span> *src, size_t n);</span><br><span class="line"></span><br><span class="line"><span class="comment">// dest：目标内存地址（复制后的存储位置）。</span></span><br><span class="line"><span class="comment">// src：源内存地址（要复制的数据来源）。</span></span><br><span class="line"><span class="comment">// n：要复制的字节数。</span></span><br></pre></td></tr></table></figure>

<p>返回目标地址 <code>dest</code> 的指针。</p>
<h2 id="strdup"><a href="#strdup" class="headerlink" title="strdup()"></a>strdup()</h2><p>用于复制一个以空字符 (<code>\0</code>) 结尾的字符串。</p>
<p>它会动态分配足够的内存来存储原字符串的副本，并将原字符串的内容复制到新分配的内存中，最后返回指向新字符串的指针。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">strdup</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// s: 是要复制的源字符串（以 \0 结尾）。</span></span><br></pre></td></tr></table></figure>



<h1 id="time-h"><a href="#time-h" class="headerlink" title="time.h"></a>time.h</h1><h2 id="库变量-1"><a href="#库变量-1" class="headerlink" title="库变量"></a>库变量</h2><h3 id="size-t-1"><a href="#size-t-1" class="headerlink" title="size_t"></a>size_t</h3><p>无符号整型，sizeof运算符的结果。 </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span></span><br></pre></td></tr></table></figure>

<h3 id="clock-t"><a href="#clock-t" class="headerlink" title="clock_t"></a>clock_t</h3><p>表示处理器的时钟周期数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">clock_t</span>; <span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> <span class="type">clock_t</span>;</span><br></pre></td></tr></table></figure>

<h3 id="time-t"><a href="#time-t" class="headerlink" title="time_t"></a>time_t</h3><p>用于存储时间戳</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">time_t</span>; <span class="comment">//或者</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> <span class="type">time_t</span>;</span><br></pre></td></tr></table></figure>

<h3 id="struct-tm"><a href="#struct-tm" class="headerlink" title="struct tm"></a>struct tm</h3><p>tm 是一个结构体类型，用于表示具体的时间信息，通常是通过将时间戳（time_t）转换成更易于理解和操作的日期和时间格式。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> tm_sec;   <span class="comment">// 秒 (0-59)</span></span><br><span class="line">    <span class="type">int</span> tm_min;   <span class="comment">// 分 (0-59)</span></span><br><span class="line">    <span class="type">int</span> tm_hour;  <span class="comment">// 小时 (0-23)</span></span><br><span class="line">    <span class="type">int</span> tm_mday;  <span class="comment">// 一个月中的日期 (1-31)</span></span><br><span class="line">    <span class="type">int</span> tm_mon;   <span class="comment">// 月份 (0-11) -&gt; 0 表示 1 月，11 表示 12 月</span></span><br><span class="line">    <span class="type">int</span> tm_year;  <span class="comment">// 从 1900 年开始的年数 (例如，2024 年就是 124)</span></span><br><span class="line">    <span class="type">int</span> tm_wday;  <span class="comment">// 星期几 (0-6)，0 表示星期天</span></span><br><span class="line">    <span class="type">int</span> tm_yday;  <span class="comment">// 一年中的第几天 (0-365)，0 表示 1 月 1 日</span></span><br><span class="line">    <span class="type">int</span> tm_isdst; <span class="comment">// 夏令时标志，正值表示夏令时，0 表示非夏令时，负值表示信息不可用</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="库函数-2"><a href="#库函数-2" class="headerlink" title="库函数"></a>库函数</h2><h3 id="time"><a href="#time" class="headerlink" title="time()"></a>time()</h3><p><code>time()</code>函数用于获取当前时间戳。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">time_t</span> <span class="title function_">time</span><span class="params">(<span class="type">time_t</span> *timer)</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果参数为NULL或0，返回当前时间的time_t值。</li>
<li>如果传递一个有效指针，函数会将当前时间保存到指针所指向的变量中，并返回相同的值。</li>
</ul>
<h3 id="localtime"><a href="#localtime" class="headerlink" title="localtime()"></a>localtime()</h3><p>用于将 time_t 类型的时间值转换为结构化的本地时间格式（struct tm）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> tm* <span class="title function_">localtime</span><span class="params">(<span class="type">const</span> <span class="type">time_t</span>* timer)</span>;</span><br></pre></td></tr></table></figure>
<p>将 time_t 类型的时间转换为本地时间，返回一个 struct tm 结构，表示本地时间的各个组成部分（年、月、日、小时、分钟、秒等）。</p>
<h3 id="localtime-r"><a href="#localtime-r" class="headerlink" title="localtime_r()"></a>localtime_r()</h3><p>用于将 time_t 类型的时间值转换为结构化的本地时间格式（struct tm）。<br>由于它将结果存储在用户提供的缓冲区中，多个线程可以同时调用 localtime_r 而不会发生冲突，因此它是线程安全的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> tm* <span class="title function_">localtime_r</span><span class="params">(<span class="type">const</span> <span class="type">time_t</span>* timer, <span class="keyword">struct</span> tm* buf)</span>;</span><br></pre></td></tr></table></figure>
<h3 id="localtime-s"><a href="#localtime-s" class="headerlink" title="localtime_s()"></a>localtime_s()</h3><p>localtime_s 是 C11 标准引入的函数，功能和 localtime_r 类似。它将 time_t 转换为本地时间，并将结果存储在用户提供的缓冲区中。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> tm* <span class="title function_">localtime_s</span><span class="params">(<span class="type">const</span> <span class="type">time_t</span>* <span class="keyword">restrict</span> timer, <span class="keyword">struct</span> tm* <span class="keyword">restrict</span> buf)</span>;</span><br></pre></td></tr></table></figure>
<p>localtime_s 在 C11 标准中引入时，具有更严格的错误检查。如果出现错误（例如无效的时间值），通常会返回一个错误码，而不是直接返回 NULL。这增加了函数的安全性和可靠性。</p>
<h1 id="pthread-h"><a href="#pthread-h" class="headerlink" title="pthread.h"></a>pthread.h</h1><h2 id="库函数-3"><a href="#库函数-3" class="headerlink" title="库函数"></a>库函数</h2><h3 id="pthread-create"><a href="#pthread-create" class="headerlink" title="pthread_create()"></a>pthread_create()</h3><p>用于创建一个新的线程。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_create</span><span class="params">(<span class="type">pthread_t</span> *thread, <span class="type">const</span> <span class="type">pthread_attr_t</span> *attr, <span class="type">void</span> *(*start_routine)(<span class="type">void</span> *), <span class="type">void</span> *arg)</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>pthread_t *thread</code>:<br>  指向 pthread_t 类型的指针，用于存储新创建线程的线程 ID。</li>
<li><code>const pthread_attr_t *attr</code>:<br>  指向线程属性对象的指针，可以是 NULL，表示使用默认属性。</li>
<li><code>void *(*start_routine)(void *)</code>:<br>  线程的起始函数，这是一个函数指针，它指向一个函数，该函数接收一个 void * 类型的参数，并返回一个 void * 类型的值。</li>
<li><code>void *arg</code>:<br>  传递给起始函数的参数。</li>
<li><code>返回值</code><br>  成功返回0，否则返回错误码。</li>
</ul>
<h1 id="sched-h"><a href="#sched-h" class="headerlink" title="sched.h"></a>sched.h</h1><h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 系统调用版本（低级别）</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">clone</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> flags, <span class="type">void</span> *<span class="built_in">stack</span>, <span class="type">int</span> *parent_tid, <span class="type">int</span> *child_tid,</span></span><br><span class="line"><span class="params">          <span class="type">unsigned</span> <span class="type">long</span> tls)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// glibc包装版本（高级别）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">clone</span><span class="params">(<span class="type">int</span> (*fn)(<span class="type">void</span> *), <span class="type">void</span> *<span class="built_in">stack</span>, <span class="type">int</span> flags, <span class="type">void</span> *arg, ...</span></span><br><span class="line"><span class="params">          <span class="comment">/* pid_t *parent_tid, struct user_desc *tls, pid_t *child_tid */</span> )</span>;</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义栈大小</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_SIZE (1024 * 1024)  <span class="comment">// 1MB</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子线程函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">childFunc</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Child thread is running\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 分配栈空间</span></span><br><span class="line">    <span class="type">void</span> *<span class="built_in">stack</span> = <span class="built_in">malloc</span>(STACK_SIZE);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">stack</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;malloc failed&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用clone</span></span><br><span class="line">    <span class="type">int</span> flags = CLONE_VM | CLONE_FS | CLONE_FILES | CLONE_SIGHAND | </span><br><span class="line">                CLONE_THREAD | CLONE_SYSVSEM;</span><br><span class="line">                </span><br><span class="line">    <span class="type">pid_t</span> pid = clone(childFunc,</span><br><span class="line">                     (<span class="type">char</span> *)<span class="built_in">stack</span> + STACK_SIZE,  <span class="comment">// 栈顶</span></span><br><span class="line">                     flags,</span><br><span class="line">                     <span class="literal">NULL</span>);                       <span class="comment">// 参数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;clone failed&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(<span class="built_in">stack</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;clone() returned %d\n&quot;</span>, pid);</span><br><span class="line">    sleep(<span class="number">1</span>);  <span class="comment">// 给子线程一些运行时间</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">stack</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h1 id="sys-ptrace-h"><a href="#sys-ptrace-h" class="headerlink" title="sys&#x2F;ptrace.h"></a>sys&#x2F;ptrace.h</h1><h2 id="ptrace"><a href="#ptrace" class="headerlink" title="ptrace()"></a>ptrace()</h2><p><code>ptrace</code> 是 Unix&#x2F;Linux 系统中用于进程跟踪（tracing）和调试的重要系统调用，它允许一个进程（通常是调试器）控制和监视另一个进程（通常是被调试的子进程）的执行情况，包括读取和修改目标进程的内存、寄存器等信息。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span>       </span></span><br><span class="line"><span class="type">long</span> <span class="title function_">ptrace</span><span class="params">(<span class="keyword">enum</span> __ptrace_request request, <span class="type">pid_t</span> pid, <span class="type">void</span> *addr, <span class="type">void</span> *data)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// request：要执行的操作类型；</span></span><br><span class="line"><span class="comment">// pid：被追踪的目标进程ID；</span></span><br><span class="line"><span class="comment">// addr：被监控的目标内存地址；</span></span><br><span class="line"><span class="comment">// data：保存读取出或者要写入的数据。</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>DYM登录参数逆向</title>
    <url>/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.yoloho.dayima</p>
<p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/1.jpg"></p>
<h1 id="root检测"><a href="#root检测" class="headerlink" title="root检测"></a>root检测</h1><p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/3.jpg"></p>
<h2 id="狐妖面具"><a href="#狐妖面具" class="headerlink" title="狐妖面具"></a>狐妖面具</h2><p>使用狐妖面具配置排除列表</p>
<h2 id="脚本绕过"><a href="#脚本绕过" class="headerlink" title="脚本绕过"></a>脚本绕过</h2><p>开源项目脚本：<a href="https://github.com/AshenOneYe/FridaAntiRootDetection">https://github.com/AshenOneYe/FridaAntiRootDetection</a></p>
<p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/2.jpg"></p>
<h3 id="反编译Apk找root检测逻辑"><a href="#反编译Apk找root检测逻辑" class="headerlink" title="反编译Apk找root检测逻辑"></a>反编译Apk找root检测逻辑</h3><p>Jadx搜索<code>Root设备</code></p>
<p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/4.jpg"></p>
<p>双击跳转</p>
<p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/5.jpg"></p>
<h3 id="isRooted"><a href="#isRooted" class="headerlink" title="isRooted()"></a>isRooted()</h3><p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/6.jpg"></p>
<p>这里直接返回<code>false</code>就可以了</p>
<h3 id="isSimulater"><a href="#isSimulater" class="headerlink" title="isSimulater()"></a>isSimulater()</h3><p>获取<code>build.prop</code>文件中的属性进行检测，返回<code>false</code>即可。</p>
<h3 id="hook-root"><a href="#hook-root" class="headerlink" title="hook_root"></a>hook_root</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_root</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">MiscUtil</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.yoloho.libcore.util.MiscUtil&quot;</span>);</span><br><span class="line">        <span class="title class_">MiscUtil</span>[<span class="string">&quot;isRooted&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`MiscUtil.isRooted is called`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;isRooted&quot;</span>]();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`MiscUtil.isRooted result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就可以进入app了</p>
<h1 id="登录抓包分析"><a href="#登录抓包分析" class="headerlink" title="登录抓包分析"></a>登录抓包分析</h1><p>输入账号密码：18888888888 12345678</p>
<p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/7.jpg"></p>
<h2 id="抓包数据"><a href="#抓包数据" class="headerlink" title="抓包数据"></a>抓包数据</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">url<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//uicapi.yoloho.com/user/login</span></span><br><span class="line">params<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;device&quot;</span><span class="punctuation">:</span> <span class="string">&quot;63122cb8da575c7e71ace0dccb1e35b0f2a43758&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;900&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;screen_width&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1080&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;screen_height&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2028&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pixel 3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sdkver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;29&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;platform&quot;</span><span class="punctuation">:</span> <span class="string">&quot;android&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;releasever&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;channel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vivobbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;latt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lngt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;networkType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;userStatus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;oaid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;installDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">headers<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Accept-Encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gzip&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;User-Agent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mozilla/5.0 (Linux; Android 10; Pixel 3 Build/QQ3A.200705.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/74.0.3729.186 Mobile Safari/537.36&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Content-Length&quot;</span><span class="punctuation">:</span> <span class="string">&quot;211&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Content-Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/x-www-form-urlencoded&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uicapi.yoloho.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Connection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Keep-Alive&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">body<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;18888888888&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ET4Sdfjs+/VkbhxXerUBFg==&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sign&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c6337760363ed264b287178c340f9cb8&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;androidid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9000290bea7be29b&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mac&quot;</span><span class="punctuation">:</span> <span class="string">&quot;EE:9E:96:57:AB:FD&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;imei&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;density&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.75&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;google&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;oaid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;installDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这里面需要解的参数有<code>device</code>、<code>password</code>、<code>sign</code></p>
<h1 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h1><h2 id="device参数"><a href="#device参数" class="headerlink" title="device参数"></a>device参数</h2><p>jadx搜索<code>device</code>，出现很多结果，可以双击每个结果查看他们的上下文中的其他参数与接口中的参数进行比较，定位到<code>device</code>参数的位置。也可以搜索接口中其他参数，在其他参数的上下文中可以找到<code>device</code>。</p>
<p>定位到如下位置。</p>
<p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/8.jpg"></p>
<p><code>device</code>的值是经过URL编码后的<code>getDeviceCode()</code>的值</p>
<h3 id="getDeviceCode"><a href="#getDeviceCode" class="headerlink" title="getDeviceCode()"></a>getDeviceCode()</h3><p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/9.jpg"></p>
<p>这里面通过<code>setDeviceCode</code>方法来设置device的值</p>
<h3 id="setDeviceCode"><a href="#setDeviceCode" class="headerlink" title="setDeviceCode()"></a>setDeviceCode()</h3><p>如下是源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDeviceCode</span><span class="params">()</span> &#123;</span><br><span class="line">    String str;</span><br><span class="line">    String str2;</span><br><span class="line">    String str3;</span><br><span class="line">    <span class="keyword">if</span> (NetUtil.getSharedPreferences(SettingsConfig.KEY_USER_PERMISSION, <span class="literal">false</span>) &amp;&amp; deviceCode == <span class="literal">null</span>) &#123;</span><br><span class="line">        deviceCode = <span class="string">&quot;NotFound&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                str = Build.BOARD + Build.BRAND + Build.CPU_ABI + Build.DEVICE + Build.DISPLAY + Build.HOST + Build.ID + Build.MANUFACTURER + Build.MODEL + Build.PRODUCT + Build.TAGS + Build.TYPE + Build.USER;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">                e2.printStackTrace();</span><br><span class="line">                str = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                str2 = AppInfo.getAndroidId();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e3) &#123;</span><br><span class="line">                e3.printStackTrace();</span><br><span class="line">                str2 = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                str3 = DayimaUtil.getPhoneMac();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e4) &#123;</span><br><span class="line">                e4.printStackTrace();</span><br><span class="line">                str3 = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (!Build.MODEL.equals(<span class="string">&quot;vivo X1w&quot;</span>) || !Build.VERSION.RELEASE.equals(FaceEnvironment.SDK_VERSION)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">BluetoothAdapter</span> <span class="variable">defaultAdapter</span> <span class="operator">=</span> BluetoothAdapter.getDefaultAdapter();</span><br><span class="line">                    <span class="keyword">if</span> (defaultAdapter != <span class="literal">null</span>) &#123;</span><br><span class="line">                        str4 = defaultAdapter.getAddress();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str5</span> <span class="operator">=</span> ((String) <span class="literal">null</span>) + str2 + str + str3 + str4;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">messageDigest</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;sha-1&quot;</span>);</span><br><span class="line">            messageDigest.update(str5.getBytes());</span><br><span class="line">            <span class="type">byte</span>[] digest = messageDigest.digest();</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">byte</span> b : digest) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">lowerCase</span> <span class="operator">=</span> Integer.toHexString(b &amp; <span class="number">255</span>).toLowerCase(Locale.getDefault());</span><br><span class="line">                <span class="keyword">if</span> (lowerCase.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                    lowerCase = <span class="string">&quot;0&quot;</span> + lowerCase;</span><br><span class="line">                &#125;</span><br><span class="line">                stringBuffer.append(lowerCase);</span><br><span class="line">            &#125;</span><br><span class="line">            deviceCode = stringBuffer.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>这里面先是拼接了一个字符串<code>String str5 = ((String) null) + str2 + str + str3 + str4;</code>然后对这个字符串进行了<code>sha1</code>签名</p>
<p><strong>str2</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str2 = AppInfo.getAndroidId(); </span><br></pre></td></tr></table></figure>

<p>获取AndroidId</p>
<p><strong>str</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str = Build.BOARD + Build.BRAND + Build.CPU_ABI + Build.DEVICE + Build.DISPLAY + Build.HOST + Build.ID + Build.MANUFACTURER + Build.MODEL + Build.PRODUCT + Build.TAGS + Build.TYPE + Build.USER;</span><br></pre></td></tr></table></figure>

<p>设备指纹信息</p>
<p><strong>str3</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str3 = DayimaUtil.getPhoneMac();</span><br></pre></td></tr></table></figure>

<p>获取设备Mac地址</p>
<p><strong>str4</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str4 = defaultAdapter.getAddress();</span><br></pre></td></tr></table></figure>

<p>获取的是蓝牙地址</p>
<p>把这些内容拼接起来进行SHA1签名，然后全小写就是deviceid值</p>
<h3 id="hook-setDeviceCode"><a href="#hook-setDeviceCode" class="headerlink" title="hook setDeviceCode"></a>hook setDeviceCode</h3><p>通过hook查看传入的参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_device</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">PeriodAPIV2</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.yoloho.controller.api.PeriodAPIV2&quot;</span>);</span><br><span class="line">        <span class="title class_">PeriodAPIV2</span>[<span class="string">&quot;setDeviceCode&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`========== PeriodAPIV2.setDeviceCode is called ==========`</span>);</span><br><span class="line">            <span class="variable language_">this</span>[<span class="string">&quot;setDeviceCode&quot;</span>]();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> messageDigest = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.MessageDigest&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">ByteString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>);</span><br><span class="line">        messageDigest.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MessageDigest.update(&#x27;[B&#x27;) is called!&quot;</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ByteString</span>.<span class="title function_">of</span>(data).<span class="title function_">utf8</span>());</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;-------------------------------------------------------&quot;</span>);</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_device</span>();</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">========== PeriodAPIV2.setDeviceCode is called ==========</span><br><span class="line">MessageDigest.update(&#x27;[B&#x27;) is called! </span><br><span class="line">null9000290bea7be29bbluelinegooglearm64-v8abluelineQQ3A.200705.002abfarm836QQ3A.200705.002GooglePixel 3bluelinerelease-keysuserandroid-buildEE:9E:96:57:AB:FD02:00:00:00:00:00</span><br><span class="line">-------------------------------------------------------</span><br></pre></td></tr></table></figure>

<h2 id="password参数"><a href="#password参数" class="headerlink" title="password参数"></a>password参数</h2><p>搜索<code>password</code></p>
<p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/10.jpg"></p>
<p><code>privateStrHandle</code>的值是通过<code>privateStrHandle()</code>方法返回的，它传入的参数是密码和用户名</p>
<h3 id="privateStrHandle"><a href="#privateStrHandle" class="headerlink" title="privateStrHandle()"></a>privateStrHandle()</h3><p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/11.jpg"></p>
<p>通过AES加密返回一个<code>encrypt</code></p>
<p>这里的三个参数，第一个参数明文是密码，第二个参数密钥是用户名进行MD5后取前16字节然后转小写，第三个参数iv向量是<code>yoloho_dayima!%_</code></p>
<h3 id="hook-privateStrHandle"><a href="#hook-privateStrHandle" class="headerlink" title="hook privateStrHandle()"></a>hook privateStrHandle()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_aes</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="keyword">let</span> <span class="title class_">DayimaPrivateUtil</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.yoloho.libcore.util.DayimaPrivateUtil&quot;</span>);</span><br><span class="line">        <span class="title class_">DayimaPrivateUtil</span>[<span class="string">&quot;privateStrHandle&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">str, str2</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`DayimaPrivateUtil.privateStrHandle is called: str=<span class="subst">$&#123;str&#125;</span>, str2=<span class="subst">$&#123;str2&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;privateStrHandle&quot;</span>](str, str2);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`DayimaPrivateUtil.privateStrHandle result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_aes</span>();</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DayimaPrivateUtil.privateStrHandle is called: str=12345678, str2=18888888888</span><br><span class="line">DayimaPrivateUtil.privateStrHandle result=ET4Sdfjs+/VkbhxXerUBFg==</span><br></pre></td></tr></table></figure>

<h3 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h3><p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/12.jpg"></p>
<p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/13.jpg"></p>
<p>没问题</p>
<h2 id="sign参数还原"><a href="#sign参数还原" class="headerlink" title="sign参数还原"></a>sign参数还原</h2><p>找到<code>sign</code>的生成位置</p>
<p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/14.jpg"></p>
<p>它是通过<code>Crypt.encrypt_data()</code>方法生成的，它里面的参数是由<code>DeviceCode</code>、<code>&quot;user/login&quot;</code>、<code>str</code>、<code>str2</code>拼接而成的</p>
<h3 id="encrypt-data"><a href="#encrypt-data" class="headerlink" title="encrypt_data()"></a>encrypt_data()</h3><p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/15.jpg"></p>
<p>这是一个native方法</p>
<h3 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h3><p>找到静态函数</p>
<p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/16.jpg"></p>
<p>双击跳转</p>
<p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/17.jpg"></p>
<h4 id="sub-1DA0"><a href="#sub-1DA0" class="headerlink" title="sub_1DA0()"></a>sub_1DA0()</h4><p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/18.jpg"></p>
<p>接下来使用rpc调用</p>
<h3 id="hook-encrypt-data"><a href="#hook-encrypt-data" class="headerlink" title="hook encrypt_data()"></a>hook encrypt_data()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_encrypt_data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">Crypt</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.yoloho.libcore.util.Crypt&quot;</span>);</span><br><span class="line">        <span class="title class_">Crypt</span>[<span class="string">&quot;encrypt_data&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">j2, str, j3</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Crypt.encrypt_data is called: j2=<span class="subst">$&#123;j2&#125;</span>, str=<span class="subst">$&#123;str&#125;</span>, j3=<span class="subst">$&#123;j3&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;encrypt_data&quot;</span>](j2, str, j3);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Crypt.encrypt_data result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_encrypt_data</span>();</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Crypt.encrypt_data is called: j2=0, str=63122cb8da575c7e71ace0dccb1e35b0f2a43758user/login18888888888ET4Sdfjs+/VkbhxXerUBFg==, j3=85</span><br><span class="line">Crypt.encrypt_data result=c6337760363ed264b287178c340f9cb8</span><br></pre></td></tr></table></figure>

<h3 id="rpc"><a href="#rpc" class="headerlink" title="rpc"></a>rpc</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">device = frida.get_remote_device()</span><br><span class="line">process = device.attach(<span class="string">&quot;大姨妈&quot;</span>)</span><br><span class="line"></span><br><span class="line">js_code = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">rpc.exports = &#123;</span></span><br><span class="line"><span class="string">    endata: function (j2,str,j3) &#123;</span></span><br><span class="line"><span class="string">        var res;</span></span><br><span class="line"><span class="string">        Java.perform(function () &#123;</span></span><br><span class="line"><span class="string">            let Crypt = Java.use(&quot;com.yoloho.libcore.util.Crypt&quot;);</span></span><br><span class="line"><span class="string">            let encrypted_data = Crypt.encrypt_data(j2,str,j3);</span></span><br><span class="line"><span class="string">            res = encrypted_data;</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">        return res;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">script = process.create_script(js_code)</span><br><span class="line">script.load()</span><br><span class="line">en_data = script.exports_sync.endata(<span class="number">0</span>, <span class="string">&quot;63122cb8da575c7e71ace0dccb1e35b0f2a43758user/login18888888888ET4Sdfjs+/VkbhxXerUBFg==&quot;</span>, <span class="number">85</span>)</span><br><span class="line"><span class="built_in">print</span>(en_data) <span class="comment"># c6337760363ed264b287178c340f9cb8</span></span><br></pre></td></tr></table></figure>



<h1 id="Python实现登录"><a href="#Python实现登录" class="headerlink" title="Python实现登录"></a>Python实现登录</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://uicapi.yoloho.com/user/login&quot;</span></span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">  <span class="string">&quot;device&quot;</span>: <span class="string">&quot;63122cb8da575c7e71ace0dccb1e35b0f2a43758&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ver&quot;</span>: <span class="string">&quot;900&quot;</span>,</span><br><span class="line">  <span class="string">&quot;screen_width&quot;</span>: <span class="string">&quot;1080&quot;</span>,</span><br><span class="line">  <span class="string">&quot;screen_height&quot;</span>: <span class="string">&quot;2028&quot;</span>,</span><br><span class="line">  <span class="string">&quot;model&quot;</span>: <span class="string">&quot;Pixel 3&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sdkver&quot;</span>: <span class="string">&quot;29&quot;</span>,</span><br><span class="line">  <span class="string">&quot;platform&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">  <span class="string">&quot;releasever&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">  <span class="string">&quot;channel&quot;</span>: <span class="string">&quot;vivobbg&quot;</span>,</span><br><span class="line">  <span class="string">&quot;latt&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;lngt&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;networkType&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;token&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;userStatus&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;oaid&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;installDate&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip&quot;</span>,</span><br><span class="line">  <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 10; Pixel 3 Build/QQ3A.200705.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/74.0.3729.186 Mobile Safari/537.36&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;211&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;uicapi.yoloho.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;Keep-Alive&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body = &#123;</span><br><span class="line">  <span class="string">&quot;username&quot;</span>: <span class="string">&quot;18888888888&quot;</span>,</span><br><span class="line">  <span class="string">&quot;password&quot;</span>: <span class="string">&quot;ET4Sdfjs+/VkbhxXerUBFg==&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sign&quot;</span>: <span class="string">&quot;c6337760363ed264b287178c340f9cb8&quot;</span>,</span><br><span class="line">  <span class="string">&quot;androidid&quot;</span>: <span class="string">&quot;9000290bea7be29b&quot;</span>,</span><br><span class="line">  <span class="string">&quot;mac&quot;</span>: <span class="string">&quot;EE:9E:96:57:AB:FD&quot;</span>,</span><br><span class="line">  <span class="string">&quot;imei&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;density&quot;</span>: <span class="string">&quot;2.75&quot;</span>,</span><br><span class="line">  <span class="string">&quot;brand&quot;</span>: <span class="string">&quot;google&quot;</span>,</span><br><span class="line">  <span class="string">&quot;oaid&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;installDate&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, params=params, headers=headers, data=body)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>



<h1 id="Unidbg调用encrypt-data"><a href="#Unidbg调用encrypt-data" class="headerlink" title="Unidbg调用encrypt_data()"></a>Unidbg调用encrypt_data()</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="comment">// 声明模拟器、内存和虚拟机（VM）实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MainActivity 的构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MainActivity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化 64 位架构的 Android 模拟器</span></span><br><span class="line">        emulator = AndroidEmulatorBuilder</span><br><span class="line">                .for64Bit()</span><br><span class="line">                .build();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从模拟器获取内存实例</span></span><br><span class="line">        memory = emulator.getMemory();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置模拟器的库解析器，API 级别为 23</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用指定的 APK 文件创建 Dalvik VM 实例</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/java/com/dym/encryptdata/DYM_8.9.0.apk&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 为 VM 设置 JNI（Java Native Interface）</span></span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 启用 VM 的详细日志记录</span></span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将本地库 &quot;Crypt&quot; 加载到 VM 中</span></span><br><span class="line">        vm.loadLibrary(<span class="string">&quot;Crypt&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 Crypt 类加密数据的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">encrypt_data</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 从 VM 中解析 Crypt 类</span></span><br><span class="line">        <span class="type">DvmClass</span> <span class="variable">Crypt</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.yoloho.libcore.util.Crypt&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用 Crypt 类中的静态 JNI 方法 &quot;encrypt_data&quot;</span></span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">stringObject</span> <span class="operator">=</span> Crypt.callStaticJniMethodObject(emulator, </span><br><span class="line">            <span class="string">&quot;encrypt_data(JLjava/lang/String;J)Ljava/lang/String;&quot;</span>, </span><br><span class="line">            <span class="number">0</span>, </span><br><span class="line">            <span class="string">&quot;63122cb8da575c7e71ace0dccb1e35b0f2a43758user/login18888888888ET4Sdfjs+/VkbhxXerUBFg==&quot;</span>, </span><br><span class="line">            <span class="number">85</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从 StringObject 中获取结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> stringObject.getValue();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将结果打印到控制台</span></span><br><span class="line">        System.out.println(<span class="string">&quot;result=&quot;</span> + result); <span class="comment">// c6337760363ed264b287178c340f9cb8</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行应用程序的主方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 MainActivity 的实例并调用 encrypt_data 方法</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MainActivity</span>().encrypt_data(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="在安卓项目中调用别人的so中的函数"><a href="#在安卓项目中调用别人的so中的函数" class="headerlink" title="在安卓项目中调用别人的so中的函数"></a>在安卓项目中调用别人的so中的函数</h1><h2 id="新建安卓项目"><a href="#新建安卓项目" class="headerlink" title="新建安卓项目"></a>新建安卓项目</h2><p>在app目录下新建一个<code>libs</code>目录，把<code>libCrypt.so</code>放到<code>libs</code>目录下</p>
<p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/19.jpg"></p>
<p>在<code>build.gradle.kts</code>中的<code>android</code>里添加如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    getByName(&quot;main&quot;) &#123;</span><br><span class="line">        jniLibs.srcDirs(&quot;libs&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>新建一个包，包名必须要与方法所在的包一致，<code>com.yoloho.libcore.util</code></p>
<p>新建一个类，类名也要与方法所在的类一致，<code>DayimaPrivateUtil</code></p>
<p>添加代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yoloho.libcore.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Crypt</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;Crypt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">encrypt_data</span><span class="params">(<span class="type">long</span> j2, String str, <span class="type">long</span> j3)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> Crypt.encrypt_data(<span class="number">0</span>,<span class="string">&quot;63122cb8da575c7e71ace0dccb1e35b0f2a43758user/login18888888888ET4Sdfjs+/VkbhxXerUBFg==&quot;</span>,<span class="number">85</span>);</span><br><span class="line"><span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> findViewById(R.id.textview);</span><br><span class="line">tv.setText(sign);</span><br></pre></td></tr></table></figure>

<p>效果</p>
<p><img src="/2025/02/18/DYM%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/20.jpg"></p>
]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>DYM</tag>
      </tags>
  </entry>
  <entry>
    <title>B站播放量及完播率接口逆向</title>
    <url>/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/</url>
    <content><![CDATA[<h1 id="APP信息"><a href="#APP信息" class="headerlink" title="APP信息"></a>APP信息</h1><p>包名：tv.danmaku.bili</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/1.jpg" alt="1"></p>
<h1 id="抓包分析数据包"><a href="#抓包分析数据包" class="headerlink" title="抓包分析数据包"></a>抓包分析数据包</h1><p>抓包工具开启之后，打开bilibili，随便点一个视频，分析数据包，找到相关数据包</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/2.jpg" alt="1"></p>
<h2 id="分析请求体"><a href="#分析请求体" class="headerlink" title="分析请求体"></a>分析请求体</h2><p>请求体是一堆二进制信息</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/3.jpg" alt="1"></p>
<h2 id="反编译apk"><a href="#反编译apk" class="headerlink" title="反编译apk"></a>反编译apk</h2><h3 id="reportClick"><a href="#reportClick" class="headerlink" title="reportClick"></a>reportClick</h3><p>搜索<code>/x/report/click/android2</code>，找到一个接口，接口里定义了<code>reportClick</code>方法</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/4.jpg" alt="1"></p>
<p>查找用例，在如下方法中有对<code>reportClick</code>方法的调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">long</span> j2;</span><br><span class="line">    <span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> c2.f.f.c.j.a.i() / <span class="number">1000</span>;</span><br><span class="line">    c2.f.b0.c.b.b.a.<span class="type">a</span> <span class="variable">E</span> <span class="operator">=</span> c2.f.b0.c.b.b.a.a.E();</span><br><span class="line">    x.h(E, <span class="string">&quot;EnvironmentPrefHelper.getInstance()&quot;</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">A</span> <span class="operator">=</span> E.A();</span><br><span class="line">    <span class="keyword">if</span> (A == -<span class="number">1</span>) &#123;</span><br><span class="line">        c2.f.b0.c.b.b.a.<span class="type">a</span> <span class="variable">E2</span> <span class="operator">=</span> c2.f.b0.c.b.b.a.a.E();</span><br><span class="line">        x.h(E2, <span class="string">&quot;EnvironmentPrefHelper.getInstance()&quot;</span>);</span><br><span class="line">        E2.V(i);</span><br><span class="line">        j2 = i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        j2 = A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">byte</span>[] H7 = d.<span class="built_in">this</span>.H7(<span class="built_in">this</span>.b.a(), <span class="built_in">this</span>.b.b(), <span class="built_in">this</span>.b.h(), i, j2, <span class="built_in">this</span>.b.n(), <span class="built_in">this</span>.b.m(), <span class="built_in">this</span>.b.k(), <span class="built_in">this</span>.b.c(), <span class="built_in">this</span>.b.e(), <span class="built_in">this</span>.b.l(), <span class="built_in">this</span>.b.f());</span><br><span class="line">    tv.danmaku.biliplayerimpl.report.heartbeat.<span class="type">a</span> <span class="variable">aVar</span> <span class="operator">=</span> (tv.danmaku.biliplayerimpl.report.heartbeat.a) com.bilibili.okretro.c.a(tv.danmaku.biliplayerimpl.report.heartbeat.a.class);</span><br><span class="line">    <span class="type">c0</span> <span class="variable">create</span> <span class="operator">=</span> c0.create(w.d(com.hpplay.sdk.source.protocol.h.E), H7);</span><br><span class="line">    x.h(create, <span class="string">&quot;RequestBody.create(Media…ion/octet-stream\&quot;), body)&quot;</span>);</span><br><span class="line">    l&lt;String&gt; execute = aVar.reportClick(create).execute();</span><br><span class="line">    BLog.i(<span class="string">&quot;HeartBeatTracker&quot;</span>, <span class="string">&quot;player report click(vv): responseCode:&quot;</span> + execute.b() + <span class="string">&quot;, responseMsg:&quot;</span> + execute.h() + <span class="string">&quot;, responseBody:&quot;</span> + execute.a());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析<code>reportClick</code>方法的参数<code>create</code>的生成过程，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create参数通过c0.create(w.d(com.hpplay.sdk.source.protocol.h.E), H7)方法得到</span><br><span class="line">com.hpplay.sdk.source.protocol.h.E的值是&quot;application/octet-stream&quot;，还有一个H7参数</span><br><span class="line">H7参数通过d.this.H7()方法得到</span><br><span class="line">byte[] H7 = d.this.H7(this.b.a(), this.b.b(), this.b.h(), i, j2, this.b.n(), this.b.m(), this.b.k(), this.b.c(), this.b.e(), this.b.l(), this.b.f());</span><br></pre></td></tr></table></figure>

<h3 id="d-this-H7"><a href="#d-this-H7" class="headerlink" title="d.this.H7()"></a>d.this.H7()</h3><p>其源码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">byte</span>[] H7(<span class="type">long</span> j2, <span class="type">long</span> j4, <span class="type">int</span> i, <span class="type">long</span> j5, <span class="type">long</span> j6, <span class="type">int</span> i2, <span class="type">int</span> i3, <span class="type">long</span> j7, String str, <span class="type">int</span> i4, String str2, String str3) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="type">long</span> j8;</span><br><span class="line">       <span class="type">int</span> i5;</span><br><span class="line">       <span class="type">Application</span> <span class="variable">f2</span> <span class="operator">=</span> BiliContext.f();</span><br><span class="line">       com.bilibili.lib.accounts.<span class="type">b</span> <span class="variable">client</span> <span class="operator">=</span> com.bilibili.lib.accounts.b.f(f2);</span><br><span class="line">       <span class="type">AccountInfo</span> <span class="variable">h</span> <span class="operator">=</span> BiliAccountInfo.f.a().h();</span><br><span class="line">       <span class="keyword">if</span> (h != <span class="literal">null</span>) &#123;</span><br><span class="line">           j8 = h.getMid();</span><br><span class="line">           i5 = h.getLevel();</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           j8 = <span class="number">0</span>;</span><br><span class="line">           i5 = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">TreeMap</span> <span class="variable">treeMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>();</span><br><span class="line">       treeMap.put(<span class="string">&quot;aid&quot;</span>, String.valueOf(j2));</span><br><span class="line">       treeMap.put(<span class="string">&quot;cid&quot;</span>, String.valueOf(j4));</span><br><span class="line">       treeMap.put(<span class="string">&quot;part&quot;</span>, String.valueOf(i));</span><br><span class="line">       treeMap.put(EditCustomizeSticker.TAG_MID, String.valueOf(j8));</span><br><span class="line">       treeMap.put(<span class="string">&quot;lv&quot;</span>, String.valueOf(i5));</span><br><span class="line">       treeMap.put(<span class="string">&quot;ftime&quot;</span>, String.valueOf(j6));</span><br><span class="line">       treeMap.put(<span class="string">&quot;stime&quot;</span>, String.valueOf(j5));</span><br><span class="line">       treeMap.put(<span class="string">&quot;did&quot;</span>, com.bilibili.lib.biliid.utils.f.a.c(f2));</span><br><span class="line">       treeMap.put(<span class="string">&quot;type&quot;</span>, String.valueOf(i2));</span><br><span class="line">       treeMap.put(<span class="string">&quot;sub_type&quot;</span>, String.valueOf(i3));</span><br><span class="line">       treeMap.put(<span class="string">&quot;sid&quot;</span>, String.valueOf(j7));</span><br><span class="line">       treeMap.put(<span class="string">&quot;epid&quot;</span>, str);</span><br><span class="line">       treeMap.put(<span class="string">&quot;auto_play&quot;</span>, String.valueOf(i4));</span><br><span class="line">       x.h(client, <span class="string">&quot;client&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (client.r()) &#123;</span><br><span class="line">           treeMap.put(<span class="string">&quot;access_key&quot;</span>, client.g());</span><br><span class="line">       &#125;</span><br><span class="line">       treeMap.put(<span class="string">&quot;build&quot;</span>, String.valueOf(com.bilibili.api.a.f()));</span><br><span class="line">       treeMap.put(<span class="string">&quot;mobi_app&quot;</span>, com.bilibili.api.a.l());</span><br><span class="line">       treeMap.put(<span class="string">&quot;spmid&quot;</span>, str2);</span><br><span class="line">       treeMap.put(<span class="string">&quot;from_spmid&quot;</span>, str3);</span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">       <span class="keyword">for</span> (Map.Entry entry : treeMap.entrySet()) &#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> (String) entry.getKey();</span><br><span class="line">           <span class="type">String</span> <span class="variable">str5</span> <span class="operator">=</span> (String) entry.getValue();</span><br><span class="line">           sb.append(str4);</span><br><span class="line">           sb.append(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">           <span class="keyword">if</span> (str5 == <span class="literal">null</span>) &#123;</span><br><span class="line">               str5 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           sb.append(str5);</span><br><span class="line">           sb.append(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">sb2</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">       x.h(sb2, <span class="string">&quot;builder.toString()&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">b2</span> <span class="operator">=</span> t3.a.i.a.a.a.b.e.b(sb2);</span><br><span class="line">       BLog.i(<span class="string">&quot;HeartBeatTracker&quot;</span>, <span class="string">&quot;player report click(vv), params: &quot;</span> + sb2 + <span class="string">&quot; &amp; sign=&quot;</span> + b2);</span><br><span class="line">       sb.append(<span class="string">&quot;&amp;sign=&quot;</span>);</span><br><span class="line">       sb.append(b2);</span><br><span class="line">       <span class="type">String</span> <span class="variable">sb3</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">       x.h(sb3, <span class="string">&quot;builder.toString()&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> t3.a.i.a.a.a.b.e.a(sb3);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>分析</p>
<p>H7方法里的参数都放进了treeMap里，然后通过<code>&amp;</code>拼接成字符串，调用了<code>t3.a.i.a.a.a.b.e.b()</code>方法进行签名，签名结果通过<code>&amp;</code>符号拼接到字符串末尾，最后再调用一个<code>t3.a.i.a.a.a.b.e.a()</code>方法</p>
<h4 id="hook-H7"><a href="#hook-H7" class="headerlink" title="hook H7"></a>hook H7</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">ByteString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">ByteString</span>.<span class="title function_">of</span>(data).<span class="title function_">hex</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_h7</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> d = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;tv.danmaku.biliplayerimpl.report.heartbeat.d&quot;</span>);</span><br><span class="line">        d[<span class="string">&quot;H7&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">j2, j4, i, j5, j6, i2, i3, j7, str, i4, str2, str3</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`d.H7 is called: j2=<span class="subst">$&#123;j2&#125;</span>, j4=<span class="subst">$&#123;j4&#125;</span>, i=<span class="subst">$&#123;i&#125;</span>, j5=<span class="subst">$&#123;j5&#125;</span>, j6=<span class="subst">$&#123;j6&#125;</span>, i2=<span class="subst">$&#123;i2&#125;</span>, i3=<span class="subst">$&#123;i3&#125;</span>, j7=<span class="subst">$&#123;j7&#125;</span>, str=<span class="subst">$&#123;str&#125;</span>, i4=<span class="subst">$&#123;i4&#125;</span>, str2=<span class="subst">$&#123;str2&#125;</span>, str3=<span class="subst">$&#123;str3&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;H7&quot;</span>](j2, j4, i, j5, j6, i2, i3, j7, str, i4, str2, str3);</span><br><span class="line">            <span class="comment">// console.log(`d.H7 result=$&#123;Java.use(&quot;java.lang.String&quot;).$new(result)&#125;`);</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;to hex result:&quot;</span>,<span class="title function_">toHex</span>(result));</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d.H7 is called: j2=113886342676927, j4=28065268176, i=1, j5=1737979363, j6=1737960450, i2=3, i3=0, j7=0, str=, i4=0, str2=main.ugc-video-detail.0.0, str3=tm.recommend.0.0</span><br><span class="line">to hex result: b2eadf0bc65f99660f2ffbe874d802918231b6f0445bbf1c005253f1b42c251a61835063707effd59fc5800b4377d4241b252ec063dd6ca55f66a738ce7d5de3d5ef17d04714e17e0d3b592e18109e4e4d8d534666159c204dd8c31ec68c92355f57ce3798454155d57b360d9855dc4d8b131dcb9befebe638635b103d40b0f66d33c283c6dd28b49d38e724f7f7abcb7ba16a7a150941bd301275e326c56e89e97210c18b36437fa4d6fde0f7911cbb7b2e80e56051a9f9f7e238ca20da5dbd6481362a85afceb73e55816d6ff8d7f740a5d8c8e3a0c6779ba406f400cb34936c6e1d3534bf0ed2eee6ce743fcf0ce8fd8ac478980f3dc6f1aac8de96e2be031e1e5f7a32bf06ec73840f4632728a576c9d2f4fa6fc76141e961920885e1d57b3a5e4f77a88d285f6eea2398d97a949e9577bba57665c84a5f85a102e07921e</span><br></pre></td></tr></table></figure>

<h4 id="主动调用H7"><a href="#主动调用H7" class="headerlink" title="主动调用H7"></a>主动调用H7</h4><p>找到<code>tv.danmaku.biliplayerimpl.report.heartbeat.d</code>类的一个实例，然后主动调用H7方法，固定输出结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">ByteString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">ByteString</span>.<span class="title function_">of</span>(data).<span class="title function_">hex</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_h7</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> d = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;tv.danmaku.biliplayerimpl.report.heartbeat.d&quot;</span>);</span><br><span class="line">        d[<span class="string">&quot;H7&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">j2, j4, i, j5, j6, i2, i3, j7, str, i4, str2, str3</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`d.H7 is called: j2=<span class="subst">$&#123;j2&#125;</span>, j4=<span class="subst">$&#123;j4&#125;</span>, i=<span class="subst">$&#123;i&#125;</span>, j5=<span class="subst">$&#123;j5&#125;</span>, j6=<span class="subst">$&#123;j6&#125;</span>, i2=<span class="subst">$&#123;i2&#125;</span>, i3=<span class="subst">$&#123;i3&#125;</span>, j7=<span class="subst">$&#123;j7&#125;</span>, str=<span class="subst">$&#123;str&#125;</span>, i4=<span class="subst">$&#123;i4&#125;</span>, str2=<span class="subst">$&#123;str2&#125;</span>, str3=<span class="subst">$&#123;str3&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;H7&quot;</span>](j2, j4, i, j5, j6, i2, i3, j7, str, i4, str2, str3);</span><br><span class="line">            <span class="comment">// console.log(`d.H7 result=$&#123;Java.use(&quot;java.lang.String&quot;).$new(result)&#125;`);</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;to hex result:&quot;</span>,<span class="title function_">toHex</span>(result));</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">call_h7</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;tv.danmaku.biliplayerimpl.report.heartbeat.d&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">                <span class="comment">// console.log(obj.toString());</span></span><br><span class="line">                <span class="keyword">if</span>(obj.<span class="title function_">toString</span>()==<span class="string">&quot;tv.danmaku.biliplayerimpl.report.heartbeat.d@8ca9273&quot;</span>)&#123;</span><br><span class="line">                    obj.<span class="title function_">H7</span>(<span class="number">113886342676927</span>,<span class="number">28065268176</span>,<span class="number">1</span>,<span class="number">1737979363</span>,<span class="number">1737960450</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,<span class="string">&quot;main.ugc-video-detail.0.0&quot;</span>,<span class="string">&quot;tm.recommend.0.0&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="t3-a-i-a-a-a-b-e-b"><a href="#t3-a-i-a-a-a-b-e-b" class="headerlink" title="t3.a.i.a.a.a.b.e.b"></a>t3.a.i.a.a.a.b.e.b</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/5.jpg" alt="1"></p>
<h4 id="hook-b"><a href="#hook-b" class="headerlink" title="hook b"></a>hook b</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">call_h7</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;tv.danmaku.biliplayerimpl.report.heartbeat.d&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">                <span class="comment">// console.log(obj.toString());</span></span><br><span class="line">                <span class="keyword">if</span>(obj.<span class="title function_">toString</span>()==<span class="string">&quot;tv.danmaku.biliplayerimpl.report.heartbeat.d@8ca9273&quot;</span>)&#123;</span><br><span class="line">                    obj.<span class="title function_">H7</span>(<span class="number">113886342676927</span>,<span class="number">28065268176</span>,<span class="number">1</span>,<span class="number">1737979363</span>,<span class="number">1737960450</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,<span class="string">&quot;main.ugc-video-detail.0.0&quot;</span>,<span class="string">&quot;tm.recommend.0.0&quot;</span>);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;H7 is called!&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_b</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> b = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;t3.a.i.a.a.a.b&quot;</span>);</span><br><span class="line">        b[<span class="string">&quot;b&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`b.b is called: params=<span class="subst">$&#123;params&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;b&quot;</span>](params);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`b.b result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">b.<span class="property">b</span> is <span class="attr">called</span>: params=aid=<span class="number">113886342676927</span>&amp;auto_play=<span class="number">0</span>&amp;build=<span class="number">6240300</span>&amp;cid=<span class="number">28065268176</span>&amp;did=<span class="title class_">PF9</span>tVWMHYgNiUTQGegZ6&amp;epid=&amp;from_spmid=tm.<span class="property">recommend</span><span class="number">.0</span><span class="number">.0</span>&amp;ftime=<span class="number">1737960450</span>&amp;lv=<span class="number">0</span>&amp;mid=<span class="number">0</span>&amp;mobi_app=android&amp;part=<span class="number">1</span>&amp;sid=<span class="number">0</span>&amp;spmid=main.<span class="property">ugc</span>-video-detail<span class="number">.0</span><span class="number">.0</span>&amp;stime=<span class="number">1737979363</span>&amp;sub_type=<span class="number">0</span>&amp;type=<span class="number">3</span></span><br><span class="line">b.<span class="property">b</span> result=2e012b190fa7060fba2941e72bd14646d0bb2d5445838e2812f95dd1807b6208</span><br><span class="line"><span class="variable constant_">H7</span> is called!</span><br></pre></td></tr></table></figure>

<p>查看<code>t3.a.i.a.a.a.b.e.b</code>的源码发现，结果来源于<code>com.bilibili.commons.m.a.g</code>函数</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/7.jpg" alt="1"></p>
<p>它的两个参数一个是<code>params</code>，另一个是<code>d</code>，可以通过hook得到它的值</p>
<p>其实在这个页面往上翻一下，可以找到对<code>d</code>的赋值</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/9.jpg" alt="1"></p>
<p><code>d</code>是一个定值<code>&quot;9cafa6466a028bfb&quot;</code></p>
<h3 id="com-bilibili-commons-m-a-g"><a href="#com-bilibili-commons-m-a-g" class="headerlink" title="com.bilibili.commons.m.a.g"></a>com.bilibili.commons.m.a.g</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/8.jpg" alt="1"></p>
<p>这里还使用了一个SHA256哈希算法</p>
<h4 id="hook-g"><a href="#hook-g" class="headerlink" title="hook g"></a>hook g</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">call_h7</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;tv.danmaku.biliplayerimpl.report.heartbeat.d&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">                <span class="comment">// console.log(obj.toString());</span></span><br><span class="line">                <span class="keyword">if</span>(obj.<span class="title function_">toString</span>()==<span class="string">&quot;tv.danmaku.biliplayerimpl.report.heartbeat.d@a68ff35&quot;</span>)&#123;</span><br><span class="line">                    obj.<span class="title function_">H7</span>(<span class="number">113886342676927</span>,<span class="number">28065268176</span>,<span class="number">1</span>,<span class="number">1737979363</span>,<span class="number">1737960450</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,<span class="string">&quot;main.ugc-video-detail.0.0&quot;</span>,<span class="string">&quot;tm.recommend.0.0&quot;</span>);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;H7 is called!&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_g</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.bilibili.commons.m.a&quot;</span>);</span><br><span class="line">        a[<span class="string">&quot;g&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">bArr, bArr2</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> string_class = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a.g is called: bArr=<span class="subst">$&#123;bArr&#125;</span>, bArr2=<span class="subst">$&#123;bArr2&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a.g is called: bArr=<span class="subst">$&#123;string_class.$new(bArr)&#125;</span>, bArr2=<span class="subst">$&#123;string_class.$new(bArr2)&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;g&quot;</span>](bArr, bArr2);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a.g result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a.g is called: bArr=97,105,100,61,49,49,51,56,56,54,51,52,50,54,55,54,57,50,55,38,97,117,116,111,95,112,108,97,121,61,48,38,98,117,105,108,100,61,54,50,52,48,51,48,48,38,99,105,100,61,50,56,48,54,53,50,54,56,49,55,54,38,100,105,100,61,80,70,57,116,86,87,77,72,89,103,78,105,85,84,81,71,101,103,90,54,38,101,112,105,100,61,38,102,114,111,109,95,115,112,109,105,100,61,116,109,46,114,101,99,111,109,109,101,110,100,46,48,46,48,38,102,116,105,109,101,61,49,55,51,55,57,54,48,52,53,48,38,108,118,61,48,38,109,105,100,61,48,38,109,111,98,105,95,97,112,112,61,97,110,100,114,111,105,100,38,112,97,114,116,61,49,38,115,105,100,61,48,38,115,112,109,105,100,61,109,97,105,110,46,117,103,99,45,118,105,100,101,111,45,100,101,116,97,105,108,46,48,46,48,38,115,116,105,109,101,61,49,55,51,55,57,55,57,51,54,51,38,115,117,98,95,116,121,112,101,61,48,38,116,121,112,101,61,51, bArr2=57,99,97,102,97,54,52,54,54,97,48,50,56,98,102,98</span><br><span class="line">a.g is called: bArr=aid=113886342676927&amp;auto_play=0&amp;build=6240300&amp;cid=28065268176&amp;did=PF9tVWMHYgNiUTQGegZ6&amp;epid=&amp;from_spmid=tm.recommend.0.0&amp;ftime=1737960450&amp;lv=0&amp;mid=0&amp;mobi_app=android&amp;part=1&amp;sid=0&amp;spmid=main.ugc-video-detail.0.0&amp;stime=1737979363&amp;sub_type=0&amp;type=3, bArr2=9cafa6466a028bfb</span><br><span class="line">a.g result=2e012b190fa7060fba2941e72bd14646d0bb2d5445838e2812f95dd1807b6208</span><br><span class="line">H7 is called!</span><br></pre></td></tr></table></figure>

<p>签名之后传递给<code>t3.a.i.a.a.a.b.e.a()</code>方法</p>
<h3 id="t3-a-i-a-a-a-b-e-a"><a href="#t3-a-i-a-a-a-b-e-a" class="headerlink" title="t3.a.i.a.a.a.b.e.a"></a>t3.a.i.a.a.a.b.e.a</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/6.jpg" alt="1"></p>
<p>这里使用了aes加密</p>
<h4 id="hook-a"><a href="#hook-a" class="headerlink" title="hook a"></a>hook a</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">ByteString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">ByteString</span>.<span class="title function_">of</span>(data).<span class="title function_">hex</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">call_h7</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;tv.danmaku.biliplayerimpl.report.heartbeat.d&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">                <span class="comment">// console.log(obj.toString());</span></span><br><span class="line">                <span class="keyword">if</span>(obj.<span class="title function_">toString</span>()==<span class="string">&quot;tv.danmaku.biliplayerimpl.report.heartbeat.d@a68ff35&quot;</span>)&#123;</span><br><span class="line">                    obj.<span class="title function_">H7</span>(<span class="number">113886342676927</span>,<span class="number">28065268176</span>,<span class="number">1</span>,<span class="number">1737979363</span>,<span class="number">1737960450</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="number">0</span>,<span class="string">&quot;main.ugc-video-detail.0.0&quot;</span>,<span class="string">&quot;tm.recommend.0.0&quot;</span>);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;H7 is called!&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> b = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;t3.a.i.a.a.a.b&quot;</span>);</span><br><span class="line">        b[<span class="string">&quot;a&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">body</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`b.a is called: body=<span class="subst">$&#123;body&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;a&quot;</span>](body);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`b.a result=<span class="subst">$&#123;toHex(result)&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b.a is called: body=aid=113886342676927&amp;auto_play=0&amp;build=6240300&amp;cid=28065268176&amp;did=PF9tVWMHYgNiUTQGegZ6&amp;epid=&amp;from_spmid=tm.recommend.0.0&amp;ftime=1737960450&amp;lv=0&amp;mid=0&amp;mobi_app=android&amp;part=1&amp;sid=0&amp;spmid=main.ugc-video-detail.0.0&amp;stime=1737979363&amp;sub_type=0&amp;type=3&amp;sign=2e012b190fa7060fba2941e72bd14646d0bb2d5445838e2812f95dd1807b6208</span><br><span class="line">b.a result=b2eadf0bc65f99660f2ffbe874d802918231b6f0445bbf1c005253f1b42c251a61835063707effd59fc5800b4377d4241b252ec063dd6ca55f66a738ce7d5de3d5ef17d04714e17e0d3b592e18109e4e4d8d534666159c204dd8c31ec68c92355f57ce3798454155d57b360d9855dc4d8b131dcb9befebe638635b103d40b0f66d33c283c6dd28b49d38e724f7f7abcb7ba16a7a150941bd301275e326c56e89e97210c18b36437fa4d6fde0f7911cbb7b2e80e56051a9f9f7e238ca20da5dbd6481362a85afceb73e55816d6ff8d7f740a5d8c8e3a0c6779ba406f400cb34936c6e1d3534bf0ed2eee6ce743fcf0ce8fd8ac478980f3dc6f1aac8de96e2be031e1e5f7a32bf06ec73840f4632728a576c9d2f4fa6fc76141e961920885e1d57b3a5e4f77a88d285f6eea2398d97a949e9577bba57665c84a5f85a102e07921e</span><br><span class="line">H7 is called!</span><br></pre></td></tr></table></figure>

<p>查看源码，可在源码中，找到AES加密的Key和IV向量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Key: &quot;fd6b639dbcff0c2a1b03b389ec763c4b&quot;</span><br><span class="line">IV : &quot;77b07a672d57d64c&quot;</span><br></pre></td></tr></table></figure>

<h3 id="解密请求体"><a href="#解密请求体" class="headerlink" title="解密请求体"></a>解密请求体</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypt</span>(<span class="params">ciphertext_hex, key, iv</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用AES解密数据（hex编码的密文）</span></span><br><span class="line"><span class="string">    :param ciphertext_hex: hex编码的密文（str）</span></span><br><span class="line"><span class="string">    :param key: 密钥（bytes, 长度为16, 24或32字节）</span></span><br><span class="line"><span class="string">    :param iv: 初始化向量IV（bytes, 长度为16字节）</span></span><br><span class="line"><span class="string">    :return: 解密后的明文（str）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 将hex编码的密文转换为bytes</span></span><br><span class="line">    ciphertext = <span class="built_in">bytes</span>.fromhex(ciphertext_hex)</span><br><span class="line">    <span class="comment"># 创建AES解密对象</span></span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="comment"># 解密并移除填充</span></span><br><span class="line">    plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)</span><br><span class="line">    <span class="keyword">return</span> plaintext.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">key = <span class="string">b&#x27;fd6b639dbcff0c2a1b03b389ec763c4b&#x27;</span>  <span class="comment"># 16字节密钥</span></span><br><span class="line">iv = <span class="string">b&#x27;77b07a672d57d64c&#x27;</span>   <span class="comment"># 16字节IV</span></span><br><span class="line">ciphertext_hex = <span class="string">&#x27;b2eadf0bc65f99660f2ffbe874d802918231b6f0445bbf1c005253f1b42c251a61835063707effd59fc5800b4377d4241b252ec063dd6ca55f66a738ce7d5de3d5ef17d04714e17e0d3b592e18109e4e4d8d534666159c204dd8c31ec68c92355f57ce3798454155d57b360d9855dc4d8b131dcb9befebe638635b103d40b0f66d33c283c6dd28b49d38e724f7f7abcb7ba16a7a150941bd301275e326c56e89e97210c18b36437fa4d6fde0f7911cbb7b2e80e56051a9f9f7e238ca20da5dbd6481362a85afceb73e55816d6ff8d7f740a5d8c8e3a0c6779ba406f400cb34936c6e1d3534bf0ed2eee6ce743fcf0ce8fd8ac478980f3dc6f1aac8de96e2be031e1e5f7a32bf06ec73840f4632728a576c9d2f4fa6fc76141e961920885e1d57b3a5e4f77a88d285f6eea2398d97a949e9577bba57665c84a5f85a102e07921e&#x27;</span>  <span class="comment"># hex编码的密文</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    plaintext = aes_decrypt(ciphertext_hex, key, iv)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密后的明文:&quot;</span>, plaintext)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密失败:&quot;</span>, e)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">解密后的明文: aid=<span class="number">113886342676927</span>&amp;auto_play=<span class="number">0</span>&amp;build=<span class="number">6240300</span>&amp;cid=<span class="number">28065268176</span>&amp;did=PF9tVWMHYgNiUTQGegZ6&amp;epid=&amp;from_spmid=tm.recommend<span class="number">.0</span><span class="number">.0</span>&amp;ftime=<span class="number">1737960450</span>&amp;lv=<span class="number">0</span>&amp;mid=<span class="number">0</span>&amp;mobi_app=android&amp;part=<span class="number">1</span>&amp;sid=<span class="number">0</span>&amp;spmid=main.ugc-video-detail<span class="number">.0</span><span class="number">.0</span>&amp;stime=<span class="number">1737979363</span>&amp;sub_type=<span class="number">0</span>&amp;<span class="built_in">type</span>=<span class="number">3</span>&amp;sign=2e012b190fa7060fba2941e72bd14646d0bb2d5445838e2812f95dd1807b6208</span><br></pre></td></tr></table></figure>

<h1 id="Python实现请求体加密"><a href="#Python实现请求体加密" class="headerlink" title="Python实现请求体加密"></a>Python实现请求体加密</h1><h2 id="请求体参数还原"><a href="#请求体参数还原" class="headerlink" title="请求体参数还原"></a>请求体参数还原</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;aid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;113886342676927&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;auto_play&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="number">6240300</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;28065268176&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;did&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PF9tVWMHYgNiUTQGegZ6&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;epid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;from_spmid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tm.recommend.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ftime&quot;</span><span class="punctuation">:</span> <span class="number">1737960450</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lv&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mid&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mobi_app&quot;</span><span class="punctuation">:</span> <span class="string">&quot;android&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;part&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sid&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;spmid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main.ugc-video-detail.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;stime&quot;</span><span class="punctuation">:</span> <span class="number">1737979363</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sub_type&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sign&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2e012b190fa7060fba2941e72bd14646d0bb2d5445838e2812f95dd1807b6208&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这里面需要逆向的参数有<code>aid</code>、<code>build</code>、<code>cid</code>、<code>did</code>和<code>sign</code></p>
<h3 id="sign还原"><a href="#sign还原" class="headerlink" title="sign还原"></a>sign还原</h3><p><code>sign</code>值我们已经分析过了，所以先把它还原一下</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SHA256_call</span>(<span class="params">data,salt</span>):</span><br><span class="line">    <span class="comment"># 创建sha256对象</span></span><br><span class="line">    sha256 = hashlib.sha256()</span><br><span class="line">    sha256.update(data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> salt!=<span class="string">&quot;&quot;</span>:</span><br><span class="line">        sha256.update(salt.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="comment"># 获取加密后的数据，以16进制表示</span></span><br><span class="line">    sha256_hex = sha256.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> sha256_hex</span><br><span class="line"></span><br><span class="line">param = <span class="string">&quot;aid=113886342676927&amp;auto_play=0&amp;build=6240300&amp;cid=28065268176&amp;did=PF9tVWMHYgNiUTQGegZ6&amp;epid=&amp;from_spmid=tm.recommend.0.0&amp;ftime=1737960450&amp;lv=0&amp;mid=0&amp;mobi_app=android&amp;part=1&amp;sid=0&amp;spmid=main.ugc-video-detail.0.0&amp;stime=1737979363&amp;sub_type=0&amp;type=3&quot;</span></span><br><span class="line">salt = <span class="string">&quot;9cafa6466a028bfb&quot;</span></span><br><span class="line"><span class="built_in">print</span>(SHA256_call(param,salt))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">2e012b190fa7060fba2941e72bd14646d0bb2d5445838e2812f95dd1807b6208</span><br></pre></td></tr></table></figure>

<h3 id="aid还原"><a href="#aid还原" class="headerlink" title="aid还原"></a>aid还原</h3><p>分析源码，发现<code>aid</code>参数可以从<code>Video</code>类的内部类<code>h</code>类中的<code>a()</code>方法获取，hook一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_aid</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> h = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;tv.danmaku.biliplayerv2.service.Video$h&quot;</span>);</span><br><span class="line">        h[<span class="string">&quot;a&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`h.a is called`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;a&quot;</span>]();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`h.a result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hook结果，点击不同的视频它的结果是不一样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">h.a is called</span><br><span class="line">h.a result=113886342676927</span><br></pre></td></tr></table></figure>

<p>猜测aid可能与视频有关</p>
<h3 id="build还原"><a href="#build还原" class="headerlink" title="build还原"></a>build还原</h3><p>在源码里面翻了翻，发现它是个定值<code>6240300</code></p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/10.jpg" alt="1"></p>
<h3 id="cid还原"><a href="#cid还原" class="headerlink" title="cid还原"></a>cid还原</h3><p>浏览源码，发现<code>cid</code>参数可以从<code>Video</code>类的内部类<code>h</code>类中的<code>b()</code>方法获取，hook一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_cid</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> h = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;tv.danmaku.biliplayerv2.service.Video$h&quot;</span>);</span><br><span class="line">        h[<span class="string">&quot;b&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`h.b is called`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;b&quot;</span>]();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`h.b result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hook结果，与<code>aid</code>参数类似的是，不同的视频，<code>cid</code>参数的值也是不一样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">h.b is called</span><br><span class="line">h.b result=28065268176</span><br></pre></td></tr></table></figure>

<h3 id="did还原"><a href="#did还原" class="headerlink" title="did还原"></a>did还原</h3><p><code>did</code>参数是通过<code>com.bilibili.lib.biliid.utils.f.a.c()</code>方法得到的</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/11.jpg" alt="1"></p>
<p>hook 一下c方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_did</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.bilibili.lib.biliid.utils.f.a&quot;</span>);</span><br><span class="line">        a[<span class="string">&quot;c&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a.c is called: context=<span class="subst">$&#123;context&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;c&quot;</span>](context);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a.c result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hook 结果，点击不同的视频，结果都是一样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a.c is called: context=BiliApplication(tv.danmaku.bili)@bd968dc</span><br><span class="line">a.c result=PF9tVWMHYgNiUTQGegZ6</span><br></pre></td></tr></table></figure>

<p>分析其如何生成的，去看c方法的源码</p>
<h4 id="c"><a href="#c" class="headerlink" title="c"></a>c</h4><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/12.jpg" alt="1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">首先判断f13193c字段是否为空，非空直接返回</span><br><span class="line">如果是空的话，会调用c2.f.b0.c.a.e.k().f(context)方法来获取f字段</span><br><span class="line">如果f字段还是空的话，会调用g(context)方法生成f13193c,</span><br></pre></td></tr></table></figure>

<p>看g方法源码</p>
<h4 id="g"><a href="#g" class="headerlink" title="g"></a>g</h4><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/13.jpg" alt="1"></p>
<p>通过f方法返回一个f字段，然后对字段f进行处理然后返回</p>
<p>看f方法源码</p>
<h4 id="f"><a href="#f" class="headerlink" title="f"></a>f</h4><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/14.jpg" alt="1"></p>
<p>先看<code>j2</code>字段，它通过<code>j(context)</code>获取到</p>
<h4 id="j"><a href="#j" class="headerlink" title="j"></a>j</h4><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/15.jpg" alt="1"></p>
<p>在这里面调用了一个c方法</p>
<h4 id="c-1"><a href="#c-1" class="headerlink" title="c"></a>c</h4><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/16.jpg" alt="1"></p>
<p>它是获取mac地址的，这个东西我们也可以自己生成</p>
<p>接着去看<code>f</code>函数，有一个<code>a2</code>参数，它获取的是<code>persist.service.bdroid.bdaddr</code>，也就是蓝牙地址</p>
<p>在<code>f</code>函数里找到<code>h</code>参数，<code>h</code>来源于<code>h()</code>方法</p>
<h4 id="h"><a href="#h" class="headerlink" title="h"></a>h</h4><p>h里面调用了一个<code>a()</code>方法</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/17.jpg" alt="1"></p>
<p>它是<code>/sys/bus/mmc/devices</code>文件的内容，与设备总线信息有关</p>
<p>f函数里还有一个参数<code>i</code>，通过<code>i()</code>方法获得</p>
<h4 id="i"><a href="#i" class="headerlink" title="i"></a>i</h4><p>i里面调用了<code>a()</code>方法</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/18.jpg" alt="1"></p>
<p>这里面提到了<code>/sys/class/android_usb/android0/iSerial</code>这个文件，它是Android 设备 USB 序列号的用户空间控制接口，与设备USB序列号有关。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>经过分析，在<code>g()</code>方法里生成的<code>f</code>字段与4个内容有关，分别是mac地址，蓝牙地址，设备总线和sn号，把他们通过<code>|</code>拼接起来，拼接起来的字符串传入<code>b()</code>方法。</p>
<h4 id="b"><a href="#b" class="headerlink" title="b"></a>b</h4><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/19.jpg" alt="1"></p>
<p>在这里面对字符串进行处理然后通过Base64编码后返回</p>
<h4 id="参数还原"><a href="#参数还原" class="headerlink" title="参数还原"></a>参数还原</h4><p>接下来我们自己生成四个内容拼接起来然后通过python实现一个b方法再调用base64进行编码就可以得到did参数。</p>
<h4 id="hook-f"><a href="#hook-f" class="headerlink" title="hook f"></a>hook f</h4><p>hook一下f方法</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">process = frida.get_usb_device().attach(<span class="string">&quot;哔哩哔哩&quot;</span>)</span><br><span class="line"></span><br><span class="line">jsCode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Java.perform(function()&#123;</span></span><br><span class="line"><span class="string">    let a = Java.use(&quot;com.bilibili.lib.biliid.utils.f.a&quot;);</span></span><br><span class="line"><span class="string">        a[&quot;f&quot;].implementation = function (context) &#123;</span></span><br><span class="line"><span class="string">            console.log(`a.f is called: context=$&#123;context&#125;`);</span></span><br><span class="line"><span class="string">            let result = this[&quot;f&quot;](context);</span></span><br><span class="line"><span class="string">            console.log(`a.f result=$&#123;result&#125;`);</span></span><br><span class="line"><span class="string">            return result;</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">scrpt = process.create_script(jsCode)</span><br><span class="line"></span><br><span class="line">scrpt.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure>

<p>hook 结果，如下只获取到了mac地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a.f is called: context=BiliApplication(tv.danmaku.bili)@fa97dd3</span><br><span class="line">a.f result=3c286deaa3e2|||</span><br></pre></td></tr></table></figure>

<p>对于Mac地址参数，源码里还对它进行了处理，如下，把非<code>0-9A-Fa-f</code>的内容替换为空，并都转换为小写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">lowerCase</span> <span class="operator">=</span> j2.replaceAll(<span class="string">&quot;[^0-9A-Fa-f]&quot;</span>, <span class="string">&quot;&quot;</span>).toLowerCase();</span><br></pre></td></tr></table></figure>

<p>源码里对第二个参数蓝牙地址也是这样处理，把非<code>0-9A-Fa-f</code>的内容替换为空，并都转换为小写。</p>
<p>从源码里还可以看出的是，只要<code>f()</code>方法返回值的长度大于等于4，那么它就有效，所以这四个参数只要获取到了其中一个，就可以拿过来使用。</p>
<h4 id="Python生成mac地址"><a href="#Python生成mac地址" class="headerlink" title="Python生成mac地址"></a>Python生成mac地址</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_mac</span>():</span><br><span class="line">    mac = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">        part = random.sample(<span class="string">&quot;0123456789abcdef&quot;</span>,<span class="number">2</span>)</span><br><span class="line">        mac += <span class="string">&quot;&quot;</span>.join(part)</span><br><span class="line">    <span class="keyword">return</span> mac</span><br><span class="line"><span class="built_in">print</span>(g_mac())</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">e5d76827d57f</span><br></pre></td></tr></table></figure>

<h4 id="Python实现b方法"><a href="#Python实现b方法" class="headerlink" title="Python实现b方法"></a>Python实现b方法</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_mac</span>():</span><br><span class="line">    mac = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">        part = random.sample(<span class="string">&quot;0123456789abcdef&quot;</span>,<span class="number">2</span>)</span><br><span class="line">        mac += <span class="string">&quot;&quot;</span>.join(part)</span><br><span class="line">    <span class="keyword">return</span> mac</span><br><span class="line"><span class="comment"># print(g_mac())</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">str</span>+=<span class="string">&quot;|||&quot;</span></span><br><span class="line">    byte_list = <span class="built_in">list</span>(<span class="built_in">str</span>.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    byte_list[<span class="number">0</span>] = byte_list[<span class="number">0</span>] ^ (<span class="built_in">len</span>(byte_list) &amp; <span class="number">255</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(byte_list)):</span><br><span class="line">        byte_list[i] = (byte_list[i-<span class="number">1</span>]^byte_list[i]) &amp; <span class="number">255</span></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(<span class="built_in">bytes</span>(byte_list))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b(g_mac()))</span><br><span class="line"><span class="comment"># print(b(&quot;e5d76827d57f|||&quot;))  # al87DDoCMAdjVmEHewd7</span></span><br></pre></td></tr></table></figure>

<p>至此，did参数还原完成</p>
<h3 id="Python实现请求体加密-1"><a href="#Python实现请求体加密-1" class="headerlink" title="Python实现请求体加密"></a>Python实现请求体加密</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_mac</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成一个随机MAC地址（不是真实的MAC地址格式）</span></span><br><span class="line"><span class="string">    每个部分由2个十六进制字符组成，共6部分</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    mac = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">7</span>):</span><br><span class="line">        part = random.sample(<span class="string">&quot;0123456789abcdef&quot;</span>, <span class="number">2</span>)  <span class="comment"># 随机选择2个十六进制字符</span></span><br><span class="line">        mac += <span class="string">&quot;&quot;</span>.join(part)  <span class="comment"># 拼接成字符串</span></span><br><span class="line">    <span class="keyword">return</span> mac</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_did</span>(<span class="params">string</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成设备ID（did），对字符串进行特殊的XOR变换，并进行Base64编码</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    string += <span class="string">&quot;|||&quot;</span>  <span class="comment"># 添加分隔符</span></span><br><span class="line">    byte_list = <span class="built_in">list</span>(string.encode(<span class="string">&quot;utf-8&quot;</span>))  <span class="comment"># 转换为字节列表</span></span><br><span class="line">    byte_list[<span class="number">0</span>] = byte_list[<span class="number">0</span>] ^ (<span class="built_in">len</span>(byte_list) &amp; <span class="number">255</span>)  <span class="comment"># 首字节与长度取低8位的值异或</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(byte_list)):</span><br><span class="line">        byte_list[i] = (byte_list[i - <span class="number">1</span>] ^ byte_list[i]) &amp; <span class="number">255</span>  <span class="comment"># 每个字节与前一个字节异或，并取低8位</span></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(<span class="built_in">bytes</span>(byte_list)).decode(<span class="string">&quot;utf-8&quot;</span>)  <span class="comment"># Base64编码后返回字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成设备ID</span></span><br><span class="line">did = g_did(g_mac())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求体参数</span></span><br><span class="line">body = &#123;</span><br><span class="line">    <span class="string">&quot;aid&quot;</span>: <span class="string">&quot;113886342676927&quot;</span>,</span><br><span class="line">    <span class="string">&quot;auto_play&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;6240300&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cid&quot;</span>: <span class="string">&quot;28065268176&quot;</span>,</span><br><span class="line">    <span class="string">&quot;did&quot;</span>: did,</span><br><span class="line">    <span class="string">&quot;epid&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;from_spmid&quot;</span>: <span class="string">&quot;tm.recommend.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ftime&quot;</span>: <span class="built_in">str</span>(<span class="built_in">int</span>(time.time())),</span><br><span class="line">    <span class="string">&quot;lv&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mid&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mobi_app&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">    <span class="string">&quot;part&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sid&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;spmid&quot;</span>: <span class="string">&quot;main.ugc-video-detail.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stime&quot;</span>: <span class="built_in">str</span>(<span class="built_in">int</span>(time.time())),</span><br><span class="line">    <span class="string">&quot;sub_type&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_sign</span>(<span class="params">data_sign, salt</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算数据签名，使用SHA-256哈希</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sha256 = hashlib.sha256()</span><br><span class="line">    sha256.update(data_sign.encode(<span class="string">&quot;utf-8&quot;</span>))  <span class="comment"># 更新数据</span></span><br><span class="line">    <span class="keyword">if</span> salt != <span class="string">&quot;&quot;</span>:</span><br><span class="line">        sha256.update(salt.encode(<span class="string">&quot;utf-8&quot;</span>))  <span class="comment"># 如果有盐值，追加到哈希计算中</span></span><br><span class="line">    <span class="keyword">return</span> sha256.hexdigest()  <span class="comment"># 返回SHA-256的十六进制字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">salt = <span class="string">&quot;9cafa6466a028bfb&quot;</span>  <span class="comment"># 预定义的盐值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_data_sign</span>(<span class="params">data_sign</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将请求体参数转换为字符串，以&amp;连接键值对</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&amp;&quot;</span>.join([key + <span class="string">&quot;=&quot;</span> + value <span class="keyword">for</span> key, value <span class="keyword">in</span> data_sign.items()])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算签名</span></span><br><span class="line">data_sign = g_data_sign(body)</span><br><span class="line"><span class="built_in">print</span>(data_sign)  <span class="comment"># 打印待签名的字符串</span></span><br><span class="line">sign = g_sign(data_sign, salt)</span><br><span class="line"><span class="built_in">print</span>(sign)  <span class="comment"># 打印计算出的签名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加签名到请求体</span></span><br><span class="line">body[<span class="string">&quot;sign&quot;</span>] = sign</span><br><span class="line"><span class="built_in">print</span>(body)  <span class="comment"># 打印最终的请求体</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将请求体转换为URL编码格式的字符串</span></span><br><span class="line">body_str = (<span class="string">&quot;&amp;&quot;</span>.join([key + <span class="string">&quot;=&quot;</span> + value <span class="keyword">for</span> key, value <span class="keyword">in</span> body.items()])).encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># AES加密密钥和IV（初始化向量）</span></span><br><span class="line">key = <span class="string">b&#x27;fd6b639dbcff0c2a1b03b389ec763c4b&#x27;</span>  <span class="comment"># 32字节密钥（AES-256）</span></span><br><span class="line">iv = <span class="string">b&#x27;77b07a672d57d64c&#x27;</span>  <span class="comment"># 16字节IV</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt</span>(<span class="params">body_str, key, iv</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用AES CBC模式加密请求体</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)  <span class="comment"># 创建AES加密器</span></span><br><span class="line">    padded_data = pad(body_str, AES.block_size)  <span class="comment"># 对数据进行PKCS7填充</span></span><br><span class="line">    ciphertext = cipher.encrypt(padded_data)  <span class="comment"># 加密数据</span></span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对请求体进行AES加密</span></span><br><span class="line">encrypt_body = aes_encrypt(body_str, key, iv)</span><br><span class="line"><span class="built_in">print</span>(encrypt_body.<span class="built_in">hex</span>())  <span class="comment"># 以十六进制格式打印加密后的数据</span></span><br></pre></td></tr></table></figure>



<h1 id="请求头参数分析"><a href="#请求头参数分析" class="headerlink" title="请求头参数分析"></a>请求头参数分析</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;:authority&quot;</span><span class="punctuation">:</span> <span class="string">&quot;api.bilibili.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;:method&quot;</span><span class="punctuation">:</span> <span class="string">&quot;POST&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;:path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/x/report/click/android2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;:scheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content-length&quot;</span><span class="punctuation">:</span> <span class="string">&quot;320&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;buvid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XY17684138CCA764C73112F1B0464F485C112&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;device-id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PF9tVWMHYgNiUTQGegZ6&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fp_local&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2e941853742b47fa1e688cd567d1a40320250201120422d47654095c87a2e160&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fp_remote&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2e941853742b47fa1e688cd567d1a4032024123013422042cd4fe24a164fc683&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;session_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;d2bb5a0d&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prod&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;app-key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;android&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;user-agent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mozilla/5.0 BiliDroid/6.24.0 (bbcallen@gmail.com) os/android model/Pixel 3 mobi_app/android build/6240300 channel/alifenfa innerVer/6240300 osVer/9 network/2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bili-bridge-engine&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cronet&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content-type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/octet-stream&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;accept-encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gzip, deflate, br&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这里面需要还原的参数有<code>buvid</code>、<code>device-id</code>、<code>fp_local</code>、<code>fp_remote</code>、<code>session_id</code></p>
<h2 id="buvid参数还原"><a href="#buvid参数还原" class="headerlink" title="buvid参数还原"></a>buvid参数还原</h2><p>通过抓包找到请求接口，反编译apk，定位接口</p>
<p>请求头信息一般会在拦截器当中</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/20.jpg" alt="1"></p>
<p>进入拦截器的类进行分析</p>
<h3 id="c-2"><a href="#c-2" class="headerlink" title="c"></a>c</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/21.jpg" alt="1"></p>
<p>查看<code>e()</code>方法</p>
<h3 id="e"><a href="#e" class="headerlink" title="e"></a>e</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/22.jpg" alt="1"></p>
<p>这里就看到了请求头的参数</p>
<p>先去分析<code>Buvid</code>，通过a3赋值，a3是从<code>com.bilibili.api.c.a()</code>这个方法里获得到的</p>
<h3 id="a"><a href="#a" class="headerlink" title="a"></a>a</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/23.jpg" alt="1"></p>
<p>从这里面看出a是通过<code>str</code>赋值的，<code>str</code>参数是<code>b</code>方法里传进去的参数，对b方法查找用例</p>
<h3 id="e-1"><a href="#e-1" class="headerlink" title="e"></a>e</h3><p>查找用例找到了e方法</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/24.jpg" alt="1"></p>
<p>而这里面参数<code>str</code>来源于e方法，继续查找用例</p>
<h3 id="a-1"><a href="#a-1" class="headerlink" title="a"></a>a</h3><p>查找用例找到了a方法</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/25.jpg" alt="1"></p>
<p>这里面<code>str</code>通过<code>this.a</code>赋值，接着找谁给<code>this.a</code>赋值的</p>
<h3 id="d"><a href="#d" class="headerlink" title="d"></a>d</h3><p>找到了一个<code>d</code>方法，这里面对<code>this.a</code>进行了赋值</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/26.jpg" alt="1"></p>
<p>其实还有一种方式，通过打印调用栈信息也可以追溯到参数被赋值的位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_b</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> c = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.bilibili.api.c&quot;</span>);</span><br><span class="line">        c[<span class="string">&quot;b&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`c.b is called: str=<span class="subst">$&#123;str&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">this</span>[<span class="string">&quot;b&quot;</span>](str);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_b</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Pixel 3::tv.danmaku.bili ]-&gt; java.lang.Throwable</span><br><span class="line">        at com.bilibili.api.c.b(Native Method)</span><br><span class="line">        at c2.f.b0.c.a.d.e(BL:1)</span><br><span class="line">        at c2.f.b0.c.a.d.a(BL:11)</span><br><span class="line">        at tv.danmaku.bili.utils.x.a(BL:14)</span><br><span class="line">        at tv.danmaku.bili.proc.y.f(BL:1)</span><br><span class="line">        at tv.danmaku.bili.proc.c.run(Unknown Source:2)</span><br><span class="line">        at android.os.Handler.handleCallback(Handler.java:873)</span><br><span class="line">        at android.os.Handler.dispatchMessage(Handler.java:99)</span><br><span class="line">        at android.os.Looper.loop(Looper.java:193)</span><br><span class="line">        at android.os.HandlerThread.run(HandlerThread.java:65)</span><br><span class="line"></span><br><span class="line">c.b is called: str=XY17684138CCA764C73112F1B0464F485C112</span><br></pre></td></tr></table></figure>



<p>找到了<code>this.a</code>之后，发现有三种赋值的情况，第一种情况<code>MiscHelperKt.d(e.k().b())</code>是从<code>XML</code>文件和内存中取<code>buvid</code>的值，如果都取不到，会到第二种方式<code>MiscHelperKt.d(e.k().c())</code>也是从<code>XML</code>文件和内存中取<code>buvid</code>的值，如果都取不到，会到第三种方式<code>c2.f.b0.c.b.a.c.a().toUpperCase()</code>，说明第三种方式才是生成<code>buvid</code>的方式</p>
<h3 id="c2-f-b0-c-b-a-c-a"><a href="#c2-f-b0-c-b-a-c-a" class="headerlink" title="c2.f.b0.c.b.a.c.a()"></a>c2.f.b0.c.b.a.c.a()</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/27.jpg" alt="1"></p>
<p>首先调用<code>Application f = BiliContext.f()</code>，返回一个<code>Application</code>类型的字段<code>f</code></p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/28.jpg" alt="1"></p>
<p>可以看到返回的是当前的<code>ActivityThread.currentApplication()</code></p>
<p>在这里有四种返回值的情况</p>
<p>先看第一种，<code>return &quot;XZ&quot; + e(d) + d;</code>，它与<code>e()</code>方法和d有关，d通过<code>com.bilibili.commons.m.a.d(b2);</code>获得</p>
<p>找<code>b2</code>，它通过<code>com.bilibili.lib.biliid.utils.f.c.b(f)</code>获得</p>
<h3 id="com-bilibili-lib-biliid-utils-f-c-b"><a href="#com-bilibili-lib-biliid-utils-f-c-b" class="headerlink" title="com.bilibili.lib.biliid.utils.f.c.b"></a>com.bilibili.lib.biliid.utils.f.c.b</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/32.jpg" alt="1"></p>
<p>返回<code>j2</code>，它通过<code>g.b(context)</code>生成</p>
<h3 id="g-b"><a href="#g-b" class="headerlink" title="g.b"></a>g.b</h3><p>这里可以看出它是与设备状态有关</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/33.jpg" alt="1"></p>
<p>最后的返回值传入了<code>com.bilibili.commons.m.a.d</code>方法</p>
<h3 id="com-bilibili-commons-m-a-d"><a href="#com-bilibili-commons-m-a-d" class="headerlink" title="com.bilibili.commons.m.a.d"></a>com.bilibili.commons.m.a.d</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/29.jpg" alt="1"></p>
<p>这里把传进去的参数转为字节，然后调用了<code>e()</code>方法</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/30.jpg" alt="1"></p>
<p>这里是把传进去的参数再放到<code>h</code>方法里进行了<code>MD5</code>哈希算法</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/31.jpg" alt="1"></p>
<p>还没完，哈希算法之后对结果又进行了处理。</p>
<p>生成的结果要传入<code>e(d)</code>这个方法里</p>
<h3 id="e-2"><a href="#e-2" class="headerlink" title="e"></a>e</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/34.jpg" alt="1"></p>
<p>它是取字符串的第2位，第12位，第22位拼接起来了</p>
<p>最后把<code>XZ</code>和<code>e(d)</code>和<code>d</code>拼接起来就是<code>buvid</code>了</p>
<p>接下来看第二种情况</p>
<h3 id="com-bilibili-lib-biliid-utils-f-a-j"><a href="#com-bilibili-lib-biliid-utils-f-a-j" class="headerlink" title="com.bilibili.lib.biliid.utils.f.a.j"></a>com.bilibili.lib.biliid.utils.f.a.j</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/35.jpg" alt="1"></p>
<p>它调用<code>com.bilibili.droid.g.c(context)</code>来生成返回值</p>
<p>它与mac地址有关</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/36.jpg" alt="1"></p>
<p>后面调用的方法与第一种情况相同</p>
<p>接下来看第三种情况</p>
<h3 id="com-bilibili-lib-biliid-utils-f-c-a"><a href="#com-bilibili-lib-biliid-utils-f-c-a" class="headerlink" title="com.bilibili.lib.biliid.utils.f.c.a"></a>com.bilibili.lib.biliid.utils.f.c.a</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/37.jpg" alt="1"></p>
<p>这里面调用<code>g.a(context)</code>来生成返回值</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/38.jpg" alt="1"></p>
<p>它返回的是<code>android_id</code>也就是如下的<code>a2</code></p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/39.jpg" alt="1"></p>
<p>如果<code>a2</code>不为空，会调用<code>com.bilibili.commons.m.a.d</code>，然后返回<code>&quot;XX&quot; + e(d4) + d4</code></p>
<p>如果<code>a2</code>是空的话，会调用<code>e.k().i().replace(com.bilibili.base.util.d.f, &quot;&quot;)</code>，也就是调用<code>i()</code>方法，返回通过<code>replace</code>对字符进行替换</p>
<p><code>e.k().i()</code>方法如下</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/40.jpg" alt="1"></p>
<p>它其实就是生成了随机的<code>uuid</code>然后字符替换把<code>-</code>设置为空</p>
<p>然后<code>return &quot;XW&quot; + e(replace) + replace</code></p>
<p>这样看的话，<code>a2</code>为空的这种情况还原<code>buvid</code>是最简单的</p>
<h3 id="Python还原buvid"><a href="#Python还原buvid" class="headerlink" title="Python还原buvid"></a>Python还原buvid</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">uuid_data = <span class="built_in">str</span>(uuid.uuid4()).replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">t2_12_22 = uuid_data[<span class="number">2</span>]+uuid_data[<span class="number">12</span>]+uuid_data[<span class="number">22</span>]</span><br><span class="line">buvid = (<span class="string">&quot;XW&quot;</span>+t2_12_22+uuid_data).upper()</span><br><span class="line"><span class="built_in">print</span>(buvid)</span><br></pre></td></tr></table></figure>

<h2 id="session-id参数还原"><a href="#session-id参数还原" class="headerlink" title="session_id参数还原"></a>session_id参数还原</h2><p>如下，<code>session_id</code>的值是字段<code>m2</code>，它是<code>com.bilibili.api.a.m()</code>方法的返回值</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/41.jpg" alt="1"></p>
<p>去分析m方法</p>
<h3 id="com-bilibili-api-a-m"><a href="#com-bilibili-api-a-m" class="headerlink" title="com.bilibili.api.a.m()"></a>com.bilibili.api.a.m()</h3><p>这里通过<code>b</code>调用了<code>gerSessionId()</code>返回的session_id</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/42.jpg" alt="1"></p>
<p>看了一下<code>getSessionId</code>方法，发现它是一个接口方法，要找其实现类</p>
<p>那就去看b是谁，找到一个o方法</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/43.jpg" alt="1"></p>
<p>这个方法接受一个 <code>b</code> 类型的参数 <code>bVar</code>，并将其赋值给 <code>b</code> 静态变量，通过调用 <code>o()</code> 方法来设置 <code>b</code> 变量为一个实现了接口 <code>b</code> 的对象实例。</p>
<p>接下来可以通过hook o方法查看传入的参数bVar是什么类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_o</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.bilibili.api.a&quot;</span>);</span><br><span class="line">        a[<span class="string">&quot;o&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">bVar</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a.o is called: bVar=<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(bVar)&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">this</span>[<span class="string">&quot;o&quot;</span>](bVar);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a.o is called: bVar=&quot;&lt;instance: com.bilibili.api.a$b, $className: tv.danmaku.bili.utils.p$a&gt;&quot;</span><br><span class="line">接口类型是：com.bilibili.api.a$b</span><br><span class="line">具体类型是：tv.danmaku.bili.utils.p$a</span><br></pre></td></tr></table></figure>

<p>去找<code>tv.danmaku.bili.utils.p$a</code></p>
<h3 id="tv-danmaku-bili-utils-p-a"><a href="#tv-danmaku-bili-utils-p-a" class="headerlink" title="tv.danmaku.bili.utils.p.a"></a>tv.danmaku.bili.utils.p.a</h3><p>在这个类里面找到了<code>gerSessionId()</code>的实现</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/44.jpg" alt="1"></p>
<p>这里是通过<code>com.bilibili.lib.foundation.e.b()</code>来调用的<code>gerSessionId()</code></p>
<p>看<code>b</code>方法的内容</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/45.jpg" alt="1"></p>
<p>它又调用了<code>d.g.b().d()</code></p>
<p>看<code>d</code>方法的内容</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/46.jpg" alt="1"></p>
<p>它返回的是<code>this.a</code></p>
<p>去找谁给<code>this.a</code>赋值的</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/47.jpg" alt="1"></p>
<p><code>this.a</code>是<code>DefaultApps</code>类型</p>
<p>在<code>DefaultApps</code>里面就会有对<code>gerSessionId()</code>的重写，找到了</p>
<h3 id="gerSessionId"><a href="#gerSessionId" class="headerlink" title="gerSessionId()"></a>gerSessionId()</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/48.jpg" alt="1"></p>
<p>调用<code>getString()</code>方法返回一个字符串，<code>e()</code>返回的是<code>SharedPreferences</code>类型， <code>getString()</code>从保存的数据中找键为<code>foundation:session_id</code>的值，如果没有找到，返回<code>l</code>。</p>
<p>接下来去找<code>l</code>是怎么赋值的，如下</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/49.jpg" alt="1"></p>
<p>这段代码生成了一个由4个随机字节组成的字节数组，并将这些字节转换为一个十六进制字符串。随后，这个十六进制字符串通过 <code>x.h()</code> 方法进行处理，并赋值给变量 <code>l</code>。<code>x.h()</code>用于对<code>hex</code>进行是否为空的检测。</p>
<h3 id="Python生成session-id"><a href="#Python生成session-id" class="headerlink" title="Python生成session_id"></a>Python生成session_id</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_session_id</span>():</span><br><span class="line">    <span class="keyword">return</span> random.randbytes(<span class="number">4</span>).<span class="built_in">hex</span>()</span><br></pre></td></tr></table></figure>

<h2 id="fp-local参数还原"><a href="#fp-local参数还原" class="headerlink" title="fp_local参数还原"></a>fp_local参数还原</h2><p>如下，<code>fp_local</code>的值为字段<code>j2</code>，它是通过<code>com.bilibili.api.a.j()</code>方法获取的</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/50.jpg" alt="1"></p>
<h3 id="com-bilibili-api-a-j"><a href="#com-bilibili-api-a-j" class="headerlink" title="com.bilibili.api.a.j()"></a>com.bilibili.api.a.j()</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/51.jpg" alt="1"></p>
<p>这里的<code>F()</code>方法是接口方法，b是其实现类，它是在一个<code>o</code>方法里赋值的</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/43.jpg" alt="1"></p>
<p>找到o方法的上层调用，在<code>tv.danmaku.bili.utils.p.b()</code>方法里</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/52.jpg" alt="1"></p>
<p>里面传入的是一个a对象，在a类里有对<code>F()</code>方法的实现</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/53.jpg" alt="1"></p>
<p>在<code>F()</code>方法里返回了一个字段<code>a</code>，它使用过<code>c2.f.b0.c.a.c.a()</code>，这个方法获得的 </p>
<h3 id="c2-f-b0-c-a-c-a"><a href="#c2-f-b0-c-a-c-a" class="headerlink" title="c2.f.b0.c.a.c.a()"></a>c2.f.b0.c.a.c.a()</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/54.jpg" alt="1"></p>
<p><code>a</code>方法返回的是<code>Fingerprint.h.c()</code>方法的返回值</p>
<p>看<code>Fingerprint.h.c()</code>方法</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/55.jpg" alt="1"></p>
<p>这里是首先定义了一个<code>str</code>为空，然后把类字段<code>a</code>赋值给了<code>str</code>，然后进行返回，所以返回的值其实是<code>a</code>，接下来找<code>a</code>是怎么来的</p>
<p>如下，找到了一个地方对<code>a</code>进行了赋值</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/56.jpg" alt="1"></p>
<p>通过字段<code>d2</code>对<code>a</code>进行赋值，接下来找<code>d2</code>是怎么生成的</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/57.jpg" alt="1"></p>
<p>先调用<code>env.d()</code>方法在内存中找<code>fp_local</code>，找不到的话就调用<code>d2 = com.bilibili.lib.biliid.internal.fingerprint.a.a.a(buvidLegacy, aVar);</code>来生成</p>
<p>先分析<code>a()</code>方法里的两个参数是怎么来的</p>
<h3 id="buvidLegacy"><a href="#buvidLegacy" class="headerlink" title="buvidLegacy"></a>buvidLegacy</h3><p><code>buvidLegacy</code>通过<code>String buvidLegacy = c3.a();</code>方法来获取</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/58.jpg" alt="1"></p>
<p>这个<code>a()</code>方法与生成<code>buvid</code>时的<code>a()</code>方法是一样的，它的返回值就是<code>buvid</code></p>
<h3 id="aVar"><a href="#aVar" class="headerlink" title="aVar"></a>aVar</h3><p><code>aVar</code>通过<code>com.bilibili.lib.biliid.internal.fingerprint.b.a aVar = b;</code>来赋值，</p>
<p>字段<code>b</code>来源于<code>b = Data.a();</code></p>
<p>这里我hook了一下<code>a()</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">Data</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.bilibili.lib.biliid.internal.fingerprint.data.DataKt&quot;</span>);</span><br><span class="line">        <span class="title class_">Data</span>[<span class="string">&quot;a&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Data.a is called`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;a&quot;</span>]();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Data.a result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_a</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Data.a is called</span><br><span class="line">Data.a result=</span><br><span class="line">Data(main=&#123;str_brightness=32, app_version=6.24.0, cpuModel=ARMv8 Processor rev 13 (v8l), speed_sensor=1, adb_enabled=1, screen=1080,2028,440, ui_version=pd1a.180720.030, linear_speed_sensor=1, virtualproc=[], sensors_info=[&#123;&quot;name&quot;:&quot;TMD2725 Proximity (wake-up)&quot;,&quot;vendor&quot;:&quot;AMS&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;8&quot;,&quot;maxRange&quot;:&quot;5.0&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.001&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;, &#123;&quot;name&quot;:&quot;BMP380 Barometer&quot;,&quot;vendor&quot;:&quot;Bosch&quot;,&quot;version&quot;:&quot;8709&quot;,&quot;type&quot;:&quot;6&quot;,&quot;maxRange&quot;:&quot;1250.0&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.7&quot;,&quot;minDelay&quot;:&quot;40000&quot;&#125;, &#123;&quot;name&quot;:&quot;BMP380 Temperature&quot;,&quot;vendor&quot;:&quot;Bosch&quot;,&quot;version&quot;:&quot;8709&quot;,&quot;type&quot;:&quot;33172003&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.3&quot;,&quot;minDelay&quot;:&quot;200000&quot;&#125;, &#123;&quot;name&quot;:&quot;LIS2MDL Magnetometer Uncalibrated&quot;,&quot;vendor&quot;:&quot;STMicro&quot;,&quot;version&quot;:&quot;262&quot;,&quot;type&quot;:&quot;14&quot;,&quot;maxRange&quot;:&quot;4915.2&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.2&quot;,&quot;minDelay&quot;:&quot;10000&quot;&#125;, &#123;&quot;name&quot;:&quot;BMI160 Temperature&quot;,&quot;vendor&quot;:&quot;BOSCH&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;33172002&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.18&quot;,&quot;minDelay&quot;:&quot;200000&quot;&#125;, &#123;&quot;name&quot;:&quot;camera v-sync 2&quot;,&quot;vendor&quot;:&quot;google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;33172005&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.001&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;, &#123;&quot;name&quot;:&quot;camera v-sync 1&quot;,&quot;vendor&quot;:&quot;google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;33172005&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.001&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;, &#123;&quot;name&quot;:&quot;camera v-sync 0&quot;,&quot;vendor&quot;:&quot;google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;33172005&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.001&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;, &#123;&quot;name&quot;:&quot;BMI160 Gyroscope Uncalibrated&quot;,&quot;vendor&quot;:&quot;BOSCH&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;16&quot;,&quot;maxRange&quot;:&quot;34.906555&quot;,&quot;resolution&quot;:&quot;0.0010652635&quot;,&quot;power&quot;:&quot;0.9&quot;,&quot;minDelay&quot;:&quot;2500&quot;&#125;, &#123;&quot;name&quot;:&quot;BMI160 Gyroscope&quot;,&quot;vendor&quot;:&quot;BOSCH&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;4&quot;,&quot;maxRange&quot;:&quot;34.906555&quot;,&quot;resolution&quot;:&quot;0.0010652635&quot;,&quot;power&quot;:&quot;0.9&quot;,&quot;minDelay&quot;:&quot;2500&quot;&#125;, &#123;&quot;name&quot;:&quot;LIS2MDL Temperature&quot;,&quot;vendor&quot;:&quot;STMicro&quot;,&quot;version&quot;:&quot;262&quot;,&quot;type&quot;:&quot;33172004&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.001&quot;,&quot;minDelay&quot;:&quot;10000&quot;&#125;, &#123;&quot;name&quot;:&quot;MAX11261&quot;,&quot;vendor&quot;:&quot;Maxim&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;33172001&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.001&quot;,&quot;minDelay&quot;:&quot;10000&quot;&#125;, &#123;&quot;name&quot;:&quot;BMI160 Accelerometer Uncalibrated&quot;,&quot;vendor&quot;:&quot;BOSCH&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;35&quot;,&quot;maxRange&quot;:&quot;1539.5468&quot;,&quot;resolution&quot;:&quot;4.6983238E-5&quot;,&quot;power&quot;:&quot;0.18&quot;,&quot;minDelay&quot;:&quot;2500&quot;&#125;, &#123;&quot;name&quot;:&quot;LIS2MDL Magnetometer&quot;,&quot;vendor&quot;:&quot;STMicro&quot;,&quot;version&quot;:&quot;262&quot;,&quot;type&quot;:&quot;2&quot;,&quot;maxRange&quot;:&quot;4915.2&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.2&quot;,&quot;minDelay&quot;:&quot;10000&quot;&#125;, &#123;&quot;name&quot;:&quot;TMD2725 Ambient Light&quot;,&quot;vendor&quot;:&quot;AMS&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;5&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.001&quot;,&quot;power&quot;:&quot;0.001&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;, &#123;&quot;name&quot;:&quot;BMI160 Accelerometer&quot;,&quot;vendor&quot;:&quot;BOSCH&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;1&quot;,&quot;maxRange&quot;:&quot;1539.5468&quot;,&quot;resolution&quot;:&quot;4.6983238E-5&quot;,&quot;power&quot;:&quot;0.18&quot;,&quot;minDelay&quot;:&quot;2500&quot;&#125;, &#123;&quot;name&quot;:&quot;Binned Brightness&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;65541&quot;,&quot;maxRange&quot;:&quot;255.0&quot;,&quot;resolution&quot;:&quot;1.0&quot;,&quot;power&quot;:&quot;0.2&quot;,&quot;minDelay&quot;:&quot;1000000&quot;&#125;, &#123;&quot;name&quot;:&quot;Device Pickup Sensor&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;25&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;1.0&quot;,&quot;power&quot;:&quot;0.25&quot;,&quot;minDelay&quot;:&quot;-1&quot;&#125;, &#123;&quot;name&quot;:&quot;Proximity Gated Double Tap Gesture&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;65543&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.0&quot;,&quot;power&quot;:&quot;0.001&quot;,&quot;minDelay&quot;:&quot;-1&quot;&#125;, &#123;&quot;name&quot;:&quot;Double Twist&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;65537&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;1.0&quot;,&quot;power&quot;:&quot;1.0&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;, &#123;&quot;name&quot;:&quot;Game Rotation Vector Sensor&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;15&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;1.0E-5&quot;,&quot;power&quot;:&quot;1.0&quot;,&quot;minDelay&quot;:&quot;5000&quot;&#125;, &#123;&quot;name&quot;:&quot;Geomagnetic Rotation Vector Sensor&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;20&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;1.0E-5&quot;,&quot;power&quot;:&quot;1.0&quot;,&quot;minDelay&quot;:&quot;5000&quot;&#125;, &#123;&quot;name&quot;:&quot;Gravity Sensor&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;9&quot;,&quot;maxRange&quot;:&quot;9.81&quot;,&quot;resolution&quot;:&quot;1.0E-5&quot;,&quot;power&quot;:&quot;1.0&quot;,&quot;minDelay&quot;:&quot;5000&quot;&#125;, &#123;&quot;name&quot;:&quot;Linear Acceleration Sensor&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;10&quot;,&quot;maxRange&quot;:&quot;156.96&quot;,&quot;resolution&quot;:&quot;1.0E-5&quot;,&quot;power&quot;:&quot;1.0&quot;,&quot;minDelay&quot;:&quot;20000&quot;&#125;, &#123;&quot;name&quot;:&quot;Orientation Sensor&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;3&quot;,&quot;maxRange&quot;:&quot;360.0&quot;,&quot;resolution&quot;:&quot;1.0E-5&quot;,&quot;power&quot;:&quot;1.0&quot;,&quot;minDelay&quot;:&quot;5000&quot;&#125;, &#123;&quot;name&quot;:&quot;Rotation Vector Sensor&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;11&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;1.0E-5&quot;,&quot;power&quot;:&quot;1.0&quot;,&quot;minDelay&quot;:&quot;5000&quot;&#125;, &#123;&quot;name&quot;:&quot;Significant Motion&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;17&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;1.0&quot;,&quot;power&quot;:&quot;0.25&quot;,&quot;minDelay&quot;:&quot;-1&quot;&#125;, &#123;&quot;name&quot;:&quot;Step Counter&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;19&quot;,&quot;maxRange&quot;:&quot;1.8446744E19&quot;,&quot;resolution&quot;:&quot;1.0&quot;,&quot;power&quot;:&quot;0.1&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;, &#123;&quot;name&quot;:&quot;Step Detector&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;18&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;1.0&quot;,&quot;power&quot;:&quot;0.1&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;, &#123;&quot;name&quot;:&quot;Tilt Sensor&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;22&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.0&quot;,&quot;power&quot;:&quot;0.25&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;, &#123;&quot;name&quot;:&quot;Device Orientation&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;27&quot;,&quot;maxRange&quot;:&quot;3.0&quot;,&quot;resolution&quot;:&quot;1.0&quot;,&quot;power&quot;:&quot;1.0&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;], app_version_code=6240300, batteryState=BATTERY_STATUS_CHARGING, aaid=, model=Pixel 3, band=g845-00023-180815-B-4956438, wifimac=3C:28:6D:EA:A3:E2, net=[&quot;dummy0,fe80::64cc:afff:fe17:88eb%dummy0,66:cc:af:17:88:eb&quot;, &quot;r_rmnet_data0,fe80::9615:8f49:b195:c0c2%r_rmnet_data0,&quot;, &quot;lo,::1,127.0.0.1,&quot;, &quot;wlan0,fe80::3e28:6dff:feea:a3e2%wlan0,192.168.0.112,3c:28:6d:ea:a3:e2&quot;, &quot;rmnet_data0,fe80::f39b:f668:3162:3fd1%rmnet_data0,&quot;, &quot;rmnet_ipa0,,&quot;], app_id=1, brand=google, cpuCount=8, biometric=1, maps=, btmac=, cpuVendor=Qualcomm, device_angle=-0.011197972,2.7591743,-0.0041870493, str_battery=96, vaid=, build_id=PD1A.180720.030, androidappcnt=260, guid=a05fc3dd-ed19-4d54-b7f7-e0a628a91c2a, files=/data/user/0/tv.danmaku.bili/files, sensor=[&quot;TMD2725 Proximity (wake-up),AMS&quot;, &quot;BMP380 Barometer,Bosch&quot;, &quot;BMP380 Temperature,Bosch&quot;, &quot;LIS2MDL Magnetometer Uncalibrated,STMicro&quot;, &quot;BMI160 Temperature,BOSCH&quot;, &quot;camera v-sync 2,google&quot;, &quot;camera v-sync 1,google&quot;, &quot;camera v-sync 0,google&quot;, &quot;BMI160 Gyroscope Uncalibrated,BOSCH&quot;, &quot;BMI160 Gyroscope,BOSCH&quot;, &quot;LIS2MDL Temperature,STMicro&quot;, &quot;MAX11261,Maxim&quot;, &quot;BMI160 Accelerometer Uncalibrated,BOSCH&quot;, &quot;LIS2MDL Magnetometer,STMicro&quot;, &quot;TMD2725 Ambient Light,AMS&quot;, &quot;BMI160 Accelerometer,BOSCH&quot;, &quot;Binned Brightness,Google&quot;, &quot;Device Pickup Sensor,Google&quot;, &quot;Proximity Gated Double Tap Gesture,Google&quot;, &quot;Double Twist,Google&quot;, &quot;Game Rotation Vector Sensor,Google&quot;, &quot;Geomagnetic Rotation Vector Sensor,Google&quot;, &quot;Gravity Sensor,Google&quot;, &quot;Linear Acceleration Sensor,Google&quot;, &quot;Orientation Sensor,Google&quot;, &quot;Rotation Vector Sensor,Google&quot;, &quot;Significant Motion,Google&quot;, &quot;Step Counter,Google&quot;, &quot;Step Detector,Google&quot;, &quot;Tilt Sensor,Google&quot;, &quot;Device Orientation,Google&quot;], gadid=, fstorage=33928413184, virtual=0, memory=3723137024, mid=, oid=, emu=000, is_root=true, battery=96, mac=3C:28:6D:EA:A3:E2, network=WIFI, uid=10243, data_connect_state=0, glimit=, adid=5abb19ceea116b31, mem=3723137024, countryIso=CN, sim=1, root=1, sdkver=0.2.4, light_intensity=4.1807923, boot=976254663, str_app_id=1, oaid=, apps=[&quot;1230796800000,com.google.omadm.trigger,1,1.0,1,1230796800000&quot;,&quot;1230796800000,com.google.android.carriersetup,1,9,28,1230796800000&quot;,&quot;1230796800000,com.android.cts.priv.ctsshim,1,8.1.0-4396705,27,1230796800000&quot;,&quot;1230796800000,com.google.android.youtube,1,20.02.40,1552287168,1738224905212&quot;,&quot;1230796800000,com.vzw.apnlib,1,13.0,14,1230796800000&quot;,&quot;1230796800000,com.android.internal.display.cutout.emulation.corner,1,1.0,1,1230796800000&quot;,&quot;1230796800000,com.google.android.ext.services,1,1,1,1230796800000&quot;,&quot;1729696867893,com.example.hellojnitest,0,1.0,1,1729737782103&quot;,&quot;1230796800000,com.android.internal.display.cutout.emulation.double,1,1.0,1,1230796800000&quot;,&quot;1230796800000,com.android.providers.telephony,1,9,28,1230796800000&quot;,&quot;1230796800000,com.android.sdm.plugins.connmo,1,1.0,1,1230796800000&quot;,&quot;1230796800000,com.google.android.googlequicksearchbox,1,16.2.40.ve.arm64,301459242,1738224848635&quot;,&quot;1230796800000,com.android.providers.calendar,1,9,28,1230796800000&quot;,&quot;1711181586493,net.typeblog.socks,0,1.0.4,13,1711181586493&quot;,&quot;1230796800000,com.android.providers.media,1,9,900,1230796800000&quot;,&quot;1711199319522,com.qiyi.video,0,11.5.0,800110550,1711199319522&quot;,&quot;1230796800000,com.google.android.onetimeinitializer,1,9,28,1230796800000&quot;,&quot;1230796800000,com.google.android.ext.shared,1,1,1,1230796800000&quot;,&quot;1230796800000,com.qualcomm.ltebc_vzw,1,MSDC_LA_4.2.01.11.0,42010110,1230796800000&quot;,&quot;1230796800000,com.quicinc.cne.CNEService,1,1.1,1,1230796800000&quot;], androidsysapp20=[&quot;1230796800000,com.google.omadm.trigger,1,1.0,1,1230796800000&quot;,&quot;1230796800000,com.google.android.carriersetup,1,9,28,1230796800000&quot;,&quot;1230796800000,com.android.cts.priv.ctsshim,1,8.1.0-4396705,27,1230796800000&quot;,&quot;1230796800000,com.google.android.youtube,1,20.02.40,1552287168,1738224905212&quot;,&quot;1230796800000,com.vzw.apnlib,1,13.0,14,1230796800000&quot;,&quot;1230796800000,com.android.internal.display.cutout.emulation.corner,1,1.0,1,1230796800000&quot;,&quot;1230796800000,com.google.android.ext.services,1,1,1,1230796800000&quot;,&quot;1230796800000,com.android.internal.display.cutout.emulation.double,1,1.0,1,1230796800000&quot;,&quot;1230796800000,com.android.providers.telephony,1,9,28,1230796800000&quot;,&quot;1230796800000,com.android.sdm.plugins.connmo,1,1.0,1,1230796800000&quot;,&quot;1230796800000,com.google.android.googlequicksearchbox,1,16.2.40.ve.arm64,301459242,1738224848635&quot;,&quot;1230796800000,com.android.providers.calendar,1,9,28,1230796800000&quot;,&quot;1230796800000,com.android.providers.media,1,9,900,1230796800000&quot;,&quot;1230796800000,com.google.android.onetimeinitializer,1,9,28,1230796800000&quot;,&quot;1230796800000,com.google.android.ext.shared,1,1,1,1230796800000&quot;,&quot;1230796800000,com.qualcomm.ltebc_vzw,1,MSDC_LA_4.2.01.11.0,42010110,1230796800000&quot;,&quot;1230796800000,com.quicinc.cne.CNEService,1,1.1,1,1230796800000&quot;,&quot;1230796800000,com.qualcomm.qti.smcinvokepkgmgr,1,1.0,1,1230796800000&quot;,&quot;1230796800000,com.android.documentsui,1,9,28,1230796800000&quot;,&quot;1230796800000,android.auto_generated_rro__,1,1.0,1,1230796800000&quot;], proc=tv.danmaku.bili, fts=1738507220, os=android, languages=zh, systemvolume=0, free_memory=1727660032, totalSpace=55379472384, accessibility_service=[&quot;com.google.android.marvin.talkback/.TalkBackService&quot;, &quot;com.google.android.marvin.talkback/com.google.android.accessibility.accessibilitymenu.AccessibilityMenuService&quot;, &quot;com.google.android.marvin.talkback/com.google.android.accessibility.selecttospeak.SelectToSpeakService&quot;, &quot;com.google.android.marvin.talkback/com.android.switchaccess.SwitchAccessService&quot;, &quot;bin.mt.plus/bin.mt.function.ar.ActivityRecordService&quot;, &quot;com.estrongs.android.pop/com.estrongs.fs.impl.local.AutoAuthService&quot;, &quot;com.qihoo.appstore/.accessibility.AppstoreAccessibility&quot;, &quot;com.wandoujia.phoenix2/com.pp.assistant.accessibility.AccessibilityService&quot;, &quot;com.xingin.xhs/com.xingin.alpha.common.access.GameRecordAccessibilityService&quot;], osver=9, chid=alifenfa, androidapp20=[&quot;1729696867893,com.example.hellojnitest,0,1.0,1,1729737782103&quot;,&quot;1711181586493,net.typeblog.socks,0,1.0.4,13,1711181586493&quot;,&quot;1711199319522,com.qiyi.video,0,11.5.0,800110550,1711199319522&quot;,&quot;1728583109623,com.zx.Justmeplush,0,2.0,2,1728583109623&quot;,&quot;1737391958923,com.douban.frodo,0,7.89.0,307,1737391958923&quot;,&quot;1730733792580,com.github.kr328.clash,0,3.0.3.premium,300003,1730733792580&quot;,&quot;1730769260488,com.example.packerapp,0,1.0,1,1730799296361&quot;,&quot;1725493032640,com.example.javahookdemo,0,1.0,1,1725974937739&quot;,&quot;1737130307244,com.ushaqi.zhuishushenqi,0,4.85.73,7973,1737130307244&quot;,&quot;1732863178328,com.yaotong.crackme,0,1.0,1,1732863178328&quot;,&quot;1730294059865,com.example.unidbgtest,0,1.0,1,1730295569462&quot;,&quot;1728375218269,com.izen.abc,0,1.0.9,1,1728375218269&quot;,&quot;1729958664139,com.example.aestool,0,1.0,1,1729958783366&quot;,&quot;1730368506985,com.example.develop_test,0,1.0,1,1730373040462&quot;,&quot;1723908516582,com.example.activitytest,0,1.0,1,1723909442352&quot;,&quot;1732874628219,com.xingin.xhs,0,8.57.0,8570985,1732961699211&quot;,&quot;1738373185269,com.zj.wuaipojie2025,0,1.0,1,1738373185269&quot;,&quot;1726495470725,com.example.plugindex,0,1.0,1,1726495470725&quot;,&quot;1732961995889,com.netease.community,0,1.2,67,1732961995889&quot;,&quot;1732244828849,vz.bwu,0,1.0,1,1732244828849&quot;], biometrics=touchid, last_dump_ts=1738576816411, brightness=32, gyroscope_sensor=1, t=1738586160751, kernel_version=4.9.96-g340a9aaf92bc-ab4959234, usb_connected=1, cpuFreq=1766400, gps_sensor=1, data_activity_state=0, axposed=false, first=false&#125;, propery=&#123;net.hostname=, ro.boot.hardware=blueline, gsm.sim.state=, ro.build.date.utc=1534990449, ro.product.device=blueline, persist.sys.language=, ro.debuggable=0, net.gprs.local-ip=, ro.build.tags=release-keys, http.proxy=, ro.serialno=, persist.sys.country=, ro.boot.serialno=, gsm.network.type=Unknown, net.eth0.gw=, net.dns1=, sys.usb.state=, http.agent=&#125;, sys=&#123;product=blueline, cpu_abi=armeabi-v7a, serial=unknown, display=PD1A.180720.030, fingerprint=google/blueline/blueline:9/PD1A.180720.030/4972053:user/release-keys, cpu_abi2=armeabi, device=blueline, manufacturer=Google, hardware=blueline&#125;)</span><br></pre></td></tr></table></figure>

<p>这个结果很长，先放在这里，后面分析。</p>
<h3 id="a-2"><a href="#a-2" class="headerlink" title="a()"></a>a()</h3><p><code>buvidLegacy</code>和 <code>aVar</code>这两个参数知道是什么了，接下来再去看<code>a()</code>方法</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/59.jpg" alt="1"></p>
<p>这里面调用了一系列函数得到返回值先看<code>MiscHelperKt.a(f(buvidLegacy, data))</code>里的<code>f(buvidLegacy, data)</code></p>
<h3 id="f-1"><a href="#f-1" class="headerlink" title="f()"></a>f()</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/60.jpg" alt="1"></p>
<p>这里面是调用<code>aVar.a()</code>得到<code>a2</code></p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/61.jpg" alt="1"></p>
<p>这里的<code>a2</code>就是前面<code>aVar</code>里的<code>main</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main=&#123;str_brightness=32, app_version=6.24.0, cpuModel=ARMv8 Processor rev 13 (v8l), speed_sensor=1, adb_enabled=1, screen=1080,2028,440, ui_version=pd1a.180720.030, linear_speed_sensor=1, virtualproc=[], sensors_info=[&#123;&quot;name&quot;:&quot;TMD2725 Proximity (wake-up)&quot;,&quot;vendor&quot;:&quot;AMS&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;8&quot;,&quot;maxRange&quot;:&quot;5.0&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.001&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;, &#123;&quot;name&quot;:&quot;BMP380 Barometer&quot;,&quot;vendor&quot;:&quot;Bosch&quot;,&quot;version&quot;:&quot;8709&quot;,&quot;type&quot;:&quot;6&quot;,&quot;maxRange&quot;:&quot;1250.0&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.7&quot;,&quot;minDelay&quot;:&quot;40000&quot;&#125;, &#123;&quot;name&quot;:&quot;BMP380 Temperature&quot;,&quot;vendor&quot;:&quot;Bosch&quot;,&quot;version&quot;:&quot;8709&quot;,&quot;type&quot;:&quot;33172003&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.3&quot;,&quot;minDelay&quot;:&quot;200000&quot;&#125;, &#123;&quot;name&quot;:&quot;LIS2MDL Magnetometer Uncalibrated&quot;,&quot;vendor&quot;:&quot;STMicro&quot;,&quot;version&quot;:&quot;262&quot;,&quot;type&quot;:&quot;14&quot;,&quot;maxRange&quot;:&quot;4915.2&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.2&quot;,&quot;minDelay&quot;:&quot;10000&quot;&#125;, &#123;&quot;name&quot;:&quot;BMI160 Temperature&quot;,&quot;vendor&quot;:&quot;BOSCH&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;33172002&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.18&quot;,&quot;minDelay&quot;:&quot;200000&quot;&#125;, &#123;&quot;name&quot;:&quot;camera v-sync 2&quot;,&quot;vendor&quot;:&quot;google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;33172005&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.001&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;, &#123;&quot;name&quot;:&quot;camera v-sync 1&quot;,&quot;vendor&quot;:&quot;google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;33172005&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.001&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;, &#123;&quot;name&quot;:&quot;camera v-sync 0&quot;,&quot;vendor&quot;:&quot;google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;33172005&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.001&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;, &#123;&quot;name&quot;:&quot;BMI160 Gyroscope Uncalibrated&quot;,&quot;vendor&quot;:&quot;BOSCH&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;16&quot;,&quot;maxRange&quot;:&quot;34.906555&quot;,&quot;resolution&quot;:&quot;0.0010652635&quot;,&quot;power&quot;:&quot;0.9&quot;,&quot;minDelay&quot;:&quot;2500&quot;&#125;, &#123;&quot;name&quot;:&quot;BMI160 Gyroscope&quot;,&quot;vendor&quot;:&quot;BOSCH&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;4&quot;,&quot;maxRange&quot;:&quot;34.906555&quot;,&quot;resolution&quot;:&quot;0.0010652635&quot;,&quot;power&quot;:&quot;0.9&quot;,&quot;minDelay&quot;:&quot;2500&quot;&#125;, &#123;&quot;name&quot;:&quot;LIS2MDL Temperature&quot;,&quot;vendor&quot;:&quot;STMicro&quot;,&quot;version&quot;:&quot;262&quot;,&quot;type&quot;:&quot;33172004&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.001&quot;,&quot;minDelay&quot;:&quot;10000&quot;&#125;, &#123;&quot;name&quot;:&quot;MAX11261&quot;,&quot;vendor&quot;:&quot;Maxim&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;33172001&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.001&quot;,&quot;minDelay&quot;:&quot;10000&quot;&#125;, &#123;&quot;name&quot;:&quot;BMI160 Accelerometer Uncalibrated&quot;,&quot;vendor&quot;:&quot;BOSCH&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;35&quot;,&quot;maxRange&quot;:&quot;1539.5468&quot;,&quot;resolution&quot;:&quot;4.6983238E-5&quot;,&quot;power&quot;:&quot;0.18&quot;,&quot;minDelay&quot;:&quot;2500&quot;&#125;, &#123;&quot;name&quot;:&quot;LIS2MDL Magnetometer&quot;,&quot;vendor&quot;:&quot;STMicro&quot;,&quot;version&quot;:&quot;262&quot;,&quot;type&quot;:&quot;2&quot;,&quot;maxRange&quot;:&quot;4915.2&quot;,&quot;resolution&quot;:&quot;0.1&quot;,&quot;power&quot;:&quot;0.2&quot;,&quot;minDelay&quot;:&quot;10000&quot;&#125;, &#123;&quot;name&quot;:&quot;TMD2725 Ambient Light&quot;,&quot;vendor&quot;:&quot;AMS&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;5&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.001&quot;,&quot;power&quot;:&quot;0.001&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;, &#123;&quot;name&quot;:&quot;BMI160 Accelerometer&quot;,&quot;vendor&quot;:&quot;BOSCH&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;1&quot;,&quot;maxRange&quot;:&quot;1539.5468&quot;,&quot;resolution&quot;:&quot;4.6983238E-5&quot;,&quot;power&quot;:&quot;0.18&quot;,&quot;minDelay&quot;:&quot;2500&quot;&#125;, &#123;&quot;name&quot;:&quot;Binned Brightness&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;65541&quot;,&quot;maxRange&quot;:&quot;255.0&quot;,&quot;resolution&quot;:&quot;1.0&quot;,&quot;power&quot;:&quot;0.2&quot;,&quot;minDelay&quot;:&quot;1000000&quot;&#125;, &#123;&quot;name&quot;:&quot;Device Pickup Sensor&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;25&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;1.0&quot;,&quot;power&quot;:&quot;0.25&quot;,&quot;minDelay&quot;:&quot;-1&quot;&#125;, &#123;&quot;name&quot;:&quot;Proximity Gated Double Tap Gesture&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;65543&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.0&quot;,&quot;power&quot;:&quot;0.001&quot;,&quot;minDelay&quot;:&quot;-1&quot;&#125;, &#123;&quot;name&quot;:&quot;Double Twist&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;65537&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;1.0&quot;,&quot;power&quot;:&quot;1.0&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;, &#123;&quot;name&quot;:&quot;Game Rotation Vector Sensor&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;15&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;1.0E-5&quot;,&quot;power&quot;:&quot;1.0&quot;,&quot;minDelay&quot;:&quot;5000&quot;&#125;, &#123;&quot;name&quot;:&quot;Geomagnetic Rotation Vector Sensor&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;20&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;1.0E-5&quot;,&quot;power&quot;:&quot;1.0&quot;,&quot;minDelay&quot;:&quot;5000&quot;&#125;, &#123;&quot;name&quot;:&quot;Gravity Sensor&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;9&quot;,&quot;maxRange&quot;:&quot;9.81&quot;,&quot;resolution&quot;:&quot;1.0E-5&quot;,&quot;power&quot;:&quot;1.0&quot;,&quot;minDelay&quot;:&quot;5000&quot;&#125;, &#123;&quot;name&quot;:&quot;Linear Acceleration Sensor&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;10&quot;,&quot;maxRange&quot;:&quot;156.96&quot;,&quot;resolution&quot;:&quot;1.0E-5&quot;,&quot;power&quot;:&quot;1.0&quot;,&quot;minDelay&quot;:&quot;20000&quot;&#125;, &#123;&quot;name&quot;:&quot;Orientation Sensor&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;3&quot;,&quot;maxRange&quot;:&quot;360.0&quot;,&quot;resolution&quot;:&quot;1.0E-5&quot;,&quot;power&quot;:&quot;1.0&quot;,&quot;minDelay&quot;:&quot;5000&quot;&#125;, &#123;&quot;name&quot;:&quot;Rotation Vector Sensor&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;11&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;1.0E-5&quot;,&quot;power&quot;:&quot;1.0&quot;,&quot;minDelay&quot;:&quot;5000&quot;&#125;, &#123;&quot;name&quot;:&quot;Significant Motion&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;17&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;1.0&quot;,&quot;power&quot;:&quot;0.25&quot;,&quot;minDelay&quot;:&quot;-1&quot;&#125;, &#123;&quot;name&quot;:&quot;Step Counter&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;19&quot;,&quot;maxRange&quot;:&quot;1.8446744E19&quot;,&quot;resolution&quot;:&quot;1.0&quot;,&quot;power&quot;:&quot;0.1&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;, &#123;&quot;name&quot;:&quot;Step Detector&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;18&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;1.0&quot;,&quot;power&quot;:&quot;0.1&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;, &#123;&quot;name&quot;:&quot;Tilt Sensor&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;22&quot;,&quot;maxRange&quot;:&quot;1.0&quot;,&quot;resolution&quot;:&quot;0.0&quot;,&quot;power&quot;:&quot;0.25&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;, &#123;&quot;name&quot;:&quot;Device Orientation&quot;,&quot;vendor&quot;:&quot;Google&quot;,&quot;version&quot;:&quot;1&quot;,&quot;type&quot;:&quot;27&quot;,&quot;maxRange&quot;:&quot;3.0&quot;,&quot;resolution&quot;:&quot;1.0&quot;,&quot;power&quot;:&quot;1.0&quot;,&quot;minDelay&quot;:&quot;0&quot;&#125;], app_version_code=6240300, batteryState=BATTERY_STATUS_CHARGING, aaid=, model=Pixel 3, band=g845-00023-180815-B-4956438, wifimac=3C:28:6D:EA:A3:E2, net=[&quot;dummy0,fe80::64cc:afff:fe17:88eb%dummy0,66:cc:af:17:88:eb&quot;, &quot;r_rmnet_data0,fe80::9615:8f49:b195:c0c2%r_rmnet_data0,&quot;, &quot;lo,::1,127.0.0.1,&quot;, &quot;wlan0,fe80::3e28:6dff:feea:a3e2%wlan0,192.168.0.112,3c:28:6d:ea:a3:e2&quot;, &quot;rmnet_data0,fe80::f39b:f668:3162:3fd1%rmnet_data0,&quot;, &quot;rmnet_ipa0,,&quot;], app_id=1, brand=google, cpuCount=8, biometric=1, maps=, btmac=, cpuVendor=Qualcomm, device_angle=-0.011197972,2.7591743,-0.0041870493, str_battery=96, vaid=, build_id=PD1A.180720.030, androidappcnt=260, guid=a05fc3dd-ed19-4d54-b7f7-e0a628a91c2a, files=/data/user/0/tv.danmaku.bili/files, sensor=[&quot;TMD2725 Proximity (wake-up),AMS&quot;, &quot;BMP380 Barometer,Bosch&quot;, &quot;BMP380 Temperature,Bosch&quot;, &quot;LIS2MDL Magnetometer Uncalibrated,STMicro&quot;, &quot;BMI160 Temperature,BOSCH&quot;, &quot;camera v-sync 2,google&quot;, &quot;camera v-sync 1,google&quot;, &quot;camera v-sync 0,google&quot;, &quot;BMI160 Gyroscope Uncalibrated,BOSCH&quot;, &quot;BMI160 Gyroscope,BOSCH&quot;, &quot;LIS2MDL Temperature,STMicro&quot;, &quot;MAX11261,Maxim&quot;, &quot;BMI160 Accelerometer Uncalibrated,BOSCH&quot;, &quot;LIS2MDL Magnetometer,STMicro&quot;, &quot;TMD2725 Ambient Light,AMS&quot;, &quot;BMI160 Accelerometer,BOSCH&quot;, &quot;Binned Brightness,Google&quot;, &quot;Device Pickup Sensor,Google&quot;, &quot;Proximity Gated Double Tap Gesture,Google&quot;, &quot;Double Twist,Google&quot;, &quot;Game Rotation Vector Sensor,Google&quot;, &quot;Geomagnetic Rotation Vector Sensor,Google&quot;, &quot;Gravity Sensor,Google&quot;, &quot;Linear Acceleration Sensor,Google&quot;, &quot;Orientation Sensor,Google&quot;, &quot;Rotation Vector Sensor,Google&quot;, &quot;Significant Motion,Google&quot;, &quot;Step Counter,Google&quot;, &quot;Step Detector,Google&quot;, &quot;Tilt Sensor,Google&quot;, &quot;Device Orientation,Google&quot;], gadid=, fstorage=33928413184, virtual=0, memory=3723137024, mid=, oid=, emu=000, is_root=true, battery=96, mac=3C:28:6D:EA:A3:E2, network=WIFI, uid=10243, data_connect_state=0, glimit=, adid=5abb19ceea116b31, mem=3723137024, countryIso=CN, sim=1, root=1, sdkver=0.2.4, light_intensity=4.1807923, boot=976254663, str_app_id=1, oaid=, apps=[&quot;1230796800000,com.google.omadm.trigger,1,1.0,1,1230796800000&quot;,&quot;1230796800000,com.google.android.carriersetup,1,9,28,1230796800000&quot;,&quot;1230796800000,com.android.cts.priv.ctsshim,1,8.1.0-4396705,27,1230796800000&quot;,&quot;1230796800000,com.google.android.youtube,1,20.02.40,1552287168,1738224905212&quot;,&quot;1230796800000,com.vzw.apnlib,1,13.0,14,1230796800000&quot;,&quot;1230796800000,com.android.internal.display.cutout.emulation.corner,1,1.0,1,1230796800000&quot;,&quot;1230796800000,com.google.android.ext.services,1,1,1,1230796800000&quot;,&quot;1729696867893,com.example.hellojnitest,0,1.0,1,1729737782103&quot;,&quot;1230796800000,com.android.internal.display.cutout.emulation.double,1,1.0,1,1230796800000&quot;,&quot;1230796800000,com.android.providers.telephony,1,9,28,1230796800000&quot;,&quot;1230796800000,com.android.sdm.plugins.connmo,1,1.0,1,1230796800000&quot;,&quot;1230796800000,com.google.android.googlequicksearchbox,1,16.2.40.ve.arm64,301459242,1738224848635&quot;,&quot;1230796800000,com.android.providers.calendar,1,9,28,1230796800000&quot;,&quot;1711181586493,net.typeblog.socks,0,1.0.4,13,1711181586493&quot;,&quot;1230796800000,com.android.providers.media,1,9,900,1230796800000&quot;,&quot;1711199319522,com.qiyi.video,0,11.5.0,800110550,1711199319522&quot;,&quot;1230796800000,com.google.android.onetimeinitializer,1,9,28,1230796800000&quot;,&quot;1230796800000,com.google.android.ext.shared,1,1,1,1230796800000&quot;,&quot;1230796800000,com.qualcomm.ltebc_vzw,1,MSDC_LA_4.2.01.11.0,42010110,1230796800000&quot;,&quot;1230796800000,com.quicinc.cne.CNEService,1,1.1,1,1230796800000&quot;], androidsysapp20=[&quot;1230796800000,com.google.omadm.trigger,1,1.0,1,1230796800000&quot;,&quot;1230796800000,com.google.android.carriersetup,1,9,28,1230796800000&quot;,&quot;1230796800000,com.android.cts.priv.ctsshim,1,8.1.0-4396705,27,1230796800000&quot;,&quot;1230796800000,com.google.android.youtube,1,20.02.40,1552287168,1738224905212&quot;,&quot;1230796800000,com.vzw.apnlib,1,13.0,14,1230796800000&quot;,&quot;1230796800000,com.android.internal.display.cutout.emulation.corner,1,1.0,1,1230796800000&quot;,&quot;1230796800000,com.google.android.ext.services,1,1,1,1230796800000&quot;,&quot;1230796800000,com.android.internal.display.cutout.emulation.double,1,1.0,1,1230796800000&quot;,&quot;1230796800000,com.android.providers.telephony,1,9,28,1230796800000&quot;,&quot;1230796800000,com.android.sdm.plugins.connmo,1,1.0,1,1230796800000&quot;,&quot;1230796800000,com.google.android.googlequicksearchbox,1,16.2.40.ve.arm64,301459242,1738224848635&quot;,&quot;1230796800000,com.android.providers.calendar,1,9,28,1230796800000&quot;,&quot;1230796800000,com.android.providers.media,1,9,900,1230796800000&quot;,&quot;1230796800000,com.google.android.onetimeinitializer,1,9,28,1230796800000&quot;,&quot;1230796800000,com.google.android.ext.shared,1,1,1,1230796800000&quot;,&quot;1230796800000,com.qualcomm.ltebc_vzw,1,MSDC_LA_4.2.01.11.0,42010110,1230796800000&quot;,&quot;1230796800000,com.quicinc.cne.CNEService,1,1.1,1,1230796800000&quot;,&quot;1230796800000,com.qualcomm.qti.smcinvokepkgmgr,1,1.0,1,1230796800000&quot;,&quot;1230796800000,com.android.documentsui,1,9,28,1230796800000&quot;,&quot;1230796800000,android.auto_generated_rro__,1,1.0,1,1230796800000&quot;], proc=tv.danmaku.bili, fts=1738507220, os=android, languages=zh, systemvolume=0, free_memory=1727660032, totalSpace=55379472384, accessibility_service=[&quot;com.google.android.marvin.talkback/.TalkBackService&quot;, &quot;com.google.android.marvin.talkback/com.google.android.accessibility.accessibilitymenu.AccessibilityMenuService&quot;, &quot;com.google.android.marvin.talkback/com.google.android.accessibility.selecttospeak.SelectToSpeakService&quot;, &quot;com.google.android.marvin.talkback/com.android.switchaccess.SwitchAccessService&quot;, &quot;bin.mt.plus/bin.mt.function.ar.ActivityRecordService&quot;, &quot;com.estrongs.android.pop/com.estrongs.fs.impl.local.AutoAuthService&quot;, &quot;com.qihoo.appstore/.accessibility.AppstoreAccessibility&quot;, &quot;com.wandoujia.phoenix2/com.pp.assistant.accessibility.AccessibilityService&quot;, &quot;com.xingin.xhs/com.xingin.alpha.common.access.GameRecordAccessibilityService&quot;], osver=9, chid=alifenfa, androidapp20=[&quot;1729696867893,com.example.hellojnitest,0,1.0,1,1729737782103&quot;,&quot;1711181586493,net.typeblog.socks,0,1.0.4,13,1711181586493&quot;,&quot;1711199319522,com.qiyi.video,0,11.5.0,800110550,1711199319522&quot;,&quot;1728583109623,com.zx.Justmeplush,0,2.0,2,1728583109623&quot;,&quot;1737391958923,com.douban.frodo,0,7.89.0,307,1737391958923&quot;,&quot;1730733792580,com.github.kr328.clash,0,3.0.3.premium,300003,1730733792580&quot;,&quot;1730769260488,com.example.packerapp,0,1.0,1,1730799296361&quot;,&quot;1725493032640,com.example.javahookdemo,0,1.0,1,1725974937739&quot;,&quot;1737130307244,com.ushaqi.zhuishushenqi,0,4.85.73,7973,1737130307244&quot;,&quot;1732863178328,com.yaotong.crackme,0,1.0,1,1732863178328&quot;,&quot;1730294059865,com.example.unidbgtest,0,1.0,1,1730295569462&quot;,&quot;1728375218269,com.izen.abc,0,1.0.9,1,1728375218269&quot;,&quot;1729958664139,com.example.aestool,0,1.0,1,1729958783366&quot;,&quot;1730368506985,com.example.develop_test,0,1.0,1,1730373040462&quot;,&quot;1723908516582,com.example.activitytest,0,1.0,1,1723909442352&quot;,&quot;1732874628219,com.xingin.xhs,0,8.57.0,8570985,1732961699211&quot;,&quot;1738373185269,com.zj.wuaipojie2025,0,1.0,1,1738373185269&quot;,&quot;1726495470725,com.example.plugindex,0,1.0,1,1726495470725&quot;,&quot;1732961995889,com.netease.community,0,1.2,67,1732961995889&quot;,&quot;1732244828849,vz.bwu,0,1.0,1,1732244828849&quot;], biometrics=touchid, last_dump_ts=1738576816411, brightness=32, gyroscope_sensor=1, t=1738586160751, kernel_version=4.9.96-g340a9aaf92bc-ab4959234, usb_connected=1, cpuFreq=1766400, gps_sensor=1, data_activity_state=0, axposed=false, first=false&#125;</span><br></pre></td></tr></table></figure>

<p>返回值调用了一个<code>e()</code>方法<code>e(str + a2.get(PersistEnv.KEY_PUB_MODEL) + a2.get(&quot;band&quot;))</code>，这里面的<code>str</code>是<code>buvid</code>，<code>PersistEnv.KEY_PUB_MODEL</code>的值为<code>model</code>，即手机型号，<code>band</code>是设备编号标识，他们拼接在一起作为<code>e()</code>方法的参数</p>
<h3 id="e-3"><a href="#e-3" class="headerlink" title="e()"></a>e()</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/62.jpg" alt="1"></p>
<p>它是把拼接的字符串进行了MD5哈希算法</p>
<p>这个可以Python实现</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_buvid</span>():</span><br><span class="line">    uuid_data = <span class="built_in">str</span>(uuid.uuid4()).replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    t2_12_22 = uuid_data[<span class="number">2</span>]+uuid_data[<span class="number">12</span>]+uuid_data[<span class="number">22</span>]</span><br><span class="line">    buvid = (<span class="string">&quot;XW&quot;</span>+t2_12_22+uuid_data).upper()</span><br><span class="line">    <span class="keyword">return</span> buvid</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_call</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 创建md5对象</span></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    <span class="comment"># 更新要加密的数据，参数要是字节类型</span></span><br><span class="line">    md5.update(data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">	<span class="comment"># 获取加密后的数据，以字节码表示</span></span><br><span class="line">    md5_byte = md5.digest()</span><br><span class="line">    <span class="keyword">return</span> md5_byte</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e</span>(<span class="params">buvid,model,band</span>):</span><br><span class="line">    data = buvid+model+band</span><br><span class="line">    <span class="keyword">return</span> md5_call(data)</span><br></pre></td></tr></table></figure>

<h3 id="MiscHelperKt-a"><a href="#MiscHelperKt-a" class="headerlink" title="MiscHelperKt.a()"></a>MiscHelperKt.a()</h3><p>接下来分析<code>MiscHelperKt.a(f(buvidLegacy, data))</code></p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/63.jpg" alt="1"></p>
<p>通过调用<code>Oe</code>方法返回字段<code>Oe</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">Oe</span><span class="params">(<span class="type">byte</span>[] bArr, CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3, <span class="type">int</span> i2, CharSequence charSequence4, kotlin.jvm.c.l lVar, <span class="type">int</span> i3, Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((i3 &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        charSequence = <span class="string">&quot;, &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">CharSequence</span> <span class="variable">charSequence5</span> <span class="operator">=</span> (i3 &amp; <span class="number">2</span>) != <span class="number">0</span> ? <span class="string">&quot;&quot;</span> : charSequence2;</span><br><span class="line">    <span class="type">CharSequence</span> <span class="variable">charSequence6</span> <span class="operator">=</span> (i3 &amp; <span class="number">4</span>) == <span class="number">0</span> ? charSequence3 : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> (i3 &amp; <span class="number">8</span>) != <span class="number">0</span> ? -<span class="number">1</span> : i2;</span><br><span class="line">    <span class="keyword">if</span> ((i3 &amp; <span class="number">16</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        charSequence4 = <span class="string">&quot;...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">CharSequence</span> <span class="variable">charSequence7</span> <span class="operator">=</span> charSequence4;</span><br><span class="line">    <span class="keyword">if</span> ((i3 &amp; <span class="number">32</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        lVar = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Fe(bArr, charSequence, charSequence5, charSequence6, i4, charSequence7, lVar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里面调用了<code>Fe()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">Fe</span><span class="params">(<span class="type">byte</span>[] joinToString, CharSequence separator, CharSequence prefix, CharSequence postfix, <span class="type">int</span> i2, CharSequence truncated, kotlin.jvm.c.l&lt;? <span class="built_in">super</span> Byte, ? extends CharSequence&gt; lVar)</span> &#123;</span><br><span class="line">    kotlin.jvm.internal.x.q(joinToString, <span class="string">&quot;$this$joinToString&quot;</span>);</span><br><span class="line">    kotlin.jvm.internal.x.q(separator, <span class="string">&quot;separator&quot;</span>);</span><br><span class="line">    kotlin.jvm.internal.x.q(prefix, <span class="string">&quot;prefix&quot;</span>);</span><br><span class="line">    kotlin.jvm.internal.x.q(postfix, <span class="string">&quot;postfix&quot;</span>);</span><br><span class="line">    kotlin.jvm.internal.x.q(truncated, <span class="string">&quot;truncated&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">sb</span> <span class="operator">=</span> ((StringBuilder) ne(joinToString, <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(), separator, prefix, postfix, i2, truncated, lVar)).toString();</span><br><span class="line">    kotlin.jvm.internal.x.h(sb, <span class="string">&quot;joinTo(StringBuilder(), …ed, transform).toString()&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> sb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Fe</code>方法返回一个字段<code>sb</code>，<code>sb</code>通过<code>ne()</code>方法获得</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> &lt;A <span class="keyword">extends</span> <span class="title class_">Appendable</span>&gt; A <span class="title function_">ne</span><span class="params">(<span class="type">byte</span>[] joinTo, A buffer, CharSequence separator, CharSequence prefix, CharSequence postfix, <span class="type">int</span> i2, CharSequence truncated, kotlin.jvm.c.l&lt;? <span class="built_in">super</span> Byte, ? extends CharSequence&gt; lVar)</span> &#123;</span><br><span class="line">    kotlin.jvm.internal.x.q(joinTo, <span class="string">&quot;$this$joinTo&quot;</span>);</span><br><span class="line">    kotlin.jvm.internal.x.q(buffer, <span class="string">&quot;buffer&quot;</span>);</span><br><span class="line">    kotlin.jvm.internal.x.q(separator, <span class="string">&quot;separator&quot;</span>);</span><br><span class="line">    kotlin.jvm.internal.x.q(prefix, <span class="string">&quot;prefix&quot;</span>);</span><br><span class="line">    kotlin.jvm.internal.x.q(postfix, <span class="string">&quot;postfix&quot;</span>);</span><br><span class="line">    kotlin.jvm.internal.x.q(truncated, <span class="string">&quot;truncated&quot;</span>);</span><br><span class="line">    buffer.append(prefix);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">byte</span> b2 : joinTo) &#123;</span><br><span class="line">        i3++;</span><br><span class="line">        <span class="keyword">if</span> (i3 &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            buffer.append(separator);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i2 &gt;= <span class="number">0</span> &amp;&amp; i3 &gt; i2) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lVar != <span class="literal">null</span>) &#123;</span><br><span class="line">            buffer.append(lVar.invoke(Byte.valueOf(b2)));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            buffer.append(String.valueOf((<span class="type">int</span>) b2));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i2 &gt;= <span class="number">0</span> &amp;&amp; i3 &gt; i2) &#123;</span><br><span class="line">        buffer.append(truncated);</span><br><span class="line">    &#125;</span><br><span class="line">    buffer.append(postfix);</span><br><span class="line">    <span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来先对<code>ne()</code>方法里涉及到的参数查找，往前推找到</p>
<ul>
<li><p><code>joinTo</code>为前面的MD5哈希字节数组</p>
</li>
<li><p><code>prefix</code>的值为<code>&quot;&quot;</code></p>
</li>
<li><p><code>separator</code>为<code>:</code></p>
</li>
<li><p><code>postfix</code>为<code>&quot;&quot;</code></p>
</li>
<li><p><code>i2</code>为-1</p>
</li>
<li><p><code>truncated</code>为<code>...</code></p>
</li>
<li><p><code>lVar</code>为匿名内部类，其<code>invoke</code>方法是对字节型参数进行十六进制格式化，返回其十六进制字符串。</p>
</li>
</ul>
<p>用Python复现</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">MiscHelperKt_a</span>(<span class="params">joinTo</span>):</span><br><span class="line">    buffer = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># separator = &quot;:&quot;</span></span><br><span class="line">    postfix = <span class="string">&quot;&quot;</span></span><br><span class="line">    i2 = -<span class="number">1</span></span><br><span class="line">    truncated = <span class="string">&quot;...&quot;</span></span><br><span class="line">    i3 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> joinTo:</span><br><span class="line">        i3 +=<span class="number">1</span></span><br><span class="line">        <span class="comment"># if(i3&gt;1):</span></span><br><span class="line">            <span class="comment"># buffer+=separator</span></span><br><span class="line">        <span class="keyword">if</span>(i2&gt;=<span class="number">0</span> <span class="keyword">and</span> i3&gt;i2):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        buffer+= <span class="string">f&quot;<span class="subst">&#123;(i &amp; <span class="number">0xff</span>):02x&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (i2&gt;=<span class="number">0</span> <span class="keyword">and</span> i3&gt;i2):</span><br><span class="line">        buffer+=truncated</span><br><span class="line">    buffer+=postfix</span><br><span class="line">    <span class="keyword">return</span> buffer</span><br></pre></td></tr></table></figure>

<h3 id="h-1"><a href="#h-1" class="headerlink" title="h()"></a>h()</h3><p>接下来分析<code>h()</code>方法</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/64.jpg" alt="1"></p>
<p>返回一个表示当前时间和日期的 <code>Date</code> 对象，精确到毫秒，转为字符串类型。</p>
<p><code>format</code>是一个表示当前时间和日期的 <code>Date</code> 对象的格式化字符串。</p>
<p>可以通过hook h()查看效果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">call_h</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.bilibili.lib.biliid.internal.fingerprint.a.a&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> result = a.<span class="title function_">h</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 20250203232823</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="g-1"><a href="#g-1" class="headerlink" title="g()"></a>g()</h3><p>接下来分析<code>g()</code>方法</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/65.jpg" alt="1"></p>
<p>它返回的是字段<code>a2</code>，<code>a2</code>通过<code>com.bilibili.commons.e.a(8)</code>方法获得</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/66.jpg" alt="1"></p>
<p>new了一个8字节的数组，然后随机生成8字节的值，然后返回</p>
<p><strong>Python实现</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_g</span>():</span><br><span class="line">    <span class="keyword">return</span> random.randbytes(<span class="number">8</span>)</span><br></pre></td></tr></table></figure>

<p><code>g()</code>生成的结果也是作为参数传入了<code>MiscHelperKt.a()</code></p>
<p>前面这些得到的结果拼接成字符串得到字段<code>str</code></p>
<h3 id="b-1"><a href="#b-1" class="headerlink" title="b()"></a>b()</h3><p><code>str</code>作为参数传递给了<code>b()</code>方法</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/67.jpg" alt="1"></p>
<p>这里面先通过<code>q.n1(0, Math.min(fpEntity.length() - 1, 62))</code>方法得到<code>n1</code>，然后调用<code>q.S0(n1, 2)</code>方法得到<code>S0</code>，通过<code>S0</code>获取<code>g</code>、<code>h</code>、<code>i2</code>的值，这里面可以发现，传入<code>n1</code>方法的参数<code>fpEntity.length()</code>是定值，那么后面的<code>g</code>、<code>h</code>、<code>i2</code>的值也是定值</p>
<p>可以通过<code>hook b</code>方法，然后主动调用<code>b</code>方法打印出<code>g</code>、<code>h</code>、<code>i2</code>的值来查看</p>
<p><strong>hook b</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_b</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.bilibili.lib.biliid.internal.fingerprint.a.a&quot;</span>);</span><br><span class="line">        a[<span class="string">&quot;b&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">fpEntity</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a.b is called: fpEntity=<span class="subst">$&#123;fpEntity&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;b&quot;</span>](fpEntity);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a.b result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="comment">// 2e941853742b47fa1e688cd567d1a4032025020418163278d25eb4002944e6  return:2d</span></span><br><span class="line">            <span class="comment">// 2e941853742b47fa1e688cd567d1a403202502041817339cfda327f7a0e755  return:b6</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_b</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook_g_h_i</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_g_h_i</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;kotlin.g0.i&quot;</span>);</span><br><span class="line">        i[<span class="string">&quot;g&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`i.g is called`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;g&quot;</span>]();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`i.g result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">        i[<span class="string">&quot;h&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`i.h is called`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;h&quot;</span>]();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`i.h result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">        i[<span class="string">&quot;i&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`i.i is called`</span>);</span><br><span class="line">            <span class="title function_">showStacks</span>()</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;i&quot;</span>]();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`i.i result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>call b</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">call_b</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.bilibili.lib.biliid.internal.fingerprint.a.a&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> tt = a.<span class="title function_">b</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;2e941853742b47fa1e688cd567d1a403202502041817339cfda327f7a0e755&quot;</span>));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(tt);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i.g is called</span><br><span class="line">i.g result=0</span><br><span class="line">i.h is called</span><br><span class="line">i.h result=60</span><br><span class="line">i.i is called</span><br><span class="line">i.i result=2</span><br></pre></td></tr></table></figure>

<p>得出<code>g,h,i2</code>的值分别为<code>0,60,2</code></p>
<p><strong>使用Python还原</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">g_b</span>(<span class="params">fpEntity</span>):</span><br><span class="line">    g = <span class="number">0</span></span><br><span class="line">    h = <span class="number">60</span></span><br><span class="line">    i2 = <span class="number">2</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        substring = fpEntity[g:g+<span class="number">2</span>]</span><br><span class="line">        a2 = <span class="number">16</span></span><br><span class="line">        i += <span class="built_in">int</span>(substring,a2)</span><br><span class="line">        <span class="keyword">if</span> (g == h):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        g+=i2</span><br><span class="line">    strformat = <span class="string">f&quot;<span class="subst">&#123;i%<span class="number">256</span>:02x&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> strformat</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(g_b(<span class="string">&quot;2e941853742b47fa1e688cd567d1a403202502041817339cfda327f7a0e755&quot;</span>))</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">b6</span><br></pre></td></tr></table></figure>

<h3 id="Python还原fp-local参数"><a href="#Python还原fp-local参数" class="headerlink" title="Python还原fp_local参数"></a>Python还原fp_local参数</h3><p>结合上面分析的参数生成过程，整合生成fp_local参数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MiscHelperKt_a</span>(<span class="params">byte_data</span>):</span><br><span class="line">    buffer = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># separator = &quot;:&quot;</span></span><br><span class="line">    postfix = <span class="string">&quot;&quot;</span></span><br><span class="line">    i2 = -<span class="number">1</span></span><br><span class="line">    truncated = <span class="string">&quot;...&quot;</span></span><br><span class="line">    i3 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> byte_data:</span><br><span class="line">        i3 +=<span class="number">1</span></span><br><span class="line">        <span class="comment"># if(i3&gt;1):</span></span><br><span class="line">        <span class="comment">#     buffer+=separator</span></span><br><span class="line">        <span class="keyword">if</span>(i2&gt;=<span class="number">0</span> <span class="keyword">and</span> i3&gt;i2):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        buffer+= <span class="string">f&quot;<span class="subst">&#123;(i &amp; <span class="number">0xff</span>):02x&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (i2&gt;=<span class="number">0</span> <span class="keyword">and</span> i3&gt;i2):</span><br><span class="line">        buffer+=truncated</span><br><span class="line">    buffer+=postfix</span><br><span class="line">    <span class="keyword">return</span> buffer</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_buvid</span>():</span><br><span class="line">    uuid_data = <span class="built_in">str</span>(uuid.uuid4()).replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    t2_12_22 = uuid_data[<span class="number">2</span>]+uuid_data[<span class="number">12</span>]+uuid_data[<span class="number">22</span>]</span><br><span class="line">    buvid = (<span class="string">&quot;XW&quot;</span>+t2_12_22+uuid_data).upper()</span><br><span class="line">    <span class="built_in">print</span>(buvid)</span><br><span class="line">    <span class="keyword">return</span> buvid</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_call</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 创建md5对象</span></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    <span class="comment"># 更新要加密的数据，参数要是字节类型</span></span><br><span class="line">    md5.update(data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">	<span class="comment"># 获取加密后的数据，以字节码表示</span></span><br><span class="line">    md5_byte = md5.digest()</span><br><span class="line">    <span class="keyword">return</span> md5_byte</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e</span>(<span class="params">buvid</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(buvid))</span><br><span class="line">    model = <span class="string">&quot;Pixel 3&quot;</span></span><br><span class="line">    band = <span class="string">&quot;g845-00023-180815-B-4956430&quot;</span></span><br><span class="line">    data = buvid+model+band</span><br><span class="line">    <span class="keyword">return</span> md5_call(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">h</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(<span class="number">20250203232823</span>+random.randint(<span class="number">1</span>,<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>():</span><br><span class="line">    <span class="keyword">return</span> random.randbytes(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line">    g = <span class="number">0</span></span><br><span class="line">    h = <span class="number">60</span></span><br><span class="line">    i2 = <span class="number">2</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        substring = <span class="built_in">str</span>[g:g+<span class="number">2</span>]</span><br><span class="line">        a2 = <span class="number">16</span></span><br><span class="line">        i += <span class="built_in">int</span>(substring,a2)</span><br><span class="line">        <span class="keyword">if</span> (g == h):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        g+=i2</span><br><span class="line">    strformat = <span class="string">f&quot;<span class="subst">&#123;i%<span class="number">256</span>:02x&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> strformat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_d2</span>():</span><br><span class="line">    <span class="built_in">str</span> = MiscHelperKt_a(e(g_buvid()))+h()+MiscHelperKt_a(g())</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>+b(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(g_d2())</span><br></pre></td></tr></table></figure>

<h2 id="fp-remote参数还原"><a href="#fp-remote参数还原" class="headerlink" title="fp_remote参数还原"></a>fp_remote参数还原</h2><p>hook生成<code>fp_local</code>和<code>fp_remote</code>的两个方法，发现他们的值相似</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_fp</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.bilibili.api.a&quot;</span>);</span><br><span class="line">        a[<span class="string">&quot;j&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a.j is called`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;j&quot;</span>]();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a.j result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        a[<span class="string">&quot;k&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a.k is called`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;k&quot;</span>]();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a.k result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_fp</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a.j is called</span><br><span class="line">a.j result=2e941853742b47fa1e688cd567d1a40320250204210435027583fd9976406624</span><br><span class="line">a.k is called</span><br><span class="line">a.k result=2e941853742b47fa1e688cd567d1a4032024123013422042cd4fe24a164fc683</span><br></pre></td></tr></table></figure>

<p>暂时使用生成fp_local的方法来生成fp_remote</p>
<h2 id="整合代码"><a href="#整合代码" class="headerlink" title="整合代码"></a>整合代码</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_buvid</span>():</span><br><span class="line">    uuid_data = <span class="built_in">str</span>(uuid.uuid4()).replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    t2_12_22 = uuid_data[<span class="number">2</span>]+uuid_data[<span class="number">12</span>]+uuid_data[<span class="number">22</span>]</span><br><span class="line">    buvid = (<span class="string">&quot;XW&quot;</span>+t2_12_22+uuid_data).upper()</span><br><span class="line">    <span class="built_in">print</span>(buvid)</span><br><span class="line">    <span class="keyword">return</span> buvid</span><br><span class="line"></span><br><span class="line">buvid = g_buvid()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_session_id</span>():</span><br><span class="line">    <span class="comment"># return random.randbytes(4).hex()</span></span><br><span class="line">    <span class="keyword">return</span> random.randbytes(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">session_id = g_session_id()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MiscHelperKt_a</span>(<span class="params">byte_data</span>):</span><br><span class="line">    buffer = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># separator = &quot;:&quot;</span></span><br><span class="line">    postfix = <span class="string">&quot;&quot;</span></span><br><span class="line">    i2 = -<span class="number">1</span></span><br><span class="line">    truncated = <span class="string">&quot;...&quot;</span></span><br><span class="line">    i3 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> byte_data:</span><br><span class="line">        i3 +=<span class="number">1</span></span><br><span class="line">        <span class="comment"># if(i3&gt;1):</span></span><br><span class="line">        <span class="comment">#     buffer+=separator</span></span><br><span class="line">        <span class="keyword">if</span>(i2&gt;=<span class="number">0</span> <span class="keyword">and</span> i3&gt;i2):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        buffer+= <span class="string">f&quot;<span class="subst">&#123;(i &amp; <span class="number">0xff</span>):02x&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (i2&gt;=<span class="number">0</span> <span class="keyword">and</span> i3&gt;i2):</span><br><span class="line">        buffer+=truncated</span><br><span class="line">    buffer+=postfix</span><br><span class="line">    <span class="keyword">return</span> buffer</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_call</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 创建md5对象</span></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    <span class="comment"># 更新要加密的数据，参数要是字节类型</span></span><br><span class="line">    md5.update(data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">	<span class="comment"># 获取加密后的数据，以字节码表示</span></span><br><span class="line">    md5_byte = md5.digest()</span><br><span class="line">    <span class="keyword">return</span> md5_byte</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e</span>(<span class="params">buvid</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(buvid))</span><br><span class="line">    model = <span class="string">&quot;Pixel 3&quot;</span></span><br><span class="line">    band = <span class="string">&quot;g845-00023-180815-B-4956430&quot;</span></span><br><span class="line">    data = buvid+model+band</span><br><span class="line">    <span class="keyword">return</span> md5_call(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">h</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(<span class="number">20250203232823</span>+random.randint(<span class="number">1</span>,<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>():</span><br><span class="line">    <span class="keyword">return</span> random.randbytes(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line">    g = <span class="number">0</span></span><br><span class="line">    h = <span class="number">60</span></span><br><span class="line">    i2 = <span class="number">2</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        substring = <span class="built_in">str</span>[g:g+<span class="number">2</span>]</span><br><span class="line">        a2 = <span class="number">16</span></span><br><span class="line">        i += <span class="built_in">int</span>(substring,a2)</span><br><span class="line">        <span class="keyword">if</span> (g == h):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        g+=i2</span><br><span class="line">    strformat = <span class="string">f&quot;<span class="subst">&#123;i%<span class="number">256</span>:02x&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> strformat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_d2</span>(<span class="params">buvid</span>):</span><br><span class="line">    <span class="built_in">str</span> = MiscHelperKt_a(e(buvid))+h()+MiscHelperKt_a(g())</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>+b(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_fp_local</span>(<span class="params">buvid</span>):</span><br><span class="line">    <span class="keyword">return</span> g_d2(buvid)</span><br><span class="line"></span><br><span class="line">fp_local = g_fp_local(buvid)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fp_local)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://api.bilibili.com/x/report/click/android2&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="comment">#   &quot;:authority&quot;: &quot;api.bilibili.com&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;:method&quot;: &quot;POST&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;:path&quot;: &quot;/x/report/click/android2&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;:scheme&quot;: &quot;https&quot;,</span></span><br><span class="line">  <span class="string">&quot;content-length&quot;</span>: <span class="string">&quot;320&quot;</span>,</span><br><span class="line">  <span class="string">&quot;buvid&quot;</span>: <span class="string">&quot;XY17684138CCA764C73112F1B0464F485C112&quot;</span>,<span class="comment"># buvid,</span></span><br><span class="line">  <span class="string">&quot;device-id&quot;</span>: <span class="string">&quot;PF9tVWMHYgNiUTQGegZ6&quot;</span>,</span><br><span class="line">  <span class="string">&quot;fp_local&quot;</span>:  <span class="string">&quot;2e941853742b47fa1e688cd567d1a40320250204210435027583fd9976406624&quot;</span>, <span class="comment">#fp_local,</span></span><br><span class="line">  <span class="string">&quot;fp_remote&quot;</span>: <span class="string">&quot;2e941853742b47fa1e688cd567d1a4032024123013422042cd4fe24a164fc683&quot;</span>,</span><br><span class="line">  <span class="string">&quot;session_id&quot;</span>:  <span class="string">&quot;49efcb1f&quot;</span>, <span class="comment"># session_id, #</span></span><br><span class="line">  <span class="string">&quot;env&quot;</span>: <span class="string">&quot;prod&quot;</span>,</span><br><span class="line">  <span class="string">&quot;app-key&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">  <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 BiliDroid/6.24.0 (bbcallen@gmail.com) os/android model/Pixel 3 mobi_app/android build/6240300 channel/alifenfa innerVer/6240300 osVer/9 network/2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;bili-bridge-engine&quot;</span>: <span class="string">&quot;cronet&quot;</span>,</span><br><span class="line">  <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/octet-stream&quot;</span>,</span><br><span class="line">  <span class="string">&quot;accept-encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body_hex = <span class="string">&quot;DDB2205C8585FFD98B6681BD50CDDE7374C61B9C7EC72C8A7CCFF1BA613AA29731C109318B776408E264545723171BF9E8C857152EB6B26785B1FF0E839632D16ED7749C73C69AC0E8B4223F3DA7235A0C8B8E0737F44BF11487940E98A79494679F494D72E8DD8D75E0843E82EB966473AC272133CCBEDACCB5D0F7EA37152E915E678CCE2DB802A61BAB2032AE155691262E32B7C5AABC65CDF5072A0C0874E59D08DDCEB3C0056198873652763C77B9EBE3756A9360A8B183FE20E608D26FD02661A25C67DDB71068E250B52C1794B26B99A95BD88360842E7E1D20CA716897E681931BD7EAF9BC77B3745ED0F521108D2D11A185140523062BDF7B7256462D44EBF2501945A7091FE66F8F1A7E95FD1008ACCC94649442EA232273F15B063647F993D7C40EFDCB2450683BC508A4AAA390283300874C5ADE14B338D1EEAB&quot;</span></span><br><span class="line"><span class="comment"># print(list(bytes.fromhex(body)))</span></span><br><span class="line">body = <span class="built_in">bytes</span>.fromhex(body_hex)</span><br><span class="line"><span class="built_in">print</span>(body)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypt</span>(<span class="params">ciphertext_hex, key, iv</span>):</span><br><span class="line">    <span class="comment"># 将hex编码的密文转换为bytes</span></span><br><span class="line">    ciphertext = <span class="built_in">bytes</span>.fromhex(ciphertext_hex)</span><br><span class="line">    <span class="comment"># 创建AES解密对象</span></span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="comment"># 解密并移除填充</span></span><br><span class="line">    plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)</span><br><span class="line">    <span class="keyword">return</span> plaintext.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">key = <span class="string">b&#x27;fd6b639dbcff0c2a1b03b389ec763c4b&#x27;</span>  <span class="comment"># 16字节密钥</span></span><br><span class="line">iv = <span class="string">b&#x27;77b07a672d57d64c&#x27;</span>   <span class="comment"># 16字节IV</span></span><br><span class="line">ciphertext_hex = body_hex</span><br><span class="line"><span class="comment"># &#x27;b2eadf0bc65f99660f2ffbe874d802918231b6f0445bbf1c005253f1b42c251a61835063707effd59fc5800b4377d4241b252ec063dd6ca55f66a738ce7d5de3d5ef17d04714e17e0d3b592e18109e4e4d8d534666159c204dd8c31ec68c92355f57ce3798454155d57b360d9855dc4d8b131dcb9befebe638635b103d40b0f66d33c283c6dd28b49d38e724f7f7abcb7ba16a7a150941bd301275e326c56e89e97210c18b36437fa4d6fde0f7911cbb7b2e80e56051a9f9f7e238ca20da5dbd6481362a85afceb73e55816d6ff8d7f740a5d8c8e3a0c6779ba406f400cb34936c6e1d3534bf0ed2eee6ce743fcf0ce8fd8ac478980f3dc6f1aac8de96e2be031e1e5f7a32bf06ec73840f4632728a576c9d2f4fa6fc76141e961920885e1d57b3a5e4f77a88d285f6eea2398d97a949e9577bba57665c84a5f85a102e07921e&#x27;</span></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    plaintext = aes_decrypt(ciphertext_hex, key, iv)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密后的明文:&quot;</span>, plaintext)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密失败:&quot;</span>, e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = requests.post(url,headers=headers,data=body)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br></pre></td></tr></table></figure>

<h1 id="播放量接口抓包分析"><a href="#播放量接口抓包分析" class="headerlink" title="播放量接口抓包分析"></a>播放量接口抓包分析</h1><p>在app里播放量请求要发送两次，一次是在视频开始的时候发送，一次是在视频结束的时候发送</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url:https://api.bilibili.com/x/report/heartbeat/mobile</span><br><span class="line">请求方式：POST</span><br><span class="line">请求头：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;:authority&quot;: &quot;api.bilibili.com&quot;,</span><br><span class="line">  &quot;:method&quot;: &quot;POST&quot;,</span><br><span class="line">  &quot;:path&quot;: &quot;/x/report/heartbeat/mobile&quot;,</span><br><span class="line">  &quot;:scheme&quot;: &quot;https&quot;,</span><br><span class="line">  &quot;content-length&quot;: &quot;752&quot;,</span><br><span class="line">  &quot;buvid&quot;: &quot;XY17684138CCA764C73112F1B0464F485C112&quot;,</span><br><span class="line">  &quot;device-id&quot;: &quot;PF9tVWMHYgNiUTQGegZ6&quot;,</span><br><span class="line">  &quot;fp_local&quot;: &quot;2e941853742b47fa1e688cd567d1a40320250204210435027583fd9976406624&quot;,</span><br><span class="line">  &quot;fp_remote&quot;: &quot;2e941853742b47fa1e688cd567d1a4032024123013422042cd4fe24a164fc683&quot;,</span><br><span class="line">  &quot;session_id&quot;: &quot;a858237d&quot;,</span><br><span class="line">  &quot;env&quot;: &quot;prod&quot;,</span><br><span class="line">  &quot;app-key&quot;: &quot;android&quot;,</span><br><span class="line">  &quot;user-agent&quot;: &quot;Mozilla/5.0 BiliDroid/6.24.0 (bbcallen@gmail.com) os/android model/Pixel 3 mobi_app/android build/6240300 channel/alifenfa innerVer/6240300 osVer/9 network/2&quot;,</span><br><span class="line">  &quot;bili-bridge-engine&quot;: &quot;cronet&quot;,</span><br><span class="line">  &quot;content-type&quot;: &quot;application/x-www-form-urlencoded; charset=utf-8&quot;,</span><br><span class="line">  &quot;accept-encoding&quot;: &quot;gzip, deflate, br&quot;</span><br><span class="line">&#125;</span><br><span class="line">请求体：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;actual_played_time&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;aid&quot;: &quot;113870689534703&quot;,</span><br><span class="line">  &quot;appkey&quot;: &quot;1d8b6e7d45233436&quot;, # 设备ID，可自己生成</span><br><span class="line">  &quot;auto_play&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;build&quot;: &quot;6240300&quot;,</span><br><span class="line">  &quot;c_locale&quot;: &quot;zh-Hans_CN&quot;,</span><br><span class="line">  &quot;channel&quot;: &quot;alifenfa&quot;,</span><br><span class="line">  &quot;cid&quot;: &quot;28010612956&quot;,</span><br><span class="line">  &quot;epid&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;epid_status&quot;: &quot;&quot;,</span><br><span class="line">  &quot;from&quot;: &quot;7&quot;,</span><br><span class="line">  &quot;from_spmid&quot;: &quot;tm.recommend.0.0&quot;,</span><br><span class="line">  &quot;last_play_progress_time&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;list_play_time&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;max_play_progress_time&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;mid&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;miniplayer_play_time&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;mobi_app&quot;: &quot;android&quot;,</span><br><span class="line">  &quot;network_type&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;paused_time&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;platform&quot;: &quot;android&quot;,</span><br><span class="line">  &quot;play_status&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;play_type&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;played_time&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;quality&quot;: &quot;32&quot;,</span><br><span class="line">  &quot;s_locale&quot;: &quot;zh-Hans_CN&quot;,</span><br><span class="line">  &quot;session&quot;: &quot;6935c68dd72b2363eea3e661be4f85c119a40538&quot;,</span><br><span class="line">  &quot;sid&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;spmid&quot;: &quot;main.ugc-video-detail.0.0&quot;,</span><br><span class="line">  &quot;start_ts&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;statistics&quot;: &quot;&#123;\&quot;appId\&quot;:1,\&quot;platform\&quot;:3,\&quot;version\&quot;:\&quot;6.24.0\&quot;,\&quot;abtest\&quot;:\&quot;\&quot;&#125;&quot;,</span><br><span class="line">  &quot;sub_type&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;total_time&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;ts&quot;: &quot;1738736854&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;3&quot;,</span><br><span class="line">  &quot;user_status&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;video_duration&quot;: &quot;120&quot;,</span><br><span class="line">  &quot;sign&quot;: &quot;e5834de364c3f2863314293077d0c540&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请求头参数已经分析过了</p>
<p>下面只需要看请求体参数</p>
<p>需要分析的参数有<code>session</code>、<code>sign</code></p>
<h2 id="session参数分析还原"><a href="#session参数分析还原" class="headerlink" title="session参数分析还原"></a>session参数分析还原</h2><p>jadx反编译apk搜索<code>report/heartbeat/mobile</code>，双击跳转到接口</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/68.jpg" alt="1"></p>
<p>找到<code>reportV2</code>查找用例，找到如下两个进行分析</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/69.jpg" alt="1"></p>
<p><code>reportV2()</code>方法转入了一个参数N7，然后去找N7是如何生成的</p>
<h3 id="N7"><a href="#N7" class="headerlink" title="N7()"></a>N7()</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/70.jpg" alt="1"></p>
<p>N7参数通过调用<code>N7()</code>方法返回，如下是<code>N7()</code>源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HeartbeatParams <span class="title function_">N7</span><span class="params">(h hVar, <span class="type">boolean</span> z)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HeartbeatParams</span>(hVar.p1(), hVar.r1(), hVar.a1(), hVar.H0(), hVar.J0(), hVar.s1(), hVar.M0(), hVar.C1(), hVar.w1(), hVar.o1(), z ? <span class="number">0L</span> : hVar.B1(), z ? <span class="number">0L</span> : hVar.e1(), z ? <span class="number">0L</span> : hVar.k1(), hVar.E1(), hVar.i1(), hVar.c1(), z ? <span class="number">0L</span> : hVar.V0(), z ? <span class="number">0L</span> : hVar.Y0(), hVar.S0(), hVar.N0(), hVar.t1(), hVar.L0(), hVar.f1(), hVar.D1(), z ? <span class="number">0L</span> : hVar.G0(), hVar.I0(), z ? <span class="number">0L</span> : hVar.W0(), z ? <span class="number">0L</span> : hVar.b1());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它返回的是<code>new HeartbeatParams()</code>，然后去看<code>HeartbeatParams</code>的构造方法，它里面的参数就是请求体参数</p>
<h3 id="HeartbeatParams"><a href="#HeartbeatParams" class="headerlink" title="HeartbeatParams()"></a>HeartbeatParams()</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/71.jpg" alt="1"></p>
<p>传给session的参数是str，接下来去找str是如何初始化的</p>
<p>回到N7方法找它的第二个参数</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/72.jpg" alt="1"></p>
<p>第二个参数是通过<code>hVar.r1()</code>方法返回的</p>
<h3 id="r1"><a href="#r1" class="headerlink" title="r1()"></a>r1()</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/73.jpg" alt="1"></p>
<p><code>r1()</code>方法返回的是<code>this.d</code>，找谁给<code>this.d</code>赋值，如下，通过<code>t2()</code>方法传进去的参数<code>str</code>给<code>this.d</code>赋值</p>
<h3 id="t2"><a href="#t2" class="headerlink" title="t2()"></a>t2()</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/74.jpg" alt="1"></p>
<p>对<code>t2()</code>查找用例，找到一个<code>b()</code>方法，它里面的参数是<code>g.a.a()</code>的返回值</p>
<h3 id="b-2"><a href="#b-2" class="headerlink" title="b()"></a>b()</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/75.jpg" alt="1"></p>
<p>查看<code>g.a.a()</code>，如下</p>
<h3 id="a-3"><a href="#a-3" class="headerlink" title="a()"></a>a()</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/76.jpg" alt="1"></p>
<p>这里面new了一个<code>StringBuilder</code>，然后拼接<code>E.t()</code>、系统时间戳和一个1000000内的随机整数，然后对拼接的字符串进行<code>SHA1</code>哈希算法</p>
<p>首先看<code>E.t()</code>，它获取的是<code>buvid</code></p>
<h3 id="t"><a href="#t" class="headerlink" title="t()"></a>t()</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/77.jpg" alt="1"></p>
<p><strong>python生成sb2</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_buvid</span>():</span><br><span class="line">    uuid_data = <span class="built_in">str</span>(uuid.uuid4()).replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    t2_12_22 = uuid_data[<span class="number">2</span>]+uuid_data[<span class="number">12</span>]+uuid_data[<span class="number">22</span>]</span><br><span class="line">    buvid = (<span class="string">&quot;XW&quot;</span>+t2_12_22+uuid_data).upper()</span><br><span class="line">    <span class="keyword">return</span> buvid</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_time_mills</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">int</span>(time.time()*<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_randint</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(random.randint(<span class="number">0</span>,<span class="number">1000000</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_sb2</span>():</span><br><span class="line">    <span class="keyword">return</span> g_buvid()+g_time_mills()+g_randint()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(g_sb2())</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="comment"># 示例输出：XWB4602B50BA2B05246E08EFC046FC23DB8791738743742069992167</span></span><br></pre></td></tr></table></figure>

<p>生成的参数<code>sb2</code>方法传递给了<code>com.bilibili.commons.m.a.i(sb2)</code></p>
<p>查看<code>i()</code>方法</p>
<h3 id="i-1"><a href="#i-1" class="headerlink" title="i()"></a>i()</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/78.jpg" alt="1"></p>
<p>在<code>i()</code>方法里调用了<code>j()</code>方法</p>
<p>查看<code>j()</code>方法</p>
<h3 id="j-1"><a href="#j-1" class="headerlink" title="j()"></a>j()</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/79.jpg" alt="1"></p>
<p>在<code>j()</code>方法里把参数和<code>SHA1</code>对象传递给了<code>h()</code>方法</p>
<p>查看<code>h()</code>方法</p>
<h3 id="h-2"><a href="#h-2" class="headerlink" title="h()"></a>h()</h3><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/80.jpg" alt="1"></p>
<p>这里面对传入的参数进行了<code>SHA1</code>哈希算法</p>
<p>接下来通过hook i()方法来验证这里<code>h()</code>里面是不是标准的<code>SHA1()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_i</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> m_a = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.bilibili.commons.m.a&quot;</span>);</span><br><span class="line">        m_a[<span class="string">&quot;i&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a.i is called: str=<span class="subst">$&#123;str&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;i&quot;</span>](str);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a.i result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_i</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a.i is called: str=1738746513112310995</span><br><span class="line">a.i result=ea3ce10248acdfe7ec65d4f6a2791df6465d0261</span><br></pre></td></tr></table></figure>

<p>如下证明<code>h()</code>方法是标准版的<code>SHA1</code>算法</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/81.jpg" alt="1"></p>
<h3 id="Python还原session参数"><a href="#Python还原session参数" class="headerlink" title="Python还原session参数"></a>Python还原session参数</h3><p>整合上面的代码</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_buvid</span>():</span><br><span class="line">    uuid_data = <span class="built_in">str</span>(uuid.uuid4()).replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    t2_12_22 = uuid_data[<span class="number">2</span>]+uuid_data[<span class="number">12</span>]+uuid_data[<span class="number">22</span>]</span><br><span class="line">    buvid = (<span class="string">&quot;XW&quot;</span>+t2_12_22+uuid_data).upper()</span><br><span class="line">    <span class="keyword">return</span> buvid</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_time_mills</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">int</span>(time.time()*<span class="number">1000</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_randint</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(random.randint(<span class="number">0</span>,<span class="number">1000000</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_sb2</span>():</span><br><span class="line">    <span class="keyword">return</span> g_buvid()+g_time_mills()+g_randint()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SHA1_call</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 创建sha1对象</span></span><br><span class="line">    sha1 = hashlib.sha1()</span><br><span class="line">    sha1.update(data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="comment"># 获取加密后的数据，以16进制表示</span></span><br><span class="line">    sha1_hex = sha1.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> sha1_hex</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取加密后的数据，以字节码表示</span></span><br><span class="line">    <span class="comment"># sha1_bytes = sha1.digest()</span></span><br><span class="line">    <span class="comment"># return sha1_bytes</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(SHA1_call(g_sb2()))</span><br></pre></td></tr></table></figure>

<h2 id="sign参数分析还原"><a href="#sign参数分析还原" class="headerlink" title="sign参数分析还原"></a>sign参数分析还原</h2><p>首先像找<code>session</code>参数一样在源码中找是没有找到的，可能是根据已有的参数进行加密后拼接到原来的参数后面的。</p>
<p>分析<code>sign</code>的值，其长度是16字节，猜测其是MD5加密生成的，把请求体中除了<code>sign</code>值的其他参数拼接起来进行MD5哈希算法，发现结果不一致，可能有加盐。换思路分析。</p>
<p>猜测：可能在拦截器中进行的加密，也可能在so文件中进行的加密。同时在拼接<code>sign</code>参数的时候有很大可能会出现<code>&amp;sign=</code>字样。</p>
<h3 id="在jadx里搜索查找-sign"><a href="#在jadx里搜索查找-sign" class="headerlink" title="在jadx里搜索查找&amp;sign="></a>在jadx里搜索查找<code>&amp;sign=</code></h3><p>经过测试验证得到生成sign值的类为如下类</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/82.jpg" alt="1"></p>
<p>双击进去到了<code>toString()</code>方法里</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/83.jpg" alt="1"></p>
<p><strong>hook toString()</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_toString</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">SignedQuery</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.bilibili.nativelibrary.SignedQuery&quot;</span>);</span><br><span class="line">        <span class="title class_">SignedQuery</span>[<span class="string">&quot;toString&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SignedQuery.toString is called`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;toString&quot;</span>]();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SignedQuery.toString result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="title function_">showStacks</span>()</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_toString</span>()</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<p>根据参数找到对应的hook结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SignedQuery.toString is called</span><br><span class="line">SignedQuery.toString result=</span><br><span class="line">actual_played_time=0&amp;aid=113825760153422&amp;appkey=1d8b6e7d45233436&amp;auto_play=0&amp;build=6240300&amp;c_locale=zh-Hans_CN&amp;channel=alifenfa&amp;cid=27862828315&amp;epid=0&amp;epid_status=&amp;from=7&amp;from_spmid=tm.recommend.0.0&amp;last_play_progress_time=0&amp;list_play_time=0&amp;max_play_progress_time=0&amp;mid=0&amp;miniplayer_play_time=0&amp;mobi_app=android&amp;network_type=1&amp;paused_time=0&amp;platform=android&amp;play_status=0&amp;play_type=1&amp;played_time=0&amp;quality=32&amp;s_locale=zh-Hans_CN&amp;session=b027341a1332c43ad68e4072d38d59a2da7a1a88&amp;sid=0&amp;spmid=main.ugc-video-detail.0.0&amp;start_ts=0&amp;statistics=%7B%22appId%22%3A1%2C%22platform%22%3A3%2C%22version%22%3A%226.24.0%22%2C%22abtest%22%3A%22%22%7D&amp;sub_type=0&amp;total_time=0&amp;ts=1738756372&amp;type=3&amp;user_status=0&amp;video_duration=79&amp;sign=cdc782cf0541724bd87ab0c15950fc0d</span><br><span class="line"></span><br><span class="line">java.lang.Throwable</span><br><span class="line">        at com.bilibili.nativelibrary.SignedQuery.toString(Native Method)</span><br><span class="line">        at com.bilibili.okretro.f.a.c(BL:16)</span><br><span class="line">        at com.bilibili.okretro.f.a.a(BL:6)</span><br><span class="line">        at com.bilibili.okretro.d.a.execute(BL:24)</span><br><span class="line">        at com.bilibili.okretro.d.a$a.run(BL:2)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:764)</span><br></pre></td></tr></table></figure>

<p>通过调用堆栈找到上一层函数<code>com.bilibili.okretro.f.a.c</code></p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/84.jpg" alt="1"></p>
<p>这里看到在<code>h(hashMap)</code>里传入了一个参数<code>hashMap</code>，通过hook打印<code>hashMap</code>的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printMap</span>(<span class="params">map</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> key = map.<span class="title function_">keySet</span>();</span><br><span class="line">    <span class="keyword">let</span> it = key.<span class="title function_">iterator</span>();</span><br><span class="line">    <span class="keyword">while</span>(it.<span class="title function_">hasNext</span>())&#123;</span><br><span class="line">        <span class="keyword">let</span> keystr = it.<span class="title function_">next</span>();</span><br><span class="line">        <span class="keyword">let</span> valuestr = map.<span class="title function_">get</span>(keystr);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key:&quot;</span>,keystr,<span class="string">&quot;| value:&quot;</span>,valuestr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_h</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.bilibili.okretro.f.a&quot;</span>);</span><br><span class="line">        a[<span class="string">&quot;h&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">map</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a.h is called: map=<span class="subst">$&#123;map&#125;</span>`</span>);</span><br><span class="line">            <span class="title function_">printMap</span>(map)</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;h&quot;</span>](map);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`a.h result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_h</span>()</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key: platform | value: android</span><br><span class="line">key: sid | value: 0</span><br><span class="line">key: sub_type | value: 0</span><br><span class="line">key: from | value: 7</span><br><span class="line">key: total_time | value: 24</span><br><span class="line">key: max_play_progress_time | value: 23</span><br><span class="line">key: user_status | value: 0</span><br><span class="line">key: played_time | value: 23</span><br><span class="line">key: mobi_app | value: android</span><br><span class="line">key: epid | value: 0</span><br><span class="line">key: epid_status | value:</span><br><span class="line">key: c_locale | value: zh-Hans_CN</span><br><span class="line">key: actual_played_time | value: 23</span><br><span class="line">key: quality | value: 32</span><br><span class="line">key: last_play_progress_time | value: 23</span><br><span class="line">key: play_type | value: 1</span><br><span class="line">key: miniplayer_play_time | value: 0</span><br><span class="line">key: build | value: 6240300</span><br><span class="line">key: appkey | value: 1d8b6e7d45233436</span><br><span class="line">key: network_type | value: 1</span><br><span class="line">key: aid | value: 113838208844297</span><br><span class="line">key: from_spmid | value: tm.recommend.0.0</span><br><span class="line">key: play_status | value: 0</span><br><span class="line">key: cid | value: 27904771672</span><br><span class="line">key: statistics | value: &#123;&quot;appId&quot;:1,&quot;platform&quot;:3,&quot;version&quot;:&quot;6.24.0&quot;,&quot;abtest&quot;:&quot;&quot;&#125;</span><br><span class="line">a.h result=actual_played_time=23&amp;aid=113838208844297&amp;appkey=1d8b6e7d45233436&amp;auto_play=0&amp;build=6240300&amp;c_locale=zh-Hans_CN&amp;channel=alifenfa&amp;cid=27904771672&amp;epid=0&amp;epid_status=&amp;from=7&amp;from_spmid=tm.recommend.0.0&amp;last_play_progress_time=23&amp;list_play_time=0&amp;max_play_progress_time=23&amp;mid=0&amp;miniplayer_play_time=0&amp;mobi_app=android&amp;network_type=1&amp;paused_time=1&amp;platform=android&amp;play_status=0&amp;play_type=1&amp;played_time=23&amp;quality=32&amp;s_locale=zh-Hans_CN&amp;session=2a130cffe590492932d849d889e360e7246dc256&amp;sid=0&amp;spmid=main.ugc-video-detail.0.0&amp;start_ts=0&amp;statistics=%7B%22appId%22%3A1%2C%22platform%22%3A3%2C%22version%22%3A%226.24.0%22%2C%22abtest%22%3A%22%22%7D&amp;sub_type=0&amp;total_time=24&amp;ts=1738759385&amp;type=3&amp;user_status=0&amp;video_duration=249&amp;sign=5c3cfa0aa7c7d171e1821669a6b55e7e</span><br></pre></td></tr></table></figure>

<p>加密过程应该就在<code>h()</code>方法里</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/85.jpg" alt="1"></p>
<p>在<code>h()</code>方法里调用了<code>g()</code>方法</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/86.jpg" alt="1"></p>
<p>在<code>g()</code>方法里调用了<code>s()</code>方法</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/87.jpg" alt="1"></p>
<p><code>s()</code>方法是一个<code>native方法</code></p>
<h4 id="hook-s"><a href="#hook-s" class="headerlink" title="hook s"></a>hook s</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_s</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">LibBili</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.bilibili.nativelibrary.LibBili&quot;</span>);</span><br><span class="line">        <span class="title class_">LibBili</span>[<span class="string">&quot;s&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">sortedMap</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`LibBili.s is called: sortedMap=<span class="subst">$&#123;sortedMap&#125;</span>`</span>);</span><br><span class="line">            <span class="title function_">printMap</span>(sortedMap)</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;s&quot;</span>](sortedMap);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`LibBili.s result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_s</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LibBili.s is called: sortedMap=[object Object]</span><br><span class="line">map: &#123;actual_played_time=1, aid=113945784358610, appkey=1d8b6e7d45233436, auto_play=0, build=6240300, c_locale=zh-Hans_CN, channel=alifenfa, cid=28214757335, epid=0, epid_status=, from=7, from_spmid=tm.recommend.0.0, last_play_progress_time=1, list_play_time=0, max_play_progress_time=1, mid=0, miniplayer_play_time=0, mobi_app=android, network_type=1, paused_time=2, platform=android, play_status=0, play_type=1, played_time=1, quality=32, s_locale=zh-Hans_CN, session=22b3446fdb1b406d22b87ba3d09bbeb0bb170e21, sid=0, spmid=main.ugc-video-detail.0.0, start_ts=1738823412, statistics=&#123;&quot;appId&quot;:1,&quot;platform&quot;:3,&quot;version&quot;:&quot;6.24.0&quot;,&quot;abtest&quot;:&quot;&quot;&#125;, sub_type=0, total_time=3, type=3, user_status=0, video_duration=284&#125;</span><br><span class="line">LibBili.s result=</span><br><span class="line">actual_played_time=1&amp;aid=113945784358610&amp;appkey=1d8b6e7d45233436&amp;auto_play=0&amp;build=6240300&amp;c_locale=zh-Hans_CN&amp;channel=alifenfa&amp;cid=28214757335&amp;epid=0&amp;epid_status=&amp;from=7&amp;from_spmid=tm.recommend.0.0&amp;last_play_progress_time=1&amp;list_play_time=0&amp;max_play_progress_time=1&amp;mid=0&amp;miniplayer_play_time=0&amp;mobi_app=android&amp;network_type=1&amp;paused_time=2&amp;platform=android&amp;play_status=0&amp;play_type=1&amp;played_time=1&amp;quality=32&amp;s_locale=zh-Hans_CN&amp;session=22b3446fdb1b406d22b87ba3d09bbeb0bb170e21&amp;sid=0&amp;spmid=main.ugc-video-detail.0.0&amp;start_ts=1738823412&amp;statistics=%7B%22appId%22%3A1%2C%22platform%22%3A3%2C%22version%22%3A%226.24.0%22%2C%22abtest%22%3A%22%22%7D&amp;sub_type=0&amp;total_time=3&amp;ts=1738823572&amp;type=3&amp;user_status=0&amp;video_duration=284&amp;sign=8c0eaba9d3108d2049b4d46777662214</span><br></pre></td></tr></table></figure>

<p>so的名字是</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/88.jpg" alt="1"></p>
<h3 id="通过hook-NewStringUTF定位"><a href="#通过hook-NewStringUTF定位" class="headerlink" title="通过hook_NewStringUTF定位"></a>通过hook_NewStringUTF定位</h3><p>如果<code>sign</code>是在so中加密的，那么在返回字符串的时候一定会调用<code>newStringUTF</code>方法返回字符串</p>
<p>可以通过hook_NewStringUTF来打印相关信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_NewStringUTF</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> symbols = <span class="title class_">Module</span>.<span class="title function_">enumerateSymbolsSync</span>(<span class="string">&quot;libart.so&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> addrNewStringUTF = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;symbols.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> symbol = symbols[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;NewStringUTF&quot;</span>)!=-<span class="number">1</span> &amp;&amp; symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>)==-<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">            addrNewStringUTF = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;NewStringUTF&#x27;s addr:&quot;</span>,symbol.<span class="property">address</span>,<span class="string">&quot; name:&quot;</span>,symbol.<span class="property">name</span>);</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(addrNewStringUTF != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addrNewStringUTF,&#123;</span><br><span class="line">            <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> c_string = args[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> dataString = c_string.<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(dataString)&#123;</span><br><span class="line">                    <span class="comment">// console.log(dataString)</span></span><br><span class="line">                    <span class="keyword">if</span>(dataString.<span class="property">length</span>===<span class="number">32</span>)&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dataString:&quot;</span>,dataString);</span><br><span class="line">                        </span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(<span class="variable language_">this</span>.<span class="property">context</span>,<span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>)+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在hook结果中找到相关信息，如下，根据抓包中得到的sign在hook结果中搜索</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dataString: d7472d2094ecc6fb5796cedaa92a82a7</span><br><span class="line">dataString: d644c98adea1d82b959db7174774f5cd</span><br><span class="line">0xbe7691a5 libbili.so!0x31a5</span><br><span class="line">0xc84bd08b base.odex!0x43008b</span><br><span class="line"></span><br><span class="line">java.lang.Throwable</span><br><span class="line">        at com.bilibili.nativelibrary.LibBili.s(Native Method)</span><br><span class="line">        at com.bilibili.nativelibrary.LibBili.g(BL:1)</span><br><span class="line">        at com.bilibili.okretro.f.a.h(BL:1)</span><br><span class="line">        at com.bilibili.okretro.f.a.c(BL:14)</span><br><span class="line">        at com.bilibili.okretro.f.a.a(BL:6)</span><br><span class="line">        at com.bilibili.okretro.d.a.execute(BL:24)</span><br><span class="line">        at com.bilibili.okretro.d.a$a.run(BL:2)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:764)</span><br></pre></td></tr></table></figure>

<p>hook结果中显示了入参，so名字和函数地址</p>
<h2 id="so分析"><a href="#so分析" class="headerlink" title="so分析"></a>so分析</h2><p>用IDA打开so，在静态注册函数中没有找到<code>s()</code>函数</p>
<p>动态注册查找</p>
<h3 id="hook-registernatives"><a href="#hook-registernatives" class="headerlink" title="hook registernatives"></a>hook registernatives</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_RegisterNatives</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">RegisterNatives</span>_addr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libart.so&quot;</span>).<span class="title function_">enumerateSymbols</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i].<span class="property">name</span>;</span><br><span class="line">        <span class="keyword">if</span> ((symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) == -<span class="number">1</span>) &amp;&amp; (symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;RegisterNatives&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="title class_">RegisterNatives</span>_addr = symbols[i].<span class="property">address</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RegisterNatives_addr: &quot;</span>, <span class="title class_">RegisterNatives</span>_addr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">RegisterNatives</span>_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> env = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> jclass = args[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> class_name = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>().<span class="title function_">getClassName</span>(jclass);</span><br><span class="line">            <span class="keyword">var</span> methods_ptr = <span class="title function_">ptr</span>(args[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">var</span> method_count = args[<span class="number">3</span>].<span class="title function_">toInt32</span>();</span><br><span class="line">            <span class="comment">// console.log(&quot;RegisterNatives method counts: &quot;, method_count);</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; method_count; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> name = methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span>).<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">var</span> sig = methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span>).<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">var</span> fnPtr_ptr = methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">2</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">                <span class="keyword">var</span> find_module = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(fnPtr_ptr);</span><br><span class="line">                <span class="keyword">if</span>(class_name.<span class="title function_">indexOf</span>(<span class="string">&quot;com.bilibili.nativelibrary.LibBili&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ClasssName: &quot;</span>, class_name, <span class="string">&quot;MethodName: &quot;</span>, name, <span class="string">&quot;Sig: &quot;</span>, sig, <span class="string">&quot;Function_addr: &quot;</span>, fnPtr_ptr, <span class="string">&quot;ModuleName: &quot;</span>, find_module.<span class="property">name</span>, <span class="string">&quot;Fun_Offset: &quot;</span>, <span class="title function_">ptr</span>(fnPtr_ptr).<span class="title function_">sub</span>(find_module.<span class="property">base</span>));</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_RegisterNatives</span>()</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ClasssName:  com.bilibili.nativelibrary.LibBili MethodName:  a Sig:  (Ljava/lang/String;)Ljava/lang/String; Function_addr:  0xbc4b3c7d ModuleName:  libbili.so Fun_Offset:  0x1c7d       </span><br><span class="line">ClasssName:  com.bilibili.nativelibrary.LibBili MethodName:  ao Sig:  (Ljava/lang/String;II)Ljava/lang/String; Function_addr:  0xbc4b3c83 ModuleName:  libbili.so Fun_Offset:  0x1c83    </span><br><span class="line">ClasssName:  com.bilibili.nativelibrary.LibBili MethodName:  b Sig:  (Ljava/lang/String;)Ljavax/crypto/spec/IvParameterSpec; Function_addr:  0xbc4b3c91 ModuleName:  libbili.so Fun_Offset:  0x1c91</span><br><span class="line">ClasssName:  com.bilibili.nativelibrary.LibBili MethodName:  s Sig:  (Ljava/util/SortedMap;)Lcom/bilibili/nativelibrary/SignedQuery; Function_addr:  0xbc4b3c97 ModuleName:  libbili.so Fun_Offset:  0x1c97</span><br><span class="line">ClasssName:  com.bilibili.nativelibrary.LibBili MethodName:  so Sig:  (Ljava/util/SortedMap;II)Lcom/bilibili/nativelibrary/SignedQuery; Function_addr:  0xbc4b3c9d ModuleName:  libbili.so Fun_Offset:  0x1c9d</span><br><span class="line">ClasssName:  com.bilibili.nativelibrary.LibBili MethodName:  so Sig:  (Ljava/util/SortedMap;[B)Lcom/bilibili/nativelibrary/SignedQuery; Function_addr:  0xbc4b3cab ModuleName:  libbili.so Fun_Offset:  0x1cab</span><br><span class="line">ClasssName:  com.bilibili.nativelibrary.LibBili MethodName:  getCpuCount Sig:  ()I Function_addr:  0xbc4b3cb3 ModuleName:  libbili.so Fun_Offset:  0x1cb3</span><br><span class="line">ClasssName:  com.bilibili.nativelibrary.LibBili MethodName:  getCpuId Sig:  ()I Function_addr:  0xbc4b3cb7 ModuleName:  libbili.so Fun_Offset:  0x1cb7</span><br></pre></td></tr></table></figure>

<p><code>s()</code>函数在偏移为<code>0x1c97</code>处</p>
<p>使用IDA跳转至该地址处进行分析</p>
<p>首先看<code>s()</code>方法的返回值，它返回的是一个对象，里面有两个参数是<code>v13</code>和<code>v14</code></p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/89.jpg" alt="1"></p>
<p>我们回过头去看jadx里的<code>s()</code>方法，它传入一个<code>sortedMap</code>参数，返回一个<code>SignedQuery</code>对象，返回<code>SignedQuery</code>对象需要调用<code>SignedQuery</code>类的构造方法</p>
<p>我们再去看<code>SignedQuery</code>类的构造方法</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/90.jpg" alt="1"></p>
<p>这里面传入了两个参数，从<code>toString()</code>方法里可以看到其中<code>this.b</code>就是<code>sign</code>值，也就是IDA里看到的返回值中的参数<code>v14</code></p>
<p>接下来找<code>v14</code>怎么生成的</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/91.jpg" alt="1"></p>
<p>这里的反编译代码不好读，剩下只能靠猜了</p>
<p>查看<code>sub_227C()</code>函数，这个函数进行的数据初始化，看到这四个值很熟悉，是MD5的初始化数据</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/92.jpg" alt="1"></p>
<p>在分析Java层的时候已经猜出来了它并不是标准的MD5，可能加盐了</p>
<p>那么<code>sub_22B0()</code>函数可能就是加盐的函数</p>
<p>尝试对它进行hook</p>
<h3 id="hook-22B0"><a href="#hook-22B0" class="headerlink" title="hook_22B0()"></a>hook_22B0()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_22B0</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> function_addr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libbili.so&quot;</span>).<span class="title function_">add</span>(<span class="number">0x22B0</span>+<span class="number">1</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(function_addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="comment">// console.log(&quot;arg0:&quot;,args[0].readCString())</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg1:&quot;</span>,args[<span class="number">1</span>].<span class="title function_">readCString</span>())</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg2:&quot;</span>,args[<span class="number">2</span>])</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----over----&quot;</span>)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_22B0</span>()</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arg1: actual_played_time=1&amp;aid=113945784358610&amp;appkey=1d8b6e7d45233436&amp;auto_play=0&amp;build=6240300&amp;c_locale=zh-Hans_CN&amp;channel=alifenfa&amp;cid=28214757335&amp;epid=0&amp;epid_status=&amp;from=7&amp;from_spmid=tm.recommend.0.0&amp;last_play_progress_time=1&amp;list_play_time=0&amp;max_play_progress_time=1&amp;mid=0&amp;miniplayer_play_time=0&amp;mobi_app=android&amp;network_type=1&amp;paused_time=2&amp;platform=android&amp;play_status=0&amp;play_type=1&amp;played_time=1&amp;quality=32&amp;s_locale=zh-Hans_CN&amp;session=22b3446fdb1b406d22b87ba3d09bbeb0bb170e21&amp;sid=0&amp;spmid=main.ugc-video-detail.0.0&amp;start_ts=1738823412&amp;statistics=%7B%22appId%22%3A1%2C%22platform%22%3A3%2C%22version%22%3A%226.24.0%22%2C%22abtest%22%3A%22%22%7D&amp;sub_type=0&amp;total_time=3&amp;ts=1738823572&amp;type=3&amp;user_status=0&amp;video_duration=284</span><br><span class="line">arg2: 0x242</span><br><span class="line">----over----</span><br><span class="line">arg1: 560c52cc</span><br><span class="line">arg2: 0x8</span><br><span class="line">----over----</span><br><span class="line">arg1: d288fed0</span><br><span class="line">arg2: 0x8</span><br><span class="line">----over----</span><br><span class="line">arg1: 45859ed1</span><br><span class="line">arg2: 0x8</span><br><span class="line">----over----</span><br><span class="line">arg1: 8bffd973</span><br><span class="line">arg2: 0x8</span><br><span class="line">----over----</span><br><span class="line">arg1: �</span><br><span class="line">arg2: 0xa</span><br><span class="line">----over----</span><br><span class="line">arg1: p</span><br><span class="line">arg2: 0x8</span><br><span class="line">----over----</span><br></pre></td></tr></table></figure>

<h3 id="主动调用s-方法，并对so方法进行hook"><a href="#主动调用s-方法，并对so方法进行hook" class="headerlink" title="主动调用s()方法，并对so方法进行hook"></a>主动调用<code>s()</code>方法，并对so方法进行hook</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">call_s</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">LibBili</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.bilibili.nativelibrary.LibBili&quot;</span>).$new();</span><br><span class="line">        <span class="keyword">let</span> hashmap = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.HashMap&quot;</span>).$new();</span><br><span class="line">        hashmap.<span class="title function_">put</span>(<span class="string">&quot;actual_played_time&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        hashmap.<span class="title function_">put</span>(<span class="string">&quot;aid&quot;</span>,<span class="string">&quot;113945784358610&quot;</span>);</span><br><span class="line">        hashmap.<span class="title function_">put</span>(<span class="string">&quot;appkey&quot;</span>,<span class="string">&quot;1d8b6e7d45233436&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> treemap = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.TreeMap&quot;</span>).$new(hashmap);</span><br><span class="line">        <span class="keyword">let</span> signedquery = <span class="title class_">LibBili</span>.<span class="title function_">s</span>(treemap);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;signedquery:&quot;</span>,signedquery);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_22B0</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> function_addr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libbili.so&quot;</span>).<span class="title function_">add</span>(<span class="number">0x22B0</span>+<span class="number">1</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(function_addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="comment">// console.log(&quot;arg0:&quot;,args[0].readCString())</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg1:&quot;</span>,args[<span class="number">1</span>].<span class="title function_">readCString</span>())</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg2:&quot;</span>,args[<span class="number">2</span>])</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----over----&quot;</span>)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_22B0</span>()</span><br></pre></td></tr></table></figure>

<p>hook结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">call_s()</span><br><span class="line">LibBili.s is called: sortedMap=[object Object]</span><br><span class="line">map: &#123;actual_played_time=1, aid=113945784358610, appkey=1d8b6e7d45233436&#125;</span><br><span class="line">arg1: actual_played_time=1&amp;aid=113945784358610&amp;appkey=1d8b6e7d45233436&amp;ts=1738825391</span><br><span class="line">arg2: 0x4e</span><br><span class="line">----over----</span><br><span class="line">arg1: 560c52cc</span><br><span class="line">arg2: 0x8</span><br><span class="line">----over----</span><br><span class="line">arg1: d288fed0</span><br><span class="line">arg2: 0x8</span><br><span class="line">----over----</span><br><span class="line">arg1: 45859ed1</span><br><span class="line">arg2: 0x8</span><br><span class="line">----over----</span><br><span class="line">arg1: 8bffd973</span><br><span class="line">arg2: 0x8</span><br><span class="line">----over----</span><br><span class="line">arg1: �</span><br><span class="line">arg2: 0xa</span><br><span class="line">----over----</span><br><span class="line">arg1: p</span><br><span class="line">arg2: 0x8</span><br><span class="line">----over----</span><br><span class="line">LibBili.s result=actual_played_time=1&amp;aid=113945784358610&amp;appkey=1d8b6e7d45233436&amp;ts=1738825391&amp;sign=cd3eb3e0e90c07304828f1a2c9581d06</span><br><span class="line">signedquery: actual_played_time=1&amp;aid=113945784358610&amp;appkey=1d8b6e7d45233436&amp;ts=1738825391&amp;sign=cd3eb3e0e90c07304828f1a2c9581d06</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong></p>
<p>在主动调用的时候，在so里面会拼接一个<code>ts</code>参数，当前时间戳，而且如果map长度太短不会生成sign</p>
<p>经过测试MD5加了四次盐，加的盐是<code>560c52cc</code>、<code>d288fed0</code>、<code>45859ed1</code>、<code>8bffd973</code></p>
<p>在<code>s()</code>方法里做的事情就是给map拼接<code>ts</code>参数，然后加盐，进行MD5哈希算法，如下</p>
<p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/93.jpg" alt="1"></p>
<h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h2><p>代码整合</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_buvid</span>():</span><br><span class="line">    uuid_data = <span class="built_in">str</span>(uuid.uuid4()).replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    t2_12_22 = uuid_data[<span class="number">2</span>]+uuid_data[<span class="number">12</span>]+uuid_data[<span class="number">22</span>]</span><br><span class="line">    buvid = (<span class="string">&quot;XW&quot;</span>+t2_12_22+uuid_data).upper()</span><br><span class="line">    <span class="keyword">return</span> buvid</span><br><span class="line"></span><br><span class="line">buvid = g_buvid()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_time_mills</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">int</span>(time.time()*<span class="number">1000</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_randint</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(random.randint(<span class="number">0</span>,<span class="number">1000000</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_sb2</span>(<span class="params">buvid</span>):</span><br><span class="line">    <span class="keyword">return</span> buvid+g_time_mills()+g_randint()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SHA1_call</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 创建sha1对象</span></span><br><span class="line">    sha1 = hashlib.sha1()</span><br><span class="line">    sha1.update(data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="comment"># 获取加密后的数据，以16进制表示</span></span><br><span class="line">    sha1_hex = sha1.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> sha1_hex</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_session</span>(<span class="params">buvid</span>):</span><br><span class="line">    <span class="keyword">return</span> SHA1_call(g_sb2(buvid))</span><br><span class="line"></span><br><span class="line">session = g_session(buvid)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_call</span>(<span class="params">data</span>):</span><br><span class="line">    data+=<span class="string">&quot;560c52ccd288fed045859ed18bffd973&quot;</span></span><br><span class="line">    <span class="comment"># 创建md5对象</span></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    <span class="comment"># 更新要加密的数据，参数要是字节类型</span></span><br><span class="line">    md5.update(data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="comment"># 获取加密后的数据，以16进制表示</span></span><br><span class="line">    md5_hex = md5.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> md5_hex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_sign</span>(<span class="params">body</span>):</span><br><span class="line">    <span class="comment"># body[&quot;statistics&quot;] = urllib.parse.quote(&quot;&#123;\&quot;appId\&quot;:1,\&quot;platform\&quot;:3,\&quot;version\&quot;:\&quot;6.24.0\&quot;,\&quot;abtest\&quot;:\&quot;\&quot;&#125;&quot;)</span></span><br><span class="line">    body[<span class="string">&quot;statistics&quot;</span>] = urllib.parse.quote(body[<span class="string">&quot;statistics&quot;</span>])</span><br><span class="line">    body_str = <span class="string">&quot;&amp;&quot;</span>.join([key+<span class="string">&quot;=&quot;</span>+value <span class="keyword">for</span> key,value <span class="keyword">in</span> body.items()])</span><br><span class="line">    <span class="comment"># print(body_str)</span></span><br><span class="line">    sign = md5_call(body_str)</span><br><span class="line">    body[<span class="string">&quot;statistics&quot;</span>] = urllib.parse.unquote(body[<span class="string">&quot;statistics&quot;</span>])</span><br><span class="line">    <span class="built_in">print</span>(md5_call(body_str))</span><br><span class="line">    <span class="keyword">return</span> sign</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://api.bilibili.com/x/report/heartbeat/mobile&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">&quot;content-length&quot;</span>: <span class="string">&quot;751&quot;</span>,</span><br><span class="line">  <span class="string">&quot;buvid&quot;</span>: buvid, <span class="comment"># &quot;XY17684138CCA764C73112F1B0464F485C112&quot;,</span></span><br><span class="line">  <span class="string">&quot;device-id&quot;</span>: <span class="string">&quot;PF9tVWMHYgNiUTQGegZ6&quot;</span>,</span><br><span class="line">  <span class="string">&quot;fp_local&quot;</span>: <span class="string">&quot;2e941853742b47fa1e688cd567d1a40320250204210435027583fd9976406624&quot;</span>,</span><br><span class="line">  <span class="string">&quot;fp_remote&quot;</span>: <span class="string">&quot;2e941853742b47fa1e688cd567d1a4032024123013422042cd4fe24a164fc683&quot;</span>,</span><br><span class="line">  <span class="string">&quot;session_id&quot;</span>: <span class="string">&quot;e5274c78&quot;</span>,</span><br><span class="line">  <span class="string">&quot;env&quot;</span>: <span class="string">&quot;prod&quot;</span>,</span><br><span class="line">  <span class="string">&quot;app-key&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">  <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 BiliDroid/6.24.0 (bbcallen@gmail.com) os/android model/Pixel 3 mobi_app/android build/6240300 channel/alifenfa innerVer/6240300 osVer/9 network/2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;bili-bridge-engine&quot;</span>: <span class="string">&quot;cronet&quot;</span>,</span><br><span class="line">  <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded; charset=utf-8&quot;</span>,</span><br><span class="line">  <span class="string">&quot;accept-encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;actual_played_time&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;aid&quot;</span>: <span class="string">&quot;113954760167085&quot;</span>,</span><br><span class="line">  <span class="string">&quot;appkey&quot;</span>: <span class="string">&quot;1d8b6e7d45233436&quot;</span>,</span><br><span class="line">  <span class="string">&quot;auto_play&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;6240300&quot;</span>,</span><br><span class="line">  <span class="string">&quot;c_locale&quot;</span>: <span class="string">&quot;zh-Hans_CN&quot;</span>,</span><br><span class="line">  <span class="string">&quot;channel&quot;</span>: <span class="string">&quot;alifenfa&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cid&quot;</span>: <span class="string">&quot;28237826361&quot;</span>,</span><br><span class="line">  <span class="string">&quot;epid&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;epid_status&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;from&quot;</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">  <span class="string">&quot;from_spmid&quot;</span>: <span class="string">&quot;tm.recommend.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;last_play_progress_time&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;list_play_time&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;max_play_progress_time&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;mid&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;miniplayer_play_time&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;mobi_app&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">  <span class="string">&quot;network_type&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;paused_time&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;platform&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">  <span class="string">&quot;play_status&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;play_type&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;played_time&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;quality&quot;</span>: <span class="string">&quot;32&quot;</span>,</span><br><span class="line">  <span class="string">&quot;s_locale&quot;</span>: <span class="string">&quot;zh-Hans_CN&quot;</span>,</span><br><span class="line">  <span class="string">&quot;session&quot;</span>:  session, <span class="comment">#&quot;307d1c27886c3c46ae604c3a95e41bc4aaa1f71e&quot;, #session,#</span></span><br><span class="line">  <span class="string">&quot;sid&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;spmid&quot;</span>: <span class="string">&quot;main.ugc-video-detail.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;start_ts&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;statistics&quot;</span>: <span class="string">&quot;&#123;\&quot;appId\&quot;:1,\&quot;platform\&quot;:3,\&quot;version\&quot;:\&quot;6.24.0\&quot;,\&quot;abtest\&quot;:\&quot;\&quot;&#125;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sub_type&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;total_time&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ts&quot;</span>: <span class="built_in">str</span>(<span class="built_in">int</span>(time.time())),<span class="comment"># &quot;1738829640&quot;, #str(int(time.time())),#</span></span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">  <span class="string">&quot;user_status&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;video_duration&quot;</span>: <span class="string">&quot;36&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[<span class="string">&quot;sign&quot;</span>] = g_sign(data) <span class="comment"># &quot;e0d490be7bc919094d266999c6c9d8be&quot;</span></span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line"><span class="comment"># print(data[&quot;sign&quot;])</span></span><br><span class="line"><span class="comment"># print(&quot;&amp;&quot;.join([key+&quot;=&quot;+value for key,value in data.items()]))</span></span><br><span class="line"></span><br><span class="line">response = requests.post(url=url,headers=headers,data=data)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>

<h1 id="抓包数据"><a href="#抓包数据" class="headerlink" title="抓包数据"></a>抓包数据</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url:&quot;https://api.bilibili.com/x/report/click/android2&quot;</span><br><span class="line"></span><br><span class="line">headers:&#123;</span><br><span class="line">  &quot;:authority&quot;: &quot;api.bilibili.com&quot;,</span><br><span class="line">  &quot;:method&quot;: &quot;POST&quot;,</span><br><span class="line">  &quot;:path&quot;: &quot;/x/report/click/android2&quot;,</span><br><span class="line">  &quot;:scheme&quot;: &quot;https&quot;,</span><br><span class="line">  &quot;content-length&quot;: &quot;320&quot;,</span><br><span class="line">  &quot;buvid&quot;: &quot;XY17684138CCA764C73112F1B0464F485C112&quot;,</span><br><span class="line">  &quot;device-id&quot;: &quot;PF9tVWMHYgNiUTQGegZ6&quot;,</span><br><span class="line">  &quot;fp_local&quot;: &quot;2e941853742b47fa1e688cd567d1a40320250204210435027583fd9976406624&quot;,</span><br><span class="line">  &quot;fp_remote&quot;: &quot;2e941853742b47fa1e688cd567d1a4032024123013422042cd4fe24a164fc683&quot;,</span><br><span class="line">  &quot;session_id&quot;: &quot;e5274c78&quot;,</span><br><span class="line">  &quot;env&quot;: &quot;prod&quot;,</span><br><span class="line">  &quot;app-key&quot;: &quot;android&quot;,</span><br><span class="line">  &quot;user-agent&quot;: &quot;Mozilla/5.0 BiliDroid/6.24.0 (bbcallen@gmail.com) os/android model/Pixel 3 mobi_app/android build/6240300 channel/alifenfa innerVer/6240300 osVer/9 network/2&quot;,</span><br><span class="line">  &quot;bili-bridge-engine&quot;: &quot;cronet&quot;,</span><br><span class="line">  &quot;content-type&quot;: &quot;application/octet-stream&quot;,</span><br><span class="line">  &quot;accept-encoding&quot;: &quot;gzip, deflate, br&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data:</span><br><span class="line">96 1B 90 1A 66 5C 24 11 A2 97 15 58 D9 50 5C 18 B6 E0 ED 42 82 0D 00 5E D3 F8 63 32 7E BD 37 36 EB DC C5 30 74 52 78 1A 06 7D 24 59 01 3E E4 3D 10 95 70 D3 F9 6D D8 E3 9F 1B B4 B5 0B F5 87 2A 6F 65 FE 5D C1 D9 A6 0A 50 44 AE 20 53 26 D5 AC D3 5C F8 D7 EB 2E B3 D3 07 E6 02 E7 B9 27 3D EC C9 DD C4 F8 C7 FE E9 E6 13 DC 51 99 28 8D E5 19 A7 E9 78 52 C5 8B F6 8B FC 7C 7D DD B7 4E 91 59 D1 A3 93 7A 3F E0 A4 AA 0F A3 84 7A 8B 9F F4 24 FE 96 D0 62 BA D2 26 D5 2C FC 7B 39 9E 1A 4D C8 40 4D A7 62 75 6F 03 F6 62 55 B5 81 7D 27 BA 3F B7 8C FA 0C 33 A6 4C 2F 2B 51 D5 1B 0B 73 0D E5 CA AD 78 26 85 32 16 C5 FB B5 75 11 0A CE 48 E3 9A 3E D5 03 63 03 30 44 38 87 1C 64 A9 AF 64 B0 6D 39 BC 37 DA 48 0E DB E7 65 E9 36 CD C8 27 77 D2 68 83 FB 99 18 ED 7A CD B2 4B AD B6 05 81 60 1C 47 4B A4 0D 57 0C 28 BD A0 57 35 1A D6 56 81 ED 6B C3 58 AF 74 3E 02 BB 72 EC 56 7B A0 F7 56 D3 59 FA E7 42 05 61 6A DD 57 C0 D1 32 05 C0 67 77 35 A9 58 65 31 36 A6 A7 AC 85 CE 1C 78 AB 4D</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url:&quot;https://api.bilibili.com/x/report/heartbeat/mobile&quot;</span><br><span class="line"></span><br><span class="line">headers:&#123;</span><br><span class="line">  &quot;:authority&quot;: &quot;api.bilibili.com&quot;,</span><br><span class="line">  &quot;:method&quot;: &quot;POST&quot;,</span><br><span class="line">  &quot;:path&quot;: &quot;/x/report/heartbeat/mobile&quot;,</span><br><span class="line">  &quot;:scheme&quot;: &quot;https&quot;,</span><br><span class="line">  &quot;content-length&quot;: &quot;751&quot;,</span><br><span class="line">  &quot;buvid&quot;: &quot;XY17684138CCA764C73112F1B0464F485C112&quot;,</span><br><span class="line">  &quot;device-id&quot;: &quot;PF9tVWMHYgNiUTQGegZ6&quot;,</span><br><span class="line">  &quot;fp_local&quot;: &quot;2e941853742b47fa1e688cd567d1a40320250204210435027583fd9976406624&quot;,</span><br><span class="line">  &quot;fp_remote&quot;: &quot;2e941853742b47fa1e688cd567d1a4032024123013422042cd4fe24a164fc683&quot;,</span><br><span class="line">  &quot;session_id&quot;: &quot;e5274c78&quot;,</span><br><span class="line">  &quot;env&quot;: &quot;prod&quot;,</span><br><span class="line">  &quot;app-key&quot;: &quot;android&quot;,</span><br><span class="line">  &quot;user-agent&quot;: &quot;Mozilla/5.0 BiliDroid/6.24.0 (bbcallen@gmail.com) os/android model/Pixel 3 mobi_app/android build/6240300 channel/alifenfa innerVer/6240300 osVer/9 network/2&quot;,</span><br><span class="line">  &quot;bili-bridge-engine&quot;: &quot;cronet&quot;,</span><br><span class="line">  &quot;content-type&quot;: &quot;application/x-www-form-urlencoded; charset=utf-8&quot;,</span><br><span class="line">  &quot;accept-encoding&quot;: &quot;gzip, deflate, br&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data:&#123;</span><br><span class="line">  &quot;actual_played_time&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;aid&quot;: &quot;113954760167085&quot;,</span><br><span class="line">  &quot;appkey&quot;: &quot;1d8b6e7d45233436&quot;,</span><br><span class="line">  &quot;auto_play&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;build&quot;: &quot;6240300&quot;,</span><br><span class="line">  &quot;c_locale&quot;: &quot;zh-Hans_CN&quot;,</span><br><span class="line">  &quot;channel&quot;: &quot;alifenfa&quot;,</span><br><span class="line">  &quot;cid&quot;: &quot;28237826361&quot;,</span><br><span class="line">  &quot;epid&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;epid_status&quot;: &quot;&quot;,</span><br><span class="line">  &quot;from&quot;: &quot;7&quot;,</span><br><span class="line">  &quot;from_spmid&quot;: &quot;tm.recommend.0.0&quot;,</span><br><span class="line">  &quot;last_play_progress_time&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;list_play_time&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;max_play_progress_time&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;mid&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;miniplayer_play_time&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;mobi_app&quot;: &quot;android&quot;,</span><br><span class="line">  &quot;network_type&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;paused_time&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;platform&quot;: &quot;android&quot;,</span><br><span class="line">  &quot;play_status&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;play_type&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;played_time&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;quality&quot;: &quot;32&quot;,</span><br><span class="line">  &quot;s_locale&quot;: &quot;zh-Hans_CN&quot;,</span><br><span class="line">  &quot;session&quot;: &quot;307d1c27886c3c46ae604c3a95e41bc4aaa1f71e&quot;,</span><br><span class="line">  &quot;sid&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;spmid&quot;: &quot;main.ugc-video-detail.0.0&quot;,</span><br><span class="line">  &quot;start_ts&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;statistics&quot;: &quot;&#123;\&quot;appId\&quot;:1,\&quot;platform\&quot;:3,\&quot;version\&quot;:\&quot;6.24.0\&quot;,\&quot;abtest\&quot;:\&quot;\&quot;&#125;&quot;,</span><br><span class="line">  &quot;sub_type&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;total_time&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;ts&quot;: &quot;1738829640&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;3&quot;,</span><br><span class="line">  &quot;user_status&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;video_duration&quot;: &quot;36&quot;,</span><br><span class="line">  &quot;sign&quot;: &quot;e0d490be7bc919094d266999c6c9d8be&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url:&quot;https://api.bilibili.com/x/report/heartbeat/mobile&quot;</span><br><span class="line"></span><br><span class="line">headers:&#123;</span><br><span class="line">  &quot;:authority&quot;: &quot;api.bilibili.com&quot;,</span><br><span class="line">  &quot;:method&quot;: &quot;POST&quot;,</span><br><span class="line">  &quot;:path&quot;: &quot;/x/report/heartbeat/mobile&quot;,</span><br><span class="line">  &quot;:scheme&quot;: &quot;https&quot;,</span><br><span class="line">  &quot;content-length&quot;: &quot;765&quot;,</span><br><span class="line">  &quot;buvid&quot;: &quot;XY17684138CCA764C73112F1B0464F485C112&quot;,</span><br><span class="line">  &quot;device-id&quot;: &quot;PF9tVWMHYgNiUTQGegZ6&quot;,</span><br><span class="line">  &quot;fp_local&quot;: &quot;2e941853742b47fa1e688cd567d1a40320250204210435027583fd9976406624&quot;,</span><br><span class="line">  &quot;fp_remote&quot;: &quot;2e941853742b47fa1e688cd567d1a4032024123013422042cd4fe24a164fc683&quot;,</span><br><span class="line">  &quot;session_id&quot;: &quot;e5274c78&quot;,</span><br><span class="line">  &quot;env&quot;: &quot;prod&quot;,</span><br><span class="line">  &quot;app-key&quot;: &quot;android&quot;,</span><br><span class="line">  &quot;user-agent&quot;: &quot;Mozilla/5.0 BiliDroid/6.24.0 (bbcallen@gmail.com) os/android model/Pixel 3 mobi_app/android build/6240300 channel/alifenfa innerVer/6240300 osVer/9 network/2&quot;,</span><br><span class="line">  &quot;bili-bridge-engine&quot;: &quot;cronet&quot;,</span><br><span class="line">  &quot;content-type&quot;: &quot;application/x-www-form-urlencoded; charset=utf-8&quot;,</span><br><span class="line">  &quot;accept-encoding&quot;: &quot;gzip, deflate, br&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data:&#123;</span><br><span class="line">  &quot;actual_played_time&quot;: &quot;10&quot;,</span><br><span class="line">  &quot;aid&quot;: &quot;113954760167085&quot;,</span><br><span class="line">  &quot;appkey&quot;: &quot;1d8b6e7d45233436&quot;,</span><br><span class="line">  &quot;auto_play&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;build&quot;: &quot;6240300&quot;,</span><br><span class="line">  &quot;c_locale&quot;: &quot;zh-Hans_CN&quot;,</span><br><span class="line">  &quot;channel&quot;: &quot;alifenfa&quot;,</span><br><span class="line">  &quot;cid&quot;: &quot;28237826361&quot;,</span><br><span class="line">  &quot;epid&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;epid_status&quot;: &quot;&quot;,</span><br><span class="line">  &quot;from&quot;: &quot;7&quot;,</span><br><span class="line">  &quot;from_spmid&quot;: &quot;tm.recommend.0.0&quot;,</span><br><span class="line">  &quot;last_play_progress_time&quot;: &quot;36&quot;,</span><br><span class="line">  &quot;list_play_time&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;max_play_progress_time&quot;: &quot;36&quot;,</span><br><span class="line">  &quot;mid&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;miniplayer_play_time&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;mobi_app&quot;: &quot;android&quot;,</span><br><span class="line">  &quot;network_type&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;paused_time&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;platform&quot;: &quot;android&quot;,</span><br><span class="line">  &quot;play_status&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;play_type&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;played_time&quot;: &quot;10&quot;,</span><br><span class="line">  &quot;quality&quot;: &quot;32&quot;,</span><br><span class="line">  &quot;s_locale&quot;: &quot;zh-Hans_CN&quot;,</span><br><span class="line">  &quot;session&quot;: &quot;307d1c27886c3c46ae604c3a95e41bc4aaa1f71e&quot;,</span><br><span class="line">  &quot;sid&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;spmid&quot;: &quot;main.ugc-video-detail.0.0&quot;,</span><br><span class="line">  &quot;start_ts&quot;: &quot;1738829483&quot;,</span><br><span class="line">  &quot;statistics&quot;: &quot;&#123;\&quot;appId\&quot;:1,\&quot;platform\&quot;:3,\&quot;version\&quot;:\&quot;6.24.0\&quot;,\&quot;abtest\&quot;:\&quot;\&quot;&#125;&quot;,</span><br><span class="line">  &quot;sub_type&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;total_time&quot;: &quot;11&quot;,</span><br><span class="line">  &quot;ts&quot;: &quot;1738829651&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;3&quot;,</span><br><span class="line">  &quot;user_status&quot;: &quot;0&quot;,</span><br><span class="line">  &quot;video_duration&quot;: &quot;36&quot;,</span><br><span class="line">  &quot;sign&quot;: &quot;e1e9b0a874cf0575cc7fffd50df09ae8&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="unidbg"><a href="#unidbg" class="headerlink" title="unidbg"></a>unidbg</h1><h2 id="模拟执行s方法"><a href="#模拟执行s方法" class="headerlink" title="模拟执行s方法"></a>模拟执行s方法</h2><p><img src="/2025/02/06/B%E7%AB%99%E6%92%AD%E6%94%BE%E9%87%8F%E5%8F%8A%E5%AE%8C%E6%92%AD%E7%8E%87%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91/94.jpg" alt="1"></p>
<p>so位置<code>libbili.so</code></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>s方法的调用位置，如下，被<code>g()</code>方法调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static SignedQuery g(Map&lt;String, String&gt; map) &#123;</span><br><span class="line">    return s(map == null ? new TreeMap() : new TreeMap(map));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回一个<code>SignedQuery</code>对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public SignedQuery(String str, String str2) &#123;</span><br><span class="line">    this.a = str;</span><br><span class="line">    this.b = str2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们的目标是得到<code>SignedQuery</code>里的<code>this.b</code>字段</p>
<p>在补环境的过程中，我们一定会补<code>SignedQuery</code>，在补它的时候传入这两个参数，而我们可以在这里直接拿到这两个参数，就不需要继续补环境了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LibBili</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">process</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> DalvikModule dm;</span><br><span class="line">    <span class="keyword">private</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LibBili</span><span class="params">()</span> &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder</span><br><span class="line">                .for32Bit() <span class="comment">// for32Bit()</span></span><br><span class="line">                .setProcessName(process)</span><br><span class="line">                .setRootDir(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;target/rootfs&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 设置执行多少条指令切换一次线程</span></span><br><span class="line">        <span class="comment">// emulator.getBackend().registerEmuCountHook(10000);</span></span><br><span class="line">        <span class="comment">// 开启线程调度器</span></span><br><span class="line">        <span class="comment">// emulator.getSyscallHandler().setEnableThreadDispatcher(true);</span></span><br><span class="line">        memory = emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/java/com/tv/danmaku/bili/bili_6.24.0.apk&quot;</span>));</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);</span><br><span class="line">        dm = vm.loadLibrary(<span class="string">&quot;bili&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sign</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DvmClass</span> <span class="variable">LibBiliClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.bilibili.nativelibrary.LibBili&quot;</span>);</span><br><span class="line">        <span class="type">SortedMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;actual_played_time&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;aid&quot;</span>, <span class="string">&quot;113945784358610&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;appkey&quot;</span>, <span class="string">&quot;1d8b6e7d45233436&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;ts&quot;</span>, <span class="string">&quot;1738825391&quot;</span>);</span><br><span class="line"><span class="comment">//        map.put(&quot;actual_played_time&quot;, &quot;1&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;aid&quot;, &quot;113945784358610&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;appkey&quot;, &quot;1d8b6e7d45233436&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;auto_play&quot;, &quot;0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;build&quot;, &quot;6240300&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;c_locale&quot;, &quot;zh-Hans_CN&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;channel&quot;, &quot;alifenfa&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;cid&quot;, &quot;28214757335&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;epid&quot;, &quot;0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;epid_status&quot;, &quot;&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;from&quot;, &quot;7&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;from_spmid&quot;, &quot;tm.recommend.0.0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;last_play_progress_time&quot;, &quot;1&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;list_play_time&quot;, &quot;0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;max_play_progress_time&quot;, &quot;1&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;mid&quot;, &quot;0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;miniplayer_play_time&quot;, &quot;0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;mobi_app&quot;, &quot;android&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;network_type&quot;, &quot;1&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;paused_time&quot;, &quot;2&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;platform&quot;, &quot;android&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;play_status&quot;, &quot;0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;play_type&quot;, &quot;1&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;played_time&quot;, &quot;1&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;quality&quot;, &quot;32&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;s_locale&quot;, &quot;zh-Hans_CN&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;session&quot;, &quot;22b3446fdb1b406d22b87ba3d09bbeb0bb170e21&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;sid&quot;, &quot;0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;spmid&quot;, &quot;main.ugc-video-detail.0.0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;start_ts&quot;, &quot;1738823412&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;statistics&quot;, &quot;&#123;appId:1, platform:3, version:\&quot;6.24.0\&quot;, abtest:\&quot;\&quot;&#125;&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;sub_type&quot;, &quot;0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;total_time&quot;, &quot;3&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;ts&quot;,&quot;1738823572&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;type&quot;, &quot;3&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;user_status&quot;, &quot;0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;video_duration&quot;, &quot;284&quot;);</span></span><br><span class="line">        <span class="type">ProxyDvmObject</span> <span class="variable">map_proxyobj</span> <span class="operator">=</span> (ProxyDvmObject) ProxyDvmObject.createObject(vm,map);</span><br><span class="line">        LibBiliClass.callStaticJniMethodObject(emulator,<span class="string">&quot;s(Ljava/util/SortedMap;)Lcom/bilibili/nativelibrary/SignedQuery;&quot;</span>,map_proxyobj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LibBili</span> <span class="variable">bili</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LibBili</span>();</span><br><span class="line">        bili.sign();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="补环境"><a href="#补环境" class="headerlink" title="补环境"></a>补环境</h3><h4 id="补isEmpty"><a href="#补isEmpty" class="headerlink" title="补isEmpty()"></a>补isEmpty()</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.UnsupportedOperationException: java/util/Map-&gt;isEmpty()Z</span><br><span class="line">	at com.github.unidbg.linux.android.dvm.AbstractJni.callBooleanMethod(AbstractJni.java:598)</span><br></pre></td></tr></table></figure>

<p>补</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &quot;java/util/Map-&gt;isEmpty()Z&quot;:&#123;</span><br><span class="line">    Map map = (Map) dvmObject.getValue();</span><br><span class="line">    return map.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行，继续补环境</p>
<h4 id="补get-Ljava-lang-Object"><a href="#补get-Ljava-lang-Object" class="headerlink" title="补get(Ljava&#x2F;lang&#x2F;Object;)"></a>补get(Ljava&#x2F;lang&#x2F;Object;)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.UnsupportedOperationException: java/util/Map-&gt;get(Ljava/lang/Object;)Ljava/lang/Object;</span><br><span class="line">	at com.github.unidbg.linux.android.dvm.AbstractJni.callObjectMethod(AbstractJni.java:933)</span><br></pre></td></tr></table></figure>

<p>补</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&quot;java/util/Map-&gt;get(Ljava/lang/Object;)Ljava/lang/Object;&quot;</span>:&#123;</span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) dvmObject.getValue();</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> (String) varArg.getObjectArg(<span class="number">0</span>).getValue();</span><br><span class="line">    System.out.println(key);</span><br><span class="line">    <span class="type">String</span> <span class="variable">get</span> <span class="operator">=</span> (String) map.get(key);</span><br><span class="line">    <span class="keyword">return</span> ProxyDvmObject.createObject(vm,get);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里打印出来的key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">appkey</span><br><span class="line">ts</span><br></pre></td></tr></table></figure>

<p>运行，继续补环境</p>
<h4 id="补put-Ljava-lang-Object-Ljava-lang-Object"><a href="#补put-Ljava-lang-Object-Ljava-lang-Object" class="headerlink" title="补put(Ljava&#x2F;lang&#x2F;Object;Ljava&#x2F;lang&#x2F;Object;)"></a>补put(Ljava&#x2F;lang&#x2F;Object;Ljava&#x2F;lang&#x2F;Object;)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.UnsupportedOperationException: java/util/Map-&gt;put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</span><br><span class="line">	at com.github.unidbg.linux.android.dvm.AbstractJni.callObjectMethod(AbstractJni.java:933)</span><br></pre></td></tr></table></figure>

<p>补</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&quot;java/util/Map-&gt;put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;&quot;</span>:&#123;</span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) dvmObject.getValue();</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> (String) varArg.getObjectArg(<span class="number">0</span>).getValue();</span><br><span class="line">    System.out.println(key);</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) varArg.getObjectArg(<span class="number">1</span>).getValue();</span><br><span class="line">    System.out.println(value);</span><br><span class="line">    map.put(key, value);</span><br><span class="line">    <span class="keyword">return</span> ProxyDvmObject.createObject(vm,value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行，继续补环境</p>
<h4 id="补r-Ljava-util-Map"><a href="#补r-Ljava-util-Map" class="headerlink" title="补r(Ljava&#x2F;util&#x2F;Map;)"></a>补r(Ljava&#x2F;util&#x2F;Map;)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.UnsupportedOperationException: com/bilibili/nativelibrary/SignedQuery-&gt;r(Ljava/util/Map;)Ljava/lang/String;</span><br><span class="line">	at com.github.unidbg.linux.android.dvm.AbstractJni.callStaticObjectMethod(AbstractJni.java:433)</span><br></pre></td></tr></table></figure>

<p>这里补的是SignedQuery类的r方法，但是Unidbg里没有SignedQuery类，这个类需要自己实现，到jadx里copy过来</p>
<p>然后进行更正，更正完再补</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &quot;com/bilibili/nativelibrary/SignedQuery-&gt;r(Ljava/util/Map;)Ljava/lang/String;&quot;:&#123;</span><br><span class="line">    Map map = (Map) varArg.getObjectArg(0).getValue();</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    String ret = SignedQuery.r(map);</span><br><span class="line">    System.out.println(ret);</span><br><span class="line">    return ProxyDvmObject.createObject(vm,ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="补"><a href="#补" class="headerlink" title="补&lt;init&gt;"></a>补<code>&lt;init&gt;</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.UnsupportedOperationException: com/bilibili/nativelibrary/SignedQuery-&gt;&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V</span><br><span class="line">	at com.github.unidbg.linux.android.dvm.AbstractJni.newObject(AbstractJni.java:753)</span><br></pre></td></tr></table></figure>

<p>补</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &quot;com/bilibili/nativelibrary/SignedQuery-&gt;&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V&quot;:&#123;</span><br><span class="line">    String sign = (String) varArg.getObjectArg(1).getValue();</span><br><span class="line">    System.out.println(sign);</span><br><span class="line">    return vm.resolveClass(&quot;com/bilibili/nativelibrary/SignedQuery&quot;).newObject(null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="over"><a href="#over" class="headerlink" title="over"></a>over</h4><p>运行就出结果了。</p>
<h2 id="打包Python调用"><a href="#打包Python调用" class="headerlink" title="打包Python调用"></a>打包Python调用</h2><p>修改，可传入参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tv.danmaku.bili;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.jni.ProxyDvmObject;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.SortedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LibBili</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">process</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> DalvikModule dm;</span><br><span class="line">    <span class="keyword">private</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LibBili</span><span class="params">()</span> &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder</span><br><span class="line">                .for32Bit() <span class="comment">// for32Bit()</span></span><br><span class="line">                .setProcessName(process)</span><br><span class="line">                .setRootDir(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;target/rootfs&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 设置执行多少条指令切换一次线程</span></span><br><span class="line">        <span class="comment">// emulator.getBackend().registerEmuCountHook(10000);</span></span><br><span class="line">        <span class="comment">// 开启线程调度器</span></span><br><span class="line">        <span class="comment">// emulator.getSyscallHandler().setEnableThreadDispatcher(true);</span></span><br><span class="line">        memory = emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;apks/bili_6.24.0.apk&quot;</span>));</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//        vm.setVerbose(true);</span></span><br><span class="line">        dm = vm.loadLibrary(<span class="string">&quot;bili&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sign</span><span class="params">(String ts)</span>&#123;</span><br><span class="line">        <span class="type">DvmClass</span> <span class="variable">LibBiliClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.bilibili.nativelibrary.LibBili&quot;</span>);</span><br><span class="line">        <span class="type">SortedMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;actual_played_time&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;aid&quot;</span>, <span class="string">&quot;113945784358610&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;appkey&quot;</span>, <span class="string">&quot;1d8b6e7d45233436&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;ts&quot;</span>, ts);</span><br><span class="line"><span class="comment">//        map.put(&quot;actual_played_time&quot;, &quot;1&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;aid&quot;, &quot;113945784358610&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;appkey&quot;, &quot;1d8b6e7d45233436&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;auto_play&quot;, &quot;0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;build&quot;, &quot;6240300&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;c_locale&quot;, &quot;zh-Hans_CN&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;channel&quot;, &quot;alifenfa&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;cid&quot;, &quot;28214757335&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;epid&quot;, &quot;0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;epid_status&quot;, &quot;&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;from&quot;, &quot;7&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;from_spmid&quot;, &quot;tm.recommend.0.0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;last_play_progress_time&quot;, &quot;1&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;list_play_time&quot;, &quot;0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;max_play_progress_time&quot;, &quot;1&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;mid&quot;, &quot;0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;miniplayer_play_time&quot;, &quot;0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;mobi_app&quot;, &quot;android&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;network_type&quot;, &quot;1&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;paused_time&quot;, &quot;2&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;platform&quot;, &quot;android&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;play_status&quot;, &quot;0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;play_type&quot;, &quot;1&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;played_time&quot;, &quot;1&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;quality&quot;, &quot;32&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;s_locale&quot;, &quot;zh-Hans_CN&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;session&quot;, &quot;22b3446fdb1b406d22b87ba3d09bbeb0bb170e21&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;sid&quot;, &quot;0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;spmid&quot;, &quot;main.ugc-video-detail.0.0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;start_ts&quot;, &quot;1738823412&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;statistics&quot;, &quot;&#123;appId:1, platform:3, version:\&quot;6.24.0\&quot;, abtest:\&quot;\&quot;&#125;&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;sub_type&quot;, &quot;0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;total_time&quot;, &quot;3&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;ts&quot;,&quot;1738823572&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;type&quot;, &quot;3&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;user_status&quot;, &quot;0&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;video_duration&quot;, &quot;284&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ProxyDvmObject</span> <span class="variable">map_proxyobj</span> <span class="operator">=</span> (ProxyDvmObject) ProxyDvmObject.createObject(vm,map);</span><br><span class="line">        LibBiliClass.callStaticJniMethodObject(emulator,<span class="string">&quot;s(Ljava/util/SortedMap;)Lcom/bilibili/nativelibrary/SignedQuery;&quot;</span>,map_proxyobj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">callBooleanMethod</span><span class="params">(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VarArg varArg)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;java/util/Map-&gt;isEmpty()Z&quot;</span>:&#123;</span><br><span class="line">                <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) dvmObject.getValue();</span><br><span class="line">                <span class="keyword">return</span> map.isEmpty();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.callBooleanMethod(vm, dvmObject, signature, varArg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethod(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VarArg varArg) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;java/util/Map-&gt;get(Ljava/lang/Object;)Ljava/lang/Object;&quot;</span>:&#123;</span><br><span class="line">                <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) dvmObject.getValue();</span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> (String) varArg.getObjectArg(<span class="number">0</span>).getValue();</span><br><span class="line"><span class="comment">//                System.out.println(key);</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">get</span> <span class="operator">=</span> (String) map.get(key);</span><br><span class="line">                <span class="keyword">return</span> ProxyDvmObject.createObject(vm,get);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;java/util/Map-&gt;put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;&quot;</span>:&#123;</span><br><span class="line">                <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) dvmObject.getValue();</span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> (String) varArg.getObjectArg(<span class="number">0</span>).getValue();</span><br><span class="line"><span class="comment">//                System.out.println(key);</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) varArg.getObjectArg(<span class="number">1</span>).getValue();</span><br><span class="line"><span class="comment">//                System.out.println(value);</span></span><br><span class="line">                map.put(key, value);</span><br><span class="line">                <span class="keyword">return</span> ProxyDvmObject.createObject(vm,value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.callObjectMethod(vm, dvmObject, signature, varArg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; callStaticObjectMethod(BaseVM vm, DvmClass dvmClass, String signature, VarArg varArg) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;com/bilibili/nativelibrary/SignedQuery-&gt;r(Ljava/util/Map;)Ljava/lang/String;&quot;</span>:&#123;</span><br><span class="line">                <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) varArg.getObjectArg(<span class="number">0</span>).getValue();</span><br><span class="line"><span class="comment">//                System.out.println(map);</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> SignedQuery.r(map);</span><br><span class="line"><span class="comment">//                System.out.println(ret);</span></span><br><span class="line">                <span class="keyword">return</span> ProxyDvmObject.createObject(vm,ret);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.callStaticObjectMethod(vm, dvmClass, signature, varArg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; newObject(BaseVM vm, DvmClass dvmClass, String signature, VarArg varArg) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (signature)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;com/bilibili/nativelibrary/SignedQuery-&gt;&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V&quot;</span>:&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> (String) varArg.getObjectArg(<span class="number">1</span>).getValue();</span><br><span class="line">                System.out.println(sign);</span><br><span class="line">                <span class="keyword">return</span> vm.resolveClass(<span class="string">&quot;com/bilibili/nativelibrary/SignedQuery&quot;</span>).newObject(<span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.newObject(vm, dvmClass, signature, varArg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ts</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">        <span class="type">LibBili</span> <span class="variable">bili</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LibBili</span>();</span><br><span class="line">        bili.sign(ts);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">arg = <span class="string">&quot;1738825391&quot;</span></span><br><span class="line"></span><br><span class="line">cmd = <span class="string">&quot;java -jar unidbg.jar &quot;</span>+arg</span><br><span class="line">signature = subprocess.check_output(cmd,shell=<span class="string">&quot;True&quot;</span>,cwd = <span class="string">&quot;unidbg_jar&quot;</span>).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(signature)</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd3eb3e0e90c07304828f1a2c9581d06</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>B站</tag>
      </tags>
  </entry>
  <entry>
    <title>C++</title>
    <url>/2024/02/01/Cpp/</url>
    <content><![CDATA[<h1 id="C-基础编程"><a href="#C-基础编程" class="headerlink" title="C++基础编程"></a>C++基础编程</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> <span class="comment">// 引入标准输入输出流库，用于输入和输出操作</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; <span class="comment">// 使用标准命名空间，省略 std:: 前缀</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 输出 &quot;Hello, World!&quot; 到控制台</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回 0 表示程序正常结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>C++继承了C的所有数据类型。</p>
<ul>
<li><p>bool</p>
<p>  1字节</p>
<p>  值为<code>true</code>或<code>false</code>，即<code>1</code>或<code>0</code>。</p>
</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>C++继承了C语言中的函数。</p>
<p>在面向对象编程中C++对函数进行了扩展。</p>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>继承了C。</p>
<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>空指针<code>nullptr</code></p>
<h2 id="动态内存"><a href="#动态内存" class="headerlink" title="动态内存"></a>动态内存</h2><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><p>用于动态分配内存，并返回指向该内存的指针。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* p = <span class="keyword">new</span> <span class="type">int</span>;           <span class="comment">// 为一个 int 分配内存</span></span><br><span class="line"><span class="type">int</span>* arr = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];     <span class="comment">// 为一个 int 数组分配内存</span></span><br></pre></td></tr></table></figure>



<h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p>用于释放通过 <code>new</code> 分配的内存。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> p;         <span class="comment">// 释放为单个对象分配的内存</span></span><br><span class="line"><span class="keyword">delete</span>[] arr;     <span class="comment">// 释放为数组分配的内存</span></span><br></pre></td></tr></table></figure>



<h2 id="std-string类"><a href="#std-string类" class="headerlink" title="std::string类"></a>std::string类</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li><p><strong>c_str()</strong></p>
<p>将 C++ 的 <code>std::string</code> 对象转换为 C 风格的字符串（即以空字符 <code>\0</code> 结尾的字符数组）。</p>
</li>
</ul>
<h1 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h1><h1 id="指针-1"><a href="#指针-1" class="headerlink" title="指针"></a>指针</h1><h2 id="const修饰指针"><a href="#const修饰指针" class="headerlink" title="const修饰指针"></a>const修饰指针</h2><p><strong>常量指针</strong></p>
<p>指向常量数据的指针</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span>* ptr;     <span class="comment">// 或者等价写法 int const* ptr;</span></span><br></pre></td></tr></table></figure>

<p>指针可以修改指向（指向其他地址），但不能通过指针修改指向的数据。</p>
<p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* ptr = &amp;a;</span><br><span class="line"><span class="comment">// *ptr = 20;     // 错误：不能修改数据</span></span><br><span class="line">ptr = <span class="literal">nullptr</span>;     <span class="comment">// 正确：可以修改指针指向</span></span><br></pre></td></tr></table></figure>

<p><strong>指针常量</strong></p>
<p>指针本身为常量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="type">const</span> ptr;     <span class="comment">// 指针本身不可修改</span></span><br></pre></td></tr></table></figure>

<p>指针的指向不可修改（必须初始化），但 可以通过指针修改指向的数据。</p>
<p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> ptr = &amp;a;</span><br><span class="line">*ptr = <span class="number">20</span>;        <span class="comment">// 正确：可以修改数据</span></span><br><span class="line"><span class="comment">// ptr = nullptr; // 错误：不能修改指针指向</span></span><br></pre></td></tr></table></figure>

<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>作用：给变量起别名</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a =<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> &amp;b = a;</span><br><span class="line">    b = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; b; <span class="comment">// 20</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<p>引用必须初始化，初始化后不能发生改变</p>
<h2 id="引用做函数参数"><a href="#引用做函数参数" class="headerlink" title="引用做函数参数"></a>引用做函数参数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">swap</span>(a,b);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;a:&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;b:&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="引用作为函数的返回值"><a href="#引用作为函数的返回值" class="headerlink" title="引用作为函数的返回值"></a>引用作为函数的返回值</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="type">int</span>&amp; <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a =<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> &amp;a = <span class="built_in">test01</span>();</span><br><span class="line">    cout&lt;&lt; a &lt;&lt;endl; <span class="comment">// 10</span></span><br><span class="line">    <span class="built_in">test01</span>() = <span class="number">20</span>;</span><br><span class="line">    cout&lt;&lt; a &lt;&lt;endl; <span class="comment">// 20</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="引用的本质"><a href="#引用的本质" class="headerlink" title="引用的本质"></a>引用的本质</h2><p>引用的本质是指针常量</p>
<h2 id="常量引用"><a href="#常量引用" class="headerlink" title="常量引用"></a>常量引用</h2><p>通过const修饰，不能被修改</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">showValue</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">showValue</span>(a); <span class="comment">// 10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h1 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h1><p>简单使用</p>
<h2 id="test-cpp"><a href="#test-cpp" class="headerlink" title="test.cpp"></a>test.cpp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testcpp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;this is a test!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="test-h"><a href="#test-h" class="headerlink" title="test.h"></a>test.h</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CPPTEST_TEST_H  <span class="comment">// 如果没有定义 CPPTEST_TEST_H</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CPPTEST_TEST_H   <span class="comment">// 定义 CPPTEST_TEST_H，表示该头文件已经被包含</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 头文件的实际内容</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testcpp</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// CPPTEST_TEST_H</span></span></span><br></pre></td></tr></table></figure>

<h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">testcpp</span>(); <span class="comment">// 输出：this is a test!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="iostream"><a href="#iostream" class="headerlink" title="iostream"></a>iostream</h1><h2 id="cin"><a href="#cin" class="headerlink" title="cin"></a>cin</h2><p><code>cin</code> 使用流操作符（<code>&gt;&gt;</code>），一次可以读取多个变量，输入用空格或回车分隔。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    cin &gt;&gt; number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="cout"><a href="#cout" class="headerlink" title="cout"></a>cout</h2><p><code>cout</code> 使用流操作符（<code>&lt;&lt;</code>）可以连续输出多个变量。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    cin &gt;&gt; number;</span><br><span class="line">    cout &lt;&lt; number;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;换行&quot;</span> &lt;&lt; endl; <span class="comment">// endl 表示换行，相当于\n，同时会刷新缓冲区。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><h2 id="begin"><a href="#begin" class="headerlink" title="begin()"></a>begin()</h2><h2 id="end"><a href="#end" class="headerlink" title="end()"></a>end()</h2><h1 id="cstring"><a href="#cstring" class="headerlink" title="cstring"></a>cstring</h1><h2 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h2><h3 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h3><h3 id="memset"><a href="#memset" class="headerlink" title="memset"></a>memset</h3><h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 空的 vector</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定大小的 vector</span></span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">v2</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">// 大小为 10，元素默认值为 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定大小和初始值的 vector</span></span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">v3</span><span class="params">(<span class="number">5</span>, <span class="number">100</span>)</span></span>; <span class="comment">// 大小为 5，元素初始化为 100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化列表方式</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; v4 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制构造函数</span></span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">v5</span><span class="params">(v4)</span></span>; <span class="comment">// v5 复制自 v4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="push-back"><a href="#push-back" class="headerlink" title="push_back()"></a>push_back()</h2><p>将元素添加到vector的末尾</p>
<p><strong>方法签名</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> _Ty&amp; _Val)</span></span>;	<span class="comment">// 使用常量引用添加元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(_Ty&amp;&amp; _Val)</span></span>;			<span class="comment">// 使用右值引用添加元素（C++11及以上）</span></span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">10</span>);  <span class="comment">// 添加 10</span></span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">20</span>);  <span class="comment">// 添加 20</span></span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">30</span>);  <span class="comment">// 添加 30</span></span><br></pre></td></tr></table></figure>

<h2 id="pop-back"><a href="#pop-back" class="headerlink" title="pop_back()"></a>pop_back()</h2><p>删除 <code>vector</code> 中的最后一个元素。</p>
<p>注意，它并不会返回删除的元素，只是移除该元素。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">10</span>);  <span class="comment">// 添加 10</span></span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">20</span>);  <span class="comment">// 添加 20</span></span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">30</span>);  <span class="comment">// 添加 30</span></span><br><span class="line">v.<span class="built_in">pop_back</span>();  <span class="comment">// 删除最后一个元素</span></span><br></pre></td></tr></table></figure>

<h2 id="at"><a href="#at" class="headerlink" title="at()"></a>at()</h2><p>访问 <code>vector</code> 中指定索引的元素，并提供边界检查。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">_Ty&amp; <span class="title">at</span><span class="params">(<span class="type">const</span> size_type _Pos)</span></span>;            <span class="comment">// 返回元素的非 const 引用</span></span><br><span class="line"><span class="function">_Ty&amp; <span class="title">at</span><span class="params">(<span class="type">const</span> size_type _Pos)</span> <span class="type">const</span></span>; <span class="comment">// 返回元素的 const 引用</span></span><br></pre></td></tr></table></figure>

<h2 id="front"><a href="#front" class="headerlink" title="front()"></a>front()</h2><p>访问 <code>vector</code> 中的第一个元素。它返回对第一个元素的引用，允许直接修改该元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_Ty&amp; front(); // 返回第一个元素的非 const 引用</span><br><span class="line">const _Ty&amp; front() const; // 返回第一个元素的 const 引用</span><br></pre></td></tr></table></figure>

<h2 id="back"><a href="#back" class="headerlink" title="back()"></a>back()</h2><p>用于访问 <code>vector</code> 中的最后一个元素。该方法返回对最后一个元素的引用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">_Ty&amp; <span class="title">back</span><span class="params">()</span>         <span class="comment">// 返回一个非 const 引用</span></span></span><br><span class="line"><span class="function"><span class="type">const</span> _Ty&amp; <span class="title">back</span><span class="params">()</span> <span class="type">const</span></span>;  <span class="comment">// 返回一个 const 引用</span></span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">10</span>);  <span class="comment">// 添加 10</span></span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">20</span>);  <span class="comment">// 添加 20</span></span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">30</span>);  <span class="comment">// 添加 30</span></span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Last element: &quot;</span> &lt;&lt; v.<span class="built_in">back</span>() &lt;&lt; std::endl; <span class="comment">// 输出 30</span></span><br></pre></td></tr></table></figure>

<h2 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h2><p>返回 <code>vector</code> 中当前元素的数量。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="capacity"><a href="#capacity" class="headerlink" title="capacity()"></a>capacity()</h2><p>返回 <code>vector</code> 当前分配的内存容量（即它可以容纳的元素的最大数量）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">size_type <span class="title">capacity</span><span class="params">()</span> <span class="type">const</span></span></span><br></pre></td></tr></table></figure>

<h2 id="resize"><a href="#resize" class="headerlink" title="resize()"></a>resize()</h2><p>用于调整 <code>vector</code> 的大小。</p>
<p>如果新的大小大于当前大小，<code>vector</code> 会向末尾添加元素；如果新的大小小于当前大小，则会移除末尾的元素。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(_CRT_GUARDOVERFLOW <span class="type">const</span> size_type _Newsize)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(_CRT_GUARDOVERFLOW <span class="type">const</span> size_type _Newsize, <span class="type">const</span> _Ty&amp; _Val)</span></span></span><br></pre></td></tr></table></figure>

<h2 id="reserve"><a href="#reserve" class="headerlink" title="reserve()"></a>reserve()</h2><p>用于预分配至少 <code>n</code> 个元素的空间。</p>
<p>它不会改变 <code>vector</code> 的大小（即元素的个数），但可以减少因多次添加元素而导致的内存重新分配。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reserve</span><span class="params">(_CRT_GUARDOVERFLOW size_type _Newcapacity)</span></span></span><br></pre></td></tr></table></figure>

<h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><p>清空 <code>vector</code> 中的所有元素。</p>
<h2 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h2><p>检查 <code>vector</code> 是否为空。</p>
<h2 id="erase"><a href="#erase" class="headerlink" title="erase()"></a>erase()</h2><p>删除指定位置的元素。</p>
<h2 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h2><p>在指定位置插入元素。</p>
]]></content>
      <categories>
        <category>Cpp</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>FRIDA-JSAPI</title>
    <url>/2024/12/20/FRIDA-JSAPI/</url>
    <content><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="perform"><a href="#perform" class="headerlink" title="perform()"></a>perform()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This is Java.perform!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="use-className"><a href="#use-className" class="headerlink" title="use(className)"></a>use(className)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This is Java.perform!&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">class</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(className);</span><br><span class="line">    <span class="keyword">class</span>.<span class="property">method</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This is class.method!&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Java-choose-className-callbacks"><a href="#Java-choose-className-callbacks" class="headerlink" title="Java.choose(className, callbacks)"></a>Java.choose(className, callbacks)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.example.SomeClass&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">instance</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;找到一个实例: &quot;</span> + instance);</span><br><span class="line">            <span class="comment">// 可以在这里对 instance 进行操作，比如调用其方法或修改属性</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;实例枚举完成！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Java-enumerateLoadedClasses-callbacks"><a href="#Java-enumerateLoadedClasses-callbacks" class="headerlink" title="Java.enumerateLoadedClasses(callbacks)"></a>Java.enumerateLoadedClasses(callbacks)</h2><p>枚举已加载的类</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;</span><br><span class="line">        <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">className</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Loaded class: &quot;</span> + className);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Class enumeration complete&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Java-enumerateLoadedClassesSync"><a href="#Java-enumerateLoadedClassesSync" class="headerlink" title="Java.enumerateLoadedClassesSync()"></a>Java.enumerateLoadedClassesSync()</h2><p>枚举当前 Java 虚拟机中已经加载的所有类，返回一个包含所有类名的数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取所有已加载的类</span></span><br><span class="line">    <span class="keyword">var</span> loadedClasses = <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClassesSync</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出所有类名</span></span><br><span class="line">    loadedClasses.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">className</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(className);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Java-enumerateClassLoaders-callbacks"><a href="#Java-enumerateClassLoaders-callbacks" class="headerlink" title="Java.enumerateClassLoaders(callbacks)"></a>Java.enumerateClassLoaders(callbacks)</h2><p>枚举所有的类加载器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoaders</span>(&#123;</span><br><span class="line">        <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">loader</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Found ClassLoader: &quot;</span> + loader);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ClassLoader enumeration complete&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Java-enumerateClassLoadersSync"><a href="#Java-enumerateClassLoadersSync" class="headerlink" title="Java.enumerateClassLoadersSync()"></a>Java.enumerateClassLoadersSync()</h2><p>枚举当前 Java 虚拟机中所有活跃的类加载器（ClassLoader）实例，返回一个数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 枚举所有已加载的类加载器</span></span><br><span class="line">    <span class="keyword">var</span> classLoaders = <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoadersSync</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历并输出每个类加载器的信息</span></span><br><span class="line">    classLoaders.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">classLoader, index</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ClassLoader[&quot;</span> + index + <span class="string">&quot;]: &quot;</span> + classLoader);</span><br><span class="line">        <span class="comment">// 如果需要，可以调用 classLoader 的方法，或者进一步分析其属性</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Java-enumerateMethods-query"><a href="#Java-enumerateMethods-query" class="headerlink" title="Java.enumerateMethods(query)"></a>Java.enumerateMethods(query)</h2><p>根据 <code>query</code> 参数筛选符合特定名称模式的类，并返回这些类中的所有方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">enumerateMethods</span>(query)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">methods</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理返回的 methods 数组</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="cast-object-targetClass"><a href="#cast-object-targetClass" class="headerlink" title="cast(object, targetClass)"></a>cast(object, targetClass)</h2><p>将一个 Java 对象转换为特定的类类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.app.MainActivity&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> someObject = <span class="title class_">MainActivity</span>.<span class="title function_">getSomeObject</span>(); <span class="comment">// 返回类型可能是 Object</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;原始类型: &quot;</span> + someObject.<span class="property">$className</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 强制转换为 MyClass</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">MyClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.app.MyClass&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> castedObject = <span class="title class_">Java</span>.<span class="title function_">cast</span>(someObject, <span class="title class_">MyClass</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;转换后类型: &quot;</span> + castedObject.<span class="property">$className</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 现在可以调用 MyClass 的方法</span></span><br><span class="line">    castedObject.<span class="title function_">someMethod</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="classFactory"><a href="#classFactory" class="headerlink" title="classFactory"></a>classFactory</h2><p>Frida 中用于操作 Java 类的一个工厂类，它提供了一系列方法来与 Java 类进行交互。默认情况下，<code>Java.ClassFactory</code> 使用应用程序的主类加载器，但也可以通过指定其他类加载器来创建不同的类工厂实例。</p>
<h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><p>当前的类加载器。<code>Java.use()</code> 依赖它来 Hook Java 类。</p>
<h2 id="array"><a href="#array" class="headerlink" title="array()"></a>array()</h2><p>用于动态创建 Java 数组对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Java.array(type, elements)</span><br></pre></td></tr></table></figure>



<h1 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h1><h2 id="pointerSize"><a href="#pointerSize" class="headerlink" title="pointerSize"></a>pointerSize</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Process.pointerSize</span><br></pre></td></tr></table></figure>

<p>以字节为单位获取指针的大小。</p>
<h2 id="getCurrentThreadId"><a href="#getCurrentThreadId" class="headerlink" title="getCurrentThreadId()"></a>getCurrentThreadId()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Process.getCurrentThreadId()</span><br></pre></td></tr></table></figure>

<p>获取当前线程Id。</p>
<h2 id="findModuleByName-name"><a href="#findModuleByName-name" class="headerlink" title="findModuleByName(name)"></a>findModuleByName(name)</h2><p>根据模块名称查找并返回对应的模块对象。</p>
<p>如果没有找到匹配的模块，则返回一个空值（根据具体实现，可能是 <code>null</code> 或 <code>undefined</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Process.findModuleByName(name)</span><br></pre></td></tr></table></figure>

<h1 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h1><h2 id="Module属性"><a href="#Module属性" class="headerlink" title="Module属性"></a>Module属性</h2><ul>
<li><p><strong>name</strong></p>
<p>  模块名</p>
</li>
<li><p><strong>base</strong></p>
<p>  模块基地址</p>
</li>
<li><p><strong>size</strong></p>
<p>  模块的字节大小</p>
</li>
<li><p><strong>path</strong></p>
<p>  模块的路径</p>
</li>
</ul>
<h2 id="enumerateSymbols"><a href="#enumerateSymbols" class="headerlink" title="enumerateSymbols()"></a>enumerateSymbols()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var symbols = ModuleName.enumerateSymbols()</span><br></pre></td></tr></table></figure>

<p>枚举指定模块中的所以符号。</p>
<h3 id="枚举的符号symbol的属性"><a href="#枚举的符号symbol的属性" class="headerlink" title="枚举的符号symbol的属性"></a>枚举的符号symbol的属性</h3><ul>
<li><p><strong>isGlobal</strong></p>
</li>
<li><p><strong>type</strong></p>
</li>
<li><p><strong>section</strong></p>
</li>
<li><p><strong>name</strong></p>
<p>  符号的名字</p>
</li>
<li><p><strong>address</strong></p>
<p>  符号的地址，指针</p>
</li>
<li><p><strong>size</strong></p>
</li>
</ul>
<h2 id="findExportByName-exportName"><a href="#findExportByName-exportName" class="headerlink" title="findExportByName(exportName)"></a>findExportByName(exportName)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var addr = Module.findExportByName(moduleName|null,exportName)</span><br></pre></td></tr></table></figure>

<p>查找指定模块中导出的符号（通常是函数）的地址。</p>
<h2 id="findBaseAddress-name"><a href="#findBaseAddress-name" class="headerlink" title="findBaseAddress(name)"></a>findBaseAddress(name)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var addr = Module.findBaseAddress(name)</span><br></pre></td></tr></table></figure>

<p>获取指定模块的基地址。</p>
<h1 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h1><h2 id="protect-address-size-protection"><a href="#protect-address-size-protection" class="headerlink" title="protect(address, size, protection)"></a>protect(address, size, protection)</h2><p>更新一块内存区域的保护属性，其中 <code>protection</code> 是一个字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Memory</span>.<span class="title function_">protect</span>(address,size,<span class="string">&#x27;rwx&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="alloc-size"><a href="#alloc-size" class="headerlink" title="alloc(size)"></a>alloc(size)</h2><p>在目标进程的内存中分配一块指定大小的内存。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ptr = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(size);</span><br></pre></td></tr></table></figure>



<h2 id="allocUtf8String-str"><a href="#allocUtf8String-str" class="headerlink" title="allocUtf8String(str)"></a>allocUtf8String(str)</h2><p>在目标进程的内存中分配一段 UTF-8 编码的字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ptr = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(str);</span><br></pre></td></tr></table></figure>



<h1 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h1><h2 id="NativePointer"><a href="#NativePointer" class="headerlink" title="NativePointer"></a>NativePointer</h2><h3 id="new-NativePointer-s"><a href="#new-NativePointer-s" class="headerlink" title="new NativePointer(s)"></a>new NativePointer(s)</h3><p>从包含内存地址的字符串 s 创建一个新的 NativePointer 对象。</p>
<p>字符串可以是十进制的，也可以是以 0x 开头的十六进制表示。</p>
<h3 id="ptr-s"><a href="#ptr-s" class="headerlink" title="ptr(s)"></a>ptr(s)</h3><p>NativePointer 对象也可以通过ptr(s)这种简写方式进行创建。</p>
<h3 id="toInt32"><a href="#toInt32" class="headerlink" title="toInt32()"></a>toInt32()</h3><p>将当前 NativePointer 转换为有符号的 32 位整数。</p>
<h3 id="add-rhs-sub-rhs-and-rhs-or-rhs-xor-rhs"><a href="#add-rhs-sub-rhs-and-rhs-or-rhs-xor-rhs" class="headerlink" title="add(rhs), sub(rhs), and(rhs), or(rhs), xor(rhs)"></a>add(rhs), sub(rhs), and(rhs), or(rhs), xor(rhs)</h3><p>创建一个新的 <strong>NativePointer</strong>，它是将当前的 <strong>NativePointer</strong> 与 <code>rhs</code> 相加、相减、按位与、按位或或按位异或后的结果，其中 <code>rhs</code> 可以是一个数字或另一个 <strong>NativePointer</strong>。</p>
<h3 id="readCString-size-1"><a href="#readCString-size-1" class="headerlink" title="readCString([size &#x3D; -1])"></a>readCString([size &#x3D; -1])</h3><p>从当前内存位置读取 ASCII字符串的字节。如果知道字符串的字节数，可以提供可选的 size 参数；如果字符串以 NULL 结尾，可以省略该参数或指定为 -1。</p>
<p>如果地址中读取的任何 size &#x2F; length 字节不可读，将抛出一个 JavaScript 异常。</p>
<h2 id="NativeFunction"><a href="#NativeFunction" class="headerlink" title="NativeFunction"></a>NativeFunction</h2><ul>
<li><p><strong>new NativeFunction(address, returnType, argTypes)</strong></p>
<ul>
<li><code>address</code>：用<code>NativePointer</code>指定的函数地址。</li>
<li><code>returnType</code>：指定返回值类型。</li>
<li><code>argTypes</code>：一个数组，指定参数类型。</li>
</ul>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">FunctionName</span> = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(functionAddr, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><code>NativeFunction</code> 用于调用目标进程中指定内存地址处的原生函数。</p>
<h2 id="NativeCallback"><a href="#NativeCallback" class="headerlink" title="NativeCallback"></a>NativeCallback</h2><ul>
<li><p><strong>new NativeCallback(func, returnType, argTypes)</strong></p>
<ul>
<li><code>func</code>: 创建一个新的由JavaScript function实现的NativeCallback</li>
<li><code>returnType</code>: 指定返回类型。</li>
<li><code>argTypes</code>: 数组，指定参数类型。</li>
</ul>
<p>返回的对象是<code>NativeFunction</code>，可以传递给<code>Interceptor.replace</code>。</p>
</li>
</ul>
<p><code>NativeCallback</code> 用于在目标进程中创建一个自定义的原生函数（回调函数），以便在目标进程的上下文中被调用，它的主要用途是模拟或替换目标函数的实现。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(functionAddr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This is a NativeCallback!&quot;</span>)</span><br><span class="line">&#125;, <span class="string">&quot;void&quot;</span>, []))</span><br></pre></td></tr></table></figure>



<h1 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h1><h2 id="Interceptor-attach-target-callbacks"><a href="#Interceptor-attach-target-callbacks" class="headerlink" title="Interceptor.attach(target, callbacks)"></a>Interceptor.attach(target, callbacks)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> functionAddr = <span class="title function_">ptr</span>(<span class="number">0x7777</span>);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(functionAddr,&#123;</span><br><span class="line">    <span class="title class_">OnEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(args[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(args[<span class="number">2</span>]);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">OnLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>注意：在32位ARM架构中，地址参数target的最低有效位必须为0（对于ARM函数）或1（对于Thumb函数）。如果通过Frida API（例如Module.getExportByName()）获取地址，Frida会自动处理这个细节。</p>
<h2 id="Interceptor-replace-target-replacement"><a href="#Interceptor-replace-target-replacement" class="headerlink" title="Interceptor.replace(target, replacement)"></a>Interceptor.replace(target, replacement)</h2><p>使用 replacement 替换 target 处的函数。<br>可以使用 NativeCallback 在 JavaScript 中实现替换。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(functionAddr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This is a NativeCallback!&quot;</span>)</span><br><span class="line">&#125;, <span class="string">&quot;void&quot;</span>, []))</span><br></pre></td></tr></table></figure>

<h1 id="Stalker"><a href="#Stalker" class="headerlink" title="Stalker"></a>Stalker</h1><p>Stalker是基于动态重新编译的代码跟踪器。 它将代码指令复制到内存中的另一个位置，在该位置对其进行调整以适应新位置并包括其他跟踪指令。 如果应用程序在原始位置检查其代码，则会发现该代码是完整无缺的，因为它是被篡改的代码的副本。</p>
<h2 id="follow"><a href="#follow" class="headerlink" title="follow()"></a>follow()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Stalker</span>.<span class="title function_">follow</span>(threadId, options);</span><br><span class="line"><span class="comment">// threadId 要追踪的线程 ID。可通过 Process.getCurrentThreadId() 或其他方式获取目标线程 ID。</span></span><br><span class="line"><span class="comment">// options 一个对象，用于配置追踪时的行为。</span></span><br></pre></td></tr></table></figure>

<p>Frida 对目标线程进行监控，捕获它执行过程中发生的事件（例如函数调用、返回、基本块边界等），从而进行动态分析、调试或者行为记录。</p>
<h3 id="options详解"><a href="#options详解" class="headerlink" title="options详解"></a>options详解</h3><p><code>options</code> 参数是一个对象，可以配置多种选项来控制跟踪行为。</p>
<p><code>options</code> 参数的详细说明：</p>
<h4 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h4><p>自定义代码转换函数，允许对跟踪的代码进行动态修改（如插入日志、过滤指令等）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Stalker</span>.<span class="title function_">follow</span>(tid, &#123;</span><br><span class="line">    <span class="attr">transform</span>: <span class="keyword">function</span>(<span class="params">iterator</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> instruction = iterator.<span class="title function_">next</span>()</span><br><span class="line">            <span class="keyword">if</span> (instruction === <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            iterator.<span class="title function_">keep</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>优化版本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Stalker</span>.<span class="title function_">follow</span>(tid, &#123;</span><br><span class="line">    <span class="attr">transform</span>: <span class="keyword">function</span>(<span class="params">iterator</span>) &#123;</span><br><span class="line">        <span class="comment">// 使用 while 循环，直接判断 iterator.next() 的返回值</span></span><br><span class="line">        <span class="keyword">let</span> instruction;</span><br><span class="line">        <span class="keyword">while</span> ((instruction = iterator.<span class="title function_">next</span>()) !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 对每条指令执行保留操作，不进行修改</span></span><br><span class="line">            iterator.<span class="title function_">keep</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="unfollow"><a href="#unfollow" class="headerlink" title="unfollow()"></a>unfollow()</h2><p>终止在该线程上通过 <code>Stalker.follow()</code> 启动的追踪操作。</p>
<h2 id="flush"><a href="#flush" class="headerlink" title="flush()"></a>flush()</h2><p>刷新缓冲区。</p>
<h2 id="garbageCollect"><a href="#garbageCollect" class="headerlink" title="garbageCollect()"></a>garbageCollect()</h2><p>用于垃圾回收和清理资源，释放由 Stalker 模块在追踪过程中使用的内存和系统资源。</p>
<h1 id="CPU-Instruction"><a href="#CPU-Instruction" class="headerlink" title="CPU Instruction"></a>CPU Instruction</h1><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><h3 id="Instruction-parse-target"><a href="#Instruction-parse-target" class="headerlink" title="Instruction.parse(target)"></a>Instruction.parse(target)</h3><p>解析内存中 target 地址处的指令，返回一个<code>Instruction</code>对象。</p>
<p><code>Instruction</code>对象包含如下字段：</p>
<ul>
<li><code>address</code>: 此指令的地址（EIP），类型为 <code>NativePointer</code></li>
<li><code>next</code>: 指向下一条指令的指针，您可以使用 <code>parse()</code> 解析它</li>
<li><code>size</code>: 此指令的大小</li>
<li><code>mnemonic</code>: 指令助记符的字符串表示</li>
<li><code>opStr</code>: 指令操作数的字符串表示</li>
<li><code>operands</code>: 描述每个操作数的对象数组，每个对象至少指定类型和值，但可能还包含取决于架构的其他属性</li>
<li><code>regsRead</code>: 此指令隐式读取的寄存器名称数组</li>
<li><code>regsWritten</code>: 此指令隐式写入的寄存器名称数组</li>
<li><code>groups</code>: 此指令所属的组名称数组</li>
<li><code>toString()</code>: 转换为人类可读的字符串</li>
</ul>
<h2 id="Arm64Writer"><a href="#Arm64Writer" class="headerlink" title="Arm64Writer"></a>Arm64Writer</h2><h3 id="new-Arm64Writer-codeAddress-pc-ptr-‘0x1234’"><a href="#new-Arm64Writer-codeAddress-pc-ptr-‘0x1234’" class="headerlink" title="new Arm64Writer(codeAddress[, { pc: ptr(‘0x1234’) }])"></a>new Arm64Writer(codeAddress[, { pc: ptr(‘0x1234’) }])</h3><p>创建一个用于生成 ARM 机器码的代码写入器，该代码会直接写入 <code>codeAddress</code> 指定的内存位置，<code>codeAddress</code> 是一个 <code>NativePointer</code> 类型，第二个参数是可选的选项对象，可以通过其中的 <code>pc</code> 属性指定初始程序计数器（Program Counter, PC）。</p>
<p>返回一个<code>ArmWriter</code>对象。</p>
<h3 id="dispose"><a href="#dispose" class="headerlink" title="dispose()"></a>dispose()</h3><p>释放 <code>Arm64Writer</code> 对象，清理内存。</p>
<h3 id="flush-1"><a href="#flush-1" class="headerlink" title="flush()"></a>flush()</h3><p>用于将已生成或修改的指令刷新到内存中，以确保这些指令可以被正确执行。</p>
<h3 id="putRet"><a href="#putRet" class="headerlink" title="putRet()"></a>putRet()</h3><p>在生成的代码末尾插入一个返回指令，确保动态生成的代码块或函数能够正确返回。</p>
]]></content>
      <categories>
        <category>Frida</category>
      </categories>
      <tags>
        <tag>FRIDA-JSAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>DevTools使用指南</title>
    <url>/2025/02/07/DevTools%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="DevTools"><a href="#DevTools" class="headerlink" title="DevTools"></a>DevTools</h1><p>DevTools 是一组 Web 开发工具，旨在帮助开发者调试、分析和优化网页和 Web 应用程序。</p>
<h2 id="打开DevTools"><a href="#打开DevTools" class="headerlink" title="打开DevTools"></a>打开DevTools</h2><ul>
<li>右键单击网页上的任何项目，然后选择“ <strong>检查</strong>”。</li>
<li>按 <strong>Ctrl+Shift+I</strong> (Windows、Linux) 或 <strong>Command+Option+I</strong> (macOS) 。</li>
<li>按 <strong>F12</strong>。</li>
</ul>
<p><img src="/2025/02/07/DevTools%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/1.jpg"></p>
<h1 id="面板介绍"><a href="#面板介绍" class="headerlink" title="面板介绍"></a>面板介绍</h1><h2 id="元素选择工具"><a href="#元素选择工具" class="headerlink" title="元素选择工具"></a>元素选择工具</h2><p><img src="/2025/02/07/DevTools%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/2.jpg"></p>
<p>鼠标悬停在页面上的任意元素上，浏览器会高亮显示该元素，同时在 DevTools 的 Elements 面板中显示其 HTML 结构和关联的 CSS 样式，方便快速定位和调试页面问题。</p>
<h2 id="设备仿真模式"><a href="#设备仿真模式" class="headerlink" title="设备仿真模式"></a>设备仿真模式</h2><p><img src="/2025/02/07/DevTools%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/3.jpg"></p>
<p>这个模式允许模拟各种移动设备的屏幕尺寸、分辨率以及触摸事件，方便开发者调试响应式设计和移动端页面效果。</p>
<h2 id="元素面板"><a href="#元素面板" class="headerlink" title="元素面板"></a>元素面板</h2><p><img src="/2025/02/07/DevTools%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/4.jpg"></p>
<p>查看和更改 DOM （文档对象模型）和 CSS。</p>
<h2 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h2><p><img src="/2025/02/07/DevTools%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/5.jpg"></p>
<p>通过控制台查看消息并运行 JavaScript。</p>
<h2 id="Sources（源代码）面板"><a href="#Sources（源代码）面板" class="headerlink" title="Sources（源代码）面板"></a>Sources（源代码）面板</h2><p>调试 JavaScript，在页面重新加载时保留在开发者工具中所做的更改，保存和运行 JavaScript 代码段，并将在开发者工具中所做的更改保存到本地源代码中。</p>
<h2 id="网络面板"><a href="#网络面板" class="headerlink" title="网络面板"></a>网络面板</h2><p>查看和调试网络活动。</p>
]]></content>
      <categories>
        <category>逆向工具集</category>
      </categories>
      <tags>
        <tag>DevTools</tag>
      </tags>
  </entry>
  <entry>
    <title>English Words Study</title>
    <url>/2025/01/14/English-Words-Study/</url>
    <content><![CDATA[<h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><h2 id="b"><a href="#b" class="headerlink" title="b"></a>b</h2><h3 id="abandon"><a href="#abandon" class="headerlink" title="abandon"></a>abandon</h3><p>v.放弃，抛弃</p>
<h2 id="l"><a href="#l" class="headerlink" title="l"></a>l</h2><h3 id="align"><a href="#align" class="headerlink" title="align"></a>align</h3><p>v.对齐</p>
<h2 id="t"><a href="#t" class="headerlink" title="t"></a>t</h2><h3 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h3><p>附加；贴上</p>
<h3 id="attribute"><a href="#attribute" class="headerlink" title="attribute"></a>attribute</h3><p>n.特征，</p>
<h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><h2 id="a"><a href="#a" class="headerlink" title="a"></a>a</h2><h3 id="band"><a href="#band" class="headerlink" title="band"></a>band</h3><p>n.乐队；帮伙</p>
<p>v.用带捆扎；联合；划分范围；</p>
<h2 id="o"><a href="#o" class="headerlink" title="o"></a>o</h2><h3 id="bottom"><a href="#bottom" class="headerlink" title="bottom"></a>bottom</h3><p>n.底部；尽头；末端；</p>
<p>adj.底部的</p>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h2 id="a-1"><a href="#a-1" class="headerlink" title="a"></a>a</h2><h3 id="category"><a href="#category" class="headerlink" title="category"></a>category</h3><p>n.类别；种类；范畴；</p>
<h2 id="o-1"><a href="#o-1" class="headerlink" title="o"></a>o</h2><h3 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h3><p>n.收藏，收藏品；集合</p>
<h3 id="contain"><a href="#contain" class="headerlink" title="contain"></a>contain</h3><p>v.包含；容纳</p>
<h3 id="content"><a href="#content" class="headerlink" title="content"></a>content</h3><p>n.目录；内容</p>
<p>adj.满足的</p>
<p>v.使满意</p>
<h2 id="u"><a href="#u" class="headerlink" title="u"></a>u</h2><h3 id="custom"><a href="#custom" class="headerlink" title="custom"></a>custom</h3><p>n.风俗；习惯；传统</p>
<p>adj.定制的</p>
<h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><h2 id="e"><a href="#e" class="headerlink" title="e"></a>e</h2><h3 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h3><p>v.调试</p>
<h3 id="decorate"><a href="#decorate" class="headerlink" title="decorate"></a>decorate</h3><p>v.装饰</p>
<h3 id="decoration"><a href="#decoration" class="headerlink" title="decoration"></a>decoration</h3><p>n.装饰</p>
<h3 id="decrypt"><a href="#decrypt" class="headerlink" title="decrypt"></a>decrypt</h3><p>v.破译，解密；解释；</p>
<h2 id="i"><a href="#i" class="headerlink" title="i"></a>i</h2><h3 id="dialog"><a href="#dialog" class="headerlink" title="dialog"></a>dialog</h3><p>v.对话</p>
<h3 id="dialogue"><a href="#dialogue" class="headerlink" title="dialogue"></a>dialogue</h3><p>n.对话，对白；</p>
<h3 id="dispose"><a href="#dispose" class="headerlink" title="dispose"></a>dispose</h3><p>v.处理，处置；</p>
<h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><h2 id="n"><a href="#n" class="headerlink" title="n"></a>n</h2><h3 id="encrypt"><a href="#encrypt" class="headerlink" title="encrypt"></a>encrypt</h3><p>v.加密；编码；</p>
<h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h3><p>n.入口</p>
<h1 id="F"><a href="#F" class="headerlink" title="F"></a>F</h1><h2 id="i-1"><a href="#i-1" class="headerlink" title="i"></a>i</h2><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>v.过滤，渗透；</p>
<p>n.过滤器</p>
<h2 id="o-2"><a href="#o-2" class="headerlink" title="o"></a>o</h2><h3 id="font"><a href="#font" class="headerlink" title="font"></a>font</h3><p>n.字体；</p>
<h2 id="r"><a href="#r" class="headerlink" title="r"></a>r</h2><h3 id="front"><a href="#front" class="headerlink" title="front"></a>front</h3><p>adj.前面的，正面的</p>
<p>n.前面，正面；</p>
<p>adv.在前面</p>
<p>v.面对</p>
<h2 id="u-1"><a href="#u-1" class="headerlink" title="u"></a>u</h2><h3 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h3><p>n.绒毛，细毛；</p>
<p>v.使模糊，起毛；</p>
<h1 id="G"><a href="#G" class="headerlink" title="G"></a>G</h1><h2 id="e-1"><a href="#e-1" class="headerlink" title="e"></a>e</h2><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><p>v.产生；引起；生成</p>
<h2 id="r-1"><a href="#r-1" class="headerlink" title="r"></a>r</h2><h3 id="grant"><a href="#grant" class="headerlink" title="grant"></a>grant</h3><p>v.允许，同意，承认；</p>
<p>n.拨款；补助金；</p>
<h1 id="I"><a href="#I" class="headerlink" title="I"></a>I</h1><h2 id="n-1"><a href="#n-1" class="headerlink" title="n"></a>n</h2><h3 id="indent"><a href="#indent" class="headerlink" title="indent"></a>indent</h3><p>n.缩进；</p>
<h3 id="instrumentation"><a href="#instrumentation" class="headerlink" title="instrumentation"></a>instrumentation</h3><p>n.仪器；器乐谱写；测试设备</p>
<h3 id="intent"><a href="#intent" class="headerlink" title="intent"></a>intent</h3><p>adj.全神贯注的；专心致志的</p>
<p>n.意图；意向；目的</p>
<h3 id="interceptor"><a href="#interceptor" class="headerlink" title="interceptor"></a>interceptor</h3><p>n.拦截器</p>
<h1 id="L"><a href="#L" class="headerlink" title="L"></a>L</h1><h2 id="e-2"><a href="#e-2" class="headerlink" title="e"></a>e</h2><h3 id="leak"><a href="#leak" class="headerlink" title="leak"></a>leak</h3><p>v.泄露</p>
<h1 id="P"><a href="#P" class="headerlink" title="P"></a>P</h1><h2 id="a-2"><a href="#a-2" class="headerlink" title="a"></a>a</h2><h3 id="paragrah"><a href="#paragrah" class="headerlink" title="paragrah"></a>paragrah</h3><p>n.段，节。</p>
<h2 id="e-3"><a href="#e-3" class="headerlink" title="e"></a>e</h2><h3 id="peek"><a href="#peek" class="headerlink" title="peek"></a>peek</h3><p>v.窥视，偷看</p>
<h2 id="l-1"><a href="#l-1" class="headerlink" title="l"></a>l</h2><h3 id="plug"><a href="#plug" class="headerlink" title="plug"></a>plug</h3><p>v.插入，接通</p>
<p>n.插头</p>
<h2 id="r-2"><a href="#r-2" class="headerlink" title="r"></a>r</h2><h3 id="preference"><a href="#preference" class="headerlink" title="preference"></a>preference</h3><p>n.偏好；喜好；优先（权）；</p>
<h1 id="R"><a href="#R" class="headerlink" title="R"></a>R</h1><h2 id="e-4"><a href="#e-4" class="headerlink" title="e"></a>e</h2><h3 id="rear"><a href="#rear" class="headerlink" title="rear"></a>rear</h3><p>adj.背面的，后面的</p>
<p>n.后部</p>
<p>v.抚养；举起</p>
<h3 id="receive"><a href="#receive" class="headerlink" title="receive"></a>receive</h3><p>v.收到，得到；接收</p>
<h3 id="receiver"><a href="#receiver" class="headerlink" title="receiver"></a>receiver</h3><p>n.接收器</p>
<h1 id="S"><a href="#S" class="headerlink" title="S"></a>S</h1><h2 id="e-5"><a href="#e-5" class="headerlink" title="e"></a>e</h2><h3 id="sensor"><a href="#sensor" class="headerlink" title="sensor"></a>sensor</h3><p>n.传感器</p>
<h2 id="h"><a href="#h" class="headerlink" title="h"></a>h</h2><h3 id="share"><a href="#share" class="headerlink" title="share"></a>share</h3><p>v.分享；分配；均分；</p>
<p>n.股票；股份；份额；</p>
<h2 id="i-2"><a href="#i-2" class="headerlink" title="i"></a>i</h2><h3 id="sign"><a href="#sign" class="headerlink" title="sign"></a>sign</h3><p>v.签名；做手势</p>
<p>n.记号；符合；标志；手势；</p>
<h3 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h3><p>v.发信号；标志；</p>
<p>n.信号；标志；</p>
<h3 id="simulator"><a href="#simulator" class="headerlink" title="simulator"></a>simulator</h3><p>n.模拟器</p>
<h2 id="p"><a href="#p" class="headerlink" title="p"></a>p</h2><h3 id="spawn"><a href="#spawn" class="headerlink" title="spawn"></a>spawn</h3><p>n.卵；菌丝；产物</p>
<p>v.产卵；启动；</p>
<h2 id="t-1"><a href="#t-1" class="headerlink" title="t"></a>t</h2><h3 id="stalker"><a href="#stalker" class="headerlink" title="stalker"></a>stalker</h3><p>n.跟踪者；潜行者；</p>
<h3 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h3><p>n.标准；规格，规范；</p>
<p>adj.标准的</p>
<h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p>v.说明，陈述；</p>
<p>n.州，邦；国家；状态；</p>
<p>adj.国家的</p>
<h2 id="y"><a href="#y" class="headerlink" title="y"></a>y</h2><h3 id="sync"><a href="#sync" class="headerlink" title="sync"></a>sync</h3><p>v.同步；</p>
<h1 id="T"><a href="#T" class="headerlink" title="T"></a>T</h1><h2 id="r-3"><a href="#r-3" class="headerlink" title="r"></a>r</h2><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><p>v.改变，转换；</p>
<h3 id="transformation"><a href="#transformation" class="headerlink" title="transformation"></a>transformation</h3><p>n.变化，转变；</p>
<h3 id="transformer"><a href="#transformer" class="headerlink" title="transformer"></a>transformer</h3><p>n.变压器，变换器</p>
<h1 id="U"><a href="#U" class="headerlink" title="U"></a>U</h1><h2 id="n-2"><a href="#n-2" class="headerlink" title="n"></a>n</h2><h3 id="uniform"><a href="#uniform" class="headerlink" title="uniform"></a>uniform</h3><p>v.穿制服，使…统一</p>
<p>n.制服；校服</p>
<p>adj.相同的，统一的；一致的；</p>
<h1 id="V"><a href="#V" class="headerlink" title="V"></a>V</h1><h2 id="i-3"><a href="#i-3" class="headerlink" title="i"></a>i</h2><h3 id="virtual"><a href="#virtual" class="headerlink" title="virtual"></a>virtual</h3><p>adj.虚拟的</p>
]]></content>
      <categories>
        <category>英语学习</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>Frida反调试篇</title>
    <url>/2025/01/17/Frida%E5%8F%8D%E8%B0%83%E8%AF%95%E7%AF%87/</url>
    <content><![CDATA[<h1 id="自编译frida"><a href="#自编译frida" class="headerlink" title="自编译frida"></a>自编译frida</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>编译环境：ubuntu</p>
<p>安装gcc编译器相关</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install build-essential</span><br></pre></td></tr></table></figure>



<p>安装git，vim，curl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install git</span><br><span class="line">sudo apt install vim</span><br><span class="line">sudo apt install curl</span><br></pre></td></tr></table></figure>



<p>安装nvm(用来管理node版本的)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.4/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>安装node(20.10.0较稳定)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install 20.10.0</span><br></pre></td></tr></table></figure>



<p>配置ndk开发环境</p>
<p>搜索ndk下载，下载ndk25版本的</p>
<p><img src="/2025/01/17/Frida%E5%8F%8D%E8%B0%83%E8%AF%95%E7%AF%87/1.jpg"></p>
<p>下载解压，添加环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line">export ANDROID_NDK_ROOT=~/MyWorkStation/build_frida/android-ndk-r25c</span><br><span class="line">export PATH=$PATH:$ANDROID_NDK_ROOT</span><br></pre></td></tr></table></figure>

<p>更新环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>



<p>指定目录下载frida-core源码</p>
<p>cd进入frida-core文件夹，执行加载子模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>

<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>配置指定架构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./configure --host=android-arm64</span><br></pre></td></tr></table></figure>

<p>make命令编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<p>重新编译的时候要把build目录删除掉</p>
<p>切换分支版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout xx.xx.x</span><br></pre></td></tr></table></figure>

<p>强制更改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -f xx.xx.x</span><br></pre></td></tr></table></figure>



<h1 id="魔改Frida特征"><a href="#魔改Frida特征" class="headerlink" title="魔改Frida特征"></a>魔改Frida特征</h1>]]></content>
      <categories>
        <category>Frida</category>
      </categories>
      <tags>
        <tag>Frida反调试</tag>
      </tags>
  </entry>
  <entry>
    <title>Frida工具系列</title>
    <url>/2025/01/01/Frida%E5%B7%A5%E5%85%B7%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h1 id="frida-exe"><a href="#frida-exe" class="headerlink" title="frida.exe"></a>frida.exe</h1><p><strong>frida的使用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage: frida [options] target</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --version             show program&#x27;s version number and exit</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -D ID, --device=ID    connect to device with the given ID</span><br><span class="line">  -U, --usb             connect to USB device</span><br><span class="line">  -R, --remote          connect to remote frida-server</span><br><span class="line">  -H HOST, --host=HOST  connect to remote frida-server on HOST</span><br><span class="line">  -f FILE, --file=FILE  spawn FILE</span><br><span class="line">  -F, --attach-frontmost</span><br><span class="line">                        attach to frontmost application</span><br><span class="line">  -n NAME, --attach-name=NAME</span><br><span class="line">                        attach to NAME</span><br><span class="line">  -p PID, --attach-pid=PID</span><br><span class="line">                        attach to PID</span><br><span class="line">  --stdio=inherit|pipe  stdio behavior when spawning (defaults to “inherit”)</span><br><span class="line">  --aux=option          set aux option when spawning, such as “uid=(int)42”</span><br><span class="line">                        (supported types are: string, bool, int)</span><br><span class="line">  --realm=native|emulated</span><br><span class="line">                        realm to attach in</span><br><span class="line">  --runtime=qjs|v8      script runtime to use</span><br><span class="line">  --debug               enable the Node.js compatible script debugger</span><br><span class="line">  --squelch-crash       if enabled, will not dump crash report to console</span><br><span class="line">  -O FILE, --options-file=FILE</span><br><span class="line">                        text file containing additional command line options</span><br><span class="line">  -l SCRIPT, --load=SCRIPT</span><br><span class="line">                        load SCRIPT</span><br><span class="line">  -P PARAMETERS_JSON, --parameters=PARAMETERS_JSON</span><br><span class="line">                        parameters as JSON, same as Gadget</span><br><span class="line">  -C CMODULE, --cmodule=CMODULE</span><br><span class="line">                        load CMODULE</span><br><span class="line">  --toolchain=any|internal|external</span><br><span class="line">                        CModule toolchain to use when compiling from source</span><br><span class="line">                        code</span><br><span class="line">  -c CODESHARE_URI, --codeshare=CODESHARE_URI</span><br><span class="line">                        load CODESHARE_URI</span><br><span class="line">  -e CODE, --eval=CODE  evaluate CODE</span><br><span class="line">  -q                    quiet mode (no prompt) and quit after -l and -e</span><br><span class="line">  --no-pause            automatically start main thread after startup</span><br><span class="line">  -o LOGFILE, --output=LOGFILE</span><br><span class="line">                        output to log file</span><br><span class="line">  --eternalize          eternalize the script before exit</span><br><span class="line">  --exit-on-error       exit with code 1 after encountering any exception in</span><br><span class="line">                        the SCRIPT</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>--version</code><br>显示 frida 的版本号并退出。</li>
<li><code>-h,--help</code><br>显示帮助信息，列出所有可用选项并退出。</li>
<li><code>-U, --usb</code><br>通过 USB 连接到设备。</li>
<li><code>-H HOST, --host=HOST</code><br>连接到指定 HOST 上的远程 frida-server。</li>
<li><code>-f FILE, --file=FILE</code><br>spawn模式，启动指定的文件（启动一个新的进程并挂起）。</li>
<li><code>-F, --attach-frontmost</code><br>attach模式，附加到前台运行的应用程序。</li>
<li><code>-n NAME, --attach-name=NAME</code><br>附加到指定名称的应用程序。</li>
<li><code>-p PID, --attach-pid=PID</code><br>附加到指定进程 ID 的应用程序。</li>
<li><code>-l SCRIPT, --load=SCRIPT</code><br>加载指定的脚本文件。</li>
<li><code>--no-pause</code><br>启动后自动启动主线程，通常配合-f选项使用。</li>
<li><code>-o LOGFILE, --output=LOGFILE</code><br>将输出记录到指定的日志文件中。</li>
</ul>
<h1 id="frida-server"><a href="#frida-server" class="headerlink" title="frida-server"></a>frida-server</h1><p><strong>frida-server的使用</strong></p>
<p><img src="/2025/01/01/Frida%E5%B7%A5%E5%85%B7%E7%B3%BB%E5%88%97/1.jpg"></p>
<ul>
<li><code>-l</code>：指定监听地址，设置主机IP和端口。</li>
<li><code>--version</code>：输出frida-server的版本信息。</li>
</ul>
<h1 id="frida-ps"><a href="#frida-ps" class="headerlink" title="frida-ps"></a>frida-ps</h1><p>列出当前正在运行的进程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida-ps -U</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Frida</category>
      </categories>
      <tags>
        <tag>Frida工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask</title>
    <url>/2024/12/22/Flask/</url>
    <content><![CDATA[<h1 id="Flask安装"><a href="#Flask安装" class="headerlink" title="Flask安装"></a>Flask安装</h1><p>建议在Python虚拟环境中安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure>

<h1 id="第一个Flask程序"><a href="#第一个Flask程序" class="headerlink" title="第一个Flask程序"></a>第一个Flask程序</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__) 	<span class="comment"># 创建一个 Flask 应用对象，赋值给变量 app。</span></span><br><span class="line">					  	<span class="comment"># 参数 __name__ 表示当前模块的名称，Flask 使用它来确定应用程序的根路径。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>) 		</span><span class="comment"># 装饰器，用于定义路由。&quot;/&quot; 是 URL 路径的根（即网站的首页）。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():		<span class="comment"># 处理 / 路由的视图函数。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span> 	<span class="comment"># 视图函数的返回值是一个 HTML 字符串，表示返回给用户的内容。	</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>) <span class="comment"># 启动 Flask 的内置开发服务器，运行这个 Web 应用。</span></span><br><span class="line">    					<span class="comment"># 参数&#x27;debug=True&#x27;是开启调试模式，在代码有变更时，服务器会自动重启。</span></span><br></pre></td></tr></table></figure>

<p>在浏览器中访问<code>http://127.0.0.1:5000</code></p>
<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="route"><a href="#route" class="headerlink" title="route()"></a>route()</h2><p>使用<code>route()</code>装饰器来把函数绑定到 URL</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index Page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h2><h3 id="路由参数-1"><a href="#路由参数-1" class="headerlink" title="&lt;variable_name&gt;路由参数"></a><code>&lt;variable_name&gt;</code>路由参数</h3><p>通过<code>&lt;&gt;</code>标记的变量作为参数传递给函数。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/user/&lt;name&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;name is:&quot;</span>+name</span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/22/Flask/1.jpg"></p>
<h3 id="converter-variable-name参数类型"><a href="#converter-variable-name参数类型" class="headerlink" title="converter:variable_name参数类型"></a><code>converter:variable_name</code>参数类型</h3><p>通过转换器<code>converter</code>为参数指定类型。默认类型为<code>string</code>即字符串。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/id/&lt;int:id&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bandid</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;id is: &quot;</span>+<span class="built_in">str</span>(<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/22/Flask/2.jpg"></p>
<p><strong>转换器类型</strong></p>
<table>
<thead>
<tr>
<th align="left">converter</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">string</td>
<td>文本</td>
</tr>
<tr>
<td align="left">int</td>
<td>整数</td>
</tr>
<tr>
<td align="left">float</td>
<td>浮点数</td>
</tr>
<tr>
<td align="left">path</td>
<td>路径</td>
</tr>
<tr>
<td align="left">uuid</td>
<td>UUID字符串</td>
</tr>
</tbody></table>
<h1 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h1><p>通过定义路由来指定请求方式，Flask默认将路由处理为<code>GET</code>请求。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/hello&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/submit&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Data Submitted!&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="Jinja2模板引擎"><a href="#Jinja2模板引擎" class="headerlink" title="Jinja2模板引擎"></a>Jinja2模板引擎</h1>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Frida逆向知识点总结</title>
    <url>/2025/01/01/Frida%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="Java层hook"><a href="#Java层hook" class="headerlink" title="Java层hook"></a>Java层hook</h1><h2 id="hook方法"><a href="#hook方法" class="headerlink" title="hook方法"></a>hook方法</h2><ul>
<li><p><strong>Java.perform</strong>: 用于在 Java 虚拟机中运行 Hook 代码。</p>
</li>
<li><p><strong>Java.use</strong>: 获取目标类的引用。</p>
</li>
<li><p><strong>implementation</strong>: hook 方法实现。</p>
</li>
<li><p><strong>Overloaded methods</strong>: 对于存在重载的方法，需要使用 <code>.overload()</code> 指定参数类型。</p>
</li>
</ul>
<h2 id="hook构造方法"><a href="#hook构造方法" class="headerlink" title="hook构造方法"></a>hook构造方法</h2><p>Java 构造方法的名称固定为 <code>$init</code>，因此需要 hook <code>$init</code> 方法。</p>
<h2 id="获取函数的参数和返回值"><a href="#获取函数的参数和返回值" class="headerlink" title="获取函数的参数和返回值"></a>获取函数的参数和返回值</h2><p>可以直接通过 <code>implementation</code> 中的参数获取函数的入参。</p>
<p>调用原始方法，返回值由原始方法的调用结果提供。</p>
<h2 id="修改函数参数和返回值"><a href="#修改函数参数和返回值" class="headerlink" title="修改函数参数和返回值"></a>修改函数参数和返回值</h2><p>在 Hook 的方法实现中，直接赋值给参数变量即可改变传入参数。</p>
<p>调用目标方法后，直接更改返回值，并返回新的结果给调用方。</p>
<h2 id="主动调用静态方法和非静态方法"><a href="#主动调用静态方法和非静态方法" class="headerlink" title="主动调用静态方法和非静态方法"></a>主动调用静态方法和非静态方法</h2><p><strong>静态方法调用</strong><br>直接通过类名调用静态方法，无需实例化对象。</p>
<p><strong>非静态方法调用</strong><br>必须先创建或获取目标类的实例对象，然后通过实例对象调用非静态方法。（可以通过Java.choose()获取实例）</p>
<h2 id="获取静态变量和成员变量"><a href="#获取静态变量和成员变量" class="headerlink" title="获取静态变量和成员变量"></a>获取静态变量和成员变量</h2><p>通过<code>.value</code>属性来访问变量的实际值。</p>
<p><strong>静态变量</strong><br>静态变量属于类本身，直接通过类访问。</p>
<p><strong>非静态变量</strong><br>非静态变量属于类的实例，必须通过实例对象来访问。</p>
<p>当变量的名字和类的方法名相同是，需要在变量的名字前面加上一个下划线<code>_</code>加以区分。</p>
<h2 id="hook内部类"><a href="#hook内部类" class="headerlink" title="hook内部类"></a>hook内部类</h2><p>外部类与内部类之间通过<code>$</code>符号分隔。</p>
<h2 id="hook匿名类"><a href="#hook匿名类" class="headerlink" title="hook匿名类"></a>hook匿名类</h2><p>匿名类没有直接的名称，通常包含外部类名并以<code>$数字</code>结尾。</p>
<h2 id="hook动态加载dex"><a href="#hook动态加载dex" class="headerlink" title="hook动态加载dex"></a>hook动态加载dex</h2><p><strong>枚举所有类加载器</strong><br>遍历 <code>ClassLoader</code> 的实例，列出每个类加载器加载的类。</p>
<p><strong>判断类加载器是否包含目标类</strong><br>检查类加载器中是否可以加载目标类。</p>
<p><strong>修改类加载器行为</strong><br>在找到目标类的类加载器后，动态 Hook 目标类的方法或属性。</p>
<p><strong>确保动态加载支持</strong><br>针对动态加载的类文件（如由 <code>DexClassLoader</code> 加载），在加载完成后再进行 Hook。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*] Starting enumeration of class loaders...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoaders</span>(&#123;</span><br><span class="line">        <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">loader</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*] Found ClassLoader: &quot;</span> + loader);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 尝试加载目标类</span></span><br><span class="line">                <span class="keyword">var</span> targetClass = loader.<span class="title function_">loadClass</span>(<span class="string">&#x27;com.example.target.MyClass&#x27;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*] Found target class in loader: &quot;</span> + loader);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Hook 目标类的方法</span></span><br><span class="line">                <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> <span class="title class_">MyClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.example.target.MyClass&#x27;</span>);</span><br><span class="line">                    </span><br><span class="line">                    <span class="title class_">MyClass</span>.<span class="property">myMethod</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*] Hooked myMethod of MyClass!&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">myMethod</span>(); <span class="comment">// 调用原始方法</span></span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[!] Target class not found in this loader.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*] Completed enumeration of class loaders.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="/2025/01/01/Frida%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/1.jpg" alt="image"></p>
<h2 id="通过spawn方式启动app"><a href="#通过spawn方式启动app" class="headerlink" title="通过spawn方式启动app"></a>通过spawn方式启动app</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida -U -f &lt;packageName&gt; -l hook.js</span><br></pre></td></tr></table></figure>

<h2 id="hook系统函数"><a href="#hook系统函数" class="headerlink" title="hook系统函数"></a>hook系统函数</h2><p><img src="/2025/01/01/Frida%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/2.jpg" alt="image"></p>
<h2 id="frida主动加载dex"><a href="#frida主动加载dex" class="headerlink" title="frida主动加载dex"></a>frida主动加载dex</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> ddexfile = <span class="title class_">Java</span>.<span class="title function_">openClassFile</span>(<span class="string">&quot;/data/local/tmp/ddex.dex&quot;</span>);</span><br><span class="line">        ddexfile.<span class="title function_">load</span>();</span><br><span class="line">        <span class="keyword">var</span> ddex = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.demo.ddex&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ddex:&quot;</span>,ddex)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="frida注册接口"><a href="#frida注册接口" class="headerlink" title="frida注册接口"></a>frida注册接口</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Registering MyCallback implementation...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟接口类的实现</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">MyCallbackImpl</span> = <span class="title class_">Java</span>.<span class="title function_">registerClass</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;com.example.MyCallbackImpl&#x27;</span>,</span><br><span class="line">        <span class="attr">implements</span>: [<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.example.MyCallback&#x27;</span>)], <span class="comment">// 实现的接口</span></span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">            <span class="attr">onEvent</span>: <span class="keyword">function</span> (<span class="params">message</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onEvent called with message: &quot;</span> + message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MyCallback implementation registered!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将模拟的实现注入目标应用逻辑</span></span><br><span class="line">    <span class="keyword">var</span> myObject = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.example.SomeClass&#x27;</span>);</span><br><span class="line">    myObject.<span class="title function_">setCallback</span>(<span class="title class_">MyCallbackImpl</span>.$new());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Callback set successfully!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="frida打印调用栈"><a href="#frida打印调用栈" class="headerlink" title="frida打印调用栈"></a>frida打印调用栈</h2><p><img src="/2025/01/01/Frida%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/3.jpg" alt="image"></p>
<h2 id="frida复杂参数打印"><a href="#frida复杂参数打印" class="headerlink" title="frida复杂参数打印"></a>frida复杂参数打印</h2><p>对于某些复杂参数类型，如数组或者对象，可能打印出来的结果是[Object object]。</p>
<ul>
<li><p><strong>Java层的对象</strong></p>
<p>  可以通过调用frida的<code>toString()</code>方法，或者调用Java对象的<code>toString()</code>方法，如果对象没有实现<code>toString()</code>方法，可以使用<code>JSON.stringify(arg)</code>方式。</p>
</li>
<li><p><strong>数组类型</strong></p>
<p>  手动迭代数组，或者将数组转化为字符串</p>
</li>
<li><p><strong>JSON对象</strong></p>
<p>  使用<code>JSON.stringify(arg)</code></p>
</li>
</ul>
<h1 id="Native层hook"><a href="#Native层hook" class="headerlink" title="Native层hook"></a>Native层hook</h1><h2 id="hook-RegisterNatives"><a href="#hook-RegisterNatives" class="headerlink" title="hook RegisterNatives"></a>hook RegisterNatives</h2><p>通过 JNI 动态注册的函数不会直接导出到符号表中，而是通过 <code>JNIEnv-&gt;RegisterNatives</code> 注册到 JVM 中。</p>
<p>hook <code>RegisterNatives</code> 函数的调用可以获取注册信息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;RegisterNatives&quot;</span>), &#123;</span><br><span class="line">    <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">        <span class="comment">// 打印注册信息</span></span><br><span class="line">        <span class="keyword">var</span> env = args[<span class="number">0</span>]; <span class="comment">// JNIEnv</span></span><br><span class="line">        <span class="keyword">var</span> jclass = args[<span class="number">1</span>]; <span class="comment">// Java 类</span></span><br><span class="line">        <span class="keyword">var</span> methods = args[<span class="number">2</span>]; <span class="comment">// 函数注册表</span></span><br><span class="line">        <span class="keyword">var</span> method_count = args[<span class="number">3</span>].<span class="title function_">toInt32</span>(); <span class="comment">// 函数数量</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RegisterNatives called:&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Number of methods: &quot;</span> + method_count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历注册的每个函数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; method_count; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> method = methods.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span>); <span class="comment">// 每个方法结构体的偏移量</span></span><br><span class="line">            <span class="keyword">var</span> name = method.<span class="title function_">readPointer</span>().<span class="title function_">readUtf8String</span>(); <span class="comment">// 函数名</span></span><br><span class="line">            <span class="keyword">var</span> signature = method.<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span>).<span class="title function_">readPointer</span>().<span class="title function_">readUtf8String</span>(); <span class="comment">// 函数签名</span></span><br><span class="line">            <span class="keyword">var</span> fnPtr = method.<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">2</span>).<span class="title function_">readPointer</span>(); <span class="comment">// Native 函数指针</span></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Method &quot;</span> + i + <span class="string">&quot;: Name = &quot;</span> + name + <span class="string">&quot;, Signature = &quot;</span> + signature + <span class="string">&quot;, Function Address = &quot;</span> + fnPtr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RegisterNatives finished.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="hook-Native层函数"><a href="#hook-Native层函数" class="headerlink" title="hook Native层函数"></a>hook Native层函数</h2><p>hook Native层函数首先定位目标函数所在的动态库及其导出符号地址。</p>
<p>使用Interceptor.attach()对函数进行hook。</p>
<h2 id="打印Native层的调用栈"><a href="#打印Native层的调用栈" class="headerlink" title="打印Native层的调用栈"></a>打印Native层的调用栈</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(Thread.backtrace(this.contex,Backtracer.ACCURATE).map(DebugSymbol.fromAddress).join(&#x27;\n&#x27;)+&#x27;\n&#x27;)</span><br></pre></td></tr></table></figure>

<h2 id="通过frida读写文件"><a href="#通过frida读写文件" class="headerlink" title="通过frida读写文件"></a>通过frida读写文件</h2><h2 id="通过frida调用C函数"><a href="#通过frida调用C函数" class="headerlink" title="通过frida调用C函数"></a>通过frida调用C函数</h2><h2 id="打印内存地址的值"><a href="#打印内存地址的值" class="headerlink" title="打印内存地址的值"></a>打印内存地址的值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(hexdump(ptr))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Frida</category>
      </categories>
      <tags>
        <tag>Frida知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>Git指南</title>
    <url>/2025/02/27/Git%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><h2 id="Win"><a href="#Win" class="headerlink" title="Win"></a>Win</h2><p>官网下载安装</p>
<p><a href="https://git-scm.com/downloads/win">Git - Downloading Package</a></p>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>命令安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install git</span><br></pre></td></tr></table></figure>

<p>验证安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><strong>关于配置文件</strong></p>
<ul>
<li><p>系统配置文件<code>/etc/gitconfig</code></p>
<p>  在使用<code>git config</code>时使用<code>--system</code>选项</p>
</li>
<li><p>用户配置文件<code>~/.gitconfig</code></p>
<p>  在使用<code>git config</code>时使用<code>--global</code>选项</p>
</li>
<li><p>当前目录配置文件<code>.git/congfig</code></p>
</li>
</ul>
<h3 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;bileton&quot;</span><br><span class="line">git config --global user.email xxx@xxx.com</span><br></pre></td></tr></table></figure>

<p>查看配置信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<h3 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h3><p>如果需要通过 SSH 进行 Git 操作，可以生成 SSH 密钥并添加到 Git 托管服务（如 GitHub、GitLab 等）上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure>

<h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:xxxx</span><br><span class="line">git config --global https.proxy 127.0.0.1:xxxx</span><br></pre></td></tr></table></figure>

<h3 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>

<h1 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h1><p>创建一个目录，用来作为仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir my-project</span><br><span class="line">cd my-project</span><br></pre></td></tr></table></figure>

<p><strong>git init</strong></p>
<p>使用当前目录作为 Git 仓库，只需使它初始化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>该命令执行完后会在当前目录生成一个 .git 目录。</p>
<p>如果想指定目录作为git仓库，使用如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init newrepo</span><br></pre></td></tr></table></figure>

<p>初始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。</p>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="克隆项目（下载项目）"><a href="#克隆项目（下载项目）" class="headerlink" title="克隆项目（下载项目）"></a>克隆项目（下载项目）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone xxx</span><br></pre></td></tr></table></figure>

<h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout xxx</span><br></pre></td></tr></table></figure>

<h2 id="管理包含其他-Git-仓库的项目"><a href="#管理包含其他-Git-仓库的项目" class="headerlink" title="管理包含其他 Git 仓库的项目"></a>管理包含其他 Git 仓库的项目</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">列出子模块</span><br><span class="line">git submodule</span><br><span class="line"></span><br><span class="line">初始化子模块</span><br><span class="line">git submodule init</span><br><span class="line"></span><br><span class="line">更新子模块</span><br><span class="line">git submodule update</span><br><span class="line"></span><br><span class="line">更新所有子模块</span><br><span class="line">git submodule update --recursive --remote</span><br><span class="line"></span><br><span class="line">查看子模块状态</span><br><span class="line">git submodule status</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Frida检测</title>
    <url>/2024/11/01/Frida%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<h1 id="常见检测方式"><a href="#常见检测方式" class="headerlink" title="常见检测方式"></a>常见检测方式</h1><h2 id="进程名检测"><a href="#进程名检测" class="headerlink" title="进程名检测"></a>进程名检测</h2><p>使用如下命令查看进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef | gerp xxx</span><br></pre></td></tr></table></figure>
<p>这里我去官网下载一份frida-server<br>启动frida后，查看进程，会发现有frida-sever字样<br><strong>绕过方式</strong><br>修改文件名，把frida-server文件名字改掉<br>进程名字就会变成修改后的名字</p>
<h2 id="端口检测"><a href="#端口检测" class="headerlink" title="端口检测"></a>端口检测</h2><p>frida默认使用的端口是27042，有些app会检测是否开放了27042端口<br>可以通过如下命令查看端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 27042</span><br></pre></td></tr></table></figure>
<p>注意：以下方式需要手机和电脑互相能Ping通<br><strong>绕过方式</strong><br>更改端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./frida-server -l 0.0.0.0:7777</span><br></pre></td></tr></table></figure>
<p>在电脑上进行端口转发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb forward tcp:7777 tcp:7777</span><br></pre></td></tr></table></figure>
<p>脚本运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida -H 127.0.0.1:7777 -F -l xxx.js</span><br></pre></td></tr></table></figure>
<p><strong>另一种不需要端口转发的方式</strong><br>在更改端口前查看本机IP地址，然后更改端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./frida-server -l 192.168.xx.xx:7777</span><br></pre></td></tr></table></figure>
<p>脚本运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida -H 192.168.xx.xx:7777 -F -l xxx.js</span><br></pre></td></tr></table></figure>
<p><strong>对于Python脚本</strong><br>端口转发后</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str_host = <span class="string">&quot;127.0.0.1:7777&quot;</span></span><br><span class="line">manager = firda.get_device_manager()</span><br><span class="line">rdev = manager.add_remote_device(str_host)</span><br></pre></td></tr></table></figure>
<h2 id="D-Bus网络通信协议"><a href="#D-Bus网络通信协议" class="headerlink" title="D-Bus网络通信协议"></a>D-Bus网络通信协议</h2><p>frida-server使用D-Bus网络通信协议，有些app会遍历内部所有端口，向端口发送信息，如果回复了REJECT则表示此端口是frida-server，检测到正在使用frida进行调试。<br><strong>绕过方式</strong><br>hook系统中的 strstr &#x2F; strcmp 函数，如果出现”REJECT”字样，返回false。  </p>
<h2 id="maps文件"><a href="#maps文件" class="headerlink" title="maps文件"></a>maps文件</h2><p><code>maps</code> 文件通常与进程的内存映射有关。<br>它位于&#x2F;proc&#x2F;pid&#x2F;maps，其中pid是正在运行的进程的PID。<br>通如下命令查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /proc/pid/maps | grep frida</span><br></pre></td></tr></table></figure>
<p>会发现有frida-agent-64.so字样<br><strong>绕过方式</strong><br>hook系统中的 strstr &#x2F; strcmp 函数，如果出现”frida”，”frida-agent”，”tmp”等字样，返回false。</p>
<h2 id="task目录"><a href="#task目录" class="headerlink" title="task目录"></a>task目录</h2><p>&#x2F;proc&#x2F;pid&#x2F;task目录包含了有关进程中所有线程的信息。<br>task目录下的第一个tid是主线程，其他的是子线程。<br>子线程目录里有一个status文件，里面提供了详细的线程信息。<br>frida-server启动且frida附加到一个app后，在task目录下会生成frida的相关线程文件，包含相关线程信息。<br>查看status文件后发现，存在与frida有关的线程名，可能会被检测。  </p>
<ul>
<li>gmain</li>
<li>gdbus</li>
<li>gum-js-loop</li>
<li>pool-frida</li>
</ul>
<p><strong>绕过方式</strong><br>hook系统中的 strstr &#x2F; strcmp 函数，如果出现”gmain”，”gdbus”，”gum-js-loop”等字样，返回false。</p>
<h2 id="fd目录（旧版frida特征）"><a href="#fd目录（旧版frida特征）" class="headerlink" title="fd目录（旧版frida特征）"></a>fd目录（旧版frida特征）</h2><p><code>/proc/&lt;pid&gt;/fd</code> 目录是进程的文件描述符目录，存储了与进程相关的所有文件描述符（file descriptors）的符号链接。提供系统中运行进程的实时信息。<br>frida-server启动且frida附加到一个app后，在fd目录下可能会生成”linjector-1”这个文件，也可能会被检测。<br><strong>绕过方式</strong><br>hook系统中的 strstr &#x2F; strcmp 函数，如果出现”linjector”字样，返回false。</p>
<h2 id="frida目录（旧版frida特征）"><a href="#frida目录（旧版frida特征）" class="headerlink" title="frida目录（旧版frida特征）"></a>frida目录（旧版frida特征）</h2><p>frida-server运行起来之后，会自动在&#x2F;data&#x2F;local&#x2F;tmp（frida-server放在&#x2F;data&#x2F;local&#x2F;tmp目录下）目录下生成一个re.frida.server目录，在re.frida.server这个目录里就会有包含frida的特征的文件名如frida-agent-64.so、frida-agent-32.so、frida-helper-32、linjector-1<br><strong>绕过方式</strong><br>hook系统中的 strstr &#x2F; strcmp 函数，如果出现”tmp”字样，返回false。</p>
<h2 id="hook脚本"><a href="#hook脚本" class="headerlink" title="hook脚本"></a>hook脚本</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">replace_str</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pt_strstr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>,<span class="string">&quot;strstr&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> pt_strcmp = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>,<span class="string">&quot;strstr&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pt_strstr:&quot;</span>,pt_strstr);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pt_strcmp:&quot;</span>,pt_strcmp);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pt_strstr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args[<span class="number">0</span>].<span class="title function_">isNull</span>() || args[<span class="number">1</span>].<span class="title function_">isNull</span>()) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;strstr: One of the arguments is NULL&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> str1 = args[<span class="number">0</span>].<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="keyword">var</span> str2 = args[<span class="number">1</span>].<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="comment">// console.log(&quot;str2:&quot;, str2);</span></span><br><span class="line">            <span class="keyword">if</span> (str2.<span class="title function_">indexOf</span>(<span class="string">&quot;REJECT&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;frida&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;frida-agent&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;gmain&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;gum-js-loop&quot;</span>) &gt;= <span class="number">0</span> ||</span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;tmp&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;maps&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;gdbus&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;linjector&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;strstr--&gt;&quot;</span>, str1, str2);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">hook</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">hook</span>) &#123;</span><br><span class="line">                retval.<span class="title function_">replace</span>(<span class="number">0</span>); <span class="comment">// 也可以指向合法地址</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pt_strcmp, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args[<span class="number">0</span>].<span class="title function_">isNull</span>() || args[<span class="number">1</span>].<span class="title function_">isNull</span>()) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;strcmp: One of the arguments is NULL&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> str1 = args[<span class="number">0</span>].<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="keyword">var</span> str2 = args[<span class="number">1</span>].<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="keyword">if</span> (str2.<span class="title function_">indexOf</span>(<span class="string">&quot;REJECT&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;frida&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;frida-agent&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;gmain&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;gum-js-loop&quot;</span>) &gt;= <span class="number">0</span> ||</span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;tmp&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;maps&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;gdbus&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;linjector&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;strcmp--&gt;&quot;</span>, str1, str2);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">hook</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">hook</span>) &#123;</span><br><span class="line">                retval.<span class="title function_">replace</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">replace_str</span>();</span><br></pre></td></tr></table></figure>
<h1 id="线程检测"><a href="#线程检测" class="headerlink" title="线程检测"></a>线程检测</h1><p>检测frida的线程通常不会是主线程，主线程与业务相关，通过创建子线程来检测frida，在此线程中循环检测。<br><strong>检测方式</strong><br>在C语言中有一个pthread_create函数，这个函数的作用是创建线程<br><strong>定位so</strong><br>首先定位检测frida的线程的是在哪个so里通过pthread_create函数创建的。（通过hook dlopen进行判断）<br><strong>替换线程中的函数实现绕过</strong></p>
<h2 id="hook-pthread"><a href="#hook-pthread" class="headerlink" title="hook pthread"></a>hook pthread</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                    <span class="title function_">hook_pthread</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_pthread</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pth_create = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[pth_create]&quot;</span>, pth_create);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pth_create, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(args[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address&quot;</span>, <span class="variable language_">module</span>.<span class="property">name</span>, args[<span class="number">2</span>].<span class="title function_">sub</span>(<span class="variable language_">module</span>.<span class="property">base</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hook_dlopen</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>

<h2 id="替换线程函数"><a href="#替换线程函数" class="headerlink" title="替换线程函数"></a>替换线程函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                    <span class="title function_">hook_call_constructors</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_pthread</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pth_create = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[pth_create]&quot;</span>, pth_create);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pth_create, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(args[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address&quot;</span>, <span class="variable language_">module</span>.<span class="property">name</span>, args[<span class="number">2</span>].<span class="title function_">sub</span>(<span class="variable language_">module</span>.<span class="property">base</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_call_constructors</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> linker = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;linker64&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> symbols = linker.<span class="title function_">enumerateSymbols</span>();</span><br><span class="line">    <span class="keyword">var</span> addr_call_constructors = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbol = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> index =<span class="number">0</span>;index&lt;symbols.<span class="property">length</span>;index++)&#123;</span><br><span class="line">        symbol = symbols[index];</span><br><span class="line">        <span class="keyword">if</span>(symbol.<span class="property">name</span>===<span class="string">&quot;__dl__ZN6soinfo17call_constructorsEv&quot;</span>)&#123;</span><br><span class="line">            addr_call_constructors = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> listener = <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr_call_constructors,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hooked call_constructors&quot;</span>)</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x175f8</span>), <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0x175f8:替换成功&quot;</span>)</span><br><span class="line">                &#125;, <span class="string">&quot;void&quot;</span>, []))</span><br><span class="line">                <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x16d30</span>), <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0x16d30:替换成功&quot;</span>)</span><br><span class="line">                &#125;, <span class="string">&quot;void&quot;</span>, []))</span><br><span class="line">                listener.<span class="title function_">detach</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hook_dlopen</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Frida</category>
      </categories>
      <tags>
        <tag>Frida</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言基础</title>
    <url>/2024/12/31/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><h2 id="安装Go"><a href="#安装Go" class="headerlink" title="安装Go"></a>安装Go</h2><p>打开Go的官网进行下载安装。</p>
<p>在终端输入命令<code>go version</code>可查看Go的版本，输入<code>go env</code>可查看Go的环境配置。</p>
<p>可以通过<code>go build</code>命令编译代码并生成可执行文件。</p>
<p>可以通过<code>go run</code>命令在终端运行Go文件。</p>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>下载安装GoLand开发工具</p>
<h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明这是一个属于 main 包的程序。Go 的可执行程序必须包含一个名为 main 的包。</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入 Go 的标准库 fmt 包，用于格式化输出</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义程序的入口函数 main。每个 Go 程序的执行都会从 main 函数开始。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello World!&quot;</span>) <span class="comment">// Hello World!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Go语言的注释和C和C++一样，单行注释是<code>//</code>和多行注释<code>/* */</code></p>
<h2 id="程序入口"><a href="#程序入口" class="headerlink" title="程序入口"></a>程序入口</h2><p>可执行程序需要声明<code>main</code>包。</p>
<p><code>main</code>函数是程序的入口函数。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Go语言通过var关键字来声明变量。</p>
<p>Go语言声明变量的方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var &lt;变量名&gt; &lt;数据类型&gt;</span><br></pre></td></tr></table></figure>

<h3 id="匿名变量"><a href="#匿名变量" class="headerlink" title="匿名变量"></a>匿名变量</h3><p>在Go语言中，匿名变量（也称为”空白标识符”）使用<code>_</code>来表示，用来占位但忽略其值。</p>
<p>匿名变量不会占用内存，也不会引发编译错误，因此在不需要某个返回值或变量时，可以使用匿名变量代替。</p>
<h3 id="短变量声明"><a href="#短变量声明" class="headerlink" title="短变量声明"></a>短变量声明</h3><p>在Go语言中可以通过<code>:=</code>操作符在函数体内声明和初始化变量，它是Go中常用的一种语法糖（语法糖是一种语法优化，程序的功能和逻辑不会因为语法糖而发生改变）。（不能用于全局变量）</p>
<p><code>:=</code>可以自动推断变量的类型并简化语法，提高代码简洁性。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">num := <span class="number">10</span> <span class="comment">//  等价于 var num int = 10</span></span><br><span class="line">name := <span class="string">&quot;Bileton&quot;</span> <span class="comment">// 等价于 var name string = &quot;Bileton&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h3><p>在生命变量的时候，省略数据类型，编译器可以根据上下文或赋值语句，自动推导出变量或常量的类型而不需要显式的指定类型。</p>
<h3 id="未初始化变量"><a href="#未初始化变量" class="headerlink" title="未初始化变量"></a>未初始化变量</h3><p>没有明确初始化的变量声明会被赋予对应类型的 <strong>零值</strong>。</p>
<ul>
<li>数值类型为 <code>0</code>，</li>
<li>布尔类型为 <code>false</code>，</li>
<li>字符串为 <code>&quot;&quot;</code>（空字符串）。</li>
</ul>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>在Go语言中通过<code>const</code>关键字来声明常量。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> NAME <span class="type">string</span> = <span class="string">&quot;Bileton&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h3><p><code>iota</code>是<code>go</code>语言的常量计数器，只能在常量的表达式中使用。</p>
<p><code>iota</code>在<code>const</code>关键字出现时将被重置为<code>0</code>。</p>
<p><code>const</code>中每新增一行常量声明将使<code>iota</code>计数一次(<code>iota</code>可理解为<code>const</code>语句块中的行索引)。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        A = <span class="literal">iota</span> <span class="comment">// A = 0</span></span><br><span class="line">        B        <span class="comment">// B = 1</span></span><br><span class="line">        C        <span class="comment">// C = 2</span></span><br><span class="line">    )</span><br><span class="line">    fmt.Println(A, B, C) <span class="comment">// 输出: 0 1 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><ul>
<li><p><strong>自定义类型</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Age <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> myAge Age = <span class="number">25</span> <span class="comment">// myAge的类型是Age，而不是int了</span></span><br><span class="line">    fmt.Println(myAge)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>类型别名</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> AliasInt = <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x AliasInt = <span class="number">10</span> <span class="comment">//AliasInt和int是一样的</span></span><br><span class="line">    fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>定义结构体</strong></p>
</li>
<li><p><strong>定义接口</strong></p>
</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p>整型分为以下两个大类： 按长度分为：<code>int8</code>、<code>int16</code>、<code>int32</code>、<code>int64</code>对应的无符号整型：<code>uint8</code>、<code>uint16</code>、<code>uint32</code>、<code>uint64</code>。</p>
<p><code>uint8</code>也就是<code>byte</code>类型。</p>
<p><code>rune</code>是<code>int32</code>类型</p>
<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p>Go语言支持两种浮点型数：<code>float32</code>和<code>float64</code>。</p>
<h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p>布尔型数据只有<code>true（真）</code>和<code>false（假）</code>两个值。</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>Go语言中字符串是<code>string</code>类型，以原生数据类型出现。</p>
<p>Go 语言里的字符串的内部实现使用UTF-8编码。</p>
<h3 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h3><p>空</p>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><table>
<thead>
<tr>
<th>转义字符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>\r</td>
<td>回车符（返回行首）</td>
</tr>
<tr>
<td>\n</td>
<td>换行符（跳转到下一行同列位置）</td>
</tr>
<tr>
<td>\t</td>
<td>制表符</td>
</tr>
<tr>
<td>\‘</td>
<td>单引号</td>
</tr>
<tr>
<td>\“</td>
<td>双引号</td>
</tr>
<tr>
<td>\</td>
<td>反斜杠</td>
</tr>
</tbody></table>
<h3 id="数值类型之间的转换"><a href="#数值类型之间的转换" class="headerlink" title="数值类型之间的转换"></a>数值类型之间的转换</h3><p>形式为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">T(value)</span><br><span class="line"></span><br><span class="line">其中 T 是目标类型，value 是要转换的值。</span><br></pre></td></tr></table></figure>

<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+</span><br><span class="line">-</span><br><span class="line">*</span><br><span class="line">/</span><br><span class="line">%</span><br></pre></td></tr></table></figure>

<p>注意： <code>++</code>（自增）和<code>--</code>（自减）在Go语言中是单独的语句，并不是运算符。</p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;&amp;</span><br><span class="line">||</span><br><span class="line">！</span><br></pre></td></tr></table></figure>

<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;</span><br><span class="line">|</span><br><span class="line">^</span><br><span class="line">&lt;&lt;</span><br><span class="line">&gt;&gt;</span><br><span class="line">~</span><br></pre></td></tr></table></figure>

<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 表达式&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 表达式&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> var1 &#123;</span><br><span class="line">    <span class="keyword">case</span> val1:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> val2:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p><strong>基本语法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 初始化语句; 条件表达式; 循环后语句 &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>条件判断的for循环，相当于while</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 条件表达式 &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>无限循环</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>for range循环</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    nums := []<span class="type">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> index, value := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Index: %d, Value: %d\n&quot;</span>, index, value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Index: <span class="number">0</span>, Value: <span class="number">10</span></span><br><span class="line">Index: <span class="number">1</span>, Value: <span class="number">20</span></span><br><span class="line">Index: <span class="number">2</span>, Value: <span class="number">30</span></span><br><span class="line">Index: <span class="number">3</span>, Value: <span class="number">40</span></span><br><span class="line">Index: <span class="number">4</span>, Value: <span class="number">50</span></span><br></pre></td></tr></table></figure>

<h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p><code>range</code> 是一个关键字，常用来迭代数组、切片、映射（map）、字符串和通道（channel）。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> collection &#123;</span><br><span class="line">    <span class="comment">// 在这里处理 index 和 value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// collection 是可以迭代的集合（如数组、切片、map 等）。</span></span><br><span class="line"><span class="comment">// index 是迭代过程中的索引（对于数组、切片、字符串）或键（对于 map）。</span></span><br><span class="line"><span class="comment">// value 是当前迭代的值。</span></span><br></pre></td></tr></table></figure>



<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数名<span class="params">(参数列表)</span></span> 返回值类型&#123;</span><br><span class="line">	函数体</span><br><span class="line">	<span class="keyword">return</span> 返回值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数名<span class="params">(参数列表)</span></span> 返回值列表&#123;</span><br><span class="line">	函数体</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>可以传递可变参数，用<code>...</code>表示</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myfunc</span><span class="params">(args ...<span class="type">int</span>)</span></span> &#123;    <span class="comment">//0个或多个参数</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>args</code>是一个<code>[]int</code>切片，可以遍历和操作。</p>
<h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>在函数的定义中调用自身的函数称为递归函数。</p>
<p><strong>递归通常有两个主要部分：</strong></p>
<ul>
<li>定义递归的停止条件，避免无限递归。</li>
<li>在函数内部调用自身，并逐步接近基准情况。</li>
</ul>
<h3 id="延迟调用"><a href="#延迟调用" class="headerlink" title="延迟调用"></a>延迟调用</h3><p>通过<code>defer</code>关键字实现延迟调用。</p>
<p>延迟调用的特点是：无论函数正常执行还是因为 <code>return</code> 或异常退出，<code>defer</code> 注册的语句都会在函数返回之前执行。</p>
<p><code>defer</code> 通常用于资源清理、文件关闭、解锁互斥锁等场景。</p>
<p><strong>简单示例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;defer 1&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="keyword">defer</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>如果有多个<code>defer</code>语句，会按照后进先出的顺序执行。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;defer 1&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;defer 3&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;defer 5&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;6&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="keyword">defer</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">defer</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">defer</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="函数的数据类型"><a href="#函数的数据类型" class="headerlink" title="函数的数据类型"></a>函数的数据类型</h3><p>函数的数据类型描述了它的参数列表和返回值列表，包括参数的数量、顺序以及类型，以及返回值的数量和类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func1</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;This is func1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func2</span><span class="params">(num <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, func1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, func2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span></span><br></pre></td></tr></table></figure>

<h3 id="函数可以赋值给变量"><a href="#函数可以赋值给变量" class="headerlink" title="函数可以赋值给变量"></a>函数可以赋值给变量</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func1</span><span class="params">(num <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> func2 <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span></span><br><span class="line">	func2 = func1</span><br><span class="line">	fmt.Println(func2(<span class="number">100</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure>

<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p><strong>基本用法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;This is a func&quot;</span>)</span><br><span class="line">	&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">This is a <span class="function"><span class="keyword">func</span></span></span><br></pre></td></tr></table></figure>

<p><strong>匿名函数赋值给变量，通过变量调用函数</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	func1 := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;This is a func&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	func1()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">This is a <span class="function"><span class="keyword">func</span></span></span><br></pre></td></tr></table></figure>

<p><strong>匿名函数的返回值赋值给变量</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ret := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a * b</span><br><span class="line">	&#125;(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">	fmt.Println(ret)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>

<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>回调函数可以在一个函数中动态调用另一个函数。函数作为参数传递给另一个函数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">operate</span><span class="params">(a, b <span class="type">int</span>, fun <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">	ret := fun(a, b)</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(operate(<span class="number">1</span>, <span class="number">2</span>, add))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p><strong>回调函数调用匿名函数</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">operate</span><span class="params">(a, b <span class="type">int</span>, fun <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">	ret := fun(a, b)</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	add := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a + b</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(operate(<span class="number">1</span>, <span class="number">2</span>, add))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p><strong>在回调函数中直接传递匿名函数</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">operate</span><span class="params">(a, b <span class="type">int</span>, fun <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">	ret := fun(a, b)</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(operate(<span class="number">1</span>, <span class="number">2</span>, <span class="function"><span class="keyword">func</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a + b</span><br><span class="line">	&#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包（Closure）是指一个函数包含了它外部作用域中的变量，即使在外部作用域结束后，这些变量依然可以被内部函数访问和修改。闭包使得函数可以“记住”外部作用域的状态，这种状态在函数调用之间是保持的。</p>
<p>闭包是一个函数与其外部环境变量的组合。</p>
<p>闭包的核心概念是<strong>函数内部可以引用外部作用域的变量</strong>，即使在函数内部外部作用域已经结束。</p>
<p><strong>简单的闭包示例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	counter := <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		counter++</span><br><span class="line">		<span class="keyword">return</span> counter</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	func1 := test()</span><br><span class="line">	fmt.Println(<span class="string">&quot;func1:&quot;</span>, func1())</span><br><span class="line">	fmt.Println(<span class="string">&quot;func1:&quot;</span>, func1())</span><br><span class="line">	fmt.Println(<span class="string">&quot;func1:&quot;</span>, func1())</span><br><span class="line">	func2 := test()</span><br><span class="line">	fmt.Println(<span class="string">&quot;func2:&quot;</span>, func2())</span><br><span class="line">	fmt.Println(<span class="string">&quot;func2:&quot;</span>, func2())</span><br><span class="line">	fmt.Println(<span class="string">&quot;func2:&quot;</span>, func2())</span><br><span class="line">	fmt.Println(<span class="string">&quot;func1:&quot;</span>, func1())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">func1: <span class="number">1</span></span><br><span class="line">func1: <span class="number">2</span></span><br><span class="line">func1: <span class="number">3</span></span><br><span class="line">func2: <span class="number">1</span></span><br><span class="line">func2: <span class="number">2</span></span><br><span class="line">func2: <span class="number">3</span></span><br><span class="line">func1: <span class="number">4</span></span><br></pre></td></tr></table></figure>





<h3 id="Go语言内置函数"><a href="#Go语言内置函数" class="headerlink" title="Go语言内置函数"></a>Go语言内置函数</h3><h4 id="len"><a href="#len" class="headerlink" title="len"></a>len</h4><p>用于返回特定数据类型的长度或大小。</p>
<h4 id="cap"><a href="#cap" class="headerlink" title="cap"></a>cap</h4><p>用于获取切片、数组或通道（channel）的容量。</p>
<h4 id="make"><a href="#make" class="headerlink" title="make"></a>make</h4><p>为slice、map或chan初始化并返回引用。make仅仅用于创建slice、map和channel，并返回它们的实例。</p>
<p><strong>函数签名</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">make</span><span class="params">(t Type, size ...IntegerType)</span></span> Type</span><br><span class="line"></span><br><span class="line"><span class="comment">// t	slice, map或channel类型。</span></span><br><span class="line"><span class="comment">// size	整数类型切片，面对不同类型时意义也不同。是否可省略跟创建类型有关。</span></span><br></pre></td></tr></table></figure>

<p><strong>创建slice</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span>([]Type, <span class="built_in">len</span>, <span class="built_in">cap</span>)</span><br></pre></td></tr></table></figure>

<h4 id="append"><a href="#append" class="headerlink" title="append"></a>append</h4><p><code>append</code> 用于向切片中添加元素。</p>
<p><code>append</code> 可以将一个或多个元素添加到现有的切片中，并返回一个新的切片。</p>
<p>如果切片的容量不足以容纳新元素，<code>append</code> 会自动分配一个新的、更大的底层数组，并返回一个新的切片。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">slice = <span class="built_in">append</span>(slice, elements...)</span><br></pre></td></tr></table></figure>

<p>容量每次成倍增加。</p>
<p>每次扩容后，切片的地址就会发生改变。</p>
<h4 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h4><p>用于从一个切片复制元素到另一个切片中。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">copy</span><span class="params">(dst, src []Type)</span></span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dst: 目标切片，复制的内容会放到这个切片中。</span></span><br><span class="line"><span class="comment">// src: 源切片，数据会从这个切片中读取。</span></span><br></pre></td></tr></table></figure>

<p>append扩容的底层是通过copy实现的。</p>
<p><strong>示例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	fmt.Println(s)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, s)</span><br><span class="line">	fmt.Println(<span class="built_in">len</span>(s))</span><br><span class="line">	fmt.Println(<span class="built_in">cap</span>(s))</span><br><span class="line">	s = <span class="built_in">append</span>(s, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">	fmt.Println(s)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, s)</span><br><span class="line">	fmt.Println(<span class="built_in">len</span>(s))</span><br><span class="line">	fmt.Println(<span class="built_in">cap</span>(s))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"><span class="number">0xc0000081b0</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"><span class="number">0xc0000081b0</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>…</strong></p>
<p><code>...</code> 在 Go 中用于扩展切片，将其元素展开为单独的参数传递给函数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	s = <span class="built_in">append</span>(s, s...) <span class="comment">// </span></span><br><span class="line">	fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><p>用于从 <code>map</code> 中删除指定的键值对。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">delete</span>(<span class="keyword">map</span>, key)</span><br><span class="line"></span><br><span class="line"><span class="comment">// map：表示目标映射（map 类型）。</span></span><br><span class="line"><span class="comment">// key：表示要删除的键。</span></span><br></pre></td></tr></table></figure>

<h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ptr := new(T)</span><br></pre></td></tr></table></figure>

<p>new用于为指定的类型分配内存，并返回指向该类型的指针。</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>在Go语言中数组是值类型，而不是引用类型。</p>
<p><strong>基本使用</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> arry [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">		arry[i] = i * <span class="number">100</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(arry)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T&quot;</span>, array)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;arry[<span class="number">0</span>])</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;arry[<span class="number">1</span>])</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;arry[<span class="number">2</span>])</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;arry[<span class="number">3</span>])</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;arry[<span class="number">4</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">0</span> <span class="number">100</span> <span class="number">200</span> <span class="number">300</span> <span class="number">400</span>]</span><br><span class="line">[<span class="number">5</span>]<span class="type">int</span></span><br><span class="line"><span class="number">0xc000010330</span></span><br><span class="line"><span class="number">0xc000010338</span></span><br><span class="line"><span class="number">0xc000010340</span></span><br><span class="line"><span class="number">0xc000010348</span></span><br><span class="line"><span class="number">0xc000010350</span></span><br></pre></td></tr></table></figure>

<p><strong>数组的初始化</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种方式</span></span><br><span class="line"><span class="keyword">var</span> array [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">array = [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种方式</span></span><br><span class="line">array := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第四种方式</span></span><br><span class="line">array := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组的值传递"><a href="#数组的值传递" class="headerlink" title="数组的值传递"></a>数组的值传递</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	array1 := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;array1:&quot;</span>, array1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;array1:%p\n&quot;</span>, &amp;array1)</span><br><span class="line">	array2 := array1 <span class="comment">// 将array1赋值给array2</span></span><br><span class="line">	array2[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;array2:&quot;</span>, array2)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;array2:%p\n&quot;</span>, &amp;array2)</span><br><span class="line">	fmt.Println(<span class="string">&quot;array1:&quot;</span>, array1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;array1:%p\n&quot;</span>, &amp;array1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">array1: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">array1:<span class="number">0xc00012e000</span></span><br><span class="line">array2: [<span class="number">100</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">array2:<span class="number">0xc00012e060</span></span><br><span class="line">array1: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">array1:<span class="number">0xc00012e000</span></span><br></pre></td></tr></table></figure>

<p><strong>利用函数传递数组参数</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(array2 [5]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	array2[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;array2:&quot;</span>, array2)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;array2:%p\n&quot;</span>, &amp;array2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	array1 := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;array1:&quot;</span>, array1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;array1:%p\n&quot;</span>, &amp;array1)</span><br><span class="line">	update(array1)</span><br><span class="line">	fmt.Println(<span class="string">&quot;array1:&quot;</span>, array1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;array1:%p\n&quot;</span>, &amp;array1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">array1: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">array1:<span class="number">0xc000010330</span></span><br><span class="line">array2: [<span class="number">100</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">array2:<span class="number">0xc000010390</span></span><br><span class="line">array1: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">array1:<span class="number">0xc000010330</span> <span class="comment">// 数组是值传递</span></span><br></pre></td></tr></table></figure>

<h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> array = [<span class="number">4</span>][<span class="number">3</span>]<span class="type">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;, &#123;<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;&#125;</span><br><span class="line">	fmt.Println(array)</span><br><span class="line">	fmt.Println(array[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>] [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>] [<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>] [<span class="number">10</span> <span class="number">11</span> <span class="number">12</span>]]</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="切片Slice"><a href="#切片Slice" class="headerlink" title="切片Slice"></a>切片Slice</h2><p>在 Go 语言中，切片（<strong>slice</strong>）是一个动态数组，是对数组的抽象。它比数组更加灵活，因为切片的长度可以动态调整，而数组的长度是固定的。</p>
<p><strong>引用类型</strong>：切片本质是一个对底层数组的引用。</p>
<ul>
<li>切片本身不存储数据，底层指向的是数组。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s []<span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> a [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;Slice:%T\n&quot;</span>, s)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Slice:%T\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Slice:[]<span class="type">int</span>（切片）</span><br><span class="line">Slice:[<span class="number">5</span>]<span class="type">int</span>（数组）</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s []<span class="type">int</span> = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T&quot;</span>, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[]<span class="type">int</span> <span class="comment">// 切片打印的类型里不包含长度</span></span><br></pre></td></tr></table></figure>

<h3 id="通过数组创建切片"><a href="#通过数组创建切片" class="headerlink" title="通过数组创建切片"></a>通过数组创建切片</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	array := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">	s1 := array[<span class="number">0</span>:<span class="number">9</span>]</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, s1)</span><br><span class="line">	fmt.Println(s1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[]<span class="type">int</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br></pre></td></tr></table></figure>

<p>这种方式创建的切片的长度和容量的关系</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	array := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">	s1 := array[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">	fmt.Println(s1)</span><br><span class="line">	fmt.Println(<span class="string">&quot;s1--len:&quot;</span>, <span class="built_in">len</span>(s1), <span class="string">&quot;cap:&quot;</span>, <span class="built_in">cap</span>(s1))</span><br><span class="line">	s2 := array[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line">	fmt.Println(s2)</span><br><span class="line">	fmt.Println(<span class="string">&quot;s2--len:&quot;</span>, <span class="built_in">len</span>(s2), <span class="string">&quot;cap:&quot;</span>, <span class="built_in">cap</span>(s2))</span><br><span class="line">	s3 := array[<span class="number">3</span>:<span class="number">10</span>]</span><br><span class="line">	fmt.Println(s3)</span><br><span class="line">	fmt.Println(<span class="string">&quot;s3--len:&quot;</span>, <span class="built_in">len</span>(s3), <span class="string">&quot;cap:&quot;</span>, <span class="built_in">cap</span>(s3))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">s1--<span class="built_in">len</span>: <span class="number">5</span> <span class="built_in">cap</span>: <span class="number">10</span></span><br><span class="line">[<span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">s2--<span class="built_in">len</span>: <span class="number">4</span> <span class="built_in">cap</span>: <span class="number">9</span></span><br><span class="line">[<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span>]</span><br><span class="line">s3--<span class="built_in">len</span>: <span class="number">7</span> <span class="built_in">cap</span>: <span class="number">7</span></span><br></pre></td></tr></table></figure>

<p>切片的容量是从切片起始位置到<strong>底层数组末尾</strong>的元素个数。</p>
<h3 id="使用make创建切片"><a href="#使用make创建切片" class="headerlink" title="使用make创建切片"></a>使用make创建切片</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	map1 := <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>, <span class="number">5</span>) <span class="comment">//使用make创建切片，需要初始化长度，容量可选。</span></span><br><span class="line">	fmt.Println(map1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T&quot;</span>, map1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="keyword">map</span>[] <span class="keyword">map</span>[] <span class="keyword">map</span>[] <span class="keyword">map</span>[] <span class="keyword">map</span>[]]</span><br><span class="line">[]<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span></span><br></pre></td></tr></table></figure>



<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>在Go语言中Map是一种无序的键值对结构。</p>
<h3 id="map的声明"><a href="#map的声明" class="headerlink" title="map的声明"></a>map的声明</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> map1 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">	fmt.Println(map1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="keyword">map</span>[] <span class="comment">//map是一种引用数据类型，未初始化值为nil（空）</span></span><br></pre></td></tr></table></figure>

<p><strong>使用make创建map</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	map1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>)</span><br><span class="line">	fmt.Println(map1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T&quot;</span>, map1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="keyword">map</span>[]</span><br><span class="line"><span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span></span><br></pre></td></tr></table></figure>

<p><strong>向map中添加元素</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> map1 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">	map1 = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>, <span class="string">&quot;two&quot;</span>: <span class="number">2</span>, <span class="string">&quot;three&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line">	fmt.Println(map1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="keyword">map</span>[one:<span class="number">1</span> three:<span class="number">3</span> two:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> map1 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">	map1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)  <span class="comment">// 在使用前进行初始化，未初始化的 map 是 nil，不能直接用于存储键值对。</span></span><br><span class="line">	map1[<span class="string">&quot;one&quot;</span>] = <span class="number">1</span></span><br><span class="line">	map1[<span class="string">&quot;two&quot;</span>] = <span class="number">2</span></span><br><span class="line">	map1[<span class="string">&quot;three&quot;</span>] = <span class="number">3</span></span><br><span class="line">	fmt.Println(map1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="keyword">map</span>[one:<span class="number">1</span> three:<span class="number">3</span> two:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<h3 id="遍历map"><a href="#遍历map" class="headerlink" title="遍历map"></a>遍历map</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> map1 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line"></span><br><span class="line">	map1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">	map1[<span class="string">&quot;one&quot;</span>] = <span class="number">1</span></span><br><span class="line">	map1[<span class="string">&quot;two&quot;</span>] = <span class="number">2</span></span><br><span class="line">	map1[<span class="string">&quot;three&quot;</span>] = <span class="number">3</span></span><br><span class="line">	<span class="keyword">for</span> key, value := <span class="keyword">range</span> map1 &#123;</span><br><span class="line">		fmt.Println(key, value)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">three <span class="number">3</span></span><br><span class="line">one <span class="number">1</span></span><br><span class="line">two <span class="number">2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>map是无序的，遍历时结果的顺序不一样</li>
<li>map的长度不固定，是引用类型</li>
<li>可以用len查看map的长度，但不能使用cap查看map的容量</li>
<li>map的key可以是所以可以比较的类型。</li>
</ul>
<h3 id="map结合切片进行使用"><a href="#map结合切片进行使用" class="headerlink" title="map结合切片进行使用"></a>map结合切片进行使用</h3><p>1.使用map存储学生信息</p>
<p>2.每个map保存一个学生的信息</p>
<p>3.将这些map存储到切片里</p>
<p>4.打印这些学生的信息</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	stu1 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;stu1&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="string">&quot;17&quot;</span>, <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line">	stu2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">	stu2[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;stu2&quot;</span></span><br><span class="line">	stu2[<span class="string">&quot;gender&quot;</span>] = <span class="string">&quot;female&quot;</span></span><br><span class="line">	stu2[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;18&quot;</span></span><br><span class="line">	<span class="keyword">var</span> stu3 = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;stu3&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="string">&quot;17&quot;</span>, <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line">	s := <span class="built_in">append</span>(<span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">0</span>), stu1, stu2, stu3)</span><br><span class="line">	fmt.Println(s)</span><br><span class="line">	<span class="keyword">for</span> _, value := <span class="keyword">range</span> s &#123;</span><br><span class="line">		fmt.Println(value)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, value := <span class="keyword">range</span> s &#123;</span><br><span class="line">		fmt.Print(<span class="string">&quot;name\t&quot;</span>, value[<span class="string">&quot;name&quot;</span>], <span class="string">&quot;\t&quot;</span>)</span><br><span class="line">		fmt.Print(<span class="string">&quot;gender\t&quot;</span>, value[<span class="string">&quot;gender&quot;</span>], <span class="string">&quot;\t&quot;</span>)</span><br><span class="line">		fmt.Println(<span class="string">&quot;age&quot;</span>, value[<span class="string">&quot;age&quot;</span>])</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="keyword">map</span>[age:<span class="number">17</span> gender:male name:stu1] <span class="keyword">map</span>[age:<span class="number">18</span> gender:female name:stu2] <span class="keyword">map</span>[age:<span class="number">17</span> gender:male name:stu3]]</span><br><span class="line"><span class="keyword">map</span>[age:<span class="number">17</span> gender:male name:stu1]</span><br><span class="line"><span class="keyword">map</span>[age:<span class="number">18</span> gender:female name:stu2]</span><br><span class="line"><span class="keyword">map</span>[age:<span class="number">17</span> gender:male name:stu3]</span><br><span class="line">name	stu1	gender	male	age <span class="number">17</span></span><br><span class="line">name	stu2	gender	female	age <span class="number">18</span></span><br><span class="line">name	stu3	gender	male	age <span class="number">17</span></span><br></pre></td></tr></table></figure>

<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>指针是存储变量地址的变量。</p>
<h3 id="指针的声明"><a href="#指针的声明" class="headerlink" title="指针的声明"></a>指针的声明</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> ptr *<span class="type">int</span></span><br><span class="line">	fmt.Println(ptr)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T&quot;</span>, ptr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&lt;<span class="literal">nil</span>&gt;</span><br><span class="line">*<span class="type">int</span></span><br></pre></td></tr></table></figure>

<h3 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h3><p>存储数组地址的指针</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> arr = [<span class="number">4</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">var</span> ptr = &amp;arr</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;arr)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, ptr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">0xc0000161c0</span></span><br><span class="line"><span class="number">0xc0000161c0</span></span><br></pre></td></tr></table></figure>

<p><strong>通过数组指针来修改数组</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> arr = [<span class="number">4</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> ptr = &amp;arr</span><br><span class="line">	(*ptr)[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">	fmt.Println(*ptr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">5</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br></pre></td></tr></table></figure>

<p><strong>数组指针语法糖</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> arr = [<span class="number">4</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> ptr = &amp;arr</span><br><span class="line">	ptr[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">	fmt.Println(*ptr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">5</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br></pre></td></tr></table></figure>

<h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><p>一个数组，数组里面的元素是指针</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">1</span></span><br><span class="line">	b := <span class="number">2</span></span><br><span class="line">	c := <span class="number">3</span></span><br><span class="line">	d := <span class="number">4</span></span><br><span class="line">	arr := [<span class="number">4</span>]*<span class="type">int</span>&#123;&amp;a, &amp;b, &amp;c, &amp;d&#125;</span><br><span class="line">	fmt.Println(arr)</span><br><span class="line">	*arr[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">	fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">0xc00010c098</span> <span class="number">0xc00010c0b0</span> <span class="number">0xc00010c0b8</span> <span class="number">0xc00010c0c0</span>]</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure>

<h3 id="指针函数"><a href="#指针函数" class="headerlink" title="指针函数"></a>指针函数</h3><p>指针函数是一个函数，返回值是指针。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ptr := pointer()</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, ptr)</span><br><span class="line">	fmt.Println(*ptr)</span><br><span class="line">	fmt.Println(ptr[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pointer</span><span class="params">()</span></span> *[<span class="number">4</span>]<span class="type">int</span> &#123;</span><br><span class="line">	arr := [<span class="number">4</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	<span class="keyword">return</span> &amp;arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">0xc000122040</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="指针作为函数的参数"><a href="#指针作为函数的参数" class="headerlink" title="指针作为函数的参数"></a>指针作为函数的参数</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x *<span class="type">int</span>, y *<span class="type">int</span>, z *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	*z = *x + *y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	x := <span class="number">100</span></span><br><span class="line">	y := <span class="number">200</span></span><br><span class="line">	<span class="keyword">var</span> z <span class="type">int</span></span><br><span class="line">	add(&amp;x, &amp;y, &amp;z) <span class="comment">//add函数的参数是三个指针</span></span><br><span class="line">	fmt.Println(z)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">300</span></span><br></pre></td></tr></table></figure>

<h2 id="type-1"><a href="#type-1" class="headerlink" title="type"></a>type</h2><p><strong>type</strong>关键字用于自定义新的类型或为现有类型创建别名。</p>
<h3 id="自定义新的类型"><a href="#自定义新的类型" class="headerlink" title="自定义新的类型"></a>自定义新的类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type 新类型名 基础类型</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Myint <span class="type">int</span>  <span class="comment">// 定义了一个新类型Myint</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> myint Myint</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, myint)</span><br><span class="line">	myint = <span class="number">10</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d&quot;</span>, myint)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">main.Myint</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<h3 id="为现有类型创建别名"><a href="#为现有类型创建别名" class="headerlink" title="为现有类型创建别名"></a>为现有类型创建别名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type 新类型名 = 已有类型</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Myint = <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> myint Myint</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, myint)</span><br><span class="line">	myint = <span class="number">10</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d&quot;</span>, myint)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>



<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h3><p>结构体是一种自定义数据类型，可以封装多个基本数据类型。</p>
<p>可以通过<code>struct</code>来定义自己的类型。</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> 类型名 <span class="keyword">struct</span> &#123;</span><br><span class="line">    字段名 字段类型</span><br><span class="line">    字段名 字段类型</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>示例：Person类</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义结构体</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name   <span class="type">string</span></span><br><span class="line">	age    <span class="type">int</span></span><br><span class="line">	gender <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> person Person  <span class="comment">// 结构体实例化</span></span><br><span class="line">	person.name = <span class="string">&quot;Bileton&quot;</span></span><br><span class="line">	person.age = <span class="number">21</span></span><br><span class="line">	person.gender = <span class="string">&quot;male&quot;</span></span><br><span class="line">	fmt.Println(person)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;Bileton <span class="number">21</span> male&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建对象的方式"><a href="#创建对象的方式" class="headerlink" title="创建对象的方式"></a>创建对象的方式</h3><p>这里以Person结构体为例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种，先声明，然后初始化</span></span><br><span class="line"><span class="keyword">var</span> person Person  </span><br><span class="line">person.name = <span class="string">&quot;Bileton&quot;</span></span><br><span class="line">person.age = <span class="number">21</span></span><br><span class="line">person.gender = <span class="string">&quot;male&quot;</span></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line">person := Person&#123;&#125;</span><br><span class="line">person.name = <span class="string">&quot;Bileton&quot;</span></span><br><span class="line">person.age = <span class="number">21</span></span><br><span class="line">person.gender = <span class="string">&quot;male&quot;</span></span><br><span class="line"><span class="comment">// 第三种</span></span><br><span class="line">person :=Person&#123;name: <span class="string">&quot;Bileton&quot;</span>, age: <span class="number">30</span>, gender: <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line"><span class="comment">// 第四种，这种方式需要参数顺序与结构体中的参数顺序匹配</span></span><br><span class="line">person := Person&#123;<span class="string">&quot;Bileton&quot;</span>, <span class="number">30</span>, <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h3><p><strong>结构体是值类型</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name   <span class="type">string</span></span><br><span class="line">	age    <span class="type">int</span></span><br><span class="line">	gender <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	person := Person&#123;<span class="string">&quot;Bileton&quot;</span>, <span class="number">30</span>, <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line">	personc := person</span><br><span class="line">	personc.gender = <span class="string">&quot;female&quot;</span></span><br><span class="line">	fmt.Println(person)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;Bileton <span class="number">30</span> male&#125; <span class="comment">// 修改personc不影响person</span></span><br></pre></td></tr></table></figure>



<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name   <span class="type">string</span></span><br><span class="line">	age    <span class="type">int</span></span><br><span class="line">	gender <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	person := Person&#123;<span class="string">&quot;Bileton&quot;</span>, <span class="number">30</span>, <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line">	personc := &amp;person <span class="comment">// personc是指针</span></span><br><span class="line">	(*personc).gender = <span class="string">&quot;female&quot;</span></span><br><span class="line">	fmt.Println(person)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;Bileton <span class="number">30</span> female&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结构体指针语法糖</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name   <span class="type">string</span></span><br><span class="line">	age    <span class="type">int</span></span><br><span class="line">	gender <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	person := Person&#123;<span class="string">&quot;Bileton&quot;</span>, <span class="number">30</span>, <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line">	personc := &amp;person <span class="comment">// personc是指针</span></span><br><span class="line">	personc.gender = <span class="string">&quot;female&quot;</span>  <span class="comment">// 语法糖写法</span></span><br><span class="line">	fmt.Println(person)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;Bileton <span class="number">30</span> female&#125;</span><br></pre></td></tr></table></figure>

<h3 id="匿名结构体"><a href="#匿名结构体" class="headerlink" title="匿名结构体"></a>匿名结构体</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 匿名结构体</span></span><br><span class="line">	per := <span class="keyword">struct</span> &#123;</span><br><span class="line">		name <span class="type">string</span></span><br><span class="line">		age  <span class="type">int</span></span><br><span class="line">	&#125;&#123;</span><br><span class="line">		name: <span class="string">&quot;Bileton&quot;</span>,</span><br><span class="line">		age:  <span class="number">30</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(per)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;Bileton <span class="number">30</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结构体匿名字段"><a href="#结构体匿名字段" class="headerlink" title="结构体匿名字段"></a>结构体匿名字段</h3><p>结构体的字段没有名字，但是不能有重复的数据类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="type">string</span></span><br><span class="line">	<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	per := Person&#123;<span class="string">&quot;Bileton&quot;</span>,<span class="number">21</span>&#125;</span><br><span class="line">	fmt.Println(per)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;Bileton <span class="number">21</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结构体嵌套"><a href="#结构体嵌套" class="headerlink" title="结构体嵌套"></a>结构体嵌套</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name   <span class="type">string</span></span><br><span class="line">	age    <span class="type">int</span></span><br><span class="line">	gender <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Person</span><br><span class="line">	school <span class="type">string</span></span><br><span class="line">	grade  <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	stu1 := <span class="built_in">new</span>(Student)</span><br><span class="line">	stu1.Person = Person&#123;<span class="string">&quot;JetBrains&quot;</span>, <span class="number">20</span>, <span class="string">&quot;M&quot;</span>&#125;</span><br><span class="line">	stu1.school = <span class="string">&quot;yangguangxiaoyuan&quot;</span></span><br><span class="line">	stu1.grade = <span class="string">&quot;2&quot;</span></span><br><span class="line">	fmt.Println(*stu1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;&#123;JetBrains <span class="number">20</span> M&#125; yangguangxiaoyuan <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结构体导出"><a href="#结构体导出" class="headerlink" title="结构体导出"></a>结构体导出</h3><p>在Go语言中，结构体的导出指的是如何让结构体及其字段在包（package）外部访问。Go 使用 <strong>大小写</strong> 来决定标识符的可见性：</p>
<ul>
<li><p><strong>大写开头的标识符</strong>（包括结构体、字段、函数、方法等）是<strong>导出的</strong>，可以被其他包访问。</p>
</li>
<li><p><strong>小写开头的标识符</strong>是<strong>未导出的</strong>，只能在当前包中使用。</p>
</li>
</ul>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>Go语言不是面向对象的语言，它采用了一种“简化版”的面向对象模型，强调组合而非继承，接口而非类型层次。</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>在Go语言中通过<strong>结构体嵌套</strong>以及匿名字段，字段提升来实现继承的。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name   <span class="type">string</span></span><br><span class="line">	age    <span class="type">int</span></span><br><span class="line">	gender <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Person <span class="comment">// 匿名字段</span></span><br><span class="line">	school <span class="type">string</span></span><br><span class="line">	grade  <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	stu1 := <span class="built_in">new</span>(Student)</span><br><span class="line">	stu1.name= <span class="string">&quot;JetBrains&quot;</span> <span class="comment">// 字段提升</span></span><br><span class="line">	stu1.age = <span class="number">20</span> <span class="comment">// 字段提升</span></span><br><span class="line">	stu1.gender = <span class="string">&quot;M&quot;</span></span><br><span class="line">	stu1.school = <span class="string">&quot;yangguangxiaoyuan&quot;</span></span><br><span class="line">	stu1.grade = <span class="string">&quot;2&quot;</span></span><br><span class="line">	fmt.Println(*stu1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;&#123;JetBrains <span class="number">20</span> M&#125; yangguangxiaoyuan <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>在Go语言中定义方法需要有一个额外的接受者，用于指定方法属于哪个类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为结构体定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span></span> SayHello() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Hello, my name is %s and I am %d years old.\n&quot;</span>, p.Name, p.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := Person&#123;Name: <span class="string">&quot;Alice&quot;</span>, Age: <span class="number">25</span>&#125;</span><br><span class="line">    p.SayHello() <span class="comment">// 调用方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法与函数的区别"><a href="#方法与函数的区别" class="headerlink" title="方法与函数的区别"></a>方法与函数的区别</h4><p><strong>函数</strong>：独立存在，不依附于任何类型。</p>
<p><strong>方法</strong>：绑定到某个具体类型，通过类型的实例调用。</p>
<h4 id="方法的继承"><a href="#方法的继承" class="headerlink" title="方法的继承"></a>方法的继承</h4><p>通过嵌套结构体，可以复用嵌套结构体的方法。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套结构体的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a Animal)</span></span> Speak() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;I am an animal.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    Animal <span class="comment">// 嵌套</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    d := Dog&#123;&#125;</span><br><span class="line">    d.Speak() <span class="comment">// 调用嵌套结构体的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h4><p>结构体嵌套和同名方法覆盖来实现方法的重写。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套结构体的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a Animal)</span></span> Speak() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;I am an animal.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    Animal <span class="comment">// 嵌套</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外层结构体定义了与嵌套结构体同名的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Dog)</span></span> Speak() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;I am a dog.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    d := Dog&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用外层结构体的方法</span></span><br><span class="line">    d.Speak() <span class="comment">// 输出: I am a dog.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用嵌套结构体的方法</span></span><br><span class="line">    d.Animal.Speak() <span class="comment">// 输出: I am an animal.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口是方法的集合。</p>
<p>接口只定义方法的签名，不实现具体的逻辑。</p>
<p>只要一个类型实现了接口中的所有方法，该类型就自动实现了接口。</p>
<p>在Go语言中，接口是引用类型。</p>
<p><strong>接口示例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> USB <span class="keyword">interface</span> &#123;</span><br><span class="line">	input() <span class="type">string</span></span><br><span class="line">	output(data <span class="type">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Mouse <span class="keyword">struct</span> &#123;</span><br><span class="line">	data <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Keyboard <span class="keyword">struct</span> &#123;</span><br><span class="line">	data <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Mouse)</span></span> input() <span class="type">string</span> &#123;</span><br><span class="line">	fmt.Print(<span class="string">&quot;Mouse input:&quot;</span>)</span><br><span class="line">	<span class="keyword">var</span> data <span class="type">string</span></span><br><span class="line">	_, err := fmt.Scanln(&amp;data)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Mouse)</span></span> output(data <span class="type">string</span>) &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;this is a Mouse&quot;</span>)</span><br><span class="line">	fmt.Println(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keyboard)</span></span> input() <span class="type">string</span> &#123;</span><br><span class="line">	fmt.Print(<span class="string">&quot;Keyboard input:&quot;</span>)</span><br><span class="line">	<span class="keyword">var</span> data <span class="type">string</span></span><br><span class="line">	_, err := fmt.Scanln(&amp;data)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keyboard)</span></span> output(data <span class="type">string</span>) &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;this is a Keyboard&quot;</span>)</span><br><span class="line">	fmt.Println(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	mouse := <span class="built_in">new</span>(Mouse)</span><br><span class="line">	mouse.data = mouse.input()</span><br><span class="line">	mouse.output(mouse.data)</span><br><span class="line">	keyboard := <span class="built_in">new</span>(Keyboard)</span><br><span class="line">	keyboard.data = keyboard.input()</span><br><span class="line">	keyboard.output(keyboard.data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>在Go语言中，多态是通过接口实现的。</p>
<p>接口可以让不同类型以统一的方式进行操作，从而实现了行为上的多态。</p>
<p>任何实现了接口的类型都可以作为接口类型的值，具体的实现行为由接口变量中存储的具体类型决定。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">interface</span> &#123;</span><br><span class="line">	eat()</span><br><span class="line">	sleep()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="type">string</span></span><br><span class="line">	age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cat Cat)</span></span> eat() &#123;</span><br><span class="line">	fmt.Println(cat.name, <span class="string">&quot;is eating&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cat Cat)</span></span> sleep() &#123;</span><br><span class="line">	fmt.Println(cat.name, <span class="string">&quot;is sleeping&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span></span> eat() &#123;</span><br><span class="line">	fmt.Println(dog.name, <span class="string">&quot;is eating&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span></span> sleep() &#123;</span><br><span class="line">	fmt.Println(dog.name, <span class="string">&quot;is sleeping&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	cat := <span class="built_in">new</span>(Cat)</span><br><span class="line">	cat.name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">	test(*cat)</span><br><span class="line">	dog := <span class="built_in">new</span>(Dog)</span><br><span class="line">	dog.name = <span class="string">&quot;Jack&quot;</span></span><br><span class="line">	test(*dog)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(a Animal)</span></span> &#123;</span><br><span class="line">	a.eat()</span><br><span class="line">	a.sleep()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Tom is eating</span><br><span class="line">Tom is sleeping</span><br><span class="line">Jack is eating</span><br><span class="line">Jack is sleeping</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h3><p>在Go语言中，空接口是一个非常特殊的接口类型，表示可以存储任何类型的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type interface&#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>空接口没有任何方法，因此所有类型都实现了空接口。</p>
</li>
<li><p>换句话说，任何类型的值都可以赋值给空接口。</p>
</li>
</ul>
<h4 id="any"><a href="#any" class="headerlink" title="any"></a>any</h4><p>any是空接口的别名，可以用来替代<code>interface&#123;&#125;</code>。</p>
<p><code>any</code> 的本质是一个简单的语法糖，表示空接口<code>interface&#123;&#125;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type any = interface&#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="接口类型断言"><a href="#接口类型断言" class="headerlink" title="接口类型断言"></a>接口类型断言</h4><p>在 Go 语言中，类型断言（Type Assertion）用于将接口类型的变量转换为具体的类型，从而访问存储在接口中的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">value, ok := x.(T)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>x</code> 是一个接口类型的变量。</p>
</li>
<li><p><code>T</code> 是要断言的具体类型。</p>
</li>
<li><p><code>value</code> 是转换后的具体类型值。</p>
</li>
<li><p><code>ok</code> 是一个布尔值，表示断言是否成功。</p>
<ul>
<li><p>如果成功，<code>ok</code> 为 <code>true</code>，并且 <code>value</code> 是断言后的值。</p>
</li>
<li><p>如果失败，<code>ok</code> 为 <code>false</code>，<code>value</code> 为零值。</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="string">&quot;Hello, Go!&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 尝试将 i 转换为字符串类型</span></span><br><span class="line">	<span class="keyword">if</span> str, ok := i.(<span class="type">string</span>); ok &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;The value is a string: %s\n&quot;</span>, str)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;The value is not a string&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">The value is a <span class="type">string</span>: Hello, Go!</span><br></pre></td></tr></table></figure>

<p><strong>类型断言与switch搭配使用</strong></p>
<p><code>.(type)</code>只能出现在<code>switch</code>语句中</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkType</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;The value is a string: %s\n&quot;</span>, v)</span><br><span class="line">	<span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;The value is an integer: %d\n&quot;</span>, v)</span><br><span class="line">	<span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;The value is a boolean: %t\n&quot;</span>, v)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Unknown type: %T\n&quot;</span>, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	checkType(<span class="string">&quot;Hello, Go!&quot;</span>)</span><br><span class="line">	checkType(<span class="number">123</span>)</span><br><span class="line">	checkType(<span class="literal">true</span>)</span><br><span class="line">	checkType(<span class="number">3.14</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">The value is a <span class="type">string</span>: Hello, Go!</span><br><span class="line">The value is an integer: <span class="number">123</span></span><br><span class="line">The value is a boolean: <span class="literal">true</span></span><br><span class="line">Unknown <span class="keyword">type</span>: <span class="type">float64</span></span><br></pre></td></tr></table></figure>



<h4 id="接口嵌套"><a href="#接口嵌套" class="headerlink" title="接口嵌套"></a>接口嵌套</h4><p>在 Go 语言中，接口嵌套是一种将多个接口组合为一个更大的接口的方式。</p>
<p>如果一个类型要实现嵌套接口，必须显式实现嵌套接口中包含的所有方法。</p>
<p><strong>示例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口 AA 和 BB</span></span><br><span class="line"><span class="keyword">type</span> AA <span class="keyword">interface</span> &#123;</span><br><span class="line">	testAA()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> BB <span class="keyword">interface</span> &#123;</span><br><span class="line">	testBB()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口CC，组合AA和BB</span></span><br><span class="line"><span class="keyword">type</span> CC <span class="keyword">interface</span> &#123;</span><br><span class="line">	AA</span><br><span class="line">	BB</span><br><span class="line">	testCC()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义结构体 Test，嵌套接口CC</span></span><br><span class="line"><span class="keyword">type</span> Test <span class="keyword">struct</span> &#123;</span><br><span class="line">	CC</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(test Test)</span></span> testAA() &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;This is testAA&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(test Test)</span></span> testBB() &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;This is testBB&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(test Test)</span></span> testCC() &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;This is testCC&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	test := <span class="built_in">new</span>(Test)</span><br><span class="line">	test.testAA()</span><br><span class="line">	test.testBB()</span><br><span class="line">	test.testCC()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> ttt AA = test <span class="comment">// 接口转换</span></span><br><span class="line">	ttt.testAA()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">This is testAA</span><br><span class="line">This is testBB</span><br><span class="line">This is testCC</span><br><span class="line">This is testAA</span><br></pre></td></tr></table></figure>

<h4 id="嵌套接口中出现同名方法"><a href="#嵌套接口中出现同名方法" class="headerlink" title="嵌套接口中出现同名方法"></a>嵌套接口中出现同名方法</h4><p>在 Go 语言中，如果嵌套的多个接口中定义了同名的方法，这种情况下，嵌套接口本身不会报错，但实现嵌套接口的类型需要对该同名方法提供唯一的实现。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Engine <span class="keyword">interface</span> &#123;</span><br><span class="line">	Start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Transmission <span class="keyword">interface</span> &#123;</span><br><span class="line">	Start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vehicle <span class="keyword">interface</span> &#123;</span><br><span class="line">	Engine</span><br><span class="line">	Transmission</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Car <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Car)</span></span> Start() &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Car is starting...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> v Vehicle = Car&#123;&#125;</span><br><span class="line">	v.Start() <span class="comment">// 调用 Start 方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Car is starting...</span><br></pre></td></tr></table></figure>

<h2 id="error错误"><a href="#error错误" class="headerlink" title="error错误"></a>error错误</h2><p>在 Go 语言中，<code>error</code> 是内置接口，专门用于表示和处理错误。</p>
<p>Go 语言提倡将错误作为普通值处理，通过显式返回错误对象来提高代码的安全性和健壮性。</p>
<p><strong>error的定义</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">error</span> <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	file, err := os.Open(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(file.Name())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">open test.txt: The system cannot find the file specified.</span><br></pre></td></tr></table></figure>

<p><strong>error示例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;errors&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	age_err := printAge(<span class="number">-1</span>)</span><br><span class="line">	<span class="keyword">if</span> age_err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(age_err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printAge</span><span class="params">(age <span class="type">int</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> age &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> errors.New(<span class="string">&quot;age must be greater than zero&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;age:&quot;</span>, age)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">age must be greater than zero</span><br></pre></td></tr></table></figure>

<h3 id="自实现error接口"><a href="#自实现error接口" class="headerlink" title="自实现error接口"></a>自实现error接口</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">type myError struct &#123;</span><br><span class="line">	code int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (e *myError) Error() string &#123;</span><br><span class="line">	return fmt.Sprintf(&quot;myError:%d&quot;, e.code)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	i, err := test(1)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(i)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func test(i int) (int, error) &#123;</span><br><span class="line">	switch i &#123;</span><br><span class="line">	case 1:</span><br><span class="line">		return 1, &amp;myError&#123;code: 1&#125;</span><br><span class="line">	case 2:</span><br><span class="line">		return 2, &amp;myError&#123;code: 2&#125;</span><br><span class="line">	case 3:</span><br><span class="line">		return 3, &amp;myError&#123;code: 3&#125;</span><br><span class="line">	case 4:</span><br><span class="line">		return 4, &amp;myError&#123;code: 4&#125;</span><br><span class="line">	default:</span><br><span class="line">		return 777, nil</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">myError:1    </span><br></pre></td></tr></table></figure>



<h1 id="Go语言小练习"><a href="#Go语言小练习" class="headerlink" title="Go语言小练习"></a>Go语言小练习</h1><h2 id="简单的-计算器"><a href="#简单的-计算器" class="headerlink" title="简单的+-*&#x2F;计算器"></a>简单的+-*&#x2F;计算器</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;This is a Calc Application&quot;</span>)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> num1, num2 <span class="type">int</span></span><br><span class="line">		fmt.Print(<span class="string">&quot;Please input your first num:&quot;</span>)</span><br><span class="line">		fmt.Scan(&amp;num1)</span><br><span class="line">		fmt.Print(<span class="string">&quot;Please input your second num:&quot;</span>)</span><br><span class="line">		fmt.Scan(&amp;num2)</span><br><span class="line">		fmt.Print(<span class="string">&quot;Please input your operation (+, -, *, /, exit):&quot;</span>)</span><br><span class="line">		<span class="keyword">var</span> operation <span class="type">string</span></span><br><span class="line">		fmt.Scan(&amp;operation)</span><br><span class="line">		<span class="keyword">switch</span> operation &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">			fmt.Printf(<span class="string">&quot;Result: %d\n&quot;</span>, num1+num2)</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">			fmt.Printf(<span class="string">&quot;Result: %d\n&quot;</span>, num1-num2)</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">			fmt.Printf(<span class="string">&quot;Result: %d\n&quot;</span>, num1*num2)</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">			<span class="keyword">if</span> num2 == <span class="number">0</span> &#123;</span><br><span class="line">				fmt.Println(<span class="string">&quot;Error: Division by zero is not allowed. Please try again.&quot;</span>)</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			result := <span class="type">float64</span>(num1) / <span class="type">float64</span>(num2)</span><br><span class="line">			fmt.Printf(<span class="string">&quot;Result: %.2f\n&quot;</span>, result)</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Println(<span class="string">&quot;Invalid operation. Please enter +, -, *, /, or exit.&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-9乘法表"><a href="#9-9乘法表" class="headerlink" title="9*9乘法表"></a>9*9乘法表</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= i; j++ &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;%d * %d = %d\t&quot;</span>, j, i, i*j)</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="打印菱形"><a href="#打印菱形" class="headerlink" title="打印菱形"></a>打印菱形</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CIR = <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Prt</span><span class="params">(xing, blank <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; blank; i++ &#123;</span><br><span class="line">		fmt.Print(<span class="string">&quot; &quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; xing; j++ &#123;</span><br><span class="line">		fmt.Print(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; blank; i++ &#123;</span><br><span class="line">		fmt.Print(<span class="string">&quot; &quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> xing = <span class="number">1</span></span><br><span class="line">	<span class="keyword">var</span> blank = (CIR - xing) / <span class="number">2</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= CIR; i++ &#123;</span><br><span class="line">		Prt(xing, blank)</span><br><span class="line">		<span class="keyword">if</span> i &lt; <span class="type">int</span>(CIR/<span class="number">2</span>)+<span class="number">1</span> &#123;</span><br><span class="line">			xing = xing + <span class="number">2</span></span><br><span class="line">			blank = blank - <span class="number">1</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			xing = xing - <span class="number">2</span></span><br><span class="line">			blank = blank + <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">   *   </span><br><span class="line">  ***  </span><br><span class="line"> ***** </span><br><span class="line">*******</span><br><span class="line"> ***** </span><br><span class="line">  ***  </span><br><span class="line">   *</span><br></pre></td></tr></table></figure>

<h2 id="递归求和"><a href="#递归求和" class="headerlink" title="递归求和"></a>递归求和</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSum</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> getSum(n<span class="number">-1</span>) + n</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(getSum(<span class="number">3</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="递归实现斐波那契数列"><a href="#递归实现斐波那契数列" class="headerlink" title="递归实现斐波那契数列"></a>递归实现斐波那契数列</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FBI</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> FBI(n<span class="number">-1</span>) + FBI(n<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(FBI(<span class="number">4</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> array = [<span class="number">10</span>]<span class="type">int</span>&#123;<span class="number">23</span>, <span class="number">45</span>, <span class="number">67</span>, <span class="number">12</span>, <span class="number">89</span>, <span class="number">34</span>, <span class="number">56</span>, <span class="number">78</span>, <span class="number">90</span>, <span class="number">11</span>&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">9</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">9</span>-i; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> array[j] &gt; array[j+<span class="number">1</span>] &#123;</span><br><span class="line">				array[j], array[j+<span class="number">1</span>] = array[j+<span class="number">1</span>], array[j]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(array)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">11</span> <span class="number">12</span> <span class="number">23</span> <span class="number">34</span> <span class="number">45</span> <span class="number">56</span> <span class="number">67</span> <span class="number">78</span> <span class="number">89</span> <span class="number">90</span>]</span><br></pre></td></tr></table></figure>

<h2 id="通过map和slice写一个简单的图书数据库，并可以通过书名或书号来查询书的位置"><a href="#通过map和slice写一个简单的图书数据库，并可以通过书名或书号来查询书的位置" class="headerlink" title="通过map和slice写一个简单的图书数据库，并可以通过书名或书号来查询书的位置"></a>通过map和slice写一个简单的图书数据库，并可以通过书名或书号来查询书的位置</h2><p>一个map存放一本书的信息和书的位置</p>
<p>一个切片存放一组书</p>
<p>一个切片存放所有的书</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	book1 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;wangluo&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;001&quot;</span>, <span class="string">&quot;position&quot;</span>: <span class="string">&quot;floor1&quot;</span>&#125;</span><br><span class="line">	book2 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;shujuku&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;002&quot;</span>, <span class="string">&quot;position&quot;</span>: <span class="string">&quot;floor1&quot;</span>&#125;</span><br><span class="line">	book3 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;mimaxue&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;003&quot;</span>, <span class="string">&quot;position&quot;</span>: <span class="string">&quot;floor2&quot;</span>&#125;</span><br><span class="line">	book4 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;C&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;004&quot;</span>, <span class="string">&quot;position&quot;</span>: <span class="string">&quot;floor2&quot;</span>&#125;</span><br><span class="line">	book5 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;005&quot;</span>, <span class="string">&quot;position&quot;</span>: <span class="string">&quot;floor3&quot;</span>&#125;</span><br><span class="line">	book6 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;006&quot;</span>, <span class="string">&quot;position&quot;</span>: <span class="string">&quot;floor3&quot;</span>&#125;</span><br><span class="line">	floor1 := <span class="built_in">append</span>(<span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">0</span>), book1, book2)</span><br><span class="line">	floor2 := <span class="built_in">append</span>(<span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">0</span>), book3, book4)</span><br><span class="line">	floor3 := <span class="built_in">append</span>(<span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">0</span>), book5, book6)</span><br><span class="line">	database := <span class="built_in">append</span>(<span class="built_in">make</span>([][]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">0</span>), floor1, floor2, floor3)</span><br><span class="line">	fmt.Println(<span class="string">&quot;Please select your query_style: (name or id)&quot;</span>)</span><br><span class="line">	<span class="keyword">var</span> queryStyle <span class="type">string</span></span><br><span class="line">	find_it := <span class="number">0</span></span><br><span class="line">	fmt.Scan(&amp;queryStyle)</span><br><span class="line">	<span class="keyword">if</span> queryStyle == <span class="string">&quot;name&quot;</span> &#123;</span><br><span class="line">		fmt.Print(<span class="string">&quot;input book name:&quot;</span>)</span><br><span class="line">		<span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line">		fmt.Scanln(&amp;name)</span><br><span class="line">		<span class="keyword">for</span> _, floor := <span class="keyword">range</span> database &#123;</span><br><span class="line">			<span class="keyword">for</span> _, book := <span class="keyword">range</span> floor &#123;</span><br><span class="line">				<span class="keyword">if</span> name == book[<span class="string">&quot;name&quot;</span>] &#123;</span><br><span class="line">					find_it = <span class="number">1</span></span><br><span class="line">					fmt.Println(<span class="string">&quot;You have the name of book [&quot;</span> + book[<span class="string">&quot;name&quot;</span>] + <span class="string">&quot;]&quot;</span>)</span><br><span class="line">					fmt.Print(<span class="string">&quot;name\t&quot;</span>, book[<span class="string">&quot;name&quot;</span>], <span class="string">&quot;\t&quot;</span>)</span><br><span class="line">					fmt.Print(<span class="string">&quot;id\t&quot;</span>, book[<span class="string">&quot;id&quot;</span>], <span class="string">&quot;\t&quot;</span>)</span><br><span class="line">					fmt.Print(<span class="string">&quot;position\t&quot;</span>, book[<span class="string">&quot;position&quot;</span>], <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">					<span class="keyword">break</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> find_it == <span class="number">1</span> &#123;</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> find_it == <span class="number">0</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;no this book!&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> queryStyle == <span class="string">&quot;id&quot;</span> &#123;</span><br><span class="line">		fmt.Print(<span class="string">&quot;input book id:&quot;</span>)</span><br><span class="line">		<span class="keyword">var</span> id <span class="type">string</span></span><br><span class="line">		fmt.Scanln(&amp;id)</span><br><span class="line">		<span class="keyword">for</span> _, floor := <span class="keyword">range</span> database &#123;</span><br><span class="line">			<span class="keyword">for</span> _, book := <span class="keyword">range</span> floor &#123;</span><br><span class="line">				<span class="keyword">if</span> id == book[<span class="string">&quot;id&quot;</span>] &#123;</span><br><span class="line">					find_it = <span class="number">1</span></span><br><span class="line">					fmt.Println(<span class="string">&quot;You have the name of book [&quot;</span> + book[<span class="string">&quot;name&quot;</span>] + <span class="string">&quot;]&quot;</span>)</span><br><span class="line">					fmt.Print(<span class="string">&quot;name\t&quot;</span>, book[<span class="string">&quot;name&quot;</span>], <span class="string">&quot;\t&quot;</span>)</span><br><span class="line">					fmt.Print(<span class="string">&quot;id\t&quot;</span>, book[<span class="string">&quot;id&quot;</span>], <span class="string">&quot;\t&quot;</span>)</span><br><span class="line">					fmt.Print(<span class="string">&quot;position\t&quot;</span>, book[<span class="string">&quot;position&quot;</span>], <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">					<span class="keyword">break</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> find_it == <span class="number">1</span> &#123;</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> find_it == <span class="number">0</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;no this book!&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Yout select is invalid!&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h1><h2 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h2><p>标准库包，用于格式化输入和输出。</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><ul>
<li><p><strong>Print</strong></p>
<p>直接输出内容。</p>
</li>
<li><p><strong>Printf</strong></p>
<p>格式化输出字符串</p>
</li>
<li><p><strong>Println</strong></p>
<p>会在输出内容末尾自动添加一个换行符。</p>
</li>
<li><p><strong>Errorf</strong></p>
<p>创建带格式的错误对象，返回一个 <code>error</code> 类型的值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Errorf</span><span class="params">(format <span class="type">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">error</span></span><br><span class="line"></span><br><span class="line">format：格式化字符串，与 fmt.Sprintf 的工作方式相同。</span><br><span class="line">a ...<span class="keyword">interface</span>&#123;&#125;：可变参数列表，用于插入格式化字符串中的占位符。</span><br><span class="line"><span class="type">error</span>：返回一个实现了 <span class="type">error</span> 接口的错误对象。</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Sprintf</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func Sprintf(format string, a ...interface&#123;&#125;) string</span><br><span class="line"></span><br><span class="line">format：格式化字符串，支持占位符（即格式化动词）。</span><br><span class="line">a ...interface&#123;&#125;：可变参数，用于替换占位符。</span><br><span class="line">string：返回一个格式化后的字符串。</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>获取用户的输入。</p>
<ul>
<li><p><strong>Scan</strong></p>
<p>从标准输入扫描文本，读取由空白符分隔的值保存到传递给本函数的参数中，换行符视为空白符。</p>
</li>
<li><p><strong>Scanf</strong></p>
<p>根据format参数指定的格式去读取由空白符分隔的值保存到传递给本函数的参数中。</p>
</li>
<li><p><strong>Scanln</strong></p>
<p>用于按行读取用户输入，并且按空白字符分隔输入数据，在读取到换行符（回车）时停止。</p>
</li>
</ul>
<h3 id="格式化占位符"><a href="#格式化占位符" class="headerlink" title="格式化占位符"></a>格式化占位符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%T  //数据类型</span><br><span class="line">%t 	//true或false</span><br><span class="line">%b	//二进制</span><br><span class="line">%d	//十进制</span><br><span class="line">%x	//十六进制</span><br><span class="line">%f	//浮点数</span><br><span class="line">%s	//字符串或[]byte</span><br><span class="line">%p	//指针</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go语言基础</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/2024/12/23/HTML/</url>
    <content><![CDATA[<h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><h2 id="安装VSCode"><a href="#安装VSCode" class="headerlink" title="安装VSCode"></a>安装VSCode</h2><p><code>VSCode</code>是一个文本编辑器，使用它来编辑<code>HTML</code>代码。</p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><ul>
<li><p><strong>open in browser</strong></p>
<p>右键点击 HTML 文件，通过插件直接在浏览器中打开HTML文件。</p>
<p>快捷键：<code>Alt+B</code></p>
</li>
</ul>
<h2 id="安装谷歌浏览器"><a href="#安装谷歌浏览器" class="headerlink" title="安装谷歌浏览器"></a>安装谷歌浏览器</h2><p>通过浏览器预览和调试<code>HTML</code>文件。</p>
<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>HTML——HyperText Markup Language（超文本标记语言）</p>
<ul>
<li>超文本——链接</li>
<li>标记——标签</li>
</ul>
<h2 id="标签语法"><a href="#标签语法" class="headerlink" title="标签语法"></a>标签语法</h2><ul>
<li>标签成对出现，中间包裹内容</li>
<li><code>&lt;&gt;</code>存放标签名</li>
<li>结束标签的标签名前需要加<code>/</code></li>
</ul>
<h2 id="HTML的基本结构"><a href="#HTML的基本结构" class="headerlink" title="HTML的基本结构"></a>HTML的基本结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        网页主体</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>html</code>：整个网页</li>
<li><code>head</code>：网页头部</li>
<li><code>body</code>：网页主体</li>
<li><code>title</code>：网页标题</li>
</ul>
<p><strong>VSCode中生成HTML基本结构的快捷方式</strong></p>
<ul>
<li><p>英文状态下的<code>!</code>加上<code>Enter</code>或<code>Tab</code>键</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="标签之间的关系"><a href="#标签之间的关系" class="headerlink" title="标签之间的关系"></a>标签之间的关系</h2><ul>
<li><strong>嵌套</strong></li>
<li><strong>并列</strong></li>
</ul>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- xxx --&gt;</span></span><br></pre></td></tr></table></figure>

<p>注释标签可以通过快捷键<code>Ctrl+/</code>生成</p>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>这是五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>这是六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：段落独占一行，段落之间有间隙。</p>
<h3 id="换行和水平线"><a href="#换行和水平线" class="headerlink" title="换行和水平线"></a>换行和水平线</h3><p>换行和水平线标签都是单标签。</p>
<ul>
<li><p><strong>换行</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>水平线</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="文本格式标签"><a href="#文本格式标签" class="headerlink" title="文本格式标签"></a>文本格式标签</h3><ul>
<li><p><strong>加粗</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>这是加粗的内容<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>这是加粗的内容<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>倾斜</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>这是倾斜的内容<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>这是倾斜的内容<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>下划线</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>这是添加下划线的内容<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>这是添加下划线的内容<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除线</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>这是添加删除线的内容<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>这是添加删除线的内容<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h3><p><strong>基本语法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片的路径&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;替代文本&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"># src: 必需属性，用于指定图片的路径，可以是相对路径或绝对路径。</span><br><span class="line"># alt: 可选属性，用于在图片无法加载时显示替代文本。</span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<ul>
<li><p><code>width</code>和<code>height</code></p>
<p>用于设置图片的宽度和高度，可以是像素值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;example.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>title</code></p>
<p>为图片提供提示文本，当鼠标悬停在图片上时显示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;example.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是示例图片&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>loading</code></p>
<p>控制图片的加载方式，可选值有：</p>
<ul>
<li><p><code>lazy</code>（懒加载，仅当用户滚动到图片时才加载）</p>
</li>
<li><p><code>eager</code>（默认行为，立即加载）</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;example.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h3><p>超链接可以用于从一个页面跳转到另一个页面，也可以跳转到同一页面的特定位置、下载资源或触发其他行为。</p>
<p><strong>基本语法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;链接地址&quot;</span> &gt;</span>链接文本或内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># href：必须属性，指定超链接的目标地址。</span><br><span class="line"># 链接文本或内容：用户点击的内容，可以是文字、图片或其他元素。</span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<ul>
<li><p><strong>target</strong></p>
<p>定义链接的打开方式。</p>
<ul>
<li><code>_self</code>：在当前窗口打开（默认值）。</li>
<li><code>_blank</code>：在新窗口或标签页打开。</li>
</ul>
</li>
<li><p><strong>title</strong></p>
<p>提供额外信息，鼠标悬停时显示提示文本。</p>
</li>
<li><p><strong>download</strong></p>
<p>提供下载功能，将链接目标作为文件下载。</p>
</li>
</ul>
<p><strong>注意事项</strong></p>
<p><code>href</code> 属性不能为空：如果未指定值，链接会变为无效。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>点击无效链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签"></a>音频标签</h3><p>用于在网页中嵌入音频文件。</p>
<p><strong>基本语法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;audio.mp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># src： 指定音频文件的路径。</span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<ul>
<li><p><strong>controls</strong></p>
<p>添加音频播放器控件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;audio.mp3&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>autoplay</strong></p>
<p>自动播放（页面加载完成后）。</p>
<p>为了防止干扰用户体验，大多数浏览器会禁止自动播放，除非静音或用户交互后允许。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;audio.mp3&quot;</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>loop</strong></p>
<p>循环播放。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;audio.mp3&quot;</span> <span class="attr">loop</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h3><p>用于在网页中嵌入视频文件。</p>
<p><strong>基本语法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># src：指定视频文件的路径。</span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<ul>
<li><p><strong>controls</strong></p>
<p>显示视频控件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>loop</strong></p>
<p>循环播放。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">loop</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>muted</strong></p>
<p>默认静音播放。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">muted</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>autoplay</strong></p>
<p>自动播放（页面加载完成后）。</p>
<p>注意：大多数浏览器要求视频自动播放时必须静音。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">muted</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>使用<code>&lt;ul&gt;</code>标签定义无序列表，使用<code>&lt;li&gt;</code>标签定义每个列表项。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>橙子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>使用<code>&lt;ol&gt;</code>标签定义有序列表，使用<code>&lt;li&gt;</code>标签定义每个列表项。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>修改序号样式</strong></p>
<p>可以通过<code>type</code>属性修改有序列表的样式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">type=&quot;1&quot;：数字（默认）</span><br><span class="line">type=&quot;A&quot;：大写字母</span><br><span class="line">type=&quot;a&quot;：小写字母</span><br><span class="line">type=&quot;I&quot;：大写罗马数字</span><br><span class="line">type=&quot;i&quot;：小写罗马数字</span><br></pre></td></tr></table></figure>

<h3 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h3><p>使用 <code>&lt;dl&gt;</code>标签定义列表，使用<code>&lt;dt&gt;</code>标签定义标题，使用<code>&lt;dd&gt;</code>标签定义描述。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>超文本标记语言<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>层叠样式表<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>一种脚本语言，用于开发动态交互的网页。<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ul>
<li><code>&lt;dl&gt;</code>里面只能包含<code>&lt;dl&gt;</code>和<code>&lt;dd&gt;</code>。</li>
<li><code>&lt;dl&gt;</code>和<code>&lt;dd&gt;</code>里面可以包含任意内容。</li>
</ul>
<h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><p><strong>基本表格结构</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>职业<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>工程师<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>30<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>设计师<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;table&gt;</code>定义表格，<code>&lt;tr&gt;</code>定义行，<code>th</code>定义表头单元格，<code>&lt;td&gt;</code>定义数据单元格。</p>
<p>在网页中，表格默认没有边框线，使用<strong>border</strong>属性可以为表格添加边框线。</p>
<p><strong>表格结构标签</strong></p>
<ul>
<li><code>&lt;thead&gt;</code>：定义表格头部。</li>
<li><code>&lt;tbody&gt;</code>：定义表格主体。</li>
<li><code>&lt;tfoot&gt;</code>：定义表格尾部。</li>
</ul>
<h3 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h3><p><strong>合并行</strong>（纵向合并）</p>
<p>使用 <code>rowspan</code> 属性，合并的单元格数由 <code>rowspan</code> 的值决定。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李华<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>19<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>97<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;td&gt;97&lt;/td&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/23/HTML/1.jpg"></p>
<p><strong>合并列</strong>（横向合并）</p>
<p>使用<code>colspan</code>属性，合并的单元格数由 <code>colspan</code> 的值决定。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李华<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>19<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>97<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;td&gt;97&lt;/td&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>总结<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/23/HTML/2.jpg"></p>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="type属性"><a href="#type属性" class="headerlink" title="type属性"></a>type属性</h4><p>通过<code>type</code>属性定义输入框的类型</p>
<ul>
<li><p><strong>text</strong></p>
<p>文本输入框 (<code>type=&quot;text&quot;</code>)</p>
</li>
<li><p><strong>password</strong></p>
<p>密码输入框 (<code>type=&quot;password&quot;</code>)</p>
<p>输入的内容会被掩盖（通常显示为星号或圆点）。</p>
</li>
<li><p><strong>radio</strong></p>
<p>单选按钮 (<code>type=&quot;radio&quot;</code>)</p>
<p>同一组单选按钮的 <code>name</code> 必须相同，用户只能选择一个。</p>
</li>
<li><p><strong>checkbox</strong></p>
<p>复选框 (<code>type=&quot;checkbox&quot;</code>)</p>
</li>
<li><p><strong>file</strong></p>
<p>文件上传框 (<code>type=&quot;file&quot;</code>)</p>
</li>
</ul>
<h4 id="placeholder属性"><a href="#placeholder属性" class="headerlink" title="placeholder属性"></a>placeholder属性</h4><p>通过<code>placeholder</code>属性作为输入框的占位提示信息，用户未输入时显示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="name属性"><a href="#name属性" class="headerlink" title="name属性"></a>name属性</h4><p>主要用于标识表单字段的名称，在表单提交时，<code>name</code> 属性的值会作为键，输入的值作为对应的值提交。</p>
<h4 id="checked属性"><a href="#checked属性" class="headerlink" title="checked属性"></a>checked属性</h4><p><code>checked</code> 属性是 HTML 表单元素中专门用于 <strong>单选按钮（<code>&lt;input type=&quot;radio&quot;&gt;</code>）</strong> 和 <strong>复选框（<code>&lt;input type=&quot;checkbox&quot;&gt;</code>）</strong> 的布尔属性。它用来预先设置某个选项为“选中”状态。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;group_name&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;field_name&quot;</span> <span class="attr">checked</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="multiple属性"><a href="#multiple属性" class="headerlink" title="multiple属性"></a>multiple属性</h4><p><code>multiple</code> 属性允许用户在某些输入元素中选择多个值。它通常用于文件上传、选择框和电子邮件地址输入。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h3><p>使用<code>&lt;select&gt;</code>定义下拉菜单，使用<code>&lt;option&gt;</code>定义下拉菜单中的每个选项，在 <code>&lt;option&gt;</code> 中添加 <code>selected</code> 属性可以设置默认选中值，如果未设置则默认第一个选项是默认选中值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;field_name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;field_id&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;option1&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;option2&quot;</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;option3&quot;</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文本域标签"><a href="#文本域标签" class="headerlink" title="文本域标签"></a>文本域标签</h3><p>文本域标签用于创建多行的文本输入框，用户可以在其中输入较长的文本内容，如留言、评论等。</p>
<p>使用<code>&lt;textarea&gt;</code>定义文本域，标签之间的内容是默认显示的初始文本。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;field_name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;field_id&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;行数&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;列数&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h3><p><code>&lt;label&gt;</code> 标签用于为 HTML 表单元素定义标签。它可以通过 <code>for</code> 属性绑定到一个表单控件，或者直接将表单控件嵌套在 <code>&lt;label&gt;</code> 标签内。</p>
<p><strong>基本语法</strong></p>
<ul>
<li><p><strong>使用for属性绑定控件</strong></p>
<p><code>for</code> 属性的值需要与目标表单控件的 <code>id</code> 一致。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>嵌套控件</strong></p>
<p>直接将表单控件嵌套在 <code>&lt;label&gt;</code> 标签内。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">  密码：</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p>按钮主要用于用户交互，可以触发表单提交、运行 JavaScript 脚本，或者执行其他操作。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>普通按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<ul>
<li><p><strong>button</strong></p>
<p>普通按钮，默认没有功能，配合JavaScript使用。</p>
</li>
<li><p><strong>submit</strong></p>
<p>点击后提交数据到后台。</p>
</li>
<li><p><strong>reset</strong></p>
<p>重置按钮，点击后将表单控件恢复默认值。</p>
</li>
</ul>
<h3 id="form标签"><a href="#form标签" class="headerlink" title="form标签"></a>form标签</h3><p><code>&lt;form&gt;</code> 标签是用于创建 HTML 表单的容器。表单用于收集用户输入，并通过提交将数据发送到服务器进行处理。</p>
<p><strong>基本语法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;提交地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;请求方法&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 表单控件，例如文本框、按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<ul>
<li><p><strong>action</strong></p>
<p>表单提交时的目标 URL，表示数据提交到的服务器地址。</p>
</li>
<li><p><strong>method</strong></p>
<p>表单数据提交的方法，常用值为 <code>GET</code> 和 <code>POST</code>。</p>
</li>
</ul>
<h2 id="布局标签"><a href="#布局标签" class="headerlink" title="布局标签"></a>布局标签</h2><h3 id="div标签"><a href="#div标签" class="headerlink" title="div标签"></a>div标签</h3><p>通用的块级容器，用于分组 HTML 元素，没有语义，占据一行。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  这是一个 div 容器。</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="span标签"><a href="#span标签" class="headerlink" title="span标签"></a>span标签</h3><p>通用的行内容器，用于分组文本或其他行内元素，没有语义，不会独占一行。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  这是一个<span class="tag">&lt;<span class="name">span</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 的单词。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h2><table>
<thead>
<tr>
<th>显示结果</th>
<th>描述</th>
<th>实体名称</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>空格</td>
<td><code>&amp;nbsp;</code></td>
</tr>
<tr>
<td>&lt;</td>
<td>小于号</td>
<td><code>&amp;lt;</code></td>
</tr>
<tr>
<td>&gt;</td>
<td>大于号</td>
<td><code>&amp;gt;</code></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>IDA使用指南</title>
    <url>/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h1><h2 id="工具栏（Toolbars）"><a href="#工具栏（Toolbars）" class="headerlink" title="工具栏（Toolbars）"></a>工具栏（Toolbars）</h2><p>工具栏包含常用操作工具。<br>可在<code>View-&gt;Toobars</code>里显示或隐藏工具栏。</p>
<h2 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h2><p>导航栏是被加载⽂件地址空间的线性视图。</p>
<h2 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h2><h3 id="Edit"><a href="#Edit" class="headerlink" title="Edit"></a>Edit</h3><h4 id="保存patch文件"><a href="#保存patch文件" class="headerlink" title="保存patch文件"></a>保存patch文件</h4><p><code>Edit-&gt;Patch Program-&gt;Apply patches to input file</code></p>
<h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h3><h4 id="在文本模式下显示机器指令："><a href="#在文本模式下显示机器指令：" class="headerlink" title="在文本模式下显示机器指令："></a>在文本模式下显示机器指令：</h4><p>在菜单栏找到Options-&gt;General，有一个选项<code>Number of opcode bytes</code>即操作码字节数，根据汇编指令长度来设置，如Arm指令长度是4字节，Thumb指令长度是2字节。</p>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/13.jpg"></p>
<h4 id="重新分析程序"><a href="#重新分析程序" class="headerlink" title="重新分析程序"></a>重新分析程序</h4><p>在菜单栏找到Options-&gt;General-&gt;Analysis</p>
<p>点击如下选项重新分析程序</p>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/15.jpg"></p>
<p>在IDA底部边框右键也会出现<code>Reanalyze program</code>选项</p>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/16.jpg"></p>
<h1 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h1><h2 id="反汇编窗口（IDA-View）"><a href="#反汇编窗口（IDA-View）" class="headerlink" title="反汇编窗口（IDA-View）"></a>反汇编窗口（IDA-View）</h2><p>反汇编窗口有两种显示模式，文本模式和图形模式，通过<code>空格键</code>来切换。  </p>
<ul>
<li><strong>文本模式</strong><br>显示指令地址、机器码。  </li>
<li><strong>图形模式</strong><br>观察控制流。<br>可通过<code>Ctrl+鼠标滚轮</code>进行缩放。</li>
</ul>
<p>在文本模式下显示机器指令：</p>
<h2 id="伪代码窗口（Pseudocode）"><a href="#伪代码窗口（Pseudocode）" class="headerlink" title="伪代码窗口（Pseudocode）"></a>伪代码窗口（Pseudocode）</h2><ul>
<li>将反汇编代码转换为伪代码，按下<code>Tab键</code>或<code>F5</code>。</li>
<li>将伪代码转换为反汇编代码，按下<code>Tab键</code>。</li>
<li>在伪代码中根据光标位置按下<code>Tab键</code>可以快速定位到对应语句的汇编代码。</li>
</ul>
<h2 id="函数窗口（Functions）"><a href="#函数窗口（Functions）" class="headerlink" title="函数窗口（Functions）"></a>函数窗口（Functions）</h2><p>显示了当前分析的二进制文件中被识别的所有函数。</p>
<h2 id="输出窗口（Output）"><a href="#输出窗口（Output）" class="headerlink" title="输出窗口（Output）"></a>输出窗口（Output）</h2><p>显⽰的是 IDA 输出的信息。</p>
<ul>
<li><code>Ctrl+X</code>：这个快捷键在<code>output</code>窗口中的作用是清空当前窗口的内容。</li>
</ul>
<h2 id="字符串表（Strings）"><a href="#字符串表（Strings）" class="headerlink" title="字符串表（Strings）"></a>字符串表（Strings）</h2><p>字符串表会显示IDA所识别出的字符串。</p>
<ul>
<li>打开字符串表窗口的快捷键<code>Shift+F12</code>。</li>
<li>在菜单中打开 <code>View</code>-&gt;<code>Open Subviews</code>-&gt;<code>Strings</code>。</li>
<li>双击字符串会跳转到字符串所在的数据窗口的位置或反汇编窗口的位置（取决于上一步打开的窗口）。</li>
</ul>
<h2 id="数据窗口（Hex-View）"><a href="#数据窗口（Hex-View）" class="headerlink" title="数据窗口（Hex View）"></a>数据窗口（Hex View）</h2><p>以hexdump形式显示程序的数据。</p>
<ul>
<li>菜单中的位置 <code>View</code>-&gt;<code>Open subviews</code>-&gt;<code>Hex dump</code>。</li>
<li>通过<code>F2</code>可以进入编辑模式修改数据，再次按下<code>F2</code>退出编辑模式。</li>
</ul>
<h2 id="交叉引用（XREF）"><a href="#交叉引用（XREF）" class="headerlink" title="交叉引用（XREF）"></a>交叉引用（XREF）</h2><p>交叉引用（XREF，Cross Reference）是一个非常重要的工具，用于追踪某个地址、变量或函数在程序中的使用情况。它可以帮助我们快速找到某个符号、数据或函数是如何以及在何处被引用的。</p>
<ul>
<li>将光标定位到要进行交叉引用的符号，按下<code>x</code>键打开交叉引用的窗口。</li>
</ul>
<p><strong>交叉引用分类</strong></p>
<ul>
<li>代码交叉引用  </li>
<li>数据交叉引用</li>
</ul>
<h2 id="Xref-Graph"><a href="#Xref-Graph" class="headerlink" title="Xref Graph"></a>Xref Graph</h2><p>函数调用关系及引用流向</p>
<h3 id="Xref-graph-to"><a href="#Xref-graph-to" class="headerlink" title="Xref graph to"></a>Xref graph to</h3><ul>
<li>显示当前函数或地址 “被哪些位置调用或引用” 的关系图。</li>
<li>用于追踪调用者（Callers），即谁调用了当前函数或谁引用了该地址。</li>
</ul>
<p><strong>使用方式</strong><br>选中一个函数或地址后，右键在菜单中选择<code>Xrefs graph to...</code>。</p>
<h3 id="Xref-graph-from"><a href="#Xref-graph-from" class="headerlink" title="Xref graph from"></a>Xref graph from</h3><ul>
<li>显示当前函数或地址 “调用或引用了哪些目标” 的关系图。</li>
<li>用于追踪被调用者（Callees），即当前函数或代码引用了哪些其他函数或地址。</li>
</ul>
<p><strong>使用方式</strong><br>选中一个函数或地址后，右键在菜单中选择 <code>Xrefs graph from...</code>。</p>
<h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><ul>
<li><code>F5</code>：生成伪代码，刷新伪代码</li>
<li><code>ESC</code>：后退，回到上一步操作的视图</li>
</ul>
<h2 id="窗口打开"><a href="#窗口打开" class="headerlink" title="窗口打开"></a>窗口打开</h2><ul>
<li><code>x</code>：交叉引用窗口</li>
<li><code>Shift + f12</code>：字符串窗口</li>
<li><code>alt + T</code>：文本搜索窗口（速度慢）</li>
<li><code>G</code>：地址跳转窗口</li>
<li><code>Alt + I</code>：快速查找二进制文件中与某个特定值相关的指令或数据</li>
<li><code>Alt + B</code>：直接在二进制文件中查找特定的字节序列</li>
<li><code>Ctrl+S</code>：打开<code>Segments</code>窗口</li>
<li><code>Shift+F7</code>：打开<code>Segments</code>窗口</li>
</ul>
<h2 id="代码转换"><a href="#代码转换" class="headerlink" title="代码转换"></a>代码转换</h2><ul>
<li><code>N</code>：修改变量名</li>
<li><code>Y</code>：修改变量的类型</li>
<li><code>Shift + Del</code>： 删除返回值</li>
<li><code>\</code> ：隐藏与显示casts（类型）</li>
<li><code>-</code> ：代码折叠（Collapse declarations）</li>
<li><code>+</code> ：代码展开（Collapse declarations）</li>
<li><code>/</code> ：行注释</li>
<li><code>Ctrl+Alt+num</code>：Lock highlight，添加高亮标记（注意：<code>num</code>是一个数字）</li>
</ul>
<h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><ul>
<li><p><code>A</code>：把数据转换为<code>&quot;\0&quot;</code>结尾的字符串</p>
</li>
<li><p><code>U</code>：取消定义（Undefine）<br>可取消函数、代码或数据的定义。取消定义后，其基础字节将作为原始字节值重新格式化。</p>
</li>
<li><p><code>C</code>：反汇编一组未定义的字节</p>
</li>
<li><p><code>D</code>：将代码转换为数据  </p>
<p><strong>整数的数据类型</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db // 1字节</span><br><span class="line">dw // 2字节</span><br><span class="line">dd // 4字节</span><br><span class="line">dq // 8字节</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>P</code>：在代码数据起始位置，按下<code>P</code>键，识别函数（注意光标需要位于起始位置）。</p>
</li>
<li><p><code>H</code>：在十进制数据和十六进制数据之间切换</p>
</li>
<li><p><code>R</code>：将数据切换为char类型</p>
</li>
</ul>
<h1 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h1><h2 id="调试器"><a href="#调试器" class="headerlink" title="调试器"></a>调试器</h2><h3 id="配置调试信息"><a href="#配置调试信息" class="headerlink" title="配置调试信息"></a>配置调试信息</h3><p>调试器选择完毕，打开Debugger菜单，选择<code>Process options</code><br>配置调试器在加载目标程序时的运行参数和环境  </p>
<ul>
<li><code>Application</code>：指定要调试的目标程序路径</li>
<li><code>Input file</code>：指定程序运行时需要的输入文件路径</li>
<li><code>Parameters</code>：为目标程序提供运行时的命令行参数。</li>
<li><code>Hostname</code>和<code>Port</code>：填写主机名和端口</li>
</ul>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/5.jpg"></p>
<h3 id="Win本地调试"><a href="#Win本地调试" class="headerlink" title="Win本地调试"></a>Win本地调试</h3><p>本地调试无需配置server文件。</p>
<h3 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h3><p>在IDA的安装目录下，有一个dbgsrv文件夹，里面是各个系统架构的远程调试server文件。</p>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/3.jpg"></p>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>把linux_server拷贝到Linux主机上，添加可执行权限，然后启动</p>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/4.jpg"></p>
<h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><p>把android_server远程调试文件push到手机上的&#x2F;data&#x2F;local&#x2F;tmp目录下，改名字为as  </p>
<ul>
<li><p>添加可执行权限</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x as</span><br></pre></td></tr></table></figure></li>
<li><p>启动as</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./as -p 1234  //-p选项用于设置端口</span><br></pre></td></tr></table></figure>
<p>  <img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/6.jpg"></p>
</li>
<li><p>端口转发</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb forward tcp:1234 tcp:1234</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h2><h3 id="Start-Process"><a href="#Start-Process" class="headerlink" title="Start Process"></a>Start Process</h3><p>Start Process 是指直接从 IDA 中启动一个可执行文件（如 .exe 程序）进行调试。IDA 会加载目标文件，并启动一个新的调试会话。</p>
<h3 id="Attach-to-Process"><a href="#Attach-to-Process" class="headerlink" title="Attach to Process"></a>Attach to Process</h3><p>Attach to Process 是指将调试器附加到一个已经运行的进程。IDA 不会启动新的程序，而是连接到当前运行中的目标进程，实时分析其运行状态。</p>
<h2 id="调试窗口"><a href="#调试窗口" class="headerlink" title="调试窗口"></a>调试窗口</h2><h3 id="General-registers窗口（寄存器）"><a href="#General-registers窗口（寄存器）" class="headerlink" title="General registers窗口（寄存器）"></a>General registers窗口（寄存器）</h3><p>&emsp;&emsp;寄存器内容在相关寄存器右边显示，后面显示对每个寄存器的说明，最右边的列中显示CPU标志位。  </p>
<ul>
<li>鼠标右键单击一个寄存器或标志位，会出现一个modify选项，可以更改寄存器或CPU标志位的值。  </li>
<li>如果一个寄存器指向一个有效的地址，那么该寄存器值右侧会出现一个直角箭头并有突出显示，单击箭头，会跳转到相应的内存位置。<br><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/2.jpg"></li>
</ul>
<h3 id="Modules窗口（模块）"><a href="#Modules窗口（模块）" class="headerlink" title="Modules窗口（模块）"></a>Modules窗口（模块）</h3><p>Modules窗⼝显⽰所有加载到进程内存空间中的可执⾏⽂件和动态链接库。  </p>
<ul>
<li>双击任何模块名称，将打开该模块导出的符号列表，双击符号，进行跳转。</li>
</ul>
<h3 id="Threads窗口（线程）"><a href="#Threads窗口（线程）" class="headerlink" title="Threads窗口（线程）"></a>Threads窗口（线程）</h3><p>Threads 窗口会列出当前进程中所有活动的线程，并显示每个线程的详细信息。</p>
<h3 id="Stack-view窗口（堆栈）"><a href="#Stack-view窗口（堆栈）" class="headerlink" title="Stack view窗口（堆栈）"></a>Stack view窗口（堆栈）</h3><p>显示当前线程调用堆栈的内容，用于观察函数调用之间的堆栈数据变化。</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li><code>F2</code>：设置断点</li>
<li><code>F7</code>：步入</li>
<li><code>F8</code>：步过</li>
<li><code>F9</code>：启动调试，及运行至下一断点</li>
<li><code>Ctrl+F7</code>：指定到当前函数的返回后位置</li>
<li><code>F4</code>：运行至光标处</li>
<li><code>Ctrl+N</code>：set IP，可以直接修改程序的执行路径。强制代码从光标位置开始执行</li>
</ul>
<h2 id="硬件断点"><a href="#硬件断点" class="headerlink" title="硬件断点"></a>硬件断点</h2><p>&emsp;&emsp;硬件断点用于在调试过程中实时监控内存区域的访问，硬件断点不会修改目标程序的代码，而是通过硬件的调试功能直接监控特定的内存地址或代码区域。</p>
<h3 id="设置硬件断点"><a href="#设置硬件断点" class="headerlink" title="设置硬件断点"></a>设置硬件断点</h3><p>先设置普通断点，右键选择<code>Breakpoint settints</code>，勾选<code>Hardware</code>，选择硬件断点模式，勾选<code>Execute</code></p>
<p>硬件断点模式</p>
<ul>
<li><code>Read</code>：断点地址被读取时命中</li>
<li><code>Write</code>：断点地址被写入时命中</li>
<li><code>Execute</code>：断点地址被执行时命中</li>
<li><code>Size</code>：地址范围的大小</li>
</ul>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/7.jpg"></p>
<h2 id="内存断点"><a href="#内存断点" class="headerlink" title="内存断点"></a>内存断点</h2><p>&emsp;&emsp;内存断点（也称为 <strong>memory breakpoint</strong> 或数据断点）是用于监控特定内存区域访问的工具。它可以捕获对目标内存地址的 <strong>读取</strong>、<strong>写入</strong> 或 <strong>执行</strong> 操作。</p>
<h3 id="设置内存断点"><a href="#设置内存断点" class="headerlink" title="设置内存断点"></a>设置内存断点</h3><p>设置普通断点，右键选择<code>Breakpoint settints</code>，勾选<code>Hardware</code>，选择硬件断点模式，勾选<code>Read</code>和<code>Write</code></p>
<h2 id="API-断点"><a href="#API-断点" class="headerlink" title="API 断点"></a>API 断点</h2><p>&emsp;&emsp;API 断点是设置在目标程序调用的 API 函数入口或关键位置的断点，目的是拦截程序调用该函数时的执行流程。</p>
<h3 id="设置API断点"><a href="#设置API断点" class="headerlink" title="设置API断点"></a>设置API断点</h3><p>设置方式与设置普通断点一致。</p>
<h1 id="IDA-Trace"><a href="#IDA-Trace" class="headerlink" title="IDA-Trace"></a>IDA-Trace</h1><h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><p>用于记录程序在运行过程中执行的指令、访问的内存、调用的函数或其他关键事件。</p>
<h3 id="启用trace"><a href="#启用trace" class="headerlink" title="启用trace"></a>启用trace</h3><p>启动动态调试之后进行trace</p>
<p>打开<code>Debugger-&gt;Tracing-&gt;Tracing Options</code>，配置trace选项。</p>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/9.jpg"></p>
<p>选择trace方式</p>
<ul>
<li>Instruction tracing：跟踪指令执行。</li>
<li>Function tracing：跟踪函数调用。</li>
<li>Basic block tracing：跟踪基本块。</li>
</ul>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/10.jpg"></p>
<p>打开Tracing window，可查看trace到的内容。</p>
<h1 id="IDA插件"><a href="#IDA插件" class="headerlink" title="IDA插件"></a>IDA插件</h1><h2 id="LazyIDA-py"><a href="#LazyIDA-py" class="headerlink" title="LazyIDA.py"></a>LazyIDA.py</h2><p><a href="https://github.com/P4nda0s/LazyIDA">https://github.com/P4nda0s/LazyIDA</a>  </p>
<h3 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h3><ul>
<li>将数据转换为python&#x2F;C的数组形式</li>
<li>选中数据后，右键，选择Convert，然后选择相应的格式。（注意：这里选中的地址要包含所需地址范围的下一地址）</li>
</ul>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/1.jpg"></p>
<h3 id="Paste-Data"><a href="#Paste-Data" class="headerlink" title="Paste Data"></a>Paste Data</h3><p>插件修改数据，光标定位到数据窗口中要修改的数据的位置，右键，选择<code>Paste Data</code>，然后输入要修改的内容。</p>
<h3 id="dump内存"><a href="#dump内存" class="headerlink" title="dump内存"></a>dump内存</h3><p>将光标定位到需要dump的数据的起始地址，右键，选择<code>Lazy Dumper</code></p>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/8.jpg"></p>
<h2 id="Keypatch"><a href="#Keypatch" class="headerlink" title="Keypatch"></a>Keypatch</h2><p><a href="https://github.com/keystone-engine/keypatch">GitHub - keystone-engine&#x2F;keypatch: Multi-architecture assembler for IDA Pro. Powered by Keystone Engine.</a></p>
<p>安装python库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install keystone-engine</span><br><span class="line">pip install six</span><br></pre></td></tr></table></figure>



<h3 id="Patcher"><a href="#Patcher" class="headerlink" title="Patcher"></a>Patcher</h3><p>在 IDA 反汇编视图中，跳转到需要修改的地址-&gt;右键在<code>Keypatch</code>子目录下选择合适的选项</p>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/14.jpg"></p>
<h1 id="IDA脚本编程"><a href="#IDA脚本编程" class="headerlink" title="IDA脚本编程"></a>IDA脚本编程</h1><h2 id="脚本智能提示，自动补全"><a href="#脚本智能提示，自动补全" class="headerlink" title="脚本智能提示，自动补全"></a>脚本智能提示，自动补全</h2><p>在环境变量里添加<code>IDAPYTHONPATH</code>，值为IDA的python目录的完整路径</p>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/11.jpg"></p>
<p>添加到环境变量</p>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/12.jpg"></p>
<p><strong>另一种方式</strong></p>
<p>在vscode的settings(json)中把本地IDA Python库的位置添加进去例如我的是 <code>E:\IDA9.0\python</code>, 则settings中添加的项为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;python.autoComplete.extraPaths&quot;: [&quot;E:\\IDA9.0\\python&quot;],</span><br><span class="line">&quot;python.analysis.extraPaths&quot;: [&quot;E:\\IDA9.0\\python&quot;],</span><br></pre></td></tr></table></figure>

<p>然后导入ida相关的包就可以自动补全了</p>
<p>参考文章：<a href="https://blog.itewqq.cn/vscode-idapython-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/">VSCode IDAPython 开发环境配置 – itewqq’s blog</a></p>
<h2 id="IDA-Python"><a href="#IDA-Python" class="headerlink" title="IDA Python"></a>IDA Python</h2><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">idc.get_reg_value(<span class="string">&#x27;rax&#x27;</span>)</span><br><span class="line">idaapi.set_reg_val(<span class="string">&quot;rax&quot;</span>,<span class="number">1234</span>)</span><br></pre></td></tr></table></figure>

<h3 id="调试内存"><a href="#调试内存" class="headerlink" title="调试内存"></a>调试内存</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">idc.read_dbg_byte(addr)</span><br><span class="line">idc.read_dbg_dword(addr)</span><br><span class="line">idc.read_dbg_qword(addr)</span><br><span class="line">idc.read_dbg_memory(addr, size)</span><br><span class="line">idc.patch_dbg_byte(addr, val)  <span class="comment"># 只能单字节patch，可对这个api进行封装</span></span><br></pre></td></tr></table></figure>



<p><strong>封装idc.patch_dbg_byte(addr, val)</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">patch_dbg_mem</span>(<span class="params">addr, data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">  		idc.patch_dbg_byte(addr + i, data[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_dbg_mem</span>(<span class="params">addr, size</span>):</span><br><span class="line">    dd = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">    	dd.append(idc.read_dbg_byte(addr + i))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(dd)</span><br></pre></td></tr></table></figure>

<h3 id="本地内存"><a href="#本地内存" class="headerlink" title="本地内存"></a>本地内存</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">idc.get_qword(addr)</span><br><span class="line">idc.patch_qword(addr, val)</span><br><span class="line">idc.patch_dword(addr, val)</span><br><span class="line">idc.patch_word(addr, val)</span><br><span class="line">idc.patch_byte(addr, val)</span><br><span class="line">idc.get_db_byte(addr)</span><br><span class="line">idc.get_bytes(addr, size)</span><br></pre></td></tr></table></figure>

<h3 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">GetDisasm(addr) <span class="comment"># 获取反汇编文本</span></span><br><span class="line">idc.next_head(ea) <span class="comment"># 获取下一条指令地址</span></span><br></pre></td></tr></table></figure>

<h3 id="交叉引用"><a href="#交叉引用" class="headerlink" title="交叉引用"></a>交叉引用</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ref <span class="keyword">in</span> idautils.XrefsTo(ea):</span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">hex</span>(ref.frm)) <span class="comment"># frm是交叉引用的来源地址</span></span><br></pre></td></tr></table></figure>

<h3 id="其他常用接口"><a href="#其他常用接口" class="headerlink" title="其他常用接口"></a>其他常用接口</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">idc.add_bpt(addr) <span class="comment"># 添加断点</span></span><br><span class="line">idaapi.get_imagebase() <span class="comment"># 获取基地址</span></span><br><span class="line">idc.create_insn(addr) <span class="comment"># C, Make Code</span></span><br><span class="line">ida_funcs.add_func(addr) <span class="comment"># P , create function</span></span><br><span class="line">ida_bytes.create_strlit(addr) <span class="comment"># 创建字符串，A键效果</span></span><br></pre></td></tr></table></figure>

<h3 id="函数遍历"><a href="#函数遍历" class="headerlink" title="函数遍历"></a>函数遍历</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> func <span class="keyword">in</span> idautils.Functions():</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;0x%x,%s&quot;</span> % (func,idc.get_func_name(func)))</span><br></pre></td></tr></table></figure>

<h3 id="基本块的遍历"><a href="#基本块的遍历" class="headerlink" title="基本块的遍历"></a>基本块的遍历</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">fn = addr</span><br><span class="line">f_blocks = idaapi.FlowChart(idaapi.get_func(fn), flags = idaapi.FC_PREDS)</span><br><span class="line"><span class="keyword">for</span> block <span class="keyword">in</span> f_blocks:</span><br><span class="line">	<span class="built_in">print</span> <span class="built_in">hex</span>(block.start_ea)</span><br></pre></td></tr></table></figure>

<h3 id="基本块的前驱"><a href="#基本块的前驱" class="headerlink" title="基本块的前驱"></a>基本块的前驱</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> pred <span class="keyword">in</span> block.preds():</span><br><span class="line">	<span class="built_in">print</span> <span class="built_in">hex</span>(pred.start_ea)</span><br></pre></td></tr></table></figure>

<h3 id="基本块的后继"><a href="#基本块的后继" class="headerlink" title="基本块的后继"></a>基本块的后继</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> succ <span class="keyword">in</span> block.succs():</span><br><span class="line">	<span class="built_in">print</span> <span class="built_in">hex</span>(succ.start_ea)</span><br></pre></td></tr></table></figure>

<h3 id="指令遍历"><a href="#指令遍历" class="headerlink" title="指令遍历"></a>指令遍历</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ins <span class="keyword">in</span> idautils.FuncItems(addr):</span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">hex</span>(ins))</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>逆向工具集</category>
      </categories>
      <tags>
        <tag>IDA</tag>
      </tags>
  </entry>
  <entry>
    <title>Jadx使用指南</title>
    <url>/2024/12/28/Jadx%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>JADX 是一个强大的反编译工具，用于将 Android 应用程序（APK 文件）中的 DEX（Dalvik Executable）文件反编译成 Java 源代码。</p>
]]></content>
      <categories>
        <category>逆向工具集</category>
      </categories>
      <tags>
        <tag>Jadx</tag>
      </tags>
  </entry>
  <entry>
    <title>Java</title>
    <url>/2024/05/01/Java/</url>
    <content><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h1 id="Byte"><a href="#Byte" class="headerlink" title="Byte"></a>Byte</h1><p><code>java.lang.Byte</code></p>
<p><code>byte</code> 类型占 1 个字节（8 位），取值范围从<code>-128</code>（<code>0b10000000</code>）到 <code>127</code>（<code>0b01111111</code>），它在内存中以补码的形式存储整数。</p>
<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Byte</span> <span class="variable">byteObj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Byte</span>((<span class="type">byte</span>) <span class="number">10</span>);</span><br><span class="line"><span class="type">Byte</span> <span class="variable">byteObj2</span> <span class="operator">=</span> Byte.valueOf((<span class="type">byte</span>) <span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<h2 id="byteValue"><a href="#byteValue" class="headerlink" title="byteValue()"></a>byteValue()</h2><p>用于将一个 <code>Byte</code> 对象中封装的值转换成基本数据类型 <code>byte</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="title function_">byteValue</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<h1 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h1><p><code>java.lang.Boolean</code></p>
<h1 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h1><h2 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h2><p>用于将一个字符串转换成基本数据类型 <code>int</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">parseInt</span><span class="params">(String s)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入：一个表示整数的字符串（例如：&quot;123&quot;）。</span></span><br><span class="line"><span class="comment">// 输出：转换后的 int 类型值（例如，123）。</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">parseInt</span><span class="params">(String s, <span class="type">int</span> radix)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// s：要解析的字符串，它表示一个数字。</span></span><br><span class="line"><span class="comment">// radix：基数，表示数字的进制 </span></span><br></pre></td></tr></table></figure>

<h1 id="Long"><a href="#Long" class="headerlink" title="Long"></a>Long</h1><p><code>java.lang.long</code></p>
<h2 id="new-1"><a href="#new-1" class="headerlink" title="new"></a>new</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">long num = 123456789L</span><br><span class="line"></span><br><span class="line">Long num = new Long(123456789L)</span><br><span class="line"></span><br><span class="line">Long num = new Long(&quot;123456789L&quot;)</span><br></pre></td></tr></table></figure>



<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><p><code>java.lang.String</code></p>
<h2 id="new-2"><a href="#new-2" class="headerlink" title="new"></a>new</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello&quot;</span>); <span class="comment">// 存在堆中，非字符串池</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] byteArray = &#123;<span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(byteArray, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">System.out.println(str);  <span class="comment">// 输出: Hello</span></span><br></pre></td></tr></table></figure>

<h2 id="getBytes"><a href="#getBytes" class="headerlink" title="getBytes()"></a>getBytes()</h2><p><code>getBytes()</code> 方法用于将字符串转换为一个字节数组。</p>
<p>它将字符串的每个字符按照指定的编码格式转换为字节。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] getBytes()</span><br></pre></td></tr></table></figure>

<h2 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll()"></a>replaceAll()</h2><p>允许使用正则表达式替换字符串中的所有匹配项。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">replaceAll</span><span class="params">(String regex, String replacement)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// regex：用于匹配的正则表达式。</span></span><br><span class="line"><span class="comment">// replacement：用于替换匹配内容的字符串。</span></span><br><span class="line"><span class="comment">// return：返回一个新字符串，其中所有匹配 regex 的部分都被 replacement 替换。</span></span><br></pre></td></tr></table></figure>

<h2 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">substring</span><span class="params">(<span class="type">int</span> beginIndex)</span></span><br><span class="line"></span><br><span class="line">String <span class="title function_">substring</span><span class="params">(<span class="type">int</span> beginIndex, <span class="type">int</span> endIndex)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// beginIndex：起始位置（索引从 0 开始）。返回的子字符串包括此位置的字符。</span></span><br><span class="line"><span class="comment">// endIndex：结束位置。返回的子字符串不包括此位置的字符。</span></span><br></pre></td></tr></table></figure>

<h2 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h2><p>根据指定的分隔符将字符串分成数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] split(String regex)</span><br><span class="line"></span><br><span class="line">String[] split(String regex, <span class="type">int</span> limit)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// regex：分隔符，正则表达式形式。</span></span><br><span class="line"><span class="comment">// limit：限制数组的大小，表示分割的最大次数。</span></span><br></pre></td></tr></table></figure>

<h2 id="format"><a href="#format" class="headerlink" title="format()"></a>format()</h2><p>用于创建格式化的字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> String <span class="title function_">format</span><span class="params">(String format, Object... args)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> String <span class="title function_">format</span><span class="params">(Locale locale, String format, Object... args)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// format：格式字符串，用于描述输出格式，其中包含格式说明符（conversion specifiers）。</span></span><br><span class="line"><span class="comment">// args：与格式字符串中说明符相对应的参数，可变参数形式传入。</span></span><br><span class="line"><span class="comment">// locale：用于国际化格式化，比如小数点符号、货币符号、日期格式等</span></span><br></pre></td></tr></table></figure>

<h2 id="compareToIgnoreCase"><a href="#compareToIgnoreCase" class="headerlink" title="compareToIgnoreCase()"></a>compareToIgnoreCase()</h2><p>按字典顺序比较两个字符串，忽略大小写，并返回比较结果的整数值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">compareToIgnoreCase</span><span class="params">(String anotherString)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// anotherString : 要比较的另一个字符串。</span></span><br><span class="line"><span class="comment">// 返回值：</span></span><br><span class="line">    <span class="comment">// 正数:当前字符串在字典顺序中位于 anotherString 之后（忽略大小写）。</span></span><br><span class="line">    <span class="comment">// 0	两个字符串在字典顺序中相等（忽略大小写）。</span></span><br><span class="line">    <span class="comment">// 负数	当前字符串在字典顺序中位于 anotherString 之前（忽略大小写）。</span></span><br></pre></td></tr></table></figure>

<h2 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h2><p>返回指定字符（Unicode代码点）在字符串中最后一次出现的索引位置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(<span class="type">int</span> ch)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ch : 要查找的字符（Unicode代码点，以 int 类型表示）。</span></span><br><span class="line"><span class="comment">// 返回值:</span></span><br><span class="line">    <span class="comment">// 字符最后一次出现的索引（从0开始）；若未找到，返回 -1。</span></span><br></pre></td></tr></table></figure>

<h2 id="equalsIgnoreCase"><a href="#equalsIgnoreCase" class="headerlink" title="equalsIgnoreCase()"></a>equalsIgnoreCase()</h2><p>比较当前字符串与目标字符串的内容是否相同（不区分大小写）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">equalsIgnoreCase</span><span class="params">(String anotherString)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// anotherString 是要比较的另一个字符串。</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>true</code>：两个字符串内容相同（忽略大小写）。</li>
<li><code>false</code>：内容不同或 <code>anotherString</code> 为 <code>null</code>。</li>
</ul>
<h1 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h1><p><code>java.lang.StringBuilder</code></p>
<p><code>StringBuilder</code> 允许对字符串进行修改。</p>
<h2 id="new-3"><a href="#new-3" class="headerlink" title="new"></a>new</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认构造，初始容量 16</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定初始容量为50</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">50</span>);</span><br></pre></td></tr></table></figure>

<h2 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h2><p>用于在 <code>StringBuilder</code> 末尾追加内容。</p>
<p><code>StringBuilder</code> 提供了多个重载的 <code>append()</code> 方法，可以接收不同的数据类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">append</span><span class="params">(String str)</span></span><br><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">append</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">append</span><span class="params">(<span class="type">long</span> l)</span></span><br><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">append</span><span class="params">(<span class="type">float</span> f)</span></span><br><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">append</span><span class="params">(<span class="type">double</span> d)</span></span><br><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">append</span><span class="params">(<span class="type">boolean</span> b)</span></span><br><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">append</span><span class="params">(<span class="type">char</span> c)</span></span><br><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">append</span><span class="params">(<span class="type">char</span>[] str)</span></span><br><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">append</span><span class="params">(Object obj)</span></span><br><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">append</span><span class="params">(CharSequence s)</span></span><br><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">append</span><span class="params">(StringBuffer sb)</span></span><br><span class="line"><span class="keyword">public</span> StringBuilder <span class="title function_">append</span><span class="params">(CharSequence s, <span class="type">int</span> start, <span class="type">int</span> end)</span></span><br></pre></td></tr></table></figure>

<h2 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h2><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h2><p>用于将 <code>StringBuilder</code> 对象转换为 <code>String</code>对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">toString</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<h1 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h1><p><code>java.util.Arrays</code>，Java的数组类</p>
<h2 id="asList"><a href="#asList" class="headerlink" title="asList()"></a>asList()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; List&lt;T&gt; <span class="title function_">asList</span><span class="params">(T... a)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a：数组，可以是任何类型的数组（原始类型数组和对象类型数组都支持）。</span></span><br><span class="line"><span class="comment">// return：返回一个由指定数组支持的固定大小的 List，该 List 视图是基于原数组的，因此修改该列表的元素也会影响原数组。</span></span><br></pre></td></tr></table></figure>

<h2 id="copyOf"><a href="#copyOf" class="headerlink" title="copyOf()"></a>copyOf()</h2><p>用于创建并返回指定数组的一个新数组，新数组包含了原数组的部分或全部元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; T[] copyOf(T[] original, <span class="type">int</span> newLength)</span><br><span class="line"></span><br><span class="line"><span class="comment">// original：原始数组，表示要被拷贝的数组。</span></span><br><span class="line"><span class="comment">// newLength：新数组的长度。可以比原数组长度大，也可以相等，甚至小。</span></span><br></pre></td></tr></table></figure>

<h2 id="toString-array"><a href="#toString-array" class="headerlink" title="toString(array)"></a>toString(array)</h2><p>将数组转换为字符串表示形式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Arrays.toString(arr); <span class="comment">// str = &quot;[1, 2, 3]&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><p><code>java.util.Collection</code></p>
<p><code>Collection</code> 接口是所有集合类的根接口，它定义了一组通用的方法，如添加、删除、遍历元素等。</p>
<h2 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>; <span class="comment">// 获取集合中元素的个数</span></span><br></pre></td></tr></table></figure>

<h2 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty()"></a>isEmpty()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>; <span class="comment">// 判断集合是否为空</span></span><br></pre></td></tr></table></figure>

<h2 id="contains"><a href="#contains" class="headerlink" title="contains()"></a>contains()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span>; <span class="comment">// 判断集合中是否包含指定元素</span></span><br></pre></td></tr></table></figure>

<h2 id="iterator"><a href="#iterator" class="headerlink" title="iterator();"></a>iterator();</h2><p>返回一个迭代器对象，允许对集合进行遍历。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// return：返回一个 Iterator 对象，该对象能够遍历集合中的元素。</span></span><br></pre></td></tr></table></figure>

<h2 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span>; <span class="comment">// 如果集合中不存在该元素，则添加，返回 true；如果元素已存在，则不添加，返回 false</span></span><br></pre></td></tr></table></figure>

<h2 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span>; <span class="comment">// 移除指定的元素，成功返回 true，失败返回 false</span></span><br></pre></td></tr></table></figure>

<h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>; <span class="comment">// 移除所有元素</span></span><br></pre></td></tr></table></figure>

<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><p><code>java.util.List</code></p>
<p><code>List</code>是 <code>Collection</code> 的子接口，表示有序的元素集合，允许重复元素。</p>
<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><p><code>java.util.ArrayList</code></p>
<p><code>ArrayList</code>是<code>List</code>的实现类，基于动态数组实现</p>
<h2 id="new-4"><a href="#new-4" class="headerlink" title="new"></a>new</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><p><code>java.util.Set</code></p>
<p><code>Set</code> 是 <code>Collection</code> 的子接口，存储的元素无序且不重复。</p>
<h1 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h1><p><code>java.util.HashSet</code></p>
<p><code>HashSet</code> 是 <code>Set</code> 接口的实现类。</p>
<p><code>HashSet</code> 使用 哈希表（<code>HashMap</code>）来存储元素，存储的元素无序且不重复。</p>
<h1 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h1><p><code>java.util.Iterator</code></p>
<p><code>Iterator</code>提供了一种统一的方法来遍历集合中的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;        <span class="comment">// 检查集合中是否有下一个元素</span></span><br><span class="line">    E <span class="title function_">next</span><span class="params">()</span>;                 <span class="comment">// 返回集合中的下一个元素</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span>;            <span class="comment">// 移除集合中最近一次返回的元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p><code>java.util.Map</code></p>
<p><code>Map</code> 是一个用于存储键值对（Key-Value）的集合接口，每个<code>Map</code> 中的键是唯一的，值可以重复。</p>
<h2 id="size-1"><a href="#size-1" class="headerlink" title="size()"></a>size()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int size();</span><br></pre></td></tr></table></figure>

<h2 id="isEmpty-1"><a href="#isEmpty-1" class="headerlink" title="isEmpty()"></a>isEmpty()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">boolean isEmpty();</span><br></pre></td></tr></table></figure>

<h2 id="containsKey"><a href="#containsKey" class="headerlink" title="containsKey()"></a>containsKey()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">boolean containsKey(Object key);</span><br></pre></td></tr></table></figure>

<h2 id="containsValue"><a href="#containsValue" class="headerlink" title="containsValue"></a>containsValue</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">boolean containsValue(Object value);</span><br></pre></td></tr></table></figure>

<h2 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">V get(Object key);</span><br></pre></td></tr></table></figure>

<h2 id="put"><a href="#put" class="headerlink" title="put()"></a>put()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">V put(K key, V value);</span><br></pre></td></tr></table></figure>

<h2 id="remove-1"><a href="#remove-1" class="headerlink" title="remove()"></a>remove()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">V remove(Object key);</span><br></pre></td></tr></table></figure>

<h2 id="clear-1"><a href="#clear-1" class="headerlink" title="clear()"></a>clear()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void clear();</span><br></pre></td></tr></table></figure>

<h2 id="keySet"><a href="#keySet" class="headerlink" title="keySet()"></a>keySet()</h2><p>返回 <code>Map</code> 中所有键的集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;K&gt; <span class="title function_">keySet</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// return：Set&lt;K&gt;，表示 Map 中所有键的集合，K 是键的类型。</span></span><br></pre></td></tr></table></figure>

<h2 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h2><p>返回 <code>Map</code> 中所有值的集合。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection&lt;V&gt; <span class="title function_">values</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// retuen：Collection&lt;V&gt;，表示 Map 中所有值的集合，V 是值的类型。</span></span><br></pre></td></tr></table></figure>

<h2 id="entrySet"><a href="#entrySet" class="headerlink" title="entrySet()"></a>entrySet()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个包含所有键值对的集合（Set&lt;Map.Entry&lt;K, V&gt;&gt;）。</span></span><br></pre></td></tr></table></figure>

<h2 id="Map-Entry"><a href="#Map-Entry" class="headerlink" title="Map.Entry"></a>Map.Entry</h2><p><code>Map.Entry</code> 是 <code>Map</code> 接口中的一个内部接口，此接口为泛型，定义为Entry&lt;K,V&gt;，表示Map中的一个键值对。</p>
<p><code>Map.Entry</code> 定义了方法来访问和操作键值对中的键和对应的值。</p>
<h3 id="getKey"><a href="#getKey" class="headerlink" title="getKey()"></a>getKey()</h3><p>返回 <code>Map.Entry</code> 对象中存储的键。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">K getKey();</span><br></pre></td></tr></table></figure>

<h3 id="getValue"><a href="#getValue" class="headerlink" title="getValue()"></a>getValue()</h3><p>返回 <code>Map.Entry</code> 对象中存储的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">V getValue();</span><br></pre></td></tr></table></figure>

<h3 id="setValue-V-value"><a href="#setValue-V-value" class="headerlink" title="setValue(V value)"></a>setValue(V value)</h3><p>设置 <code>Map.Entry</code> 对象中存储的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">V setValue(V value);</span><br></pre></td></tr></table></figure>



<h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><p><code>java.util.HashMap</code></p>
<p>HashMap 实现了 Map 接口，继承于AbstractMap。</p>
<h2 id="new-5"><a href="#new-5" class="headerlink" title="new"></a>new</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造一个空的 HashMap，具有默认初始容量（16）和默认负载因子（0.75）。</span></span><br><span class="line"><span class="comment">// 负载因子表示在 HashMap 自动扩容前，可以填充的最大元素数占当前容量的比例。</span></span><br><span class="line">HashMap&lt;K, V&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造一个具有指定初始容量的空 HashMap。</span></span><br><span class="line">HashMap&lt;K, V&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="type">int</span> initialCapacity);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造一个具有指定初始容量和负载因子的空 HashMap。</span></span><br><span class="line">HashMap&lt;K, V&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造一个包含指定映射中所有键值对的 HashMap，构造方法会将映射中的所有键值对复制到新创建的 HashMap 中。</span></span><br><span class="line">HashMap&lt;K, V&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(Map&lt;? <span class="keyword">extends</span> <span class="title class_">K</span>, ? <span class="keyword">extends</span> <span class="title class_">V</span>&gt; m);</span><br></pre></td></tr></table></figure>

<h1 id="SortedMap"><a href="#SortedMap" class="headerlink" title="SortedMap"></a>SortedMap</h1><p><code>java.util.SortedMap</code>，<code>SortedMap</code>是<code>Map</code>的子接口。</p>
<h1 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h1><p><code>java.util.TreeMap</code>，<code>TreeMap</code>是<code>SortedMap</code>的实现类。</p>
<h2 id="new-6"><a href="#new-6" class="headerlink" title="new"></a>new</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造一个空的 TreeMap，使用键的自然顺序进行排序。</span></span><br><span class="line">TreeMap&lt;K, V&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造一个空的 TreeMap，使用指定的 Comparator 进行排序。</span></span><br><span class="line">TreeMap&lt;K, V&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(Comparator&lt;? <span class="built_in">super</span> K&gt; comparator);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造一个包含指定映射中所有键值对的 TreeMap，使用键的自然顺序。</span></span><br><span class="line">TreeMap&lt;K, V&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(Map&lt;? <span class="keyword">extends</span> <span class="title class_">K</span>, ? <span class="keyword">extends</span> <span class="title class_">V</span>&gt; m);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造一个包含指定排序映射中所有键值对的 TreeMap，使用键的自然顺序。</span></span><br><span class="line">TreeMap&lt;K, V&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(SortedMap&lt;K, ? <span class="keyword">extends</span> <span class="title class_">V</span>&gt; m);</span><br></pre></td></tr></table></figure>

<h1 id="File"><a href="#File" class="headerlink" title="File"></a>File</h1><p><code>java.io.File</code></p>
<h2 id="exists"><a href="#exists" class="headerlink" title="exists()"></a>exists()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<p>检查 <code>File</code> 对象表示的路径（文件或目录）在文件系统中是否存在。</p>
<p>存在则返回 <code>true</code>，否则返回 <code>false</code>。</p>
<h1 id="System"><a href="#System" class="headerlink" title="System"></a>System</h1><p><code>java.lang.System</code></p>
<h2 id="getenv"><a href="#getenv" class="headerlink" title="getenv()"></a>getenv()</h2><p>获取操作系统的环境变量。</p>
<h2 id="currentTimeMillis"><a href="#currentTimeMillis" class="headerlink" title="currentTimeMillis()"></a>currentTimeMillis()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">currentTimeMillis</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// return：long 类型，表示自 1970年1月1日00:00:00 UTC 至当前时刻的毫秒数。</span></span><br></pre></td></tr></table></figure>

<p><strong>调用示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1738742578052</span></span><br><span class="line"><span class="comment">// 1738744335058108240</span></span><br></pre></td></tr></table></figure>

<h1 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h1><p><code>java.util.Random</code></p>
<h2 id="nextInt"><a href="#nextInt" class="headerlink" title="nextInt()"></a>nextInt()</h2><p>生成随机整数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span>; <span class="comment">// 生成任意整数（int 的完整范围）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">nextInt</span><span class="params">(<span class="type">int</span> bound)</span>; <span class="comment">// 生成 [0, bound) 之间的整数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="nextFloat"><a href="#nextFloat" class="headerlink" title="nextFloat()"></a>nextFloat()</h2><p>生成随机单精度浮点数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> <span class="title function_">nextFloat</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 [0.0, 1.0) 之间的 float 类型随机数（包含 0.0，不包含 1.0）。</span></span><br></pre></td></tr></table></figure>

<h2 id="nextDouble"><a href="#nextDouble" class="headerlink" title="nextDouble()"></a>nextDouble()</h2><p>生成随机双精度浮点数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 [0.0, 1.0) 之间的 double 类型随机数（包含 0.0，但不包含 1.0）。</span></span><br></pre></td></tr></table></figure>



<h2 id="nextBoolean"><a href="#nextBoolean" class="headerlink" title="nextBoolean()"></a>nextBoolean()</h2><p>生成随机布尔值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">nextBoolean</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 50% 概率返回 true，50% 概率返回 false。</span></span><br></pre></td></tr></table></figure>



<h2 id="nextBytes"><a href="#nextBytes" class="headerlink" title="nextBytes()"></a>nextBytes()</h2><p>生成随机字节数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">nextBytes</span><span class="params">(<span class="type">byte</span>[] bytes)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该方法不返回值，而是 直接修改传入的 bytes 数组，将每个元素设置为随机 byte（即 -128 到 127 之间）。</span></span><br></pre></td></tr></table></figure>



<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="Interface（接口）"><a href="#Interface（接口）" class="headerlink" title="Interface（接口）"></a>Interface（接口）</h2><h3 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h3><p>接口的定义使用<code>interface</code>关键字。接口中的方法默认是<code>public</code>和<code>abstract</code>，不需要显式声明。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span>;  <span class="comment">// 声明抽象方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h3><p>通过<code>implements</code>关键字实现接口。实现接口的类必须提供接口中所有方法的具体实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bark&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is sleeping&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h3><p>接口也可以继承其他接口。一个接口可以扩展多个接口，这意味着一个类可以实现多个接口，从而实现多继承。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Mammal</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Mammal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Meow&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat is sleeping&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat is feeding&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="InnerClass（内部类）"><a href="#InnerClass（内部类）" class="headerlink" title="InnerClass（内部类）"></a>InnerClass（内部类）</h2><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><p>成员内部类是定义在外部类内部、方法外部的类。</p>
<p>成员内部类可以直接访问外部类的所有成员（包括私有成员）。</p>
<p>必须通过外部类对象来创建内部类对象。</p>
<p>内部类会隐式持有一个外部类对象的引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello from Outer class&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(message); <span class="comment">// 访问外部类的私有成员</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>(); <span class="comment">// 创建内部类对象</span></span><br><span class="line">        inner.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>使用 <code>static</code> 修饰的内部类称为静态内部类。</p>
<p>静态内部类不依赖于外部类的实例，因此无法访问外部类的非静态成员。</p>
<p>不需要外部类的实例即可创建静态内部类对象。</p>
<p>只能访问外部类的静态成员。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello from static Outer class&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StaticInner</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(message); <span class="comment">// 访问外部类的静态成员</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Outer.<span class="type">StaticInner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>.StaticInner(); <span class="comment">// 直接创建静态内部类对象</span></span><br><span class="line">        inner.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>局部内部类是在外部类的方法或作用域内定义的类。</p>
<p>它的作用范围仅限于定义它的方法或代码块中。</p>
<p>局部内部类可以访问所在方法的局部变量，但这些变量必须是 <code>final</code> 或 <code>effectively final</code>。</p>
<p>通常用于封装方法的实现细节。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">LocalInner</span> &#123;</span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello from LocalInner class&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">LocalInner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalInner</span>(); <span class="comment">// 在方法内部使用局部内部类</span></span><br><span class="line">        inner.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        outer.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类是没有名字的类，通常用于简化代码实现。</p>
<p>常见于接口或抽象类的快速实现。</p>
<p>匿名内部类必须继承一个类或实现一个接口。</p>
<p>用于简化代码实现，无需单独定义类。</p>
<ul>
<li><p><strong>匿名内部类实现接口</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Greeting</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Greeting</span> <span class="variable">greeting</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Greeting</span>() &#123; <span class="comment">// 创建匿名内部类</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello from Anonymous Inner Class&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        greeting.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>匿名内部类继承类</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal makes a sound.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用匿名内部类继承 Animal 类</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Dog barks: Woof Woof!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        dog.makeSound(); <span class="comment">// 调用匿名内部类的重写方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h1><h2 id="示例类"><a href="#示例类" class="headerlink" title="示例类"></a>示例类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">school</span> <span class="operator">=</span> <span class="string">&quot;High School&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.age = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = <span class="number">18</span>; <span class="comment">// 默认年龄</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公有方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introduce</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hi, my name is &quot;</span> + name + <span class="string">&quot;, and I am &quot;</span> + age + <span class="string">&quot; years old.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printSecret</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a private method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSchool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setSchool</span><span class="params">(String schoolName)</span> &#123;</span><br><span class="line">        school = schoolName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Class对象"><a href="#Class对象" class="headerlink" title="Class对象"></a>Class对象</h2><h3 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h3><ul>
<li><p><strong>通过对象获取</strong><br>  <code>Class&lt;?&gt; clazz = object.getClass();</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Bileton&quot;</span>,<span class="number">21</span>);</span><br><span class="line">    <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> stu.getClass();</span><br><span class="line">    System.out.println(stuClass.getName()); <span class="comment">// Student</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>通过类获取</strong><br>  <code>Class&lt;?&gt; clazz = ClassName.class;</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    System.out.println(stuClass.getName()); <span class="comment">// Student</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>通过全类名获取</strong><br>  <code>Class&lt;?&gt; clazz = Class.forName(String className);</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">strClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">    System.out.println(strClass.getName()); <span class="comment">// java.lang.String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  <code>Class.forName()</code>会在加载类的同时对类进行初始化。</p>
</li>
</ul>
<h2 id="构造方法对象"><a href="#构造方法对象" class="headerlink" title="构造方法对象"></a>构造方法对象</h2><h3 id="获取构造方法对象"><a href="#获取构造方法对象" class="headerlink" title="获取构造方法对象"></a>获取构造方法对象</h3><ul>
<li><p><strong>获取公有构造方法对象的数组</strong><br>  <code>Constructor&lt;?&gt;[] getConstructors()</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    Constructor[] constructors = stuClass.getConstructors();</span><br><span class="line">    <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">        System.out.println(constructor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取所有构造方法对象的数组</strong><br>  <code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    Constructor[] constructors = stuClass.getDeclaredConstructors();</span><br><span class="line">    <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">        System.out.println(constructor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取单个公有构造方法对象</strong><br>  <code>Constructor&lt;?&gt; getConstructor()</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> stuClass.getConstructor();</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor2</span> <span class="operator">=</span> stuClass.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">    System.out.println(constructor1);</span><br><span class="line">    System.out.println(constructor2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取单个构造方法对象</strong></p>
<p>  <code>Constructor&lt;?&gt; getDeclaredConstructor()</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> stuClass.getDeclaredConstructor(String.class);</span><br><span class="line">    System.out.println(constructor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="调用构造方法"><a href="#调用构造方法" class="headerlink" title="调用构造方法"></a>调用构造方法</h3><p><code>newInstance()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.getDeclaredConstructor().newInstance(Object... initargs);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>调用公有构造方法</strong></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> stuClass.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) constructor.newInstance(<span class="string">&quot;Bileton&quot;</span>,<span class="number">21</span>);</span><br><span class="line">    System.out.println(stu.getName()+<span class="string">&quot; &quot;</span>+stu.getAge()); <span class="comment">// Bileton 21</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>调用私有构造方法</strong><br>  使用<code>setAccessible(true)</code>突破 Java 的访问控制限制，使得私有成员（字段、方法或构造方法）可以被访问。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> stuClass.getDeclaredConstructor(String.class);</span><br><span class="line">    constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) constructor.newInstance(<span class="string">&quot;Bileton&quot;</span>);</span><br><span class="line">    System.out.println(stu.getName()+<span class="string">&quot; &quot;</span>+stu.getAge()); <span class="comment">// Bileton 18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Field属性对象"><a href="#Field属性对象" class="headerlink" title="Field属性对象"></a>Field属性对象</h2><h3 id="获取成员属性对象"><a href="#获取成员属性对象" class="headerlink" title="获取成员属性对象"></a>获取成员属性对象</h3><ul>
<li><p><strong>获取公有成员属性对象的数组</strong><br>  <code>Field[] getFields()</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    Field[] fields = stuClass.getFields(); </span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">        System.out.println(field.getName()); <span class="comment">// school</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取所有成员属性对象的数组</strong><br>  <code>Field[] getDeclaredFields()</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    Field[] fields = stuClass.getDeclaredFields();</span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">        System.out.println(field);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取单个公有成员属性对象</strong><br>  <code>Field[] getField(String name)</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    <span class="type">Field</span> <span class="variable">fields</span> <span class="operator">=</span> stuClass.getField(<span class="string">&quot;school&quot;</span>);</span><br><span class="line">    System.out.println(fields);</span><br><span class="line">    <span class="comment">// public static java.lang.String Student.school</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取单个成员属性对象</strong><br>  <code>Field[] getDeclaredField(String name)</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    <span class="type">Field</span> <span class="variable">fields</span> <span class="operator">=</span> stuClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(fields);</span><br><span class="line">    <span class="comment">// private java.lang.String Student.name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="获取和设置属性的值"><a href="#获取和设置属性的值" class="headerlink" title="获取和设置属性的值"></a>获取和设置属性的值</h3><ul>
<li><p><code>get(Object obj)</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> field.get(Object obj);</span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> field.get(<span class="literal">null</span>);  <span class="comment">// 静态字段，obj 为 null</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>set(Object obj, Object value)</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">field.set(Object obj, Object value);</span><br><span class="line">field.set(<span class="literal">null</span>, newValue);  <span class="comment">// 静态字段，obj 为 null</span></span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> stuClass.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">Stu</span> <span class="operator">=</span> (Student) constructor.newInstance(<span class="string">&quot;Bileton&quot;</span>,<span class="number">21</span>);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">name_field</span> <span class="operator">=</span> stuClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">age_field</span> <span class="operator">=</span> stuClass.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    name_field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    age_field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) name_field.get(Stu);</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> (<span class="type">int</span>) age_field.get(Stu);</span><br><span class="line">    System.out.println(name+<span class="string">&quot; &quot;</span>+age); <span class="comment">// Bileton 21</span></span><br><span class="line">    name_field.set(Stu,<span class="string">&quot;bileton&quot;</span>);</span><br><span class="line">    age_field.set(Stu,<span class="number">18</span>);</span><br><span class="line">    name = (String) name_field.get(Stu);</span><br><span class="line">    age = (<span class="type">int</span>) age_field.get(Stu);</span><br><span class="line">    System.out.println(name+<span class="string">&quot; &quot;</span>+age); <span class="comment">// bileton 18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Method方法对象"><a href="#Method方法对象" class="headerlink" title="Method方法对象"></a>Method方法对象</h2><h3 id="获取方法对象"><a href="#获取方法对象" class="headerlink" title="获取方法对象"></a>获取方法对象</h3><ul>
<li><p><strong>获取公有成员方法对象的数组，包括继承的</strong><br>  <code>Method[] getMethods()</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    Method[] methods = stuClass.getMethods();</span><br><span class="line">    <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">        System.out.println(method);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取所有成员方法对象的数组，不包括继承的</strong><br>  <code>Method[] getDeclaredMethods()</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    Method[] methods = stuClass.getDeclaredMethods();</span><br><span class="line">    <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">        System.out.println(method);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取单个公有成员方法对象</strong><br>  <code>Method getMethod(String name,Class&lt;?&gt;…parameterTypes)</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> stuClass.getMethod(<span class="string">&quot;introduce&quot;</span>);</span><br><span class="line">    System.out.println(method);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>获取单个成员方法对象</strong><br>  <code>Method getDeclaredMethod(String name,Class&lt;?&gt;…parameterTypes)</code></p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> stuClass.getDeclaredMethod(<span class="string">&quot;printSecret&quot;</span>);</span><br><span class="line">    System.out.println(method);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p><code>Method.invoke()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> method.invoke(Object obj, Object... args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 	method 是通过反射获取的 Method 对象，表示某个类的方法。</span></span><br><span class="line"><span class="comment">//	obj 是调用方法的目标对象。对于实例方法，obj 是目标对象的实例；对于静态方法，obj 可以是 null。</span></span><br><span class="line"><span class="comment">//	args 是传递给方法的参数列表。方法的参数需要按顺序传递，并且类型要匹配。</span></span><br></pre></td></tr></table></figure>

<p><strong>调用公有方法和私有方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">stuClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> stuClass.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">Stu</span> <span class="operator">=</span> (Student) constructor.newInstance(<span class="string">&quot;Bileton&quot;</span>,<span class="number">21</span>);</span><br><span class="line">    <span class="type">Method</span> <span class="variable">printSecret</span> <span class="operator">=</span> stuClass.getDeclaredMethod(<span class="string">&quot;printSecret&quot;</span>);</span><br><span class="line">    printSecret.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    printSecret.invoke(Stu); <span class="comment">// This is a private method.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取方法参数信息"><a href="#获取方法参数信息" class="headerlink" title="获取方法参数信息"></a>获取方法参数信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public Parameter[] getParameters();</span><br></pre></td></tr></table></figure>

<h2 id="ClassLoader类加载器对象"><a href="#ClassLoader类加载器对象" class="headerlink" title="ClassLoader类加载器对象"></a>ClassLoader类加载器对象</h2><h3 id="获取类加载器对象"><a href="#获取类加载器对象" class="headerlink" title="获取类加载器对象"></a>获取类加载器对象</h3><p><code>getClassLoader()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public ClassLoader getClassLoader();</span><br></pre></td></tr></table></figure>

<p>通过<code>Class</code>对象获取<code>ClassLoader</code></p>
<p><code>ClassLoader classLoader = clazz.getClassLoader();</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(String className);</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> clazz.getClassLoader();</span><br><span class="line">    System.out.println(<span class="string">&quot;ClassLoader:&quot;</span> + classLoader);  <span class="comment">// 输出 null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过类加载器对象加载类"><a href="#通过类加载器对象加载类" class="headerlink" title="通过类加载器对象加载类"></a>通过类加载器对象加载类</h3><p><code>loadClass(String name)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException;</span><br></pre></td></tr></table></figure>

<p>通过<code>ClassLoader</code>对象加载类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = classLoader.loadClass(String className);</span><br></pre></td></tr></table></figure>

<p><code>loadClass()</code>用于加载类，但不会初始化类。</p>
<h2 id="其他常用方法"><a href="#其他常用方法" class="headerlink" title="其他常用方法"></a>其他常用方法</h2><ul>
<li><p><strong>getName()</strong></p>
<p>  用于获取类、构造方法、方法或字段的名称。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>getModifiers()</strong></p>
<p>  获取类、方法、字段或构造方法的访问修饰符。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getModifiers</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>  <code>getModifiers()</code> 返回一个 <code>int</code> 类型的值，这个整数值表示多个修饰符的位运算组合。</p>
</li>
<li><p><strong>setAccessible(true)</strong></p>
<p>  用于修改类、方法、字段等成员的访问权限，以便访问被 <code>private</code>、<code>protected</code> 或 <code>default</code>（包内访问权限）修饰的成员。</p>
</li>
</ul>
<h1 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h1><h2 id="简单同步get请求"><a href="#简单同步get请求" class="headerlink" title="简单同步get请求"></a>简单同步get请求</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sync_http_get</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">HttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClient.newHttpClient();</span><br><span class="line">    <span class="type">HttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> HttpRequest.newBuilder()</span><br><span class="line">            .uri(URI.create(<span class="string">&quot;https://httpbin.org/get&quot;</span>))</span><br><span class="line">            .build();</span><br><span class="line">    HttpResponse&lt;String&gt; response;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response = httpClient.send(request,HttpResponse.BodyHandlers.ofString());</span><br><span class="line">            System.out.println(<span class="string">&quot;Response Code: &quot;</span> + response.statusCode());</span><br><span class="line">            System.out.println(<span class="string">&quot;Response Body: &quot;</span> + response.body());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="简单异步get请求"><a href="#简单异步get请求" class="headerlink" title="简单异步get请求"></a>简单异步get请求</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 推荐使用共享的 HttpClient 实例</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">HttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClient.newHttpClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">asyncHttp</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">HttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> HttpRequest.newBuilder()</span><br><span class="line">            .uri(URI.create(<span class="string">&quot;https://httpbin.org/get&quot;</span>))</span><br><span class="line">            .header(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Java-Async-HTTP/1.0&quot;</span>) <span class="comment">// 添加必要请求头</span></span><br><span class="line">            .timeout(java.time.Duration.ofSeconds(<span class="number">10</span>))    <span class="comment">// 请求超时设置</span></span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发起异步请求</span></span><br><span class="line">    CompletableFuture&lt;HttpResponse&lt;String&gt;&gt; futureResponse =</span><br><span class="line">            httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理异步响应（链式调用）</span></span><br><span class="line">    futureResponse</span><br><span class="line">            .thenApply(response -&gt; &#123;  <span class="comment">// 转换响应结果</span></span><br><span class="line">                System.out.println(<span class="string">&quot;【响应元数据】&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;状态码: &quot;</span> + response.statusCode());</span><br><span class="line">                System.out.println(<span class="string">&quot;协议版本: &quot;</span> + response.version());</span><br><span class="line">                <span class="keyword">return</span> response.body(); <span class="comment">// 传递 body 到下一环节</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .thenAccept(body -&gt; &#123;     <span class="comment">// 消费最终结果</span></span><br><span class="line">                System.out.println(<span class="string">&quot;\n【响应内容】&quot;</span>);</span><br><span class="line">                System.out.println(body);</span><br><span class="line">            &#125;)</span><br><span class="line">            .exceptionally(ex -&gt; &#123;    <span class="comment">// 统一异常处理</span></span><br><span class="line">                System.err.println(<span class="string">&quot;\n【请求失败】&quot;</span>);</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保持主线程运行（演示用）</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>); <span class="comment">// 等待异步操作完成</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        Thread.currentThread().interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="简单同步post请求"><a href="#简单同步post请求" class="headerlink" title="简单同步post请求"></a>简单同步post请求</h2><p><strong>JSON</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sync_http_post</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">HttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClient.newHttpClient();</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonBody</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;John\&quot;, \&quot;age\&quot;:30&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">HttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> HttpRequest.newBuilder()</span><br><span class="line">            .uri(URI.create(<span class="string">&quot;https://httpbin.org/post&quot;</span>))</span><br><span class="line">            .POST(HttpRequest.BodyPublishers.ofString(jsonBody))</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        HttpResponse&lt;String&gt; response = httpClient.send(request,HttpResponse.BodyHandlers.ofString());</span><br><span class="line">        System.out.println(<span class="string">&quot;响应状态码: &quot;</span> + response.statusCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;响应内容:\n&quot;</span> + response.body());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>FORM</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sync_http_post</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">HttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClient.newHttpClient();</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">formData</span> <span class="operator">=</span> <span class="string">&quot;username=admin&amp;password=123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">HttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> HttpRequest.newBuilder()</span><br><span class="line">            .uri(URI.create(<span class="string">&quot;https://httpbin.org/post&quot;</span>))</span><br><span class="line">            .POST(HttpRequest.BodyPublishers.ofString(formData))</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        HttpResponse&lt;String&gt; response = httpClient.send(request,HttpResponse.BodyHandlers.ofString());</span><br><span class="line">        System.out.println(<span class="string">&quot;响应状态码: &quot;</span> + response.statusCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;响应内容:\n&quot;</span> + response.body());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2024/12/04/JavaScript/</url>
    <content><![CDATA[<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><p>在JavaScript中，使用<code>var</code>关键字来声明变量，声明块级作用域变量使用<code>let</code>。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li><p><strong>null</strong></p>
<p>空值。</p>
</li>
<li><p><strong>undefined</strong></p>
<p>未定义，即变量在声明时没有被初始化。</p>
</li>
<li><p><strong>boolean</strong></p>
<p><code>true</code>表示真，<code>false</code>表示假。</p>
</li>
<li><p><strong>number</strong></p>
<p>整数和浮点数。</p>
</li>
<li><p><strong>string</strong></p>
<p>字符串。</p>
</li>
<li><p><strong>object</strong></p>
<p>在JavaScript中，object是一种用于存储键值对（属性和方法）的集合。</p>
</li>
<li><p><strong>function</strong></p>
<p>函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is a function!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul>
<li><p><strong>&#x3D;&#x3D;</strong></p>
<p>相等运算符</p>
<p>如果两个值不是同一类型，相等运算符（<code>==</code>）会将它们转换成同一个类型，再用严格相等运算符进行比较。</p>
</li>
<li><p><strong>&#x3D;&#x3D;&#x3D;</strong></p>
<p>严格相等运算符</p>
<p>比较两个值是否为“同一个值”。如果两个值不是同一类型，严格相等运算符（<code>===</code>）直接返回<code>false</code>。</p>
</li>
</ul>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (expression)&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (expression)&#123;</span><br><span class="line">	...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (expression)&#123;</span><br><span class="line">	...</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (expression) &#123;</span><br><span class="line">	...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="for-…-in"><a href="#for-…-in" class="headerlink" title="for … in"></a>for … in</h3><p><code>for</code>循环的一个变体是<code>for ... in</code>循环，它可以把一个对象的所有属性依次循环出来。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&#x27;Beijing&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> s <span class="keyword">in</span> stu) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// &#x27;name&#x27;, &#x27;age&#x27;, &#x27;city&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (expression) &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="do-…-while"><a href="#do-…-while" class="headerlink" title="do … while"></a>do … while</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">	...</span><br><span class="line">&#125; <span class="keyword">while</span>(expression)</span><br></pre></td></tr></table></figure>

<h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p><code>typeof</code> 是一个操作符，用于检测变量的数据类型，返回一个表示类型的字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> variable;       <span class="comment">// 写法1</span></span><br><span class="line"><span class="title function_">typeof</span>(variable);      <span class="comment">// 写法2（括号可省略，但在复杂表达式时可能需要）</span></span><br></pre></td></tr></table></figure>



<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FuncName</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。</p>
<h1 id="标准对象"><a href="#标准对象" class="headerlink" title="标准对象"></a>标准对象</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aaa = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;123&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aaa)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aaa.<span class="title function_">valueOf</span>())</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="title class_">String</span>: <span class="string">&#x27;123&#x27;</span>]</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>

<h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><p>字符串的长度。</p>
<h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p>连接两个字符串，返回一个新字符串，不改变原字符串。</p>
<h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h3><p>用于确定一个字符串在另一个字符串中第一次出现的位置，返回结果是匹配开始的位置。如果返回<code>-1</code>，就表示不匹配。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>) <span class="comment">// 4</span></span><br><span class="line"><span class="string">&#x27;JavaScript&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;script&#x27;</span>) <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>, <span class="number">6</span>) <span class="comment">// 7，可以接受第二个参数，表示从该位置开始向后匹配。</span></span><br></pre></td></tr></table></figure>

<h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><p>按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a|b|c&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;|&#x27;</span>) <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;a|b|c&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">// [&quot;a&quot;, &quot;|&quot;, &quot;b&quot;, &quot;|&quot;, &quot;c&quot;]，如果分割规则为空字符串，则返回数组的成员是原字符串的每一个字符。</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;a|b|c&#x27;</span>.<span class="title function_">split</span>() <span class="comment">// [&quot;a|b|c&quot;]，如果省略参数，则返回数组的唯一成员就是原字符串。</span></span><br></pre></td></tr></table></figure>

<h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf()"></a>valueOf()</h3><p>返回对象的原始值。</p>
<h3 id="obj-toString"><a href="#obj-toString" class="headerlink" title="obj.toString()"></a>obj.toString()</h3><p>用于将对象转换为字符串。</p>
<p>不同对象类型通过重写该方法提供特定的字符串输出。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>LSPosed开发</title>
    <url>/2024/12/19/LSPosed%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="Xposed介绍"><a href="#Xposed介绍" class="headerlink" title="Xposed介绍"></a>Xposed介绍</h1><p>&emsp;&emsp;Xposed 框架是一个强大的 Android 逆向工程工具，它允许开发者在不修改应用程序源代码的情况下，动态地注入和修改Android 应用程序的行为。</p>
<h2 id="Xposed原理"><a href="#Xposed原理" class="headerlink" title="Xposed原理"></a>Xposed原理</h2><p>&emsp;&emsp;Android 系统运行的核心和起点是 Zygote 进程，所有应用都是通过它 fork 子进程产生的，当系统开始运行时由 <code>init.rc</code> 脚本调用<code>/system/bin/app_process</code> 程序启动Zygote，加载所需的类并调用初始化方法。</p>
<p>&emsp;&emsp;Xposed 使用 <strong>zygote</strong> 进程来注入代码，它会替换<code>/system/bin/app_process</code>，使其加载Xposed的核心模块<code>XposedBridge.jar</code>，导致所有从 Zygote fork 出来的子进程（包括应用进程和系统服务进程）都会继承 Xposed 的 Hook 环境。</p>
<h2 id="图解分析"><a href="#图解分析" class="headerlink" title="图解分析"></a>图解分析</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[init 进程]</span><br><span class="line">   |</span><br><span class="line">   v</span><br><span class="line">[/system/bin/app_process] -- 启动 Zygote</span><br><span class="line">   |</span><br><span class="line">   v</span><br><span class="line">[ZygoteInit.main()] -- 加载核心类和资源</span><br><span class="line">   |</span><br><span class="line">   v</span><br><span class="line">[fork 子进程]</span><br><span class="line">   |</span><br><span class="line">   +--&gt; [系统服务] (如 system_server)</span><br><span class="line">   |</span><br><span class="line">   +--&gt; [应用进程] (如 com.example.app)</span><br><span class="line"></span><br><span class="line">[Xposed 框架]</span><br><span class="line">   |</span><br><span class="line">   +--&gt; 替换 app_process</span><br><span class="line">   |</span><br><span class="line">   +--&gt; 劫持 ZygoteInit，加载 XposedBridge</span><br><span class="line">   |</span><br><span class="line">   +--&gt; 影响所有子进程，进行 Hook</span><br></pre></td></tr></table></figure>

<h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><p>在 Android 9 及更高版本中，安全限制增加，Xposed 原框架不支持。</p>
<h1 id="LSPosed开发环境搭建"><a href="#LSPosed开发环境搭建" class="headerlink" title="LSPosed开发环境搭建"></a>LSPosed开发环境搭建</h1><p>LSPosed 是一个基于 <strong>Xposed</strong> 框架的增强工具，专注于模块化的安卓应用定制。</p>
<h2 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h2><ul>
<li>面具安装LSPosed模块</li>
<li>Xposed API（XposedBridgeAPI-82.jar，XposedBridgeAPI-89.jar）</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="Android-Studio新建空项目"><a href="#Android-Studio新建空项目" class="headerlink" title="Android Studio新建空项目"></a>Android Studio新建空项目</h3><p>&emsp;&emsp;在app目录下新建一个libs目录（若已有该目录则无需新建），把XposedBridgeAPI.jar放到libs目录下，右击jar包，选择add as library，这一步会在build.gradle里新增一个依赖<code>implementation(files(&quot;libs/XposedBridgeAPI-89.jar&quot;))</code>，需要把<code>implementation</code>改为<code>compileOnly</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation 使用该方式依赖的库将会参与编译和打包</span><br><span class="line">compileOnly 只在编译时有效，不会参与打包</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;修改AndroidManifest.xml文件配置，在<code>&lt;application&gt;</code>标签内添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 是否是xposed模块，xposed根据这个来判断是否是模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;xposedmodule&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模块描述，显示在xposed模块列表那里第二行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;xposeddescription&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:value</span>=<span class="string">&quot;这是一个Xposed模块&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最低xposed版本号(lib文件名可知) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;xposedminversion&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:value</span>=<span class="string">&quot;82&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;在main目录下新建一个assets Folder目录，右击main，<code>new-&gt;Folder-&gt;Assets Folder</code>。在assets目录下新建一个xposed_init文件（无后缀），用来说明入口类。</p>
<p>&emsp;&emsp;在项目包名目录下新建一个模块类lsptest，然后向xposed_init文件里添加一行代码，lsptest1类的全类名<code>com.example.lsposedtest.lsptest</code>。</p>
<h3 id="实现IXposedHookLoadPackage接口"><a href="#实现IXposedHookLoadPackage接口" class="headerlink" title="实现IXposedHookLoadPackage接口"></a>实现<code>IXposedHookLoadPackage</code>接口</h3><p>在lsptest类中实现<code>IXposedHookLoadPackage</code>接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lsptest</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加Hook逻辑"><a href="#添加Hook逻辑" class="headerlink" title="添加Hook逻辑"></a>添加Hook逻辑</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lsptest</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        XposedBridge.log(<span class="string">&quot;Bileton-&gt;package&quot;</span>+loadPackageParam.packageName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>如果出现<code>Default Activity not found</code>，找到<code>Run/Debug Configurations</code>，把<code>Launch Options</code>选项改为<code>Nothing</code>，然后继续运行。</p>
<p>安装成功后，打开LSPosed，点击模块</p>
<p><img src="/2024/12/19/LSPosed%E5%BC%80%E5%8F%91/1.jpg"></p>
<p>&emsp;&emsp;点击我们开发的模块，然后勾选要Hook的app，勾选完成之后，不要直接退出，通过返回键，返回到桌面，然后启动勾选的app，可以在Android Studio里面的日志里看到打印出来的App的包名。</p>
<p><strong>日志打印</strong></p>
<p><img src="/2024/12/19/LSPosed%E5%BC%80%E5%8F%91/2.jpg"></p>
<p>这样我们的环境就搭建好了。</p>
<h1 id="hook构造函数和普通函数"><a href="#hook构造函数和普通函数" class="headerlink" title="hook构造函数和普通函数"></a>hook构造函数和普通函数</h1><h2 id="hookdemo编写"><a href="#hookdemo编写" class="headerlink" title="hookdemo编写"></a>hookdemo编写</h2><h3 id="Person类"><a href="#Person类" class="headerlink" title="Person类"></a>Person类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.lsphookdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=<span class="string">&quot;Bileton&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name);</span><br><span class="line">        age = age2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        Person.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;Bileton&quot;</span>, <span class="string">&quot;Person的属性为:&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot; &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="布局修改"><a href="#布局修改" class="headerlink" title="布局修改"></a>布局修改</h3><p>在布局文件里添加一个按钮<code>button_getname</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_getname&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;getname&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="MainActivity类"><a href="#MainActivity类" class="headerlink" title="MainActivity类"></a>MainActivity类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.lsphookdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.activity.EdgeToEdge;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.core.graphics.Insets;</span><br><span class="line"><span class="keyword">import</span> androidx.core.view.ViewCompat;</span><br><span class="line"><span class="keyword">import</span> androidx.core.view.WindowInsetsCompat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        EdgeToEdge.enable(<span class="built_in">this</span>);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; &#123;</span><br><span class="line">            <span class="type">Insets</span> <span class="variable">systemBars</span> <span class="operator">=</span> insets.getInsets(WindowInsetsCompat.Type.systemBars());</span><br><span class="line">            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);</span><br><span class="line">            <span class="keyword">return</span> insets;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.button_getname).setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(v.getId()==R.id.button_getname)&#123;</span><br><span class="line">            <span class="comment">// 这里调用了一个构造方法和一个普通方法</span></span><br><span class="line">            Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;GetName:&quot;</span>+<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bileton&quot;</span>,<span class="number">21</span>).getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="LSPosed模块编写"><a href="#LSPosed模块编写" class="headerlink" title="LSPosed模块编写"></a>LSPosed模块编写</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.lsposedtest;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lsptest1</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.example.lsphookdemo&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        XposedHelpers.findAndHookConstructor(<span class="string">&quot;com.example.lsphookdemo.Person&quot;</span>, loadPackageParam.classLoader, String.class, <span class="type">int</span>.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="built_in">super</span>.beforeHookedMethod(param);</span><br><span class="line">                Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;before hook param:&quot;</span>+param.args[<span class="number">0</span>]+<span class="string">&quot;---&quot;</span>+param.args[<span class="number">1</span>]);</span><br><span class="line">                param.args[<span class="number">0</span>]=<span class="string">&quot;blttttt&quot;</span>;</span><br><span class="line">                param.args[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">clazzLoader</span> <span class="operator">=</span> loadPackageParam.classLoader;</span><br><span class="line">        Class&lt;?&gt; clazz = clazzLoader.loadClass(<span class="string">&quot;com.example.lsphookdemo.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        XposedHelpers.findAndHookMethod(clazz,<span class="string">&quot;getName&quot;</span>,<span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="built_in">super</span>.afterHookedMethod(param);</span><br><span class="line">                Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;ret:&quot;</span>+param.getResult());</span><br><span class="line">                param.setResult(<span class="string">&quot;bileton&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出日志</strong></p>
<p><img src="/2024/12/19/LSPosed%E5%BC%80%E5%8F%91/3.jpg"></p>
<h1 id="hook内部类"><a href="#hook内部类" class="headerlink" title="hook内部类"></a>hook内部类</h1><h2 id="hookdemo扩展"><a href="#hookdemo扩展" class="headerlink" title="hookdemo扩展"></a>hookdemo扩展</h2><p><strong>添加内部类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;blttttt&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    People(String name)&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;Bileton&quot;</span>, <span class="string">&quot;People的属性为:&quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>布局修改</strong></p>
<p>布局文件里添加按钮<code>button_innerclass</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_innerclass&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;innerclass&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@+id/button_getname&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>调用内部类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        EdgeToEdge.enable(<span class="built_in">this</span>);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; &#123;</span><br><span class="line">            <span class="type">Insets</span> <span class="variable">systemBars</span> <span class="operator">=</span> insets.getInsets(WindowInsetsCompat.Type.systemBars());</span><br><span class="line">            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);</span><br><span class="line">            <span class="keyword">return</span> insets;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.button_getname).setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.button_innerclass).setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(v.getId()==R.id.button_getname)&#123;</span><br><span class="line">            Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;GetName:&quot;</span>+<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bileton&quot;</span>,<span class="number">21</span>).getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(v.getId()==R.id.button_innerclass)&#123;  <span class="comment">// 内部类调用位置</span></span><br><span class="line">            <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bileton&quot;</span>,<span class="number">21</span>);</span><br><span class="line">            Person.<span class="type">People</span> <span class="variable">people</span> <span class="operator">=</span> person.<span class="keyword">new</span> <span class="title class_">People</span>(<span class="string">&quot;Blttttt&quot;</span>);</span><br><span class="line">            people.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="LSPosed模块编写-1"><a href="#LSPosed模块编写-1" class="headerlink" title="LSPosed模块编写"></a>LSPosed模块编写</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.lsposedtest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lsptest3</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.example.lsphookdemo&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> loadPackageParam.classLoader;</span><br><span class="line">        Class&lt;?&gt; person_clazz = classLoader.loadClass(<span class="string">&quot;com.example.lsphookdemo.Person&quot;</span>);</span><br><span class="line">        XposedHelpers.findAndHookConstructor(<span class="string">&quot;com.example.lsphookdemo.Person$People&quot;</span>, classLoader, person_clazz, String.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="built_in">super</span>.beforeHookedMethod(param);</span><br><span class="line">                Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;before hook param:&quot;</span>+param.args[<span class="number">0</span>]+<span class="string">&quot;---&quot;</span>+param.args[<span class="number">1</span>]);</span><br><span class="line">                param.args[<span class="number">1</span>]=<span class="string">&quot;blttt&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="built_in">super</span>.afterHookedMethod(param);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="struggle"><a href="#struggle" class="headerlink" title="struggle"></a>struggle</h2><p>这段内部类的hook挣扎了好久，后来弄清楚了，原因如下：</p>
<p>通过Jadx的反编译查看People类的构造方法，转为smali语言</p>
<p><strong>空参构造</strong></p>
<p>如下看到这个构造方法里面有一个参数，是Person类。</p>
<p><img src="/2024/12/19/LSPosed%E5%BC%80%E5%8F%91/4.jpg"></p>
<p><strong>有参构造</strong></p>
<p>查看有参数的构造方法，这个构造方法本来是一个参数，但是通过Smali代码看到还是多了一个参数，还是Person类</p>
<p><img src="/2024/12/19/LSPosed%E5%BC%80%E5%8F%91/5.jpg"></p>
<p>然后不断的试错，才明白了在Xposed里还要传递这个参数。</p>
<h1 id="hook匿名类"><a href="#hook匿名类" class="headerlink" title="hook匿名类"></a>hook匿名类</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="hook-修改属性"><a href="#hook-修改属性" class="headerlink" title="hook 修改属性"></a>hook 修改属性</h1><h2 id="hookdemo扩展-1"><a href="#hookdemo扩展-1" class="headerlink" title="hookdemo扩展"></a>hookdemo扩展</h2><p>添加了几个属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&quot;None&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">mark</span> <span class="operator">=</span> <span class="string">&quot;Null&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="获取非静态属性"><a href="#获取非静态属性" class="headerlink" title="获取非静态属性"></a>获取非静态属性</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.lsposedtest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lsptest1</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.example.lsphookdemo&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;hooked successful!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        XposedHelpers.findAndHookMethod(<span class="string">&quot;com.example.lsphookdemo.Person&quot;</span>, loadPackageParam.classLoader, <span class="string">&quot;print&quot;</span>, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="built_in">super</span>.beforeHookedMethod(param);</span><br><span class="line">                <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> loadPackageParam.classLoader;</span><br><span class="line">                Class&lt;?&gt; person_clazz = classLoader.loadClass(<span class="string">&quot;com.example.lsphookdemo.Person&quot;</span>);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">Object_person</span> <span class="operator">=</span> XposedHelpers.newInstance(person_clazz);</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) XposedHelpers.getObjectField(Object_person,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;attribute: &quot;</span>+name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/19/LSPosed%E5%BC%80%E5%8F%91/6.jpg"></p>
<h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      <categories>
        <category>LSPosed</category>
      </categories>
      <tags>
        <tag>LSPosed开发</tag>
      </tags>
  </entry>
  <entry>
    <title>JetBrains开发工具使用指南</title>
    <url>/2025/03/05/JetBrains%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Linux命令</title>
    <url>/2024/08/09/Linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><p>命令基础格式<br><code>command [-options] [parameter]</code></p>
<ul>
<li><code>command</code> : 命令本身。  </li>
<li><code>[]</code> : 可选，非必填。  </li>
<li><code>options</code> : 命令的一些选项。  </li>
<li><code>parameter</code> : 命令的参数。</li>
</ul>
<h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p><code>ls [-a -l -h] [Linux路径]</code></p>
<ul>
<li><code>[-a -l -h]</code> 是可选的选项。</li>
<li><code>Linux路径</code>是此命令的可选参数。</li>
<li><code>-a</code>表示<code>all</code>的意思，即列出全部文件（包含隐藏的文件&#x2F;文件夹），以<code>.</code>开头的文件夹就是Linux系统中隐藏的文件&#x2F;文件夹。</li>
<li><code>-l</code>表示以列表（竖向排列）的形式展示内容，并展示更多信息。</li>
<li><code>-h</code>表示以易于阅读的形式，列出文件大小，需要和-l搭配使用。</li>
</ul>
<h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><p>cd来自英文：Change Directory  </p>
<p><code>cd [Linux路径]</code></p>
<ul>
<li><code>cd</code>命令无需选项，只有参数，切换目录。</li>
<li><code>cd</code>命令直接执行，不写参数，表示回到用户的HOME目录&#x2F;系统的根目录。</li>
</ul>
<h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h2><p>查看当前所在的工作目录（Print Work Directory）。  </p>
<p><code>pwd</code>命令，无选项，无参数，直接输入<code>pwd</code>即可。</p>
<h2 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h2><p><code>.</code>：表示当前目录<br><code>.</code>.：表示上一级目录<br><code>~</code>：表示HOME目录<br><code>/</code>:根目录  </p>
<h2 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h2><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>可以创建新的目录文件夹<br>mkdir来自英文：Make Directory<br><code>mkdir [-p] Linux路径</code>  </p>
<ul>
<li>参数必填，表示Linux路径，就是要创建的文件夹的路径。</li>
<li><code>-p</code>选项可选，表示自动创建不存在的父目录，适用于创建连续多层级的目录，如<code>mkdir -p dir1/dir2/dir3</code>。</li>
</ul>
<h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>创建文件<br><code>touch Linux路径</code></p>
<ul>
<li>touch命令无选项，参数必填</li>
</ul>
<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>查看文件的内容<br><code>cat Linux路径</code></p>
<ul>
<li>cat同样没有选项，只有必填参数</li>
</ul>
<h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>也可以查看文件内容，不同的是：</p>
<ul>
<li>cat直接将内容全部显示出来  </li>
<li>more支持翻页，如果文件内容过多，可以一页一页显示</li>
</ul>
<p><code>more Linux路径</code>  </p>
<ul>
<li>没有选项，只有必填参数</li>
<li>在查看的过程中，通过空格翻页</li>
<li>通过q退出查看</li>
</ul>
<h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>复制文件&#x2F;文件夹<br><code>cp [-r] 源文件 目标文件</code></p>
<ul>
<li><code>-r</code>：选项，可选，用于复制文件夹使用</li>
<li><code>源文件</code>：Linux路径，表示被复制的文件或文件夹</li>
<li><code>目标文件</code>：Linux路径，表示要复制去的地方</li>
</ul>
<h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>用于移动文件&#x2F;文件夹<br><code>mv 源文件 目标文件</code></p>
<ul>
<li><code>源文件</code>：Linux路径，表示被移动的文件或文件夹</li>
<li><code>目标文件</code>：Linux路径，表示要移动去的地方，如果目标不存在，则进行改名，确保目标存在</li>
</ul>
<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>删除文件、文件夹<br><code>rm [-r -f] 参数1 参数2 ... 参数n</code></p>
<ul>
<li><code>-r</code>：选项用于删除文件夹</li>
<li><code>-f</code>表示force，强制删除（不会弹出提示确认信息）<br>普通用户删除内容不会弹出提示，只有root管理员用户删除内容会有提示<br>所以一般普通用户用不到-f选项</li>
<li><code>参数1、参数2…参数n</code>：表示要删除的文件或文件夹路径，按照空格隔开</li>
</ul>
<p>rm命令支持通配符<code>*</code>，用来做模糊匹配</p>
<ul>
<li>符号<code>*</code>表示通配符，即匹配任意内容（包含空）  </li>
<li><code>test*</code>，表示匹配任何以test开头的内容  </li>
<li><code>*test</code>，表示匹配任何以test结尾的内容  </li>
<li><code>*test*</code>，表示匹配任何包含test的内容</li>
</ul>
<p>以下命令慎用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -f *</span><br><span class="line">rm -rf *</span><br><span class="line">rm -rf /*</span><br></pre></td></tr></table></figure>
<h2 id="which"><a href="#which" class="headerlink" title="which"></a>which</h2><p>搜索系统的环境变量 $PATH 中列出的目录，以找到对应的可执行文件。<br><code>which xxx</code></p>
<ul>
<li>which 命令只能查找在 $PATH 环境变量中列出的目录里的可执行文件。</li>
</ul>
<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>从文件中通过关键字过滤文件的行<br><code>grep [-n] &quot;关键字&quot; 文件路径</code></p>
<ul>
<li><code>-n</code>：表示在结果中显示匹配的行的行号</li>
<li><code>&quot;关键字&quot;</code>：必填，表示过滤的关键字。</li>
<li><code>参数文件路径</code>：必填，表示要过滤的文件的文件路径，可作为内容输入端口。</li>
</ul>
<h2 id><a href="#" class="headerlink" title="|"></a>|</h2><p>管道符，将管道符左边命令的结果作为右边命令的输入</p>
<h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><p>在命令行内输出指定内容<br><code>echo &quot;输出的内容&quot;</code></p>
<ul>
<li>无需选项，只有一个参数，表示要输出的内容</li>
</ul>
<h2 id="反引号"><a href="#反引号" class="headerlink" title="反引号 &#96;"></a>反引号 &#96;</h2><p>被&#96;包围的内容，会被当做命令执行，而非普通字符</p>
<p><img src="/2024/08/09/Linux%E5%91%BD%E4%BB%A4/1.png"></p>
<h2 id="重定向符-和"><a href="#重定向符-和" class="headerlink" title="重定向符&gt;和&gt;&gt;"></a>重定向符<code>&gt;</code>和<code>&gt;&gt;</code></h2><p><code>&gt;</code>将左侧命令的结果，覆盖 写入到符号右侧指定的的文件中<br><code>&gt;&gt;</code>将左侧命令的结果，追加 写入到符号右侧指定的文件中</p>
<p><img src="/2024/08/09/Linux%E5%91%BD%E4%BB%A4/2.png"></p>
<h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p>查看文件尾部内容，跟踪文件的最新更改<br><code>tail [-f -num] Linux路径</code></p>
<ul>
<li><code>Linux路径</code>：表示被跟踪的文件路径</li>
<li><code>-f</code>：表示持续跟踪</li>
<li><code>-num</code>：表示查看尾部多少行，不填默认10行</li>
</ul>
<h2 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h2><p>以树状图的形式列出目录的内容。</p>
<h2 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h2><p>显示当前用户名的命令。</p>
<h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><p>查看一个文件的类型<br><code>file filename</code></p>
<h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p><code>find [路径] [选项] [参数]</code></p>
<p><strong>选项</strong></p>
<ul>
<li><p>-name</p>
<p>  根据文件名查找</p>
<p>  <code>find path -name &quot;name&quot;</code></p>
</li>
<li><p>-size</p>
<p>  根据文件大小查找</p>
<p>  <code>find path -size [+|-] #size</code></p>
<p>  <code>size</code>单位：<code>c(字节)</code>、<code>k()千字节</code>、<code>M(兆字节)</code>、<code>G</code></p>
<p>  <code>find /path/to/search -size +100M</code></p>
</li>
</ul>
<h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p>curl 是常用的命令行工具，用来请求 Web 服务器。</p>
<ul>
<li><p>无选项时</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl https://www.example.com</span><br></pre></td></tr></table></figure>

<p>  向<code>www.example.com</code>发出 GET 请求，服务器返回的内容会在命令行输出。</p>
</li>
</ul>
<p>当使用curl访问github时出现<code>Couldn&#39;t contect to server</code>问题时，可以在<code>/etc/hosts</code>将github的ip改为国外的ip，然后进行访问。</p>
<h2 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h2><p>用于显示系统相关信息，比如主机名、内核版本号、硬件架构等。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname --help</span><br><span class="line">usage: uname [-asnrvm]</span><br><span class="line"></span><br><span class="line">Print system information.</span><br><span class="line">-s      System name  </span><br><span class="line">-n      Network (domain) name</span><br><span class="line">-r      Kernel Release number</span><br><span class="line">-v      Kernel Version</span><br><span class="line">-m      Machine (hardware) name</span><br><span class="line">-a      All of the above</span><br></pre></td></tr></table></figure>



<h2 id="关机命令"><a href="#关机命令" class="headerlink" title="关机命令"></a>关机命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown -h now # 关闭系统</span><br><span class="line">reboot # 重启</span><br><span class="line">logout # 注销</span><br></pre></td></tr></table></figure>

<h1 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h1><p>执行<code>env</code>可查看当前系统中记录的环境变量<br>环境变量是一种KeyValue型结构</p>
<h2 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h2><p>PATH记录了系统执行任何命令的搜索路径（路径之间以<code>:</code>隔开）<br>执行任何命令就会从上述路径中搜索要执行的本体</p>
<h2 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h2><p>在Linux系统中，<code>$</code>符号用于取“变量”的值<br>比如<code>echo $PATH</code>，取得PATH这个环境变量的值，并通过echo语句输出出来。<br>或者<code>echo $&#123;PATH&#125;ABC</code>，通过{}来标注取的变量是谁</p>
<h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><h3 id="临时设置环境变量"><a href="#临时设置环境变量" class="headerlink" title="临时设置环境变量"></a>临时设置环境变量</h3><p>在当前 shell 会话中有效，关闭 shell 后失效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:value</span><br></pre></td></tr></table></figure>

<p>可以通过<code>echo $PATH</code>查看</p>
<h3 id="永久设置环境变量"><a href="#永久设置环境变量" class="headerlink" title="永久设置环境变量"></a>永久设置环境变量</h3><p>需要编辑配置文件，根据作用范围选择以下文件：</p>
<ul>
<li><p>全局设置： 修改 <code>/etc/profile</code> 或 <code>/etc/environment</code>（所有用户）。</p>
</li>
<li><p>用户级设置： 修改 <code>~/.bashrc</code> 或 <code>~/.bash_profile</code>（仅当前用户）。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>添加如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:value</span><br></pre></td></tr></table></figure>

<p>可以通过命令直接把环境变量添加到<code>.bashrc</code>文件中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;export PATH=$PATH:value&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>保存后退出，执行如下命名使配置文件生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>



<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>每台联网的电脑都会有一个地址，用于和其他计算机进行通讯<br>可以通过：<code>ifconfig</code>命令查看本机的ip</p>
<h2 id="特殊IP地址"><a href="#特殊IP地址" class="headerlink" title="特殊IP地址"></a>特殊IP地址</h2><ul>
<li><p><code>127.0.0.1</code>指代本机</p>
</li>
<li><p><code>0.0.0.0</code></p>
<p>特殊IP</p>
<ul>
<li>可以用于指代本机</li>
<li>可以在端口绑定中来确定绑定关系</li>
<li>在一些IP地址限制中，表示所有IP的意思，表示允许任意IP访问</li>
</ul>
</li>
</ul>
<h2 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h2><p>每台电脑除了IP地址外，还可以有一个名字，称为主机名<br>Windows系统和Linux都可以给系统设置主机名</p>
<ul>
<li>Windows查看系统设备名称</li>
<li>Linux可以用命令<code>hostname</code></li>
</ul>
<h2 id="在Linux中修改主机名"><a href="#在Linux中修改主机名" class="headerlink" title="在Linux中修改主机名"></a>在Linux中修改主机名</h2><p>可以使用命令：<code>hostnamectl set-hostname &quot;主机名&quot;</code><br>重新登陆即可看到更改</p>
<h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>先查看本机的记录（通过主机名找到对应计算机的IP地址）</p>
<ul>
<li><code>Windows：C:\Windows\System32\drivers\etc\hosts</code></li>
<li><code>Linux: /etc/hosts</code></li>
</ul>
<p>再联网去DNS服务器询问</p>
<h2 id="网络传输"><a href="#网络传输" class="headerlink" title="网络传输"></a>网络传输</h2><h3 id="使用ping命令检查服务器是否可联通"><a href="#使用ping命令检查服务器是否可联通" class="headerlink" title="使用ping命令检查服务器是否可联通"></a>使用ping命令检查服务器是否可联通</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping [-c num] ip或主机名</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-c</code>，检查的次数，不使用<code>-c</code>选项，将无限次持续检查</li>
<li><code>ip或主机名</code>，被检查的服务器的IP地址或主机名地址</li>
</ul>
<h3 id="使用wget命令下载文件"><a href="#使用wget命令下载文件" class="headerlink" title="使用wget命令下载文件"></a>使用wget命令下载文件</h3><p>wget是一个非交互式的文件下载器，可以在命令行内下载网络文件<br><code>wget [-b] url</code></p>
<ul>
<li><code>-b</code>，可选，后台下载，会将日志写入到当前工作目录的wget-log文件</li>
<li><code>url</code> ,下载链接</li>
</ul>
<h3 id="使用curl命令发起网络请求"><a href="#使用curl命令发起网络请求" class="headerlink" title="使用curl命令发起网络请求"></a>使用curl命令发起网络请求</h3><p>发送http网络请求，可用于下载文件、获取信息等<br><code>curl [-O] url</code></p>
<ul>
<li><code>-O</code>，用于下载文件，当url是下载链接时，可以使用此选项保存文件</li>
<li><code>url</code>，要发起请求的网络地址</li>
</ul>
<h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>端口是设备与外界通讯交流的出入口。</p>
<ul>
<li>物理端口：又可以称之为接口，是可见端口，如USB接口，HDMI端口等</li>
<li>虚拟端口：指计算机内部的端口，不可见，是用来操作系统和外部进行交互使用的<ul>
<li>通过IP只能锁定计算机，但是无法锁定具体的程序。</li>
<li>通过端口可以锁定计算机上具体的应用程序，确保程序之间进行沟通。</li>
</ul>
</li>
</ul>
<p>IP地址相当于小区地址，而端口相当于门牌号了。</p>
<p>Linux系统可以支持65535个端口，这么多端口可以分为3类进行使用：</p>
<ul>
<li>公认端口：1~1023，通常用于一些系统内置或知名程序的预留使用，如SSH服务的22端口，HTTPS服务的443端口，非特殊需要，不能占用这个范围的端口</li>
<li>注册端口：1024~49151，通常可以随意使用，用于松散的绑定一些程序\服务</li>
<li>动态端口：49152~65535，通常不会固定绑定程序，而是当时程序对外网进行网络链接时，临时使用</li>
</ul>
<h3 id="查看端口占用情况"><a href="#查看端口占用情况" class="headerlink" title="查看端口占用情况"></a>查看端口占用情况</h3><p>可以使用nmap命令<br><code>nmap 被查看的IP地址</code><br><strong>netstat</strong><br>可以通过netstat命令，查看指定端口的占用情况<br><code>netstat -anp|grep 端口号</code><br>常用选项</p>
<ul>
<li><code>-a</code>: 列出所有端口</li>
<li><code>-l</code>: 只显示监听端口</li>
<li><code>-t</code>: 显示 TCP 传输协议的连线状况</li>
<li><code>-u</code>: 显示 UDP 传输协议的连线状况</li>
</ul>
<h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><p>程序运行在操作系统中，是被操作系统所管理的。<br>每一个程序在运行的时候，便被操作系统注册为系统中的一个<code>进程</code>。<br>并为每一个进程都分配一个独有的：进程ID（进程号）。</p>
<h2 id="查看进程ps"><a href="#查看进程ps" class="headerlink" title="查看进程ps"></a>查看进程ps</h2><p>通过PS命令查看Linux系统中的进程信息<br><code>ps [options]</code></p>
<ul>
<li><code>-A</code>，显示所有终端进程</li>
<li><code>-e</code>，显示出全部的进程</li>
<li><code>-f</code>，以完全格式化的形式展示信息（展示全部信息）</li>
</ul>
<p><code>ps -ef</code> 列出全部进程的全部信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UID     :进程所属的用户ID</span><br><span class="line">PID     :进程的进程号ID</span><br><span class="line">PPID    :进程的父ID（启动此进程的其他进程）</span><br><span class="line">C       :此进程的CPU占用率（百分比）</span><br><span class="line">STIME   :进程的启动时间</span><br><span class="line">TTY     :启动此进程的终端序号，如显示？，表示非终端启动</span><br><span class="line">TIME    :进程占用CPU时间</span><br><span class="line">CMD     :进程对应的名称或启动路径或启动命令</span><br></pre></td></tr></table></figure>

<h2 id="关闭进程kill"><a href="#关闭进程kill" class="headerlink" title="关闭进程kill"></a>关闭进程kill</h2><p>通过kill命令关闭进程。<br><code>kill [-9] 进程ID</code></p>
<ul>
<li><code>-9</code>，表示强制关闭进程。不使用此选项会向进程发送信号要求其关闭，但是否关闭看进程自身的处理机制。</li>
</ul>
<h2 id="pidof"><a href="#pidof" class="headerlink" title="pidof"></a>pidof</h2><p>查找正在运行的特定程序的进程 ID（PID）。<br><code>pidof [options] programName</code></p>
<h1 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a>压缩和解压</h1><h2 id="压缩格式"><a href="#压缩格式" class="headerlink" title="压缩格式"></a>压缩格式</h2><ul>
<li>zip格式：Linux、Windows、MacOS常用</li>
<li>7zip：Windows常用</li>
<li>rar：Windows常用</li>
<li>tar：Linux、MacOS常用</li>
<li>gzip：Linux、MacOS常用</li>
</ul>
<h2 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h2><p>有两种常见压缩格式，后缀名分别是：</p>
<ul>
<li>.tar，称之为tarball，归档文件，简单的将文件组装到一个.tar的文件内，仅仅是简单的封装。</li>
<li>.gz，常见为.tar.gz，gzip格式压缩文件，即使用gzip压缩算法将文件压缩到一个文件内，极大减少压缩后的体积</li>
</ul>
<p>对于这两种格式，可以用tar命令进行压缩和解压操作：<br><code>tar [-c -v -x -f -z -C] 参数1 参数2 ... 参数N</code></p>
<ul>
<li><code>-c</code>，创建压缩文件，用于压缩模式</li>
<li><code>-v</code>显示压缩、解压过程，用于查看进度</li>
<li><code>-x</code>，解压模式</li>
<li><code>-f</code>，要创建的文件，或解压的文件，-f选项必须在所有选项中位置处于最后一个</li>
<li><code>-z</code>，gzip模式，不使用就是tarball格式</li>
<li><code>-C</code>，选择解压的目的地，用于解压模式</li>
</ul>
<h3 id="tar命令压缩"><a href="#tar命令压缩" class="headerlink" title="tar命令压缩"></a>tar命令压缩</h3><p>tar常用压缩组合有两种：</p>
<ul>
<li>tar -cvf test.tar 1.txt 2.txt 3.txt<br>将1.txt 2.txt 3.txt压缩到test.tar文件内</li>
<li>tar -zcvf test.tar.gz 1.txt 2.txt 3.txt<br>将1.txt 2.txt 3.txt压缩到test.tar.gz文件内，使用gzip模式</li>
</ul>
<p>要注意的是：</p>
<ul>
<li>-z选项要使用的话，一般处于选项第一个</li>
<li>-f选项，必须在选项位最后一个</li>
</ul>
<h3 id="tar命令解压"><a href="#tar命令解压" class="headerlink" title="tar命令解压"></a>tar命令解压</h3><p>tar常用解压组合有：</p>
<ul>
<li><code>tar -xvf test.tar</code><br>解压test.tar，将文件解压至当前目录</li>
<li><code>tar -xvf test.tar -C /home/itheima</code><br>解压test.tar，解压至<code>/home/itheima</code></li>
<li><code>tar -zxvf test.tar.gz -C /home/itheima</code><br>以gzip模式解压test.tar.gz，将文件解压至指定目录（&#x2F;home&#x2F;itheima）</li>
</ul>
<p>注意：</p>
<ul>
<li><code>-f</code>选项必须在最后一位</li>
<li><code>-z</code>选项，建议在开头位置</li>
<li><code>-C</code>单独使用，和解压的其他参数分开</li>
</ul>
<h2 id="zip命令"><a href="#zip命令" class="headerlink" title="zip命令"></a>zip命令</h2><h3 id="zip压缩"><a href="#zip压缩" class="headerlink" title="zip压缩"></a>zip压缩</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip [-r] 参数1 参数2 ... 参数N</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-r</code>，被压缩的文件包含文件夹的时候，需要使用<code>-r</code>选项</li>
</ul>
<h3 id="unzip解压"><a href="#unzip解压" class="headerlink" title="unzip解压"></a>unzip解压</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip 参数 [-d]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-d</code>，指定要解压去的位置，同tar的-C选项</li>
<li><code>参数</code>，被解压的zip压缩包文件</li>
</ul>
<h2 id="dpkg命令"><a href="#dpkg命令" class="headerlink" title="dpkg命令"></a>dpkg命令</h2><p><code>dpkg --help</code><br><code>dpkg --version</code><br>管理deb包，可以对其安装、卸载、deb打包、deb解压等操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-i: 安装软件包</span><br><span class="line">-r: 删除软件包</span><br><span class="line">-P: 删除软件包的同时删除其配置文件</span><br><span class="line">-L: 显示与软件包关联的文件</span><br><span class="line">-l: 显示已安装软件包列表</span><br><span class="line">-s: 查看软件包（已安装）的详细信息</span><br><span class="line">-S: 查询一个文件属于哪个软件包</span><br><span class="line">--unpack:   解开软件包</span><br><span class="line">-c: 显示软件包内文件列表</span><br><span class="line">--configure:    配置软件包</span><br></pre></td></tr></table></figure>

<h2 id="7z命令"><a href="#7z命令" class="headerlink" title="7z命令"></a>7z命令</h2><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7z x [-r -o]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>x</code>，代表解压文件，按原始目录解压</li>
<li><code>-r</code>，表示递归解压所有的子文件夹</li>
<li><code>-o</code>，指定解压到的目录，<code>-o</code>后面没有空格直接跟目录</li>
</ul>
<h1 id="系统目录"><a href="#系统目录" class="headerlink" title="系统目录"></a>系统目录</h1><h2 id="etc"><a href="#etc" class="headerlink" title="&#x2F;etc"></a>&#x2F;etc</h2><ul>
<li><p>&#x2F;etc&#x2F;hostname</p>
<p>这个文件里存放着主机名，可以进行修改</p>
</li>
<li><p>&#x2F;etc&#x2F;hosts</p>
<p>本地主机名解析文件，用于将 IP 地址映射到主机名，在 DNS（域名系统）查询之前进行解析。</p>
</li>
</ul>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><h2 id="Ctrl-Alt-T"><a href="#Ctrl-Alt-T" class="headerlink" title="Ctrl+Alt+T"></a>Ctrl+Alt+T</h2><p>打开终端</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode刷题记录</title>
    <url>/2025/03/01/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h1><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。</p>
<p>你可以按任意顺序返回答案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure>

<h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">            <span class="type">int</span> front = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> back = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (count&lt;=nums.<span class="built_in">size</span>()<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>()<span class="number">-1</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(front==i)&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (nums[front]+nums[i]==target)</span><br><span class="line">                    &#123;</span><br><span class="line">                        v.<span class="built_in">push_back</span>(front);</span><br><span class="line">                        v.<span class="built_in">push_back</span>(i);</span><br><span class="line">    </span><br><span class="line">                        <span class="keyword">return</span> v;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>()<span class="number">-1</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(back==i)&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (nums[i]+nums[back]==target)</span><br><span class="line">                    &#123;</span><br><span class="line">                        v.<span class="built_in">push_back</span>(i);</span><br><span class="line">                        v.<span class="built_in">push_back</span>(back);</span><br><span class="line">    </span><br><span class="line">                        <span class="keyword">return</span> v;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">if</span> (count%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    front++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    back--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (front==back)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<h1 id="两数相加"><a href="#两数相加" class="headerlink" title="两数相加"></a>两数相加</h1><p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p>
<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>
<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [2,4,3], l2 = [5,6,4]</span><br><span class="line">输出：[7,0,8]</span><br><span class="line">解释：342 + 465 = 807.</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [0], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</span><br><span class="line">输出：[8,9,9,9,0,0,0,1]</span><br></pre></td></tr></table></figure>

<h2 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">            ListNode* ret = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">            ListNode* tempret=ret;</span><br><span class="line">            <span class="type">int</span> temp;</span><br><span class="line">            <span class="keyword">while</span> (l1!=<span class="literal">nullptr</span> || l2!=<span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(l1 == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                    temp = l2-&gt;val+tempret-&gt;val;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l2== <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                    temp = l1-&gt;val+tempret-&gt;val;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    temp = l1-&gt;val + l2-&gt;val+tempret-&gt;val;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(temp&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> ge = temp%<span class="number">10</span>;</span><br><span class="line">                    tempret-&gt;val = ge;</span><br><span class="line">                    tempret-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    tempret-&gt;val = temp;</span><br><span class="line">                    <span class="keyword">if</span>(l1== <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(l2-&gt;next!= <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                            tempret-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l2== <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(l1-&gt;next!= <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                            tempret-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(l1-&gt;next!=<span class="literal">nullptr</span> || l2-&gt;next!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                        tempret-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(l1 == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                    l2 = l2-&gt;next;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l2== <span class="literal">nullptr</span>)&#123;</span><br><span class="line">                    l1 = l1-&gt;next;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    l1 = l1-&gt;next;</span><br><span class="line">                    l2 = l2-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (tempret-&gt;next!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                    tempret = tempret-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法</title>
    <url>/2025/01/11/Markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>Markdown是一种轻量级标记语言，使用易读易写的纯文本格式编写文档。</p>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">#	    一级标题</span></span><br><span class="line"><span class="section">##	    二级标题</span></span><br><span class="line"><span class="section">###	    三级标题</span></span><br><span class="line"><span class="section">####	四级标题</span></span><br><span class="line"><span class="section">#####	五级标题</span></span><br><span class="line"><span class="section">######	六级标题</span></span><br></pre></td></tr></table></figure>

<h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>使用空白行来进行段落分隔。</p>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>在一行的末尾添加两个空格，然后按回车键,即可创建一个换行。</p>
<h2 id="加粗文本"><a href="#加粗文本" class="headerlink" title="加粗文本"></a>加粗文本</h2><p>在文本的前后各添加两个星号或下划线。</p>
<h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><p>在文本前后添加一个星号或下划线。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在段落前添加一个 <code>&gt;</code> 符号。</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><strong>有序列表</strong></p>
<p>在每个列表项前添加数字并紧跟一个英文句点。</p>
<p><strong>无序列表</strong></p>
<p>在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。</p>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>要将单词或短语表示为代码，将其包裹在反引号 &#96;&#96;&#96; 中。</p>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>在单独一行上使用三个或多个星号 (<code>***</code>)、破折号 (<code>---</code>) 或下划线 (<code>___</code>) ，并且不能包含其他内容。</p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[超链接显示名](超链接地址 &quot;超链接title&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![图片alt](图片链接 &quot;图片title&quot;)</span><br></pre></td></tr></table></figure>

<h1 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h1><ul>
<li><p><strong>行内公式：</strong> 使用<code>$</code>包裹公式</p>
</li>
<li><p><strong>独立公式：</strong> 使用<code>$$</code>包裹公式</p>
</li>
</ul>
<h2 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h2><p>上下标分别使用^和_表示。例如：</p>
<p><code>$x^2$</code> $\rightarrow$ $x^2$</p>
<p><code>$x_2$</code> $ \rightarrow$$x_2$</p>
<h2 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h2><ul>
<li><p>第一种</p>
<p>  <code>$\frac &#123;a&#125;&#123;b&#125;$</code>$ \rightarrow$$\frac {a}{b}$</p>
</li>
<li><p>第二种</p>
<p>  <code>$\over$</code> $ \rightarrow$ $a+1 \over b+1$</p>
</li>
</ul>
<h2 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h2><p><code>$\sum$</code> $ \rightarrow$ $\sum$</p>
<h2 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h2><p><code>$\hat&#123;x&#125;$</code>  $ \rightarrow$ $\hat{x}$</p>
]]></content>
      <categories>
        <category>Markdown语法</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>OkHttp网络通信</title>
    <url>/2025/01/18/OkHttp%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Pixel刷机教程</title>
    <url>/2025/02/11/Pixel%E5%88%B7%E6%9C%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="环境-设备"><a href="#环境-设备" class="headerlink" title="环境+设备"></a>环境+设备</h1><p>电脑：Windows11</p>
<p>测试机：o版，Pixel3，Android 9</p>
<h1 id="测试机准备"><a href="#测试机准备" class="headerlink" title="测试机准备"></a>测试机准备</h1><h2 id="打开开发者模式"><a href="#打开开发者模式" class="headerlink" title="打开开发者模式"></a>打开开发者模式</h2><p>进入系统设置-&gt;系统-&gt;关于手机-&gt;连续点击版本号，进入开发者模式</p>
<h2 id="解OEM锁"><a href="#解OEM锁" class="headerlink" title="解OEM锁"></a>解OEM锁</h2><p>进入系统设置-&gt;系统-&gt;高级-&gt;开发者选项-&gt;勾选OEM解锁</p>
<h2 id="打开USB调试"><a href="#打开USB调试" class="headerlink" title="打开USB调试"></a>打开USB调试</h2><p>进入系统设置-&gt;系统-&gt;高级-&gt;开发者选项-&gt;勾选USB调试</p>
<h1 id="电脑准备"><a href="#电脑准备" class="headerlink" title="电脑准备"></a>电脑准备</h1><h2 id="安装USB驱动"><a href="#安装USB驱动" class="headerlink" title="安装USB驱动"></a>安装USB驱动</h2><p>在Windows上对Google设备进行adb调试，必须安装Google USB驱动，链接<code>https://developer.android.google.cn/studio/run/win-usb</code>，下载好了之后可以放在桌面或指定一个目录里。</p>
<p><img src="/2025/02/11/Pixel%E5%88%B7%E6%9C%BA%E6%95%99%E7%A8%8B/1.jpg"></p>
<p>通过数据线将测试机和电脑连接</p>
<p>打开设备管理器</p>
<p>找到其他设备，可以看到如下</p>
<p><img src="/2025/02/11/Pixel%E5%88%B7%E6%9C%BA%E6%95%99%E7%A8%8B/3.jpg"></p>
<p>右键设备名称，选择更新驱动程序，选择浏览我的电脑以查找驱动程序，根据路径找到下载的usb驱动，然后进行安装</p>
<h2 id="下载刷机包镜像"><a href="#下载刷机包镜像" class="headerlink" title="下载刷机包镜像"></a>下载刷机包镜像</h2><p>访问如下链接进行下载</p>
<p><code>https://developers.google.cn/android/images?hl=zh-cn#blueline</code></p>
<p>因为我的设备是Pixel3，要刷的系统是Android 10，所以下载与之相关的刷机包</p>
<p>（建议新建一个文件夹，存放与刷机相关的文件，路径不要有中文）</p>
<h2 id="下载Platform-Tools"><a href="#下载Platform-Tools" class="headerlink" title="下载Platform-Tools"></a>下载Platform-Tools</h2><p>adb和fastboot可对测试机进行调试</p>
<p><img src="/2025/02/11/Pixel%E5%88%B7%E6%9C%BA%E6%95%99%E7%A8%8B/2.jpg"></p>
<p>在这个目录下打开终端，通过命令查看已连接的设备</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>

<p><img src="/2025/02/11/Pixel%E5%88%B7%E6%9C%BA%E6%95%99%E7%A8%8B/4.jpg"></p>
<h1 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h1><p>设备预先留有足够的电量，刷机期间数据线不要断开。</p>
<h2 id="进入fastboot模式"><a href="#进入fastboot模式" class="headerlink" title="进入fastboot模式"></a>进入fastboot模式</h2><p>通过adb命令进入fastboot模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb reboot bootloader #重启进入fastboot mode</span><br></pre></td></tr></table></figure>

<h2 id="解BL锁"><a href="#解BL锁" class="headerlink" title="解BL锁"></a>解BL锁</h2><p>在fastboot界面会有一个参数<code>Device staet</code>显示设备状态，locked是未解锁，unlocked是解锁的</p>
<p>有的设备bl锁可能已经是解开的了，如果未解锁，通过如下命令解锁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot flashing unlock</span><br></pre></td></tr></table></figure>

<h2 id="刷机-1"><a href="#刷机-1" class="headerlink" title="刷机"></a>刷机</h2><p>在刷机包的目录下打开终端，输入如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flash-all.bat</span><br></pre></td></tr></table></figure>

<p>等待刷机完成</p>
<h1 id="root"><a href="#root" class="headerlink" title="root"></a>root</h1><p>在系统设置里打开开发者模式，然后找到开发者选项，勾选USB调试</p>
<p>打开刷机包，在<code>images</code>文件夹里找到<code>boot.img</code>文件</p>
<p>利用adb工具将其push到<code>/sdcard/Download</code>目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> adb push /sdcard/Download</span><br></pre></td></tr></table></figure>

<p>安装面具Magisk</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb install magisk.apk</span><br></pre></td></tr></table></figure>

<p>打开Magisk，找到Magisk的安装，点击选择并修补一个文件，找到<code>/sdcard/Download</code>目录下的<code>boot.img</code>文件，然后进行修补，修补完成后找到<code>/sdcard/Download</code>目录下生成的修补文件<code>magisk...xxx.img</code>，把它导出到电脑端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb pull /sdcard/Download/magisk...xxx.img</span><br></pre></td></tr></table></figure>

<p>然后进入fastboot模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure>

<p>把<code>magisk...xxx.img</code>镜像刷入到boot分区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot flash boot magisk...xxx.img</span><br></pre></td></tr></table></figure>

<p>然后重启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure>



<h1 id="关于网络连接受限"><a href="#关于网络连接受限" class="headerlink" title="关于网络连接受限"></a>关于网络连接受限</h1><p>谷歌从 Android 5.0 开始就引入了「Captive Portal」机制，主要用来检测 WiFI 网络认证是否正常，默认检测访问的是谷歌服务器。  </p>
<p>谷歌服务器是需要工具才能正常访问的，所以如果没有工具的情况下，WiFi 就会出现网络受限、WiFi图标出现一个感叹号标志，系统会以为你网络不好，导致网络不稳定。</p>
<p>可以通过如下方式解决</p>
<p>输入如下命令，删除默认地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell settings delete global captive_portal_https_url</span><br><span class="line">adb shell settings delete global captive_portal_http_url</span><br></pre></td></tr></table></figure>

<p>然后输入如下命令，添加新的地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell settings put global captive_portal_http_url http://captive.v2ex.co/generate_204</span><br><span class="line">adb shell settings put global captive_portal_https_url https://captive.v2ex.co/generate_204</span><br></pre></td></tr></table></figure>

<p>打开飞行模式，然后关闭飞行模式，就可以上网了。</p>
]]></content>
      <categories>
        <category>刷机</category>
      </categories>
      <tags>
        <tag>Pixel刷机</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础</title>
    <url>/2024/12/15/Python%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="bytes"><a href="#bytes" class="headerlink" title="bytes"></a>bytes</h1><h2 id="bytes-1"><a href="#bytes-1" class="headerlink" title="bytes()"></a>bytes()</h2><p>创建 <code>bytes</code> 对象</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">byte_data = <span class="built_in">bytes</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(byte_data)  <span class="comment"># 输出: b&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line">byte_data = <span class="built_in">bytes</span>([<span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>])</span><br><span class="line"><span class="built_in">print</span>(byte_data)  <span class="comment"># 输出: b&#x27;ABC&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="fromhex"><a href="#fromhex" class="headerlink" title="fromhex()"></a>fromhex()</h2><p>将十六进制字符串转换为字节序列。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">hex_str = <span class="string">&quot;48656c6c6f20576f726c64&quot;</span>  <span class="comment"># &quot;Hello World&quot; 的十六进制表示</span></span><br><span class="line">byte_data = <span class="built_in">bytes</span>.fromhex(hex_str)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(byte_data)  <span class="comment"># 输出: b&#x27;Hello World&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="hex"><a href="#hex" class="headerlink" title="hex()"></a>hex()</h2><p>将字节序列转换为十六进制字符串。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">byte_data = <span class="string">b&#x27;Hello World&#x27;</span></span><br><span class="line">hex_str = byte_data.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hex_str)  <span class="comment"># 输出: &quot;48656c6c6f20576f726c64&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="decode"><a href="#decode" class="headerlink" title="decode()"></a>decode()</h2><p>字节序列转字符串</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">byte_data = <span class="string">b&#x27;hello&#x27;</span></span><br><span class="line">text = byte_data.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(text)  <span class="comment"># 输出: &quot;hello&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="int"><a href="#int" class="headerlink" title="int"></a>int</h1><h2 id="to-bytes"><a href="#to-bytes" class="headerlink" title="to_bytes"></a>to_bytes</h2><h2 id="from-byte"><a href="#from-byte" class="headerlink" title="from_byte"></a>from_byte</h2><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><p>使用<code>+</code>运算符可以将多个字符串拼接起来</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">str2 = <span class="string">&quot; &quot;</span></span><br><span class="line">str3 = <span class="string">&quot;World!&quot;</span></span><br><span class="line"></span><br><span class="line">result = str1 + str2 + str3</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: Hello World!</span></span><br></pre></td></tr></table></figure>

<h2 id="slice（切片）"><a href="#slice（切片）" class="headerlink" title="slice（切片）"></a>slice（切片）</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>[start:end:step]</span><br><span class="line"></span><br><span class="line">// start：子字符串的起始位置（包含）。如果省略，默认为 <span class="number">0</span>。</span><br><span class="line">// end：子字符串的结束位置（不包含）。如果省略，默认为字符串的末尾。</span><br><span class="line">// step：步长，表示每次切片时跳过多少个字符。如果省略，默认为 <span class="number">1</span>。</span><br></pre></td></tr></table></figure>



<h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">string.join(iterable)</span><br><span class="line"></span><br><span class="line"><span class="comment"># string：要连接的字符串，即连接其他元素的分隔符。</span></span><br><span class="line"><span class="comment"># iterable：一个可迭代对象，比如列表、元组等，其元素会被 str 连接。</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">result = <span class="string">&#x27;, &#x27;</span>.join([<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: Hello, World</span></span><br></pre></td></tr></table></figure>

<h3 id="lower"><a href="#lower" class="headerlink" title="lower"></a>lower</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">string.lower()</span><br><span class="line"></span><br><span class="line">转换 string 中所有大写字符为小写</span><br></pre></td></tr></table></figure>

<h3 id="upper"><a href="#upper" class="headerlink" title="upper"></a>upper</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">string.upper()</span><br><span class="line"></span><br><span class="line">转换 string 中的小写字母为大写</span><br></pre></td></tr></table></figure>

<h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>用于替换字符串中的指定子字符串。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>.replace(old, new[, count])</span><br><span class="line"></span><br><span class="line"><span class="comment"># old：要被替换的子字符串。</span></span><br><span class="line"><span class="comment"># new：用于替换 old 的新字符串。</span></span><br><span class="line"><span class="comment"># count（可选）：指定替换的最大次数，默认为全部替换。</span></span><br></pre></td></tr></table></figure>

<h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><p>用于将字符串分割成多个子字符串，返回一个列表。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>.split(sep=<span class="literal">None</span>, maxsplit=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">// sep（可选）：指定分隔符。默认值是 <span class="literal">None</span>，表示根据空格（包括多个连续空格）进行分割。如果指定了 sep，字符串会根据该分隔符来进行分割。</span><br><span class="line">// maxsplit（可选）：指定分割的最大次数。默认为 -<span class="number">1</span>，表示分割所有匹配的分隔符。如果指定了 maxsplit，那么返回的列表最多会包含 maxsplit + <span class="number">1</span> 个元素。</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">text = <span class="string">&quot;Hello world, welcome to Python.&quot;</span></span><br><span class="line">result = text.split()</span><br><span class="line"><span class="built_in">print</span>(result) </span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;world,&#x27;</span>, <span class="string">&#x27;welcome&#x27;</span>, <span class="string">&#x27;to&#x27;</span>, <span class="string">&#x27;Python.&#x27;</span>]</span><br></pre></td></tr></table></figure>



<h3 id="encode"><a href="#encode" class="headerlink" title="encode()"></a>encode()</h3><h3 id="decode-1"><a href="#decode-1" class="headerlink" title="decode()"></a>decode()</h3><h3 id="format"><a href="#format" class="headerlink" title="format()"></a>format()</h3><h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><h3 id="格式化"><a href="#格式化" class="headerlink" title="%格式化"></a>%格式化</h3><h3 id="f-s"><a href="#f-s" class="headerlink" title="f-s"></a>f-s</h3><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><h2 id="列表的方法"><a href="#列表的方法" class="headerlink" title="列表的方法"></a>列表的方法</h2><h3 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h3><p>添加元素，在末尾添加</p>
<h3 id="extend"><a href="#extend" class="headerlink" title="extend()"></a>extend()</h3><p>合并列表</p>
<h1 id="Dict"><a href="#Dict" class="headerlink" title="Dict"></a>Dict</h1><h2 id="字典的创建方式"><a href="#字典的创建方式" class="headerlink" title="字典的创建方式"></a>字典的创建方式</h2><ul>
<li><p>直接定义</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">mydict = &#123;&#125; <span class="comment"># 创建空字典</span></span><br><span class="line">my_dict = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_dict)    <span class="comment"># &#123;&#x27;key1&#x27;: &#x27;value1&#x27;, &#x27;key2&#x27;: &#x27;value2&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>dict()</code>构造函数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">mydict = <span class="built_in">dict</span>() <span class="comment"># 空字典</span></span><br><span class="line">my_dict = <span class="built_in">dict</span>(key1=<span class="string">&#x27;value1&#x27;</span>,key2=<span class="string">&#x27;value2&#x27;</span>,key3=<span class="string">&#x27;value3&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_dict) <span class="comment"># &#123;&#x27;key1&#x27;: &#x27;value1&#x27;, &#x27;key2&#x27;: &#x27;value2&#x27;, &#x27;key3&#x27;: &#x27;value3&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>键值对序列</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>)</span><br><span class="line">tuple2 = (<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>)</span><br><span class="line">tuple3 = (<span class="string">&quot;key3&quot;</span>,<span class="string">&quot;value3&quot;</span>)</span><br><span class="line">my_list = <span class="built_in">list</span>()</span><br><span class="line">my_list.append(tuple1)</span><br><span class="line">my_list.append(tuple2)</span><br><span class="line">my_list.append(tuple3)</span><br><span class="line">my_dict = <span class="built_in">dict</span>(my_list)</span><br><span class="line"><span class="built_in">print</span>(my_dict) <span class="comment"># &#123;&#x27;key1&#x27;: &#x27;value1&#x27;, &#x27;key2&#x27;: &#x27;value2&#x27;, &#x27;key3&#x27;: &#x27;value3&#x27;&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="访问字典"><a href="#访问字典" class="headerlink" title="访问字典"></a>访问字典</h2><ul>
<li><p>通过key来获取value</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;value3&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_dict[<span class="string">&quot;key1&quot;</span>]) <span class="comment"># value1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加元素</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">mydict = &#123;&#125;</span><br><span class="line">mydict[<span class="string">&quot;key1&quot;</span>]=<span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="built_in">print</span>(mydict) <span class="comment"># &#123;&#x27;key1&#x27;: &#x27;value1&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改元素</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">mydict = &#123;&#125;</span><br><span class="line">mydict[<span class="string">&quot;key1&quot;</span>]=<span class="string">&quot;value1&quot;</span></span><br><span class="line">mydict[<span class="string">&quot;key1&quot;</span>]=<span class="string">&quot;new_value1&quot;</span></span><br><span class="line"><span class="built_in">print</span>(mydict) <span class="comment"># &#123;&#x27;key1&#x27;: &#x27;new_value1&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除元素</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">mydict = &#123;&#125;</span><br><span class="line">mydict[<span class="string">&quot;key1&quot;</span>]=<span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="keyword">del</span> mydict[<span class="string">&quot;key1&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(mydict) <span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除字典</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">mydict = &#123;&#125;</span><br><span class="line">mydict[<span class="string">&quot;key1&quot;</span>]=<span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="keyword">del</span> mydict</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="字典方法"><a href="#字典方法" class="headerlink" title="字典方法"></a>字典方法</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><p>清空字典，使之变成一个空字典。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>.clear()</span><br></pre></td></tr></table></figure>

<h3 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h3><p>返回一个包含字典中所有键的对象</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;value3&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_dict.keys())</span><br><span class="line">keyslist = <span class="built_in">list</span>(my_dict.keys())</span><br><span class="line"><span class="built_in">print</span>(keyslist)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">dict_keys([<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>])</span><br><span class="line">[<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>.values()</span><br></pre></td></tr></table></figure>

<p>返回一个包含字典中所有值的对象</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;value3&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_dict.values())</span><br><span class="line">valueslist = <span class="built_in">list</span>(my_dict.values())</span><br><span class="line"><span class="built_in">print</span>(valueslist)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">dict_values([<span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;value3&#x27;</span>])</span><br><span class="line">[<span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;value3&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="items"><a href="#items" class="headerlink" title="items()"></a>items()</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>.values()</span><br></pre></td></tr></table></figure>

<p>返回一个包含字典中所以键值对的对象</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;value3&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_dict.items())</span><br><span class="line">itemslist = <span class="built_in">list</span>(my_dict.items())</span><br><span class="line"><span class="built_in">print</span>(ietmslist)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">dict_items([(<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;value1&#x27;</span>), (<span class="string">&#x27;key2&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>), (<span class="string">&#x27;key3&#x27;</span>, <span class="string">&#x27;value3&#x27;</span>)])</span><br><span class="line">[(<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;value1&#x27;</span>), (<span class="string">&#x27;key2&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>), (<span class="string">&#x27;key3&#x27;</span>, <span class="string">&#x27;value3&#x27;</span>)]</span><br></pre></td></tr></table></figure>

<h3 id="update"><a href="#update" class="headerlink" title="update()"></a>update()</h3><p>将一个字典的键值对更新到另一个字典中。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>.update([other])</span><br><span class="line"></span><br><span class="line"><span class="comment"># other:要更新到当前字典的键值对来源，可以是另一个字典、键值对列表或键值对元组序列。</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<p>字典</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;key1&quot;</span>:<span class="string">&quot;value1&quot;</span>&#125;</span><br><span class="line">dict2 = &#123;<span class="string">&quot;key2&quot;</span>:<span class="string">&quot;value2&quot;</span>&#125;</span><br><span class="line">dict1.update(dict2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dict1&quot;</span>,dict1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dict2&quot;</span>,dict2)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>元组列表</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;key1&quot;</span>:<span class="string">&quot;value1&quot;</span>&#125;</span><br><span class="line">list2= [(<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>)]</span><br><span class="line">dict1.update(list2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dict1&quot;</span>,dict1)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">dict1 &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>键值对列表</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;key1&quot;</span>:<span class="string">&quot;value1&quot;</span>&#125;</span><br><span class="line">list2= [[<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>]]</span><br><span class="line">dict1.update(list2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dict1&quot;</span>,dict1)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">dict1 &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><p>移除字典中的一个元素，并返回该元素的值。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>.pop(key)</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;value3&#x27;</span>&#125;</span><br><span class="line">popvalue = my_dict.pop(<span class="string">&quot;key3&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(popvalue)</span><br><span class="line"><span class="built_in">print</span>(my_dict)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">value3</span><br><span class="line">&#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h1 id="File-I-O"><a href="#File-I-O" class="headerlink" title="File I&#x2F;O"></a>File I&#x2F;O</h1><h2 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">open</span>(file, mode=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">// file: 要打开的文件名（包含路径）</span><br><span class="line">// mdoe: 打开文件的模式</span><br><span class="line">// <span class="keyword">return</span>: 返回一个文件对象</span><br></pre></td></tr></table></figure>

<h3 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h3><table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>以只读方式打开文件。文件的指针将会放在文件的开头。</td>
</tr>
<tr>
<td>w</td>
<td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>a</td>
<td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td>+</td>
<td>打开一个文件进行更新(可读可写)。</td>
</tr>
<tr>
<td>r+</td>
<td>打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td>w+</td>
<td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>a+</td>
<td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>
</tr>
<tr>
<td>b</td>
<td>二进制模式。（与r、w、a组合使用）</td>
</tr>
<tr>
<td>rb</td>
<td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td>rb+</td>
<td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td>wb</td>
<td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>wb+</td>
<td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td>ab</td>
<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td>ab+</td>
<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td>
</tr>
</tbody></table>
<h2 id="close"><a href="#close" class="headerlink" title="close()"></a>close()</h2><p>关闭文件。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">file.close()</span><br></pre></td></tr></table></figure>



<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以只读模式 (&quot;r&quot;) 打开名为 &quot;example.txt&quot; 的文件</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件的全部内容，并存入变量 content</span></span><br><span class="line">content = file.read()  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件，释放系统资源（必须手动关闭，否则可能会占用文件资源）</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>

<h2 id="read"><a href="#read" class="headerlink" title="read"></a>read</h2><h3 id="read-1"><a href="#read-1" class="headerlink" title="read()"></a>read()</h3><p>读取整个文件</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">content = file.read(size)</span><br><span class="line"></span><br><span class="line">// size=-<span class="number">1</span>（默认）：读取整个文件</span><br><span class="line">// size=n：读取前 n 个字节（字符），适用于大文件逐步读取</span><br></pre></td></tr></table></figure>

<h3 id="readline"><a href="#readline" class="headerlink" title="readline()"></a>readline()</h3><p>读取一行</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">file.readline()</span><br><span class="line"></span><br><span class="line">// 每次调用 readline() 读取一行（包含换行符 \n）。</span><br><span class="line">// 若到达文件末尾，则返回 <span class="string">&quot;&quot;</span>（空字符串）。</span><br></pre></td></tr></table></figure>

<h3 id="readlines"><a href="#readlines" class="headerlink" title="readlines()"></a>readlines()</h3><p>读取所有行，返回列表</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">file.readlines()</span><br><span class="line"></span><br><span class="line">// 一次性读取所有行，返回列表</span><br><span class="line">// 每行作为一个字符串元素，保留换行符 \n</span><br></pre></td></tr></table></figure>

<h2 id="write"><a href="#write" class="headerlink" title="write"></a>write</h2><h3 id="write-1"><a href="#write-1" class="headerlink" title="write()"></a>write()</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">file.write(string)</span><br><span class="line"></span><br><span class="line">// 只能写入字符串，不能直接写入数字、列表等（需转换）</span><br><span class="line">// 不会自动换行，需要手动加 \n</span><br><span class="line">// 写入完成后必须关闭文件（推荐 <span class="keyword">with</span> <span class="built_in">open</span> 方式）</span><br></pre></td></tr></table></figure>

<h3 id="writelines"><a href="#writelines" class="headerlink" title="writelines()"></a>writelines()</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file.writelines(lines)</span><br><span class="line"></span><br><span class="line">// 一次性写入多行，参数需为列表或可迭代对象</span><br><span class="line">// 不会自动换行，需确保列表中的字符串带有 \n</span><br></pre></td></tr></table></figure>

<h2 id="flush"><a href="#flush" class="headerlink" title="flush()"></a>flush()</h2><p>刷新缓冲区</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">file.flush()</span><br></pre></td></tr></table></figure>

<h2 id="tell"><a href="#tell" class="headerlink" title="tell()"></a>tell()</h2><p>返回文件指针当前位置。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">fileObject.tell()</span><br></pre></td></tr></table></figure>

<h2 id="seek"><a href="#seek" class="headerlink" title="seek()"></a>seek()</h2><p>移动文件读取指针到指定位置。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">file.seek(offset, whence)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>offset</strong></p>
<p>  开始的偏移量，也就是代表需要移动偏移的字节数</p>
</li>
<li><p><strong>whence</strong></p>
<p>  可选，默认值为 0。给offset参数一个定义，表示要从哪个位置开始偏移；0代表从文件开头开始算起，1代表从当前位置开始算起，2代表从文件末尾算起。</p>
</li>
</ul>
<h1 id="random"><a href="#random" class="headerlink" title="random"></a>random</h1><h2 id="seed"><a href="#seed" class="headerlink" title="seed()"></a>seed()</h2><p><code>random.seed()</code> 用于初始化随机数生成器的种子（Seed）。它的主要作用是让伪随机数的生成过程可预测，从而在不同的运行环境下产生相同的随机序列。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">random.seed(<span class="number">42</span>)  <span class="comment"># 设置随机种子</span></span><br><span class="line"><span class="built_in">print</span>(random.random())  <span class="comment"># 0.6394267984578837</span></span><br><span class="line"><span class="built_in">print</span>(random.randint(<span class="number">1</span>, <span class="number">100</span>))  <span class="comment"># 82</span></span><br></pre></td></tr></table></figure>

<p><code>random.seed(42)</code> 设定了随机数种子为 <code>42</code>。</p>
<p>之后调用 <code>random.random()</code> 和 <code>random.randint()</code> 会得到固定的值。</p>
<p>只要种子值相同，每次运行时生成的随机序列也相同。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">random.seed(a=<span class="literal">None</span>, version=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">// a（可选）：用于初始化随机数生成器的种子，可以是：</span><br><span class="line">	// <span class="built_in">int</span> 类型（最常见）</span><br><span class="line">	// <span class="built_in">float</span> 类型</span><br><span class="line">	// <span class="built_in">str</span>、<span class="built_in">bytes</span>、<span class="built_in">bytearray</span> 等</span><br><span class="line">	//<span class="literal">None</span>（默认），会使用系统时间或其他随机源进行初始化</span><br><span class="line">// version（可选）：默认为 <span class="number">2</span>，表示使用 <span class="built_in">hash</span>(a) % <span class="number">2</span>**<span class="number">32</span> 作为种子；如果 version=<span class="number">1</span>，则直接使用 a 作为种子（但只支持整数类型）。</span><br></pre></td></tr></table></figure>

<h2 id="random-1"><a href="#random-1" class="headerlink" title="random()"></a>random()</h2><p><code>random.random()</code>用于生成一个 [0.0, 1.0) 之间的浮点数（包括 0.0，但不包括 1.0）。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.random())  <span class="comment"># 生成一个随机浮点数，例如 0.3745401188473625</span></span><br><span class="line"><span class="built_in">print</span>(random.random())  <span class="comment"># 可能是 0.9507143064099162</span></span><br></pre></td></tr></table></figure>

<h2 id="randint"><a href="#randint" class="headerlink" title="randint()"></a>randint()</h2><p><code>random.randint(a, b)</code> 用于<strong>生成一个在 <code>[a, b]</code> 之间的随机整数</strong>，**包括 <code>a</code> 和 <code>b</code>**。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.randint(<span class="number">1</span>, <span class="number">10</span>))  <span class="comment"># 可能输出 1 到 10 之间的整数</span></span><br><span class="line"><span class="built_in">print</span>(random.randint(<span class="number">1</span>, <span class="number">10</span>))  <span class="comment"># 可能输出 7</span></span><br></pre></td></tr></table></figure>

<h2 id="uniform"><a href="#uniform" class="headerlink" title="uniform()"></a>uniform()</h2><p><code>random.uniform(a, b)</code> 用于生成一个在 <code>[a, b]</code> 或 <code>[b, a]</code> 之间的随机浮点数，包括 <code>a</code> 和 <code>b</code>（即闭区间）。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(random.uniform(<span class="number">1</span>, <span class="number">10</span>))  <span class="comment"># 可能输出 3.758382659073293</span></span><br><span class="line"><span class="built_in">print</span>(random.uniform(-<span class="number">5</span>, <span class="number">5</span>))  <span class="comment"># 可能输出 -2.134985731</span></span><br></pre></td></tr></table></figure>

<h2 id="randbytes"><a href="#randbytes" class="headerlink" title="randbytes()"></a>randbytes()</h2><p><code>random.randbytes()</code> 用于生成指定长度的随机字节序列（<code>bytes</code> 对象）。这是 Python 3.9 版本引入的功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">random.randbytes(n)</span><br><span class="line"></span><br><span class="line">// n：要生成的随机字节数（必须是正整数）。</span><br><span class="line">// <span class="keyword">return</span>：一个长度为 n 的 <span class="built_in">bytes</span> 对象，每个字节的值范围为 <span class="number">0</span>-<span class="number">255</span>。</span><br></pre></td></tr></table></figure>



<h2 id="choice"><a href="#choice" class="headerlink" title="choice()"></a>choice()</h2><p>用于从非空序列中随机选择一个元素，序列可以是任何可迭代的对象（如列表、元组、字符串等）。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">random.choice(seq)</span><br><span class="line"></span><br><span class="line">// seq：一个非空的序列（如列表、元组、字符串、<span class="built_in">range</span> 等）。</span><br><span class="line">// <span class="keyword">return</span>：返回 序列 seq 中的一个随机元素。</span><br></pre></td></tr></table></figure>

<h2 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle()"></a>shuffle()</h2><p><code>random.shuffle(seq)</code>用于 随机打乱可变序列（如列表）中的元素顺序。该方法会直接修改原始序列，而不是返回一个新的序列。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">random.shuffle(seq)</span><br><span class="line"></span><br><span class="line">// seq：seq：一个可变序列（通常是列表）。shuffle() 会对该序列中的元素进行随机排序。</span><br></pre></td></tr></table></figure>

<p><strong>示例用法</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打乱列表顺序</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">random.shuffle(numbers)</span><br><span class="line"><span class="built_in">print</span>(numbers)  <span class="comment"># 可能输出 [3, 1, 5, 4, 2]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="sample"><a href="#sample" class="headerlink" title="sample()"></a>sample()</h2><p><code>random.sample(seq, k)</code> 用于 从序列 <code>seq</code> 中随机选择 <code>k</code> 个不重复的元素，并返回一个新列表。这个方法不会修改原始序列。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">random.sample(seq, k)</span><br><span class="line"></span><br><span class="line">// seq：一个序列（如列表、元组、字符串、<span class="built_in">range</span> 等）。</span><br><span class="line">// k：要选择的元素个数，必须小于或等于 seq 中元素的数量。</span><br><span class="line">// <span class="keyword">return</span>：返回一个包含 k 个从 seq 中随机选出的不重复元素的列表。</span><br></pre></td></tr></table></figure>

<p><strong>示例用法</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从列表中随机选择 3 个元素</span></span><br><span class="line">fruits = [<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;橙子&quot;</span>, <span class="string">&quot;葡萄&quot;</span>, <span class="string">&quot;草莓&quot;</span>]</span><br><span class="line">sampled_fruits = random.sample(fruits, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(sampled_fruits)  <span class="comment"># 可能输出 [&#x27;草莓&#x27;, &#x27;香蕉&#x27;, &#x27;橙子&#x27;]</span></span><br></pre></td></tr></table></figure>

<h1 id="binascii"><a href="#binascii" class="headerlink" title="binascii"></a>binascii</h1><h1 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h1><h2 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h2><h3 id="quote"><a href="#quote" class="headerlink" title="quote()"></a>quote()</h3><p>用于对字符串进行 URL 编码。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">urllib.parse.quote(string, safe=<span class="string">&#x27;/&#x27;</span>, encoding=<span class="literal">None</span>, errors=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">// string: 要进行 URL 编码的字符串。</span><br><span class="line">// safe: 指定哪些字符不需要进行编码。默认情况下，safe=<span class="string">&#x27;/&#x27;</span>，表示 / 字符不会被编码。</span><br><span class="line">// encoding: 字符串编码的方式。默认使用 utf-<span class="number">8</span> 编码。</span><br><span class="line">// errors: 处理编码错误的方式。通常情况下，不需要设置此参数，默认值为 <span class="literal">None</span>。</span><br></pre></td></tr></table></figure>

<h3 id="unquote"><a href="#unquote" class="headerlink" title="unquote()"></a>unquote()</h3><p>用于 对字符串进行URL 解码。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">urllib.parse.unquote(string, encoding=<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;replace&#x27;</span>)</span><br><span class="line"></span><br><span class="line">// string:要解码的 URL 编码字符串。该字符串中包含百分号编码的部分，需要被转换回对应的字符。</span><br><span class="line">// encoding (可选):指定用于解码的字符编码。默认使用 utf-<span class="number">8</span> 编码。</span><br><span class="line">// errors (可选):指定在解码过程中遇到错误时的处理方式。默认值是 <span class="string">&#x27;replace&#x27;</span>，即遇到无法解码的字节时用一个替代字符（通常是 �）代替。</span><br></pre></td></tr></table></figure>



<h1 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h1><h2 id="request"><a href="#request" class="headerlink" title="request()"></a>request()</h2><p><code>requests.request()</code> 是 <code>requests</code> 库中最底层、最通用的 HTTP 请求方法。它允许你通过传入不同的 HTTP 方法（如 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> 等）来构造请求，内部所有的专用方法（如 <code>requests.get()</code>、<code>requests.post()</code> 等）其实都是对 <code>requests.request()</code> 的简单封装。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">requests.request(method, url, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># method：请求方法的名称，字符串形式，如 &quot;GET&quot;、&quot;POST&quot;、&quot;PUT&quot;、&quot;DELETE&quot;、&quot;HEAD&quot;、&quot;OPTIONS&quot;、&quot;PATCH&quot; 等。</span></span><br><span class="line"><span class="comment"># url：请求的 URL 地址。</span></span><br><span class="line"><span class="comment"># kwargs：其他可选参数，用于控制请求的各个方面。</span></span><br></pre></td></tr></table></figure>

<h2 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h2><p><code>requests.get()</code> 用于向指定 URL 发送 GET 请求，从服务器获取数据。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">response = requests.get(url, params=<span class="literal">None</span>, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># url：必需参数，表示请求的目标 URL。</span></span><br><span class="line"><span class="comment"># params：可选参数，一般以字典、元组列表或字节流的形式传入，用于构造 URL 的查询字符串。传递的参数会自动编码并附加到 URL 后面。</span></span><br><span class="line"><span class="comment"># kwargs：其他可选参数，用于定制请求行为。</span></span><br><span class="line">	<span class="comment"># 常见的有：headers,cookies,timeout等</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">params = &#123;<span class="string">&quot;q&quot;</span>: <span class="string">&quot;python教程&quot;</span>, <span class="string">&quot;page&quot;</span>: <span class="number">1</span>&#125;</span><br><span class="line">response = requests.get(<span class="string">&quot;https://www.example.com/search&quot;</span>, params=params)</span><br><span class="line"><span class="built_in">print</span>(response.url)</span><br><span class="line"><span class="comment"># 输出类似：https://www.example.com/search?q=python%E6%95%99%E7%A8%8B&amp;page=1</span></span><br></pre></td></tr></table></figure>

<h2 id="post"><a href="#post" class="headerlink" title="post()"></a>post()</h2><p><code>requests.post()</code> 方法用于向服务器发送 HTTP POST 请求。与 GET 请求不同，POST 请求通常用于向服务器提交数据（如表单数据、JSON 数据、文件上传等），数据内容被放在请求体（body）中。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">response = requests.post(url, data=<span class="literal">None</span>, json=<span class="literal">None</span>, headers=<span class="literal">None</span>, params=<span class="literal">None</span>, files=<span class="literal">None</span>, auth=<span class="literal">None</span>, timeout=<span class="literal">None</span>, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># url：必需参数，目标请求地址。</span></span><br><span class="line"><span class="comment"># data：常用于提交表单数据，可为字典、字节序列或文件对象。当传入字典时，默认以 application/x-www-form-urlencoded 编码；也可以传入字符串，此时默认为 text/plain。</span></span><br><span class="line"><span class="comment"># json：用于提交 JSON 数据。当使用该参数时，requests 会自动将数据序列化为 JSON 字符串，并设置请求头 Content-Type: application/json。如果同时传入了 data 和 json，通常后者优先。</span></span><br><span class="line"><span class="comment"># headers：字典，设置请求头，可以用来自定义 User-Agent、Content-Type 等信息。</span></span><br><span class="line"><span class="comment"># params：用于 URL 查询参数，类似于 GET 请求，但在 POST 请求中有时也会用到。</span></span><br><span class="line"><span class="comment"># files：用于上传文件，支持多种格式。</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>data</code> 参数提交表单数据时，数据会以 URL 编码格式发送；使用 <code>json</code> 参数提交数据时，数据会自动转换为 JSON 字符串，并设置 <code>Content-Type: application/json</code>。</p>
<h2 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h2><p>Response 对象是 Python requests 库中用来表示服务器响应的核心对象。每当你使用 requests.get()、requests.post() 等方法发送 HTTP 请求时，返回的就是一个 Response 对象，它包含了服务器返回的所有信息，例如状态码、响应头、响应体、Cookies 以及请求相关的信息等。</p>
<h3 id="status-code"><a href="#status-code" class="headerlink" title="status_code"></a>status_code</h3><p>表示 HTTP 响应的状态，如 200（成功）、404（资源未找到）、500（服务器错误）等。</p>
<h3 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h3><p>是一个字典，存储了服务器返回的所有 HTTP 响应头信息，如 Content-Type、Content-Encoding 等。</p>
<h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><p>有两种常用形式</p>
<ul>
<li><p><strong>text</strong>：</p>
<p>  经过编码（通常基于响应头中指定的 charset 或通过 apparent_encoding 计算）解码后的字符串数据，适合处理文本内容。</p>
</li>
<li><p><strong>content</strong>：</p>
<p>  原始的二进制数据</p>
</li>
</ul>
<h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><p>Response 对象的 cookies 属性是一个 RequestsCookieJar 对象，用于存储服务器返回的 Cookie。</p>
<h3 id="json"><a href="#json" class="headerlink" title="json()"></a>json()</h3><p>用于将响应体内容解析为 JSON 格式并返回对应的 Python 对象（通常是字典或列表）。如果响应内容不是合法的 JSON，则会抛出异常。</p>
<h3 id="close-1"><a href="#close-1" class="headerlink" title="close()"></a>close()</h3><p>用于关闭响应连接，尤其在使用流式请求（stream&#x3D;True）时显得尤为重要。</p>
<h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><p>正则表达式</p>
<h2 id="常用匹配规则"><a href="#常用匹配规则" class="headerlink" title="常用匹配规则"></a>常用匹配规则</h2><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>匹配任意单个字符（除换行符）。</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串的开头。</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串的结尾。</td>
</tr>
<tr>
<td>*</td>
<td>匹配前一个字符0次或多次。</td>
</tr>
<tr>
<td>+</td>
<td>匹配前一个字符1次或多次。</td>
</tr>
<tr>
<td>?</td>
<td>匹配前一个字符0次或1次。</td>
</tr>
<tr>
<td>{n}</td>
<td>精确匹配前一个字符 n 次。</td>
</tr>
<tr>
<td>{n,}</td>
<td>匹配前一个字符至少 n 次。</td>
</tr>
<tr>
<td>{n,m}</td>
<td>匹配前一个字符 n 到 m 次。</td>
</tr>
</tbody></table>
<h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>[abc]</code></td>
<td>匹配字符 “a”、”b” 或 “c”。</td>
</tr>
<tr>
<td><code>[a-z]</code></td>
<td>匹配所有小写字母。</td>
</tr>
<tr>
<td><code>[^abc]</code></td>
<td>匹配除 “a”、”b” 和 “c” 之外的任意字符。</td>
</tr>
</tbody></table>
<h3 id="预定义字符类"><a href="#预定义字符类" class="headerlink" title="预定义字符类"></a>预定义字符类</h3><table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>\d</code></td>
<td>匹配任意数字，等价于 [0-9]。</td>
</tr>
<tr>
<td><code>\D</code></td>
<td>匹配任意非数字。</td>
</tr>
<tr>
<td><code>\w</code></td>
<td>匹配字母、数字或下划线，等价于 [a-zA-Z0-9_]。</td>
</tr>
<tr>
<td><code>\W</code></td>
<td>匹配非字母、数字和下划线。</td>
</tr>
<tr>
<td><code>\s</code></td>
<td>匹配空白字符，包括空格、制表符等。</td>
</tr>
<tr>
<td><code>\S</code></td>
<td>匹配非空白字符。</td>
</tr>
</tbody></table>
<h3 id="分组和引用"><a href="#分组和引用" class="headerlink" title="分组和引用"></a>分组和引用</h3><table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>()</td>
<td>用于分组，可以将一部分模式看作一个整体</td>
</tr>
<tr>
<td>|</td>
<td>匹配左边或右边的表达式。</td>
</tr>
<tr>
<td>\1, \2,…</td>
<td>反向引用，用于引用分组匹配的内容。</td>
</tr>
</tbody></table>
<h2 id="match-object（匹配对象）"><a href="#match-object（匹配对象）" class="headerlink" title="match object（匹配对象）"></a>match object（匹配对象）</h2><p>匹配对象是 re.Match 类型的实例，可以通过该对象访问有关匹配的信息。</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="lastindex"><a href="#lastindex" class="headerlink" title="lastindex"></a>lastindex</h4><p>返回正则表达式中最后一个分组的索引。如果没有分组，则返回 None。</p>
<h4 id="lastgroup"><a href="#lastgroup" class="headerlink" title="lastgroup"></a>lastgroup</h4><p>返回最后一个匹配的分组名称（如果正则表达式使用了命名分组）。如果没有使用命名分组，则返回 None。</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="group"><a href="#group" class="headerlink" title="group()"></a>group()</h4><ul>
<li>返回整个匹配的字符串（即正则表达式匹配到的内容）。  </li>
<li>如果正则表达式包含分组（用圆括号 () 包围的部分），可以通过 group() 方法传入一个数字来返回特定分组的匹配内容。</li>
</ul>
<h4 id="start"><a href="#start" class="headerlink" title="start()"></a>start()</h4><p>返回匹配的起始位置（索引），即匹配字符串的第一个字符在原始字符串中的位置。</p>
<h4 id="end"><a href="#end" class="headerlink" title="end()"></a>end()</h4><p>返回匹配的结束位置（索引），即匹配字符串的最后一个字符后面的索引。注意，这个位置是匹配的结束位置的下一个位置。</p>
<h4 id="span"><a href="#span" class="headerlink" title="span()"></a>span()</h4><p>返回一个元组 (start, end)，分别表示匹配的起始位置和结束位置。</p>
<h4 id="groups"><a href="#groups" class="headerlink" title="groups()"></a>groups()</h4><p>返回所有分组的元组（不包括整个匹配的字符串），如果正则表达式没有分组，则返回一个空元组 ()。</p>
<h4 id="groupdict"><a href="#groupdict" class="headerlink" title="groupdict()"></a>groupdict()</h4><p>如果正则表达式使用了命名分组，groupdict() 会返回一个字典，键为分组名称，值为对应分组的匹配内容。否则，返回一个空字典。</p>
<h2 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h2><p>从字符串的起始位置开始匹配正则表达式 pattern，如果匹配成功，返回一个匹配对象；如果不匹配，返回 None。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">re.<span class="keyword">match</span>(pattern, string)</span><br></pre></td></tr></table></figure>

<h2 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h2><p>在整个字符串中搜索匹配正则表达式 pattern 的部分，只要找到了第一个匹配项就返回匹配对象，否则返回 None。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">re.search(pattern, string)</span><br></pre></td></tr></table></figure>

<h2 id="findall"><a href="#findall" class="headerlink" title="findall()"></a>findall()</h2><p>查找所有匹配 pattern 的部分，并返回一个列表。如果没有匹配项，则返回空列表。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">re.findall(pattern, string)</span><br></pre></td></tr></table></figure>

<h2 id="finditer"><a href="#finditer" class="headerlink" title="finditer()"></a>finditer()</h2><p>与 findall 类似，但是返回的是一个迭代器，每个元素是一个匹配对象。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">re.finditer(pattern, string)</span><br></pre></td></tr></table></figure>

<h2 id="sub"><a href="#sub" class="headerlink" title="sub()"></a>sub()</h2><p>用 repl 替换字符串中所有匹配 pattern 的部分，返回替换后的新字符串。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">re.sub(pattern, repl, string)</span><br></pre></td></tr></table></figure>

<h2 id="split-1"><a href="#split-1" class="headerlink" title="split()"></a>split()</h2><p>根据正则表达式 pattern 将字符串分割成多个部分，返回一个列表。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">re.split(pattern, string)</span><br></pre></td></tr></table></figure>

<h1 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h1><h2 id="unpack"><a href="#unpack" class="headerlink" title="unpack()"></a>unpack()</h2><p>将 二进制数据 解析为 Python 数据类型</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">struct.unpack(<span class="built_in">format</span>, buffer)</span><br></pre></td></tr></table></figure>

<ul>
<li>**<code>format</code>**：格式字符串，定义二进制数据的解析规则（如数据类型、字节序）。</li>
<li>**<code>buffer</code>**：包含二进制数据的字节对象（如 <code>bytes</code>, <code>bytearray</code>）。</li>
<li><strong>返回值</strong>：返回一个 <strong>元组</strong>，包含解析后的数据。</li>
</ul>
<h3 id="格式字符串"><a href="#格式字符串" class="headerlink" title="格式字符串"></a><strong>格式字符串</strong></h3><p><strong>字节序指令</strong>（可选，默认按系统原生顺序）：</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>@</code></td>
<td align="center">原生字节序 + 原生对齐（默认）</td>
</tr>
<tr>
<td align="center"><code>=</code></td>
<td align="center">原生字节序 + 标准大小</td>
</tr>
<tr>
<td align="center"><code>&lt;</code></td>
<td align="center">小端序（低位在前）</td>
</tr>
<tr>
<td align="center"><code>&gt;</code></td>
<td align="center">大端序（高位在前）</td>
</tr>
<tr>
<td align="center"><code>!</code></td>
<td align="center">网络序（大端序）</td>
</tr>
</tbody></table>
<p><strong>数据类型指令</strong>：</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">C 类型</th>
<th align="center">Python 类型</th>
<th align="center">字节数</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>b</code></td>
<td align="center"><code>char</code></td>
<td align="center"><code>int</code></td>
<td align="center">1</td>
</tr>
<tr>
<td align="center"><code>B</code></td>
<td align="center"><code>unsigned char</code></td>
<td align="center"><code>int</code></td>
<td align="center">1</td>
</tr>
<tr>
<td align="center"><code>h</code></td>
<td align="center"><code>short</code></td>
<td align="center"><code>int</code></td>
<td align="center">2</td>
</tr>
<tr>
<td align="center"><code>H</code></td>
<td align="center"><code>unsigned short</code></td>
<td align="center"><code>int</code></td>
<td align="center">2</td>
</tr>
<tr>
<td align="center"><code>i</code></td>
<td align="center"><code>int</code></td>
<td align="center"><code>int</code></td>
<td align="center">4</td>
</tr>
<tr>
<td align="center"><code>I</code></td>
<td align="center"><code>unsigned int</code></td>
<td align="center"><code>int</code></td>
<td align="center">4</td>
</tr>
<tr>
<td align="center"><code>q</code></td>
<td align="center"><code>long long</code></td>
<td align="center"><code>int</code></td>
<td align="center">8</td>
</tr>
<tr>
<td align="center"><code>Q</code></td>
<td align="center"><code>unsigned long long</code></td>
<td align="center"><code>int</code></td>
<td align="center">8</td>
</tr>
<tr>
<td align="center"><code>f</code></td>
<td align="center"><code>float</code></td>
<td align="center"><code>float</code></td>
<td align="center">4</td>
</tr>
<tr>
<td align="center"><code>d</code></td>
<td align="center"><code>double</code></td>
<td align="center"><code>float</code></td>
<td align="center">8</td>
</tr>
<tr>
<td align="center"><code>s</code></td>
<td align="center"><code>char[]</code></td>
<td align="center"><code>bytes</code></td>
<td align="center">1 per char</td>
</tr>
</tbody></table>
<h1 id="time"><a href="#time" class="headerlink" title="time"></a>time</h1><h2 id="time-1"><a href="#time-1" class="headerlink" title="time()"></a>time()</h2><p>返回当前时间的时间戳。时间戳是从1970年1月1日00:00:00 UTC开始的秒数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">time.time()</span><br></pre></td></tr></table></figure>

<p><strong>调用示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.time())</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">1738742885.6218357</span></span><br></pre></td></tr></table></figure>







<h1 id="json-1"><a href="#json-1" class="headerlink" title="json"></a>json</h1><p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，易于人和机器阅读和解析。它基于JavaScript的对象表示法，但被广泛用于多种编程语言。</p>
<h2 id="JSON中的数据类型"><a href="#JSON中的数据类型" class="headerlink" title="JSON中的数据类型"></a>JSON中的数据类型</h2><ul>
<li>字符串（String）：用双引号包围，如 “Hello, World!”。</li>
<li>数字（Number）：如 123、3.14，无引号。</li>
<li>布尔值（Boolean）：true 或 false。</li>
<li>数组（Array）：如 [1, 2, “abc”, true]。</li>
<li>对象（Object）：如 {“name”: “Alice”, “age”: 30}。</li>
<li>空值（Null）：表示空，如 null。</li>
</ul>
<h2 id="JSON的基本语法"><a href="#JSON的基本语法" class="headerlink" title="JSON的基本语法"></a>JSON的基本语法</h2><ul>
<li>数据在键值对中：每个键值对由键和值组成，格式为 “key”: value。</li>
<li>数据由逗号分隔：多个键值对之间使用逗号分隔。</li>
<li>对象由花括号 {} 包围：表示一个无序的键值对集合。</li>
<li>数组由方括号 [] 包围：表示一个有序的值的集合。</li>
<li>键 必须是字符串（用双引号包裹），值 可以是字符串、数字、布尔值、数组、对象或 null。</li>
</ul>
<h2 id="JSON示例"><a href="#JSON示例" class="headerlink" title="JSON示例"></a>JSON示例</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Accept&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Accept-Encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gzip, deflate, br, zstd&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Accept-Language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;www.httpbin.org&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Priority&quot;</span><span class="punctuation">:</span> <span class="string">&quot;u=0, i&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Sec-Ch-Ua&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\&quot;Chromium\&quot;;v=\&quot;130\&quot;, \&quot;Microsoft Edge\&quot;;v=\&quot;130\&quot;, \&quot;Not?A_Brand\&quot;;v=\&quot;99\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Sec-Ch-Ua-Mobile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;?0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Sec-Ch-Ua-Platform&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\&quot;Windows\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Sec-Fetch-Dest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;document&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Sec-Fetch-Mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;navigate&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Sec-Fetch-Site&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Sec-Fetch-User&quot;</span><span class="punctuation">:</span> <span class="string">&quot;?1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Upgrade-Insecure-Requests&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;User-Agent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36 Edg/130.0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;X-Amzn-Trace-Id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Root=1-672db183-55e0183d3ee3822d699e15c5&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;origin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;45.32.145.117&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.httpbin.org/get&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="load"><a href="#load" class="headerlink" title="load()"></a>load()</h2><ul>
<li>从文件对象读取 JSON 格式的数据并将其解析为 Python 对象。</li>
<li>用于直接从文件中加载 JSON 数据。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = json.load(file)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure>

<h2 id="loads"><a href="#loads" class="headerlink" title="loads()"></a>loads()</h2><ul>
<li>从字符串中解析 JSON 格式的数据并将其转换为 Python 对象。</li>
<li>用于从 JSON 字符串中加载数据。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">json_string = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25&#125;&#x27;</span></span><br><span class="line">data = json.loads(json_string)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure>

<h2 id="dump"><a href="#dump" class="headerlink" title="dump()"></a>dump()</h2><ul>
<li>将 Python 对象转换为 JSON 格式，并将其写入到文件中。</li>
<li>用于将 JSON 数据保存到文件。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="string">&quot;isStudent&quot;</span>: <span class="literal">True</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json.dump(data, file, indent=<span class="number">4</span>)  <span class="comment"># 使用 indent 参数使输出美观</span></span><br></pre></td></tr></table></figure>

<h2 id="dumps"><a href="#dumps" class="headerlink" title="dumps()"></a>dumps()</h2><ul>
<li>将 Python 对象转换为 JSON 格式的字符串。</li>
<li>用于在程序中将 Python 对象转换为 JSON 字符串以便于传输或输出。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Charlie&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="string">&quot;isStudent&quot;</span>: <span class="literal">False</span></span><br><span class="line">&#125;</span><br><span class="line">json_string = json.dumps(data, indent=<span class="number">4</span>)  <span class="comment"># 使用 indent 参数格式化输出</span></span><br><span class="line"><span class="built_in">print</span>(json_string)</span><br></pre></td></tr></table></figure>

<h1 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h1><p><code>uuid</code> 库用于生成<strong>通用唯一标识符（UUID）</strong>。UUID 是 128 位的唯一标识符，通常用于标记对象、数据或会话，以确保唯一性。</p>
<h2 id="uuid1"><a href="#uuid1" class="headerlink" title="uuid1"></a>uuid1</h2><p>基于时间戳和主机 MAC 地址生成。</p>
<p><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">u1 = uuid.uuid1()</span><br><span class="line"><span class="built_in">print</span>(u1)  <span class="comment"># 输出类似: 123e4567-e89b-12d3-a456-426614174000</span></span><br></pre></td></tr></table></figure>

<h2 id="uuid4"><a href="#uuid4" class="headerlink" title="uuid4"></a>uuid4</h2><p>完全基于随机数生成。</p>
<p><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">u4 = uuid.uuid4()</span><br><span class="line"><span class="built_in">print</span>(u4)  <span class="comment"># 输出完全随机的 UUID，如：e30d81fe-d831-4867-804b-da6c476fa270</span></span><br></pre></td></tr></table></figure>



<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><h3 id="No-module-named-“Crypto”"><a href="#No-module-named-“Crypto”" class="headerlink" title="No module named “Crypto”"></a>No module named “Crypto”</h3><p>安装<code>pycryptodome</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pycryptodome</span><br></pre></td></tr></table></figure>

<p><code>pycryptodome</code>是<code>crypto</code>的延伸版本，用法和<code>crypto</code>是一模一样的，可以完全替代<code>crypto</code>。</p>
<p>如果上述方法仍不能解决问题，可以找到 python 下面的<code>\Lib\site-packages</code>，手动将<code>crypto</code>改为<code>Crypto</code>。</p>
<h1 id="Jupyter-notebook"><a href="#Jupyter-notebook" class="headerlink" title="Jupyter notebook"></a>Jupyter notebook</h1><h2 id="安装与启动"><a href="#安装与启动" class="headerlink" title="安装与启动"></a>安装与启动</h2><p>在终端执行如下命令进行安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install notebook</span><br></pre></td></tr></table></figure>

<p>在终端输入如下命令进行启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure>

<p>会在浏览器打开<code>Jupyter</code>，选择一个目录新建文件，编写代码</p>
<p>在终端执行<code>Ctrl + C</code>命令停止服务</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch</title>
    <url>/2025/04/07/PyTorch/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装PyTorch</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install PyTorch</span><br></pre></td></tr></table></figure>

<p>安装Jupyter notebook</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install notebook</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy</title>
    <url>/2025/01/08/Numpy/</url>
    <content><![CDATA[<h1 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pip install numpy</span><br></pre></td></tr></table></figure>

<h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><h3 id="array"><a href="#array" class="headerlink" title="array()"></a>array()</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numpy.array(<span class="built_in">object</span>, dtype=<span class="literal">None</span>, copy=<span class="literal">True</span>, order=<span class="string">&#x27;K&#x27;</span>, subok=<span class="literal">False</span>, ndmin=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong><code>object</code></strong>: 必需。输入数据，例如列表、元组、嵌套列表等。</p>
</li>
<li><p><strong><code>dtype</code></strong>: 数据类型（如 <code>int</code>, <code>float</code>, <code>complex</code> 等）。默认为自动推断。</p>
</li>
<li><p><strong><code>copy</code></strong>: 是否复制输入数据，默认为 <code>True</code>。</p>
</li>
<li><p><strong><code>order</code></strong>: 内存存储顺序：</p>
<ul>
<li><p><code>&#39;C&#39;</code>：按行优先（C-style，默认）。</p>
</li>
<li><p><code>&#39;F&#39;</code>：按列优先（Fortran-style）。</p>
</li>
</ul>
</li>
<li><p><strong><code>subok</code></strong>: 如果为 <code>True</code>，生成的数组会继承输入数据的子类，否则始终返回基础类 <code>ndarray</code>。</p>
</li>
<li><p><strong><code>ndmin</code></strong>: 指定返回数组的最小维度。</p>
</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;numpy.ndarray&#x27;</span>&gt;</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br></pre></td></tr></table></figure>



<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">b = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]]</span><br></pre></td></tr></table></figure>

<h3 id="shape"><a href="#shape" class="headerlink" title="shape"></a>shape</h3><p><strong><code>shape</code></strong> 是一个属性，用于返回数组的形状（即各维度的大小）。</p>
<p>它以元组的形式表示，元组中的每个值表示数组在该维度的大小。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">b = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="built_in">print</span>(b.shape)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">(<span class="number">2</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="arange"><a href="#arange" class="headerlink" title="arange()"></a>arange()</h3><p><code>arange()</code> 函数用于生成一个指定范围内的等差数列数组。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numpy.arange([start, ]stop, [step, ]dtype=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong><code>start</code></strong>: 范围的起始值（可选）。默认是 <code>0</code>。</p>
</li>
<li><p><strong><code>stop</code></strong>: 范围的结束值（不包括该值）。</p>
</li>
<li><p><strong><code>step</code></strong>: 步长（可选）。默认为 <code>1</code>。可以是浮点数。</p>
</li>
<li><p><strong><code>dtype</code></strong>: 返回数组的数据类型（可选）。默认会根据输入类型推断。</p>
</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 0 到 9 的整数数组</span></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出: [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 1 到 9 的整数数组</span></span><br><span class="line">b = np.arange(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 输出: [1 2 3 4 5 6 7 8 9]</span></span><br></pre></td></tr></table></figure>



<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从 1 到 9，步长为 2</span></span><br><span class="line">c = np.arange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># 输出: [1 3 5 7 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 10 到 0，步长为 -2</span></span><br><span class="line">d = np.arange(<span class="number">10</span>, <span class="number">0</span>, -<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># 输出: [10 8 6 4 2]</span></span><br></pre></td></tr></table></figure>

<h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><p>numpy的random模块提供了多种功能，用于生成随机数和进行随机操作。</p>
<h4 id="rand"><a href="#rand" class="headerlink" title="rand()"></a>rand()</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">numpy.random.rand(d0, d1, ..., dn)</span><br></pre></td></tr></table></figure>

<p><code>rand()</code> 函数用于生成 [0, 1) 之间均匀分布的随机浮点数。它接受一个或多个整数参数，这些参数指定了输出数组的形状。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.random.rand(1,2,3)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[[[0.10311541 0.37724536 0.0200087 ]</span><br><span class="line">  [0.68078737 0.54724305 0.73788641]]]</span><br></pre></td></tr></table></figure>

<h4 id="random-1"><a href="#random-1" class="headerlink" title="random()"></a>random()</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numpy.random.random(size=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">size：指定输出数组的形状，可以是整数或元组。如果为 <span class="literal">None</span>，则返回一个标量。</span><br></pre></td></tr></table></figure>

<p><code>random()</code>函数用于生成 [0, 1) 之间的均匀分布随机数。它不接受维度参数，而是直接返回一个形状由参数决定的数组。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.random.random(size=(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[[<span class="number">0.27557538</span> <span class="number">0.78651989</span> <span class="number">0.21555761</span>]</span><br><span class="line"> [<span class="number">0.07048964</span> <span class="number">0.05920274</span> <span class="number">0.36977286</span>]]</span><br></pre></td></tr></table></figure>



<h4 id="randint"><a href="#randint" class="headerlink" title="randint()"></a>randint()</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numpy.random.randint(low, high=<span class="literal">None</span>, size=<span class="literal">None</span>, dtype=<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong><code>low</code></strong>: 生成随机整数的下界（包含）。</p>
</li>
<li><p><strong><code>high</code></strong>: 生成随机整数的上界（不包含）。如果未提供 <code>high</code>，则默认生成 0 到 <code>low</code> 的随机整数。</p>
</li>
<li><p><strong><code>size</code></strong>: 输出数组的形状。如果是整数，返回一个该形状的数组；如果是元组，返回对应维度的数组。</p>
</li>
<li><p><strong><code>dtype</code></strong>: 输出数组的数据类型，默认为 <code>int</code>。</p>
</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个长度为 5 的一维数组，值范围在 [10, 50) 之间</span></span><br><span class="line">e = np.random.randint(<span class="number">10</span>, <span class="number">50</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(e)  <span class="comment"># 输出类似: [28 31 11 45 39]</span></span><br></pre></td></tr></table></figure>

<h4 id="randn"><a href="#randn" class="headerlink" title="randn()"></a>randn()</h4><p><code>numpy.random.randn()</code> 是一个用于生成标准正态分布（均值为 0，标准差为 1）的随机数的函数。与其他生成随机数的函数不同，<code>randn()</code> 生成的数值并不受指定范围的限制，而是符合标准正态分布。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">numpy.random.randn(d0, d1, ..., dn)</span><br></pre></td></tr></table></figure>

<p><strong><code>d0, d1, ..., dn</code></strong>: 指定输出数组的形状。如果没有传入任何参数，则生成一个标量（单个值）。</p>
<h4 id="normal"><a href="#normal" class="headerlink" title="normal()"></a>normal()</h4><p><code>numpy.random.normal()</code> 是一个用于生成正态分布（高斯分布）随机数的函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">numpy.random.normal(loc=0.0, scale=1.0, size=None)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong><code>loc</code></strong>: 正态分布的均值（默认为 0.0）。</p>
</li>
<li><p><strong><code>scale</code></strong>: 正态分布的标准差（默认为 1.0）。标准差决定了数据的分布宽度。</p>
</li>
<li><p><strong><code>size</code></strong>: 输出数组的形状。如果是单个整数，则生成一个具有该长度的一维数组；如果是元组，则生成一个形状为元组的多维数组。</p>
</li>
</ul>
<h3 id="copy"><a href="#copy" class="headerlink" title="copy()"></a>copy()</h3><p><code>copy()</code> 函数用于创建数组的副本。</p>
<p>这是一个深拷贝操作，它会分配一个全新的内存空间，并复制原数组的所有数据。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numpy.ndarray.copy(order=<span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong><code>order</code></strong>: 决定数组在内存中的存储顺序（可选，默认值为 <code>&#39;C&#39;</code>）。</p>
<ul>
<li><code>&#39;C&#39;</code>: 按行存储（C 风格）。</li>
<li><code>&#39;F&#39;</code>: 按列存储（Fortran 风格）。</li>
<li><code>&#39;A&#39;</code>: 如果原数组是按行存储，则返回按行存储的副本；如果是按列存储，则返回按列存储的副本。</li>
<li><code>&#39;K&#39;</code>: 尽可能保留原数组的存储顺序。</li>
</ul>
<h2 id="ndarray对象"><a href="#ndarray对象" class="headerlink" title="ndarray对象"></a>ndarray对象</h2><p><code>ndarray</code> 是 NumPy 中的核心对象，它是一个多维数组，能够高效地存储和操作同类型的数据。</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="shape-1"><a href="#shape-1" class="headerlink" title="shape"></a>shape</h4><p>数组的维度</p>
<h4 id="ndim"><a href="#ndim" class="headerlink" title="ndim"></a>ndim</h4><p>数组的维度数</p>
<h4 id="size"><a href="#size" class="headerlink" title="size"></a>size</h4><p>数组的元素总数</p>
<h4 id="dtype"><a href="#dtype" class="headerlink" title="dtype"></a>dtype</h4><p>数组的元素类型</p>
<h4 id="itemsize"><a href="#itemsize" class="headerlink" title="itemsize"></a>itemsize</h4><p>数组中每个元素的大小，以字节为单位</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="reshape"><a href="#reshape" class="headerlink" title="reshape()"></a>reshape()</h4><p>通过 <code>reshape</code>方法，可以将一个数组转换成任意指定的形状，只要新形状与原数组的元素总数相同。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ndarray.reshape(shape, order=&#x27;C&#x27;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong><code>shape</code></strong>: 指定新的形状，必须是一个整数元组，形状的各个维度大小的乘积需要与原数组的总元素数一致。</p>
</li>
<li><p><strong><code>order</code></strong>: 表示读取和写入元素的顺序，默认是行优先（<code>C</code> 风格）。</p>
<ul>
<li><p><code>&#39;C&#39;</code>: 按行（C 风格）读取数据。</p>
</li>
<li><p><code>&#39;F&#39;</code>: 按列（Fortran 风格）读取数据。</p>
</li>
<li><p><code>&#39;A&#39;</code>: 如果数组存储在内存中是按行顺序，等同于 <code>&#39;C&#39;</code>；如果是按列顺序，等同于 <code>&#39;F&#39;</code>。</p>
</li>
</ul>
</li>
</ul>
<p><code>reshape</code> 不会修改原数组，它返回的是一个新的数组。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一维数组</span></span><br><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为二维数组</span></span><br><span class="line">reshaped_arr = arr.reshape((<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(reshaped_arr)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># [[1 2 3]</span></span><br><span class="line"><span class="comment">#  [4 5 6]]</span></span><br></pre></td></tr></table></figure>

<h4 id="ravel"><a href="#ravel" class="headerlink" title="ravel()"></a>ravel()</h4><p><code>ravel()</code> 方法用于将多维数组展平为一维数组。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ndarray.ravel(order=&#x27;C&#x27;)</span><br></pre></td></tr></table></figure>

<p><strong><code>order</code></strong>: 指定展平的顺序（可选，默认值为 <code>&#39;C&#39;</code>）。</p>
<ul>
<li><code>&#39;C&#39;</code>: 按行优先（C 风格）展平数据。</li>
<li><code>&#39;F&#39;</code>: 按列优先（Fortran 风格）展平数据。</li>
<li><code>&#39;A&#39;</code>: 如果数组是按行存储，等同于 <code>&#39;C&#39;</code>；如果是按列存储，等同于 <code>&#39;F&#39;</code>。</li>
<li><code>&#39;K&#39;</code>: 尽可能保留原数组的存储顺序。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建二维数组</span></span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展平数组</span></span><br><span class="line">flattened_arr = arr.ravel()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original Array:\n&quot;</span>, arr)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># [[1 2 3]</span></span><br><span class="line"><span class="comment">#  [4 5 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flattened Array:&quot;</span>, flattened_arr)</span><br><span class="line"><span class="comment"># 输出: Flattened Array: [1 2 3 4 5 6]</span></span><br></pre></td></tr></table></figure>

<h4 id="flatten"><a href="#flatten" class="headerlink" title="flatten()"></a>flatten()</h4><p><code>flatten()</code> 是一种将多维数组展平为一维数组的方法。</p>
<p>与 <code>ravel()</code> 不同，<code>flatten()</code> 总是返回数组的<strong>深拷贝</strong>，即它会创建一个全新的数组对象，因此对返回结果的修改不会影响原始数组。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建二维数组</span></span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 ravel</span></span><br><span class="line">ravel_arr = arr.ravel()</span><br><span class="line">ravel_arr[<span class="number">0</span>] = <span class="number">99</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Modified ravel Array:&quot;</span>, ravel_arr)</span><br><span class="line"><span class="comment"># 输出: [99  2  3  4  5  6]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original Array:\n&quot;</span>, arr)  <span class="comment"># 原数组被修改</span></span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># [[99  2  3]</span></span><br><span class="line"><span class="comment">#  [ 4  5  6]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 flatten</span></span><br><span class="line">flatten_arr = arr.flatten()</span><br><span class="line">flatten_arr[<span class="number">0</span>] = <span class="number">88</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Modified flatten Array:&quot;</span>, flatten_arr)</span><br><span class="line"><span class="comment"># 输出: [88  2  3  4  5  6]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original Array:\n&quot;</span>, arr)  <span class="comment"># 原数组未被修改</span></span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># [[99  2  3]</span></span><br><span class="line"><span class="comment">#  [ 4  5  6]]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="切片和索引"><a href="#切片和索引" class="headerlink" title="切片和索引"></a>切片和索引</h4> <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.arange(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">arr_r=arr.reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(arr_r)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arr_r:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr_r[<span class="number">1</span>:<span class="number">3</span>,<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line">[<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">[[<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">8</span> <span class="number">9</span>]]</span><br></pre></td></tr></table></figure>

<h2 id="数组的拼接"><a href="#数组的拼接" class="headerlink" title="数组的拼接"></a>数组的拼接</h2><h3 id="hstack"><a href="#hstack" class="headerlink" title="hstack()"></a>hstack()</h3><p><code>np.hstack()</code>是一个水平拼接（按列方向）函数。</p>
<p>它将多个数组沿水平方向（即列方向，<code>axis=1</code>）进行拼接，所有输入数组的行数（第一维大小）必须相同。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numpy.hstack((arr1, arr2, ...))</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<p>**<code>arr1, arr2, ...</code>**：需要拼接的数组（可以是列表、元组或其他数组）。</p>
<ul>
<li>输入数组的<strong>行数必须相同</strong>。</li>
</ul>
<p><strong>返回值</strong></p>
<ul>
<li>返回一个新数组，表示输入数组沿水平方向的拼接结果。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义两个二维数组</span></span><br><span class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">arr2 = np.array([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 水平拼接</span></span><br><span class="line">result = np.hstack((arr1, arr2))</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># [[1 2 5 6]</span></span><br><span class="line"><span class="comment">#  [3 4 7 8]]</span></span><br></pre></td></tr></table></figure>

<h3 id="vstack"><a href="#vstack" class="headerlink" title="vstack()"></a>vstack()</h3><p><code>np.vstack()</code>用于垂直拼接（按行方向）的函数。</p>
<p>它将多个数组沿垂直方向（即行方向，<code>axis=0</code>）进行堆叠。所有输入数组的列数（第二维大小）必须相同。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">numpy.vstack((arr1, arr2, ...))</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<p><code>arr1, arr2, ...</code>需要拼接的数组（可以是列表、元组或其他数组）。</p>
<ul>
<li>输入数组的<strong>列数必须相同</strong>。</li>
</ul>
<p><strong>返回值</strong></p>
<ul>
<li>返回一个新数组，表示输入数组沿垂直方向堆叠的结果。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义两个二维数组</span></span><br><span class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">arr2 = np.array([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 垂直拼接</span></span><br><span class="line">result = np.vstack((arr1, arr2))</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># [[1 2]</span></span><br><span class="line"><span class="comment">#  [3 4]</span></span><br><span class="line"><span class="comment">#  [5 6]</span></span><br><span class="line"><span class="comment">#  [7 8]]</span></span><br></pre></td></tr></table></figure>

<h3 id="concatenate"><a href="#concatenate" class="headerlink" title="concatenate()"></a>concatenate()</h3><p><code>np.concatenate()</code>函数用于将多个数组沿指定轴（行或者列）进行拼接。它比 <code>vstack</code> 和 <code>hstack</code> 更加灵活，因为它可以拼接任意维度的数组，并且通过指定 <code>axis</code> 参数来决定拼接的方向。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numpy.concatenate((arr1, arr2, ...), axis=<span class="number">0</span>, out=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a><strong>参数</strong></h4><ul>
<li>**<code>arr1, arr2, ...</code>**：要拼接的数组（可以是多个数组）。</li>
<li>**<code>axis</code>**：拼接的轴。默认为 <code>0</code>，表示沿行方向拼接。如果为 <code>1</code>，则表示沿列方向拼接。</li>
<li>**<code>out</code>**：可选参数，用于指定输出数组的存放位置。</li>
</ul>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a><strong>返回值</strong></h4><ul>
<li>返回一个拼接后的新数组。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])  <span class="comment"># 第一块数组</span></span><br><span class="line">arr2 = np.array([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]])  <span class="comment"># 第二块数组</span></span><br><span class="line"></span><br><span class="line">result = np.concatenate((arr1, arr2), axis=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br></pre></td></tr></table></figure>



<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])  <span class="comment"># 第一块数组</span></span><br><span class="line">arr2 = np.array([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]])  <span class="comment"># 第二块数组</span></span><br><span class="line"></span><br><span class="line">result = np.concatenate((arr1, arr2), axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span> <span class="number">7</span> <span class="number">8</span>]]</span><br></pre></td></tr></table></figure>

<h2 id="数组的拆分"><a href="#数组的拆分" class="headerlink" title="数组的拆分"></a>数组的拆分</h2><h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><p> <code>np.split</code> 是用于拆分数组的函数。</p>
<p>它将一个数组按照指定的分割点拆成多个子数组。</p>
<p>可以选择按照沿着哪个轴拆分数组，并指定拆分点的位置。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numpy.split(ary, indices_or_sections, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<ul>
<li>**<code>ary</code>**：要拆分的数组。</li>
<li><code>indices_or_sections</code>：<ul>
<li><strong>整数</strong>：表示将数组分成多少个部分。比如，<code>3</code> 就表示将数组均匀拆分成 3 个部分。</li>
<li><strong>数组</strong>：表示在指定的索引位置进行拆分。如果传入的是一个数组，数组中的每个元素就是一个拆分点。</li>
</ul>
</li>
<li>**<code>axis</code>**：拆分的轴，默认为 0，即沿着行方向拆分。如果指定 <code>axis=1</code>，则表示沿着列方向拆分。</li>
</ul>
<p><strong>返回值</strong></p>
<ul>
<li>返回一个列表，包含拆分后的多个子数组。</li>
</ul>
<p><strong>行方向拆分</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line">result = np.split(arr, <span class="number">3</span>, axis=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]), array([[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]), array([[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])]</span><br></pre></td></tr></table></figure>



<p><strong>列方向拆分</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line">result = np.split(arr, <span class="number">3</span>, axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[array([[<span class="number">1</span>],</span><br><span class="line">       [<span class="number">4</span>],</span><br><span class="line">       [<span class="number">7</span>]]), array([[<span class="number">2</span>],</span><br><span class="line">       [<span class="number">5</span>],</span><br><span class="line">       [<span class="number">8</span>]]), array([[<span class="number">3</span>],</span><br><span class="line">       [<span class="number">6</span>],</span><br><span class="line">       [<span class="number">9</span>]])]</span><br></pre></td></tr></table></figure>

<h2 id="数组的转置"><a href="#数组的转置" class="headerlink" title="数组的转置"></a>数组的转置</h2><h3 id="transpose"><a href="#transpose" class="headerlink" title="transpose()"></a>transpose()</h3><p><code>np.transpose()</code> 函数用于对数组进行转置操作。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"><span class="built_in">print</span>(np.transpose(arr))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[[<span class="number">1</span> <span class="number">4</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">5</span> <span class="number">8</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">6</span> <span class="number">9</span>]]</span><br></pre></td></tr></table></figure>

<h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>Python脚本</title>
    <url>/2025/03/20/Python%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><h2 id="转为int类型"><a href="#转为int类型" class="headerlink" title="转为int类型"></a><strong>转为int类型</strong></h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串转整数</span></span><br><span class="line">num = <span class="built_in">int</span>(<span class="string">&quot;123&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(num)  <span class="comment"># 输出: 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浮点数转整数（截断小数部分）</span></span><br><span class="line">num = <span class="built_in">int</span>(<span class="number">3.14</span>)</span><br><span class="line"><span class="built_in">print</span>(num)  <span class="comment"># 输出: 3</span></span><br></pre></td></tr></table></figure>

<h2 id="转为float类型"><a href="#转为float类型" class="headerlink" title="转为float类型"></a><strong>转为float类型</strong></h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串转浮点数</span></span><br><span class="line">num = <span class="built_in">float</span>(<span class="string">&quot;3.14&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(num)  <span class="comment"># 输出: 3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整数转浮点数</span></span><br><span class="line">num = <span class="built_in">float</span>(<span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(num)  <span class="comment"># 输出: 123.0</span></span><br></pre></td></tr></table></figure>

<h2 id="转为str类型"><a href="#转为str类型" class="headerlink" title="转为str类型"></a><strong>转为str类型</strong></h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 整数转字符串</span></span><br><span class="line">text = <span class="built_in">str</span>(<span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(text)  <span class="comment"># 输出: &quot;123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浮点数转字符串</span></span><br><span class="line">text = <span class="built_in">str</span>(<span class="number">3.14</span>)</span><br><span class="line"><span class="built_in">print</span>(text)  <span class="comment"># 输出: &quot;3.14&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="转为bin二进制类型"><a href="#转为bin二进制类型" class="headerlink" title="转为bin二进制类型"></a><strong>转为bin二进制类型</strong></h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 整数转二进制字符串</span></span><br><span class="line">bin_str = <span class="built_in">bin</span>(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(bin_str)  <span class="comment"># 输出: &#x27;0b1010&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二进制字符串转整数</span></span><br><span class="line">num = <span class="built_in">int</span>(<span class="string">&quot;0b1010&quot;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(num)  <span class="comment"># 输出: 10</span></span><br></pre></td></tr></table></figure>

<h2 id="转为hex十六进制"><a href="#转为hex十六进制" class="headerlink" title="转为hex十六进制"></a><strong>转为hex十六进制</strong></h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 整数转十六进制字符串</span></span><br><span class="line">hex_str = <span class="built_in">hex</span>(<span class="number">255</span>)</span><br><span class="line"><span class="built_in">print</span>(hex_str)  <span class="comment"># 输出: &#x27;0xff&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串与字节序列"><a href="#字符串与字节序列" class="headerlink" title="字符串与字节序列"></a><strong>字符串与字节序列</strong></h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">str2bytes = <span class="built_in">str</span>.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(str2bytes)</span><br><span class="line">// <span class="string">b&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line">bytes2str = str2bytes.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(bytes2str)</span><br><span class="line">// hello world</span><br></pre></td></tr></table></figure>

<h2 id="字节序列与列表"><a href="#字节序列与列表" class="headerlink" title="字节序列与列表"></a><strong>字节序列与列表</strong></h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">str2bytes = <span class="built_in">str</span>.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">bytes2list = <span class="built_in">list</span>(str2bytes)</span><br><span class="line"><span class="built_in">print</span>(bytes2list)</span><br><span class="line">// [<span class="number">104</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">32</span>, <span class="number">119</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">list2bytes = <span class="built_in">bytes</span>(bytes2list)</span><br><span class="line"><span class="built_in">print</span>(list2bytes)</span><br><span class="line">// <span class="string">b&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="int类型转字节序列，可指定字节长度和字节顺序"><a href="#int类型转字节序列，可指定字节长度和字节顺序" class="headerlink" title="int类型转字节序列，可指定字节长度和字节顺序"></a><strong>int类型转字节序列，可指定字节长度和字节顺序</strong></h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>.to_bytes(length, byteorder, *, signed=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">// length:指定字节序列的长度</span><br><span class="line">// byteorder:指定字节顺序 <span class="string">&#x27;big&#x27;</span>：大端序（高位字节在前） <span class="string">&#x27;little&#x27;</span>：小端序（低位字节在前）</span><br><span class="line">// signed:指定整数是否为有符号整数，默认为 <span class="literal">False</span>（无符号整数）。如果为 <span class="literal">True</span>，则支持负数的转换。</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">tt = <span class="number">0x123456789abcdef</span></span><br><span class="line">bytes_big = tt.to_bytes(<span class="number">8</span>,<span class="string">&quot;big&quot;</span>)</span><br><span class="line">bytes_little = tt.to_bytes(<span class="number">8</span>,<span class="string">&quot;little&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bytes_big:&quot;</span>,bytes_big)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list_bytes_big:&quot;</span>,<span class="built_in">list</span>(bytes_big))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bytes_little:&quot;</span>,bytes_little)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list_bytes_little:&quot;</span>,<span class="built_in">list</span>(bytes_little))</span><br><span class="line"></span><br><span class="line">bytes_big: <span class="string">b&#x27;\x01#Eg\x89\xab\xcd\xef&#x27;</span></span><br><span class="line">list_bytes_big [<span class="number">1</span>, <span class="number">35</span>, <span class="number">69</span>, <span class="number">103</span>, <span class="number">137</span>, <span class="number">171</span>, <span class="number">205</span>, <span class="number">239</span>]</span><br><span class="line">bytes_little: <span class="string">b&#x27;\xef\xcd\xab\x89gE#\x01&#x27;</span></span><br><span class="line">list_bytes_little [<span class="number">239</span>, <span class="number">205</span>, <span class="number">171</span>, <span class="number">137</span>, <span class="number">103</span>, <span class="number">69</span>, <span class="number">35</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int.from_bytes()</span><br></pre></td></tr></table></figure>



<h2 id="hexstr2barr"><a href="#hexstr2barr" class="headerlink" title="hexstr2barr"></a>hexstr2barr</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hexstr2barr</span>(<span class="params"><span class="built_in">hex</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>))</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu初始化</title>
    <url>/2025/01/20/Ubuntu%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    <content><![CDATA[<h1 id="open-vm-tools-desktop"><a href="#open-vm-tools-desktop" class="headerlink" title="open-vm-tools-desktop"></a>open-vm-tools-desktop</h1><p>提供如下功能：</p>
<ul>
<li>自动调整屏幕分辨率</li>
<li>共享剪贴板</li>
<li>图形性能优化</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install open-vm-tools-desktop -y</span><br></pre></td></tr></table></figure>

<h1 id="调整桌面环境缩放比例"><a href="#调整桌面环境缩放比例" class="headerlink" title="调整桌面环境缩放比例"></a>调整桌面环境缩放比例</h1><p>调整 GNOME 桌面环境中所有界面文本（如菜单、窗口标题、工具提示等）的缩放比例，将文本按照比例 <strong>1.5 倍</strong>放大。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gsettings set org.gnome.desktop.interface text-scaling-factor 1.5</span><br></pre></td></tr></table></figure>

<h1 id="设置root密码"><a href="#设置root密码" class="headerlink" title="设置root密码"></a>设置root密码</h1><p>打开终端，输入<code>sudo -i</code>，会提示输入普通用户密码，输入后回车。<br>输入<code>passwd root</code>命令来修改root密码。<br>输入新的root密码，接着回车，注意的是输入的密码不会显示。<br>然后再重新输入新的root密码，然后回车root密码就修改成功。</p>
<h1 id="更新系统包管理器"><a href="#更新系统包管理器" class="headerlink" title="更新系统包管理器"></a>更新系统包管理器</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade -y</span><br></pre></td></tr></table></figure>

<h1 id="安装常用包"><a href="#安装常用包" class="headerlink" title="安装常用包"></a>安装常用包</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net-tools</span><br><span class="line">vim</span><br><span class="line">git</span><br><span class="line">nodejs</span><br><span class="line">npm</span><br><span class="line">make</span><br><span class="line">curl</span><br><span class="line">wget</span><br><span class="line">adb</span><br><span class="line">cmake</span><br></pre></td></tr></table></figure>

<p>下载安装vscode，使用如下命令安装软件包</p>
<p><code>dpkg -i code</code></p>
<h1 id="我的软件"><a href="#我的软件" class="headerlink" title="我的软件"></a>我的软件</h1><h2 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h2><p>官网下载安装</p>
]]></content>
      <categories>
        <category>虚拟机</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode使用指南</title>
    <url>/2024/12/24/VSCode%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="提高工作效率"><a href="#提高工作效率" class="headerlink" title="提高工作效率"></a>提高工作效率</h1><h2 id="自动保存"><a href="#自动保存" class="headerlink" title="自动保存"></a>自动保存</h2><p>打开设置搜索<code>Auto Save</code>，将选项改为<code>afterDelay</code></p>
<h2 id="鼠标滚轮缩放"><a href="#鼠标滚轮缩放" class="headerlink" title="鼠标滚轮缩放"></a>鼠标滚轮缩放</h2><p>打开设置搜索<code>Mouse Wheel Zoom</code>，勾选相应的选项即可。</p>
<h1 id="自定义背景"><a href="#自定义背景" class="headerlink" title="自定义背景"></a>自定义背景</h1><p>安装插件<code>background</code></p>
<p>打开设置，搜索<code>background</code>，找到<code>Background: Fullscreen</code>，进行编辑</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;background.fullscreen&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;images&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;file:///C:/Users/blttttt/Desktop/shuimo.png&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;opacity&quot;</span><span class="punctuation">:</span> <span class="number">0.2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cover&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="string">&quot;center&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;interval&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;random&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;workbench.colorTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Default High Contrast&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><h2 id="Ctrl-B"><a href="#Ctrl-B" class="headerlink" title="Ctrl+B"></a>Ctrl+B</h2><p>切换侧边栏的显示&#x2F;隐藏状态</p>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="C-C"><a href="#C-C" class="headerlink" title="C&#x2F;C++"></a>C&#x2F;C++</h2><h2 id="Code-Runner"><a href="#Code-Runner" class="headerlink" title="Code Runner"></a>Code Runner</h2>]]></content>
      <categories>
        <category>高效率工具合集</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Python语言</title>
    <url>/2024/02/01/Python%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h1 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h1><h2 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h2><h3 id="quote"><a href="#quote" class="headerlink" title="quote()"></a>quote()</h3><h3 id="quote-plus"><a href="#quote-plus" class="headerlink" title="quote_plus()"></a>quote_plus()</h3><h1 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h1><h2 id="request"><a href="#request" class="headerlink" title="request()"></a>request()</h2><p>requests.request() 是一个通用的函数，它接受 HTTP 方法（如 “get”、”post”、”put” 等）和各种可选参数来构造请求，并返回 Response 对象。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">request</span>(<span class="params">method, url, **kwargs</span>):</span><br></pre></td></tr></table></figure>
<h2 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h2><p>get请求</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">url, params=<span class="literal">None</span>, **kwargs</span>):</span><br><span class="line">    <span class="keyword">return</span> request(<span class="string">&quot;get&quot;</span>, url, params=params, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># url：请求的目标 URL。这个是必需的参数。</span></span><br><span class="line"><span class="comment"># params：可选参数，表示要发送的查询字符串数据。可以是字典、元组列表或字节流。默认值为 None，表示没有查询参数。</span></span><br><span class="line"><span class="comment"># kwargs：其他可选的关键字参数，传递给 requests 库的 request 函数。这些参数可以包括 headers、cookies、timeout 等。</span></span><br><span class="line"><span class="comment"># 返回值：返回一个Response对象。</span></span><br></pre></td></tr></table></figure>
<h2 id="post"><a href="#post" class="headerlink" title="post()"></a>post()</h2><p>post请求</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">url, data=<span class="literal">None</span>, json=<span class="literal">None</span>, **kwargs</span>):</span><br><span class="line">    <span class="keyword">return</span> request(<span class="string">&quot;post&quot;</span>, url, data=data, json=json, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># url：请求的目标 URL，必须提供。</span></span><br><span class="line"><span class="comment"># data：可选参数，用于发送的数据。它可以是一个字典、元组列表、字节流或者文件对象。默认值是 None。</span></span><br><span class="line"><span class="comment"># json：可选参数，如果要发送 JSON 数据，可以传递一个 Python 对象（如字典、列表等），它将会被序列化为 JSON 格式。默认值是 None。</span></span><br><span class="line"><span class="comment"># kwargs：其他的可选参数，这些参数将传递给 requests.request() 函数，包括 headers、timeout、auth 等。</span></span><br><span class="line"><span class="comment"># 返回值：返回一个 Response 对象，它包含了来自服务器的响应数据。</span></span><br></pre></td></tr></table></figure>
<h2 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="content"><a href="#content" class="headerlink" title="content"></a>content</h4><p>返回响应内容，以字节为单位</p>
<h4 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h4><p>返回一个CookieJar对象，其中包含从服务器发回的cookie。</p>
<h4 id="encoding"><a href="#encoding" class="headerlink" title="encoding"></a>encoding</h4><p>返回用于解码的编码</p>
<h4 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h4><p>返回响应头的字典</p>
<h4 id="status-code"><a href="#status-code" class="headerlink" title="status_code"></a>status_code</h4><p>返回状态码</p>
<h4 id="text"><a href="#text" class="headerlink" title="text"></a>text</h4><p>以unicode形式返回响应的内容</p>
<h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><p>返回响应的URL</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="json"><a href="#json" class="headerlink" title="json()"></a>json()</h4><p>返回JSON对象结果。</p>
<h4 id="close"><a href="#close" class="headerlink" title="close()"></a>close()</h4><p>关闭与服务器的连接</p>
<h1 id="多进程multiprocessing"><a href="#多进程multiprocessing" class="headerlink" title="多进程multiprocessing"></a>多进程multiprocessing</h1><p>在多进程模型中，操作系统会分配多个进程，每个进程拥有独立的内存空间和资源。</p>
<h2 id="Process类"><a href="#Process类" class="headerlink" title="Process类"></a>Process类</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a><strong>构造方法</strong></h3><p>创建子进程<br>    <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">process = Process(target=<span class="literal">None</span>, name=<span class="literal">None</span>, args=(), kwargs=&#123;&#125;)</span><br><span class="line"><span class="comment"># target: 指定要在新进程中执行的目标函数。</span></span><br><span class="line"><span class="comment"># name: 设置进程的名称。</span></span><br><span class="line"><span class="comment"># args: 传递给目标函数的参数，以元组的形式提供。</span></span><br><span class="line"><span class="comment"># kwargs: 传递给目标函数的关键字参数，以字典的形式提供。</span></span><br></pre></td></tr></table></figure></p>
<h3 id="run-方法"><a href="#run-方法" class="headerlink" title="run() 方法"></a><strong>run() 方法</strong></h3><p>run() 方法定义了进程执行的任务。通常我们不直接调用 run()，而是通过 start() 来启动进程，start() 方法会在子进程中自动调用 run()。</p>
<h3 id="start-方法"><a href="#start-方法" class="headerlink" title="start() 方法"></a><strong>start() 方法</strong></h3><p>start() 方法用于启动子进程。调用 start() 后，进程会被创建并在后台运行，接着会自动调用 run() 方法来执行进程中的任务。</p>
<h3 id="join-方法"><a href="#join-方法" class="headerlink" title="join() 方法"></a><strong>join() 方法</strong></h3><p>join() 方法用于等待子进程完成。它会阻塞主进程，直到被调用的子进程执行完毕。</p>
<h3 id="name-属性"><a href="#name-属性" class="headerlink" title="name 属性"></a><strong>name 属性</strong></h3><p>name 属性用于获取或设置进程的名称。</p>
<h3 id="pid-属性"><a href="#pid-属性" class="headerlink" title="pid 属性"></a><strong>pid 属性</strong></h3><p>pid 属性用于获取子进程的进程 ID。进程 ID 是操作系统为每个进程分配的唯一标识符。  </p>
<p><strong>一个简单的例子</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test started&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testOO</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test00 started&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Name:&quot;</span>,name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test00 finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target=test)</span><br><span class="line">    pOO = Process(target=testOO,args=(<span class="string">&#x27;Bileton&#x27;</span>,))</span><br><span class="line"></span><br><span class="line">    p.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;PID:&quot;</span>, p.pid)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ProcNAME:&quot;</span>, p.name)</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line">    pOO.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;PID:&quot;</span>, pOO.pid)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ProcNAME:&quot;</span>, pOO.name)</span><br><span class="line">    pOO.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Process finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">PID: <span class="number">41268</span></span><br><span class="line">ProcNAME: Process-<span class="number">1</span></span><br><span class="line">test started</span><br><span class="line">test finished</span><br><span class="line">PID: <span class="number">24348</span></span><br><span class="line">ProcNAME: Process-<span class="number">2</span></span><br><span class="line">test00 started</span><br><span class="line">Name: Bileton</span><br><span class="line">test00 finished</span><br><span class="line">Process finished</span><br></pre></td></tr></table></figure>
<h2 id="Queue类（队列）"><a href="#Queue类（队列）" class="headerlink" title="Queue类（队列）"></a>Queue类（队列）</h2><p>Queue用于在不同进程之间传递数据。<br>Queue类是基于先进先出（FIFO）原则实现的，允许多个进程在队列中安全地放入和取出数据。</p>
<h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a><strong>构造方法</strong></h3><p>创建队列<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">queue = Queue(maxsize=0)</span><br><span class="line"># maxsize：指定队列的最大容量。默认值为 0，表示队列大小不限制。</span><br></pre></td></tr></table></figure></p>
<h3 id="put-item"><a href="#put-item" class="headerlink" title="put(item)"></a><strong>put(item)</strong></h3><p>将 item 放入队列。<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">queue.put(item, block=True, timeout=None)</span><br><span class="line"># item：要放入队列的对象。</span><br><span class="line"># block：是否阻塞，默认为 True。如果为 False，则如果队列满了，put() 会抛出 Full 异常。</span><br><span class="line"># timeout：如果设置为一个非零的数字，当 block 为 True 时，put() 将在等待指定时间后抛出异常。如果设置为 None（默认），则会无限期阻塞。</span><br></pre></td></tr></table></figure></p>
<h3 id="get-1"><a href="#get-1" class="headerlink" title="get()"></a><strong>get()</strong></h3><p>从队列中取出一个对象。如果队列为空，默认情况下会阻塞直到队列有数据。<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get(block=True, timeout=None)</span><br><span class="line"># block：是否阻塞，默认为 True。如果为 False，且队列为空，会抛出 Empty 异常。</span><br><span class="line"># timeout：如果设置了超时，get() 方法将在超时后抛出 Empty 异常。</span><br></pre></td></tr></table></figure></p>
<h3 id="empty"><a href="#empty" class="headerlink" title="empty()"></a><strong>empty()</strong></h3><p>返回队列是否为空。如果队列为空，返回 True；否则返回 False。</p>
<h3 id="full"><a href="#full" class="headerlink" title="full()"></a><strong>full()</strong></h3><p>返回队列是否已满。如果队列已满，返回 True；否则返回 False。  </p>
<p><strong>一个简单的例子</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Queue</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">producer</span>(<span class="params">queue</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Producing <span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">        queue.put(i)  <span class="comment"># 将数据放入队列</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">consumer</span>(<span class="params">queue</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        item = queue.get()  <span class="comment"># 从队列中取出数据</span></span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">&quot;STOP&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Consuming <span class="subst">&#123;item&#125;</span>&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    queue = Queue()</span><br><span class="line">    <span class="comment"># 创建生产者和消费者进程</span></span><br><span class="line">    process_producer = Process(target=producer, args=(queue,),name=<span class="string">&#x27;producer&#x27;</span>)</span><br><span class="line">    consumer_process = Process(target=consumer, args=(queue,),name=<span class="string">&#x27;consumer&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动进程</span></span><br><span class="line">    process_producer.start()</span><br><span class="line">    consumer_process.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待生产者进程完成</span></span><br><span class="line">    process_producer.join()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 &quot;STOP&quot; 标志告诉消费者停止</span></span><br><span class="line">    queue.put(<span class="string">&quot;STOP&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;queue put \&quot;STOP\&quot;&quot;</span>)</span><br><span class="line">    <span class="comment"># 等待消费者进程完成</span></span><br><span class="line">    consumer_process.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;All Process Done&quot;</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Producing <span class="number">0</span></span><br><span class="line">Consuming <span class="number">0</span></span><br><span class="line">Producing <span class="number">1</span></span><br><span class="line">Producing <span class="number">2</span></span><br><span class="line">Consuming <span class="number">1</span></span><br><span class="line">Producing <span class="number">3</span></span><br><span class="line">Producing <span class="number">4</span></span><br><span class="line">Consuming <span class="number">2</span></span><br><span class="line">queue put <span class="string">&quot;STOP&quot;</span></span><br><span class="line">Consuming <span class="number">3</span></span><br><span class="line">Consuming <span class="number">4</span></span><br><span class="line">All Process Done</span><br></pre></td></tr></table></figure>
<h2 id="Manage类"><a href="#Manage类" class="headerlink" title="Manage类"></a>Manage类</h2><p>Manager类能够创建可以在多个进程之间共享的对象，并提供多进程之间同步和管理共享数据的功能。<br>通过Manager类可以创建如列表、字典、Namespace、Value、Array 等对象，并允许不同进程对其进行操作。</p>
<h3 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a><strong>构造方法</strong></h3><p>创建Manager对象<br>    <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager</span><br><span class="line">manager = Manager()</span><br></pre></td></tr></table></figure></p>
<h3 id="Manager-dict"><a href="#Manager-dict" class="headerlink" title="Manager.dict()"></a><strong>Manager.dict()</strong></h3><p>返回一个共享字典，允许多个进程修改和访问字典的键值对。</p>
<h3 id="Manager-list"><a href="#Manager-list" class="headerlink" title="Manager.list()"></a><strong>Manager.list()</strong></h3><p>返回一个共享列表，允许多个进程修改和访问列表中的元素。</p>
<h3 id="共享字典和列表示例"><a href="#共享字典和列表示例" class="headerlink" title="共享字典和列表示例"></a>共享字典和列表示例</h3><p>使用 Manager 类创建共享字典和列表，并在多个进程中操作它们。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Manager</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_dict</span>(<span class="params">shared_dict</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        shared_dict[i] = i * i</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_list</span>(<span class="params">shared_list</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        shared_list.append(i*i)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    manager = Manager()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建共享字典和共享列表</span></span><br><span class="line">    shared_dict = manager.<span class="built_in">dict</span>()</span><br><span class="line">    shared_list = manager.<span class="built_in">list</span>()</span><br><span class="line">    <span class="comment"># 创建进程</span></span><br><span class="line">    process_dict = Process(target=update_dict, args=(shared_dict,), name=<span class="string">&#x27;process_dict&#x27;</span>)</span><br><span class="line">    process_list = Process(target=update_list, args=(shared_list,), name=<span class="string">&#x27;process_list&#x27;</span>)</span><br><span class="line">    <span class="comment"># 启动进程</span></span><br><span class="line">    process_list.start()</span><br><span class="line">    process_dict.start()</span><br><span class="line">    <span class="comment"># 等待进程完成</span></span><br><span class="line">    process_list.join()</span><br><span class="line">    process_dict.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Shared dict: &quot;</span>, shared_dict)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Shared list: &quot;</span>, shared_list)</span><br></pre></td></tr></table></figure>
<h2 id="Pool"><a href="#Pool" class="headerlink" title="Pool"></a>Pool</h2><p>Pool是一个用于进程池管理的类，允许你通过并行化任务来高效地利用多核 CPU，自动管理多个进程的创建和销毁。</p>
<h3 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a><strong>构造方法</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pool = Pool(processes=None, initializer=None, initargs=(), maxtasksperchild=None, context=None)</span><br><span class="line"># processes：指定池中进程的数量。如果为 None，则默认使用系统的 CPU 核心数。</span><br><span class="line"># initializer：一个可选的函数，在进程池中的每个工作进程启动时调用一次。</span><br><span class="line"># maxtasksperchild：指定每个进程处理的最大任务数，处理完这些任务后，进程将会被重启。这对于避免内存泄漏或处理长时间运行的进程非常有用。</span><br><span class="line"># context：指定启动新进程时使用的上下文。一般情况下不需要指定。</span><br></pre></td></tr></table></figure>
<h3 id="apply-func-args-kwds"><a href="#apply-func-args-kwds" class="headerlink" title="apply(func, args&#x3D;(), kwds&#x3D;{})"></a><strong>apply(func, args&#x3D;(), kwds&#x3D;{})</strong></h3><p>阻塞式方法，调用目标函数 func，并传递参数 args 和关键字参数 kwds。<br>该方法会等待任务执行完成，并返回结果。</p>
<h3 id="apply-async-func-args-kwds-callback-None-error-callback-None"><a href="#apply-async-func-args-kwds-callback-None-error-callback-None" class="headerlink" title="apply_async(func, args&#x3D;(), kwds&#x3D;{}, callback&#x3D;None, error_callback&#x3D;None)"></a><strong>apply_async(func, args&#x3D;(), kwds&#x3D;{}, callback&#x3D;None, error_callback&#x3D;None)</strong></h3><p>非阻塞式方法，调用目标函数 func，并传递参数 args 和 kwds。<br>apply_async 不会等待任务完成，而是立即返回一个 AsyncResult 对象，你可以通过该对象检查任务的状态、等待结果，或者在任务完成时获取回调。<br>callback：任务完成后调用的函数。<br>error_callback：任务出现异常时调用的函数。<br>    <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_result</span>(<span class="params">result</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Result:&quot;</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pool = Pool(<span class="number">4</span>)</span><br><span class="line">    async_result = pool.apply_async(square, (<span class="number">10</span>,), callback=on_result)</span><br><span class="line">    async_result.wait()  <span class="comment"># 等待任务完成</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Result: <span class="number">100</span></span><br></pre></td></tr></table></figure></p>
<h3 id="map-func-iterable-chunksize-None"><a href="#map-func-iterable-chunksize-None" class="headerlink" title="map(func, iterable, chunksize&#x3D;None)"></a><strong>map(func, iterable, chunksize&#x3D;None)</strong></h3><p>阻塞式方法，将 iterable 中的每个元素传递给目标函数 func。<br>map 会将任务并行化处理，并返回一个包含每个任务结果的列表。<br>chunksize：可选，指定将 iterable 切分为的任务块大小。  </p>
<h3 id="map-async-func-iterable-chunksize-None-callback-None-error-callback-None"><a href="#map-async-func-iterable-chunksize-None-callback-None-error-callback-None" class="headerlink" title="map_async(func, iterable, chunksize&#x3D;None, callback&#x3D;None, error_callback&#x3D;None)"></a><strong>map_async(func, iterable, chunksize&#x3D;None, callback&#x3D;None, error_callback&#x3D;None)</strong></h3><p>非阻塞式方法，类似于 map，但返回一个 AsyncResult 对象。<br>callback：任务完成后调用的函数。<br>error_callback：任务出错时调用的函数。  </p>
<h3 id="starmap-func-iterable-chunksize-None"><a href="#starmap-func-iterable-chunksize-None" class="headerlink" title="starmap(func, iterable, chunksize&#x3D;None)"></a><strong>starmap(func, iterable, chunksize&#x3D;None)</strong></h3><p>starmap()是 map() 方法的扩展，用于将多个参数传递给目标函数进行并行计算。<br>    <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pool = Pool(<span class="number">4</span>)  <span class="comment"># 创建一个包含4个进程的进程池</span></span><br><span class="line">    numbers = [(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">5</span>), (<span class="number">5</span>, <span class="number">6</span>)]  <span class="comment"># 每个元组包含两个参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 starmap 函数并行计算</span></span><br><span class="line">    result = pool.starmap(multiply, numbers)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Results: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    pool.close()  <span class="comment"># 关闭进程池，防止接受新任务</span></span><br><span class="line">    pool.join()   <span class="comment"># 等待所有进程完成</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Results: [<span class="number">2</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br></pre></td></tr></table></figure></p>
<h3 id="close-1"><a href="#close-1" class="headerlink" title="close()"></a><strong>close()</strong></h3><p>关闭进程池，不再接受新任务。<br>close() 后调用 join() 来等待所有进程完成。</p>
<h3 id="join"><a href="#join" class="headerlink" title="join()"></a><strong>join()</strong></h3><p>等待进程池中的所有进程完成任务后再退出。<br><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Process ID: <span class="subst">&#123;os.getpid()&#125;</span> processing <span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pool = Pool(processes=<span class="number">4</span>)  <span class="comment"># 创建一个包含4个进程的进程池</span></span><br><span class="line">    numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 map 函数并行计算</span></span><br><span class="line">    result = pool.<span class="built_in">map</span>(square, numbers)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Results: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    pool.close()  <span class="comment"># 关闭进程池，防止接受新任务</span></span><br><span class="line">    pool.join()   <span class="comment"># 等待所有进程完成</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">Process ID: <span class="number">12345</span> processing <span class="number">1</span></span><br><span class="line">Process ID: <span class="number">12346</span> processing <span class="number">2</span></span><br><span class="line">Process ID: <span class="number">12347</span> processing <span class="number">3</span></span><br><span class="line">Process ID: <span class="number">12348</span> processing <span class="number">4</span></span><br><span class="line">Results: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br></pre></td></tr></table></figure>
<h1 id="多线程threading"><a href="#多线程threading" class="headerlink" title="多线程threading"></a>多线程threading</h1><h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><h3 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h3><p>创建一个线程对象。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">thread = Thread(target=<span class="literal">None</span>, name=<span class="literal">None</span>, args=(), kwargs=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># target：要在线程中调用的目标函数。</span></span><br><span class="line"><span class="comment"># name：线程的名称，用于标识线程。如果未指定，系统会自动分配一个唯一的名称。</span></span><br><span class="line"><span class="comment"># args：传递给目标函数的参数元组</span></span><br><span class="line"><span class="comment"># kwargs：传递给目标函数的关键字参数字典。</span></span><br></pre></td></tr></table></figure>
<h3 id="start"><a href="#start" class="headerlink" title="start()"></a>start()</h3><p>start() 用于启动一个线程，让线程开始执行它的目标函数。<br>调用 start() 后，线程会进入 就绪状态，等待操作系统调度执行。</p>
<h3 id="join-1"><a href="#join-1" class="headerlink" title="join()"></a>join()</h3><p>join() 用于阻塞主线程，直到目标线程完成任务后才继续执行主线程的代码。  </p>
<h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><h3 id="线程竞争问题"><a href="#线程竞争问题" class="headerlink" title="线程竞争问题"></a>线程竞争问题</h3><p>如下一部分代码，两个线程同时访问和修改全局变量<code>i</code>，会导致结果数据混乱。<br>由于线程的执行顺序和调度是由操作系统控制的，不同运行时，两个线程对 i 的操作可能以不同的顺序发生。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">global</span> i</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        i+=x</span><br><span class="line">        i-=x</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test1:&quot;</span>,i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="keyword">global</span> i</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        i+=x</span><br><span class="line">        i-=x</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test2:&quot;</span>,i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    thd1 = Thread(target=test1)</span><br><span class="line">    thd2 = Thread(target=test2)</span><br><span class="line">    thd1.start()</span><br><span class="line">    thd2.start()</span><br><span class="line">    thd1.join()</span><br><span class="line">    thd2.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h3><p>为了确保共享资源的访问是线程安全的，可以使用线程锁（Lock）。</p>
<h3 id="构造方法-5"><a href="#构造方法-5" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">lock = Lock()</span><br></pre></td></tr></table></figure>
<h3 id="acquire"><a href="#acquire" class="headerlink" title="acquire()"></a>acquire()</h3><p>获取锁。如果锁已被其他线程占用，当前线程会阻塞直到锁释放。</p>
<h3 id="release"><a href="#release" class="headerlink" title="release()"></a>release()</h3><p>释放锁。释放后，其他等待锁的线程可以继续执行。</p>
<h3 id="locked"><a href="#locked" class="headerlink" title="locked()"></a>locked()</h3><p>检查锁是否已被某个线程获取，返回 True 或 False。  </p>
<p><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Lock</span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">lock = Lock()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">global</span> i</span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        i+=x</span><br><span class="line">        i-=x</span><br><span class="line">    lock.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test1:&quot;</span>,i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="keyword">global</span> i</span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        i+=x</span><br><span class="line">        i-=x</span><br><span class="line">    lock.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test2:&quot;</span>,i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    thd1 = Thread(target=test1)</span><br><span class="line">    thd2 = Thread(target=test2)</span><br><span class="line">    thd1.start()</span><br><span class="line">    thd2.start()</span><br><span class="line">    thd1.join()</span><br><span class="line">    thd2.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">test1: <span class="number">0</span></span><br><span class="line">test2: <span class="number">0</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h3 id="使用-with-语句管理锁"><a href="#使用-with-语句管理锁" class="headerlink" title="使用 with 语句管理锁"></a>使用 with 语句管理锁</h3><p>with 语句可以自动获取和释放锁，避免忘记调用 release() 导致死锁问题。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Lock</span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">lock = Lock()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">global</span> i</span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">            i+=x</span><br><span class="line">            i-=x</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test1:&quot;</span>,i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="keyword">global</span> i</span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">            i+=x</span><br><span class="line">            i-=x</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test2:&quot;</span>,i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    thd1 = Thread(target=test1)</span><br><span class="line">    thd2 = Thread(target=test2)</span><br><span class="line">    thd1.start()</span><br><span class="line">    thd2.start()</span><br><span class="line">    thd1.join()</span><br><span class="line">    thd2.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">test1: <span class="number">0</span></span><br><span class="line">test2: <span class="number">0</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h2 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h2><p>定时执行任务</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">threading.Timer(interval, function, args=<span class="literal">None</span>, kwargs=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># interval: 延迟的时间（单位：秒）。</span></span><br><span class="line"><span class="comment"># function: 延迟后执行的函数。</span></span><br><span class="line"><span class="comment"># args: 传递给函数的位置参数（可选）。</span></span><br><span class="line"><span class="comment"># kwargs: 传递给函数的关键字参数（可选）。</span></span><br></pre></td></tr></table></figure>

<h3 id="start-1"><a href="#start-1" class="headerlink" title="start()"></a>start()</h3><p>启动定时器。</p>
<h3 id="join-2"><a href="#join-2" class="headerlink" title="join()"></a>join()</h3><p>阻塞主线程，直到定时器线程完成任务后再继续执行。<br><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Lock,Timer</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">t</span>):</span><br><span class="line">    time.sleep(t)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;wait&quot;</span>,t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    timer = Timer(<span class="number">5</span>,run,(<span class="number">5</span>,))</span><br><span class="line">    timer.start()</span><br><span class="line">    timer.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><h3 id="构造方法-6"><a href="#构造方法-6" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">concurrent.futures.ThreadPoolExecutor(</span><br><span class="line">    max_workers=<span class="literal">None</span>, </span><br><span class="line">    thread_name_prefix=<span class="string">&#x27;&#x27;</span>, </span><br><span class="line">    initializer=<span class="literal">None</span>, </span><br><span class="line">    initargs=()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># max_workers: 池中最大线程数量。如果为 None，默认值是系统的 CPU 核心数。</span></span><br><span class="line"><span class="comment"># thread_name_prefix: 创建线程时线程名的前缀。便于调试和日志分析。</span></span><br><span class="line"><span class="comment"># initializer: 每个线程启动时调用的函数。可以用于线程的初始化操作。</span></span><br><span class="line"><span class="comment"># initargs: 传递给 initializer 的参数。如果指定了 initializer，则可以通过此参数为其提供初始参数。</span></span><br></pre></td></tr></table></figure>
<h3 id="submit"><a href="#submit" class="headerlink" title="submit()"></a>submit()</h3><p>使用 submit 提交任务</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">ThreadPoolExecutor.submit(fn, *args, **kwargs)</span><br><span class="line"><span class="comment"># fn: 任务函数（可调用对象），即要执行的任务。</span></span><br><span class="line"><span class="comment"># *args: 传递给 fn 的位置参数。</span></span><br><span class="line"><span class="comment"># **kwargs: 传递给 fn 的关键字参数。</span></span><br><span class="line"><span class="comment"># 返回值: 返回一个 Future 对象。Future 用于表示一个异步执行的操作，并且可以通过它获取任务的返回值或异常。</span></span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Task <span class="subst">&#123;n&#125;</span> completed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程池</span></span><br><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">3</span>) <span class="keyword">as</span> executor:</span><br><span class="line">    <span class="comment"># 提交多个任务</span></span><br><span class="line">    futures = [executor.submit(task, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取结果</span></span><br><span class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> futures:</span><br><span class="line">        <span class="built_in">print</span>(future.result())</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Task <span class="number">0</span> completed</span><br><span class="line">Task <span class="number">1</span> completed</span><br><span class="line">Task <span class="number">2</span> completed</span><br><span class="line">Task <span class="number">3</span> completed</span><br><span class="line">Task <span class="number">4</span> completed</span><br></pre></td></tr></table></figure>
<h3 id="future"><a href="#future" class="headerlink" title="future"></a>future</h3><p>Future 是提交任务后返回的对象，通常通过 submit() 方法获得。它可以在任务完成之前就开始获取任务的状态或结果，提供了一种同步与异步混合编程的方式。</p>
<h4 id="result"><a href="#result" class="headerlink" title="result()"></a>result()</h4><p><code>result(timeout=None)</code><br>如果任务已经完成，返回任务的结果。如果任务抛出异常，则会抛出相应的异常。<br>timeout 参数指定最大等待时间，超时后会抛出 TimeoutError。</p>
<h4 id="exception"><a href="#exception" class="headerlink" title="exception()"></a>exception()</h4><p><code>exception(timeout=None)</code><br>如果任务抛出了异常，返回异常。如果任务未抛出异常，则返回 None。<br>timeout 参数指定最大等待时间，超时后会抛出 TimeoutError。</p>
<h4 id="done"><a href="#done" class="headerlink" title="done()"></a>done()</h4><p>如果任务已经完成（无论成功或失败），返回 True，否则返回 False。</p>
<h4 id="cancel"><a href="#cancel" class="headerlink" title="cancel()"></a>cancel()</h4><p>尝试取消任务。如果任务已经开始执行，则无法取消，返回 False。如果任务还没有开始执行，则返回 True。</p>
<h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p>使用 map 提交批量任务</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">ThreadPoolExecutor.<span class="built_in">map</span>(func, *iterables, timeout=<span class="literal">None</span>, chunksize=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># func: 任务函数</span></span><br><span class="line"><span class="comment"># *iterables: 一个或多个可迭代对象（如列表、元组等）。</span></span><br><span class="line"><span class="comment"># timeout: 可选的最大等待时间（秒）。</span></span><br><span class="line"><span class="comment"># chunksize: 可选，指定每次提交给工作线程的任务数量，默认为 1。</span></span><br><span class="line"><span class="comment"># 返回值: 返回一个迭代器，该迭代器可以用于获取各个任务的结果。</span></span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Task <span class="subst">&#123;n&#125;</span> completed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程池</span></span><br><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">3</span>) <span class="keyword">as</span> executor:</span><br><span class="line">    <span class="comment"># 使用 map 提交任务</span></span><br><span class="line">    results = executor.<span class="built_in">map</span>(task, <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(results))  <span class="comment"># 输出: [&#x27;Task 0 completed&#x27;, &#x27;Task 1 completed&#x27;, &#x27;Task 2 completed&#x27;, &#x27;Task 3 completed&#x27;, &#x27;Task 4 completed&#x27;]</span></span><br></pre></td></tr></table></figure>
<p><strong>多参数处理</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程池</span></span><br><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">3</span>) <span class="keyword">as</span> executor:</span><br><span class="line">    <span class="comment"># 使用 map 提交多个可迭代对象</span></span><br><span class="line">    results = executor.<span class="built_in">map</span>(add, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(results))  <span class="comment"># 输出: [5, 7, 9]</span></span><br></pre></td></tr></table></figure>

<h3 id="as-completed"><a href="#as-completed" class="headerlink" title="as_completed()"></a>as_completed()</h3><p>as_completed() 是 Python 中 concurrent.futures 模块的一个方法，提供了在任务完成时立即获取结果的功能。与 map() 方法不同，as_completed() 按照任务完成的顺序返回结果，而不是提交顺序。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">concurrent.futures.as_completed(futures, timeout=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># futures: 可迭代对象，通常是由 submit() 方法返回的 Future 对象集合。</span></span><br><span class="line"><span class="comment"># timeout: 可选，指定最大等待时间（秒）。如果超出此时间，as_completed() 会抛出TimeoutError，不再等待未完成的任务。</span></span><br><span class="line"><span class="comment"># 返回值：返回一个迭代器，按任务完成的顺序逐个返回任务的结果或异常。每次返回一个 Future 对象，您可以使用 future.result() 获取其结果，或使用 future.exception() 获取任务异常。</span></span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Task <span class="subst">&#123;n&#125;</span> completed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程池</span></span><br><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">3</span>) <span class="keyword">as</span> executor:</span><br><span class="line">    <span class="comment"># 提交多个任务</span></span><br><span class="line">    futures = [executor.submit(task, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用 as_completed 按照任务完成顺序获取结果</span></span><br><span class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> as_completed(futures):</span><br><span class="line">        <span class="built_in">print</span>(future.result())  <span class="comment"># 获取每个任务的结果</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Task <span class="number">0</span> completed</span><br><span class="line">Task <span class="number">1</span> completed</span><br><span class="line">Task <span class="number">2</span> completed</span><br><span class="line">Task <span class="number">3</span> completed</span><br><span class="line">Task <span class="number">4</span> completed</span><br></pre></td></tr></table></figure>
<h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><p>协程是一种用户态的轻量级线程。</p>
<h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><ul>
<li>按照顺序依次执行每个任务，当前任务完成后再执行下一个任务。</li>
<li>阻塞：当前任务必须等待前一个任务完成。</li>
<li>适合计算密集型任务，简单的操作流程。</li>
<li>在I&#x2F;O操作时会造成性能瓶颈，整体效率较低。</li>
</ul>
<h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><ul>
<li>任务可以并行执行，等待的任务不会阻塞其他任务。</li>
<li>非阻塞：任务可以在等待时进行其他操作。</li>
<li>适合I&#x2F;O密集型任务，高并发请求，网络和文件I&#x2F;O操作。</li>
<li>提高了程序的并发性和效率，尤其在I&#x2F;O密集型任务中尤为有效。</li>
</ul>
<h2 id="asyncio"><a href="#asyncio" class="headerlink" title="asyncio"></a>asyncio</h2><h3 id="coroutine"><a href="#coroutine" class="headerlink" title="coroutine"></a>coroutine</h3><p>协程是用来表示异步任务的函数，在 Python 中是通过 async def 声明的异步函数。它们通常与 await 配合使用，以暂停和恢复任务的执行。</p>
<h3 id="event-loop"><a href="#event-loop" class="headerlink" title="event_loop"></a>event_loop</h3><p>事件循环是一个运行异步任务的机制，它负责调度和运行协程。事件循环会从任务队列中取出任务并执行它们，执行期间若遇到 await，会暂停当前任务并转去执行其他任务，直到任务完成。</p>
<h4 id="get-event-loop"><a href="#get-event-loop" class="headerlink" title="get_event_loop()"></a>get_event_loop()</h4><p><code>asyncio.get_event_loop()</code>，获取当前的事件循环。</p>
<h4 id="run-until-complete"><a href="#run-until-complete" class="headerlink" title="run_until_complete()"></a>run_until_complete()</h4><p>用于运行指定的协程直到它完成，并返回协程的结果。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">loop.run_until_complete(future)</span><br><span class="line"></span><br><span class="line"><span class="comment"># future：传入的 future 对象通常是一个协程（Coroutine），run_until_complete 会等待这个协程执行完成，并返回协程的结果。</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task started&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 模拟耗时操作</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task finished&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Task result&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前线程的事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 run_until_complete 来运行协程并等待其完成</span></span><br><span class="line">result = loop.run_until_complete(task())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭事件循环</span></span><br><span class="line">loop.close()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Task started</span><br><span class="line">Task finished</span><br><span class="line">Result: Task result  </span><br></pre></td></tr></table></figure>
<h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><p>await用于暂停当前协程的执行，直到某个异步操作（通常是协程、Future 或 Task）完成并返回结果。<br>await 只能在异步函数（用 async 定义的函数）中使用，它使得 Python 的异步代码更加简洁、易读。</p>
<h3 id="task"><a href="#task" class="headerlink" title="task"></a>task</h3><p>任务是通过事件循环调度的协程。通过 asyncio.create_task() 可以创建一个任务，并提交给事件循环运行。</p>
<h3 id="run"><a href="#run" class="headerlink" title="run()"></a>run()</h3><p><code>asyncio.run()</code> 是运行协程的简化方法，它负责启动事件循环并执行协程，通常用来启动程序的入口协程。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">test_sleep</span>():  <span class="comment"># 定义异步函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start sleeping&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;End sleeping&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cor = test_sleep()</span><br><span class="line">    asyncio.run(cor) <span class="comment"># 启动时间循环并运行test_sleep()协程</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Start sleeping</span><br><span class="line">End sleeping</span><br></pre></td></tr></table></figure>
<h3 id="gather"><a href="#gather" class="headerlink" title="gather()"></a>gather()</h3><p><code>asyncio.gather()</code> 可以同时执行多个协程，等待它们全部完成后返回结果。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task_A</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task A started&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task A finished&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task_B</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task B started&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task B finished&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 并发执行两个任务</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(task_A(), task_B())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cor = main()</span><br><span class="line">    asyncio.run(cor)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Task A started</span><br><span class="line">Task B started</span><br><span class="line">Task B finished</span><br><span class="line">Task A finished</span><br></pre></td></tr></table></figure>
<h3 id="create-task"><a href="#create-task" class="headerlink" title="create_task()"></a>create_task()</h3><p>通过 <code>asyncio.create_task()</code> 创建任务，任务会自动调度到事件循环中执行。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task_A</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task A started&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task A finished&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task_B</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task B started&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task B finished&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建任务</span></span><br><span class="line">    task1 = asyncio.create_task(task_A())</span><br><span class="line">    task2 = asyncio.create_task(task_B())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待任务完成</span></span><br><span class="line">    <span class="keyword">await</span> task1</span><br><span class="line">    <span class="keyword">await</span> task2</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cor = main()</span><br><span class="line">    asyncio.run(cor)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Task A started</span><br><span class="line">Task B started</span><br><span class="line">Task B finished</span><br><span class="line">Task A finished</span><br></pre></td></tr></table></figure>
<h3 id="wait"><a href="#wait" class="headerlink" title="wait()"></a>wait()</h3><p>它用于等待一组协程或任务的完成。当有多个异步任务需要等待时，能够在所有任务完成后再继续执行。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">asyncio.wait(</span><br><span class="line">    fs,                     </span><br><span class="line">    timeout=<span class="literal">None</span>,            </span><br><span class="line">    return_when=ALL_COMPLETED  </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fs：一个包含 Future 或 Task 对象的可迭代对象（如列表、集合等）。</span></span><br><span class="line"><span class="comment"># timeout：一个可选的超时时间，单位是秒。如果为 None，则会无限期等待。</span></span><br><span class="line"><span class="comment"># return_when：指定什么时候返回，可以取以下值：</span></span><br><span class="line">    <span class="comment"># asyncio.FIRST_COMPLETED：任意一个任务完成时返回。</span></span><br><span class="line">    <span class="comment"># asyncio.FIRST_EXCEPTION：任意一个任务异常时返回。</span></span><br><span class="line">    <span class="comment"># asyncio.ALL_COMPLETED：所有任务完成时返回。</span></span><br><span class="line"><span class="comment"># 返回值：</span></span><br><span class="line">    <span class="comment"># done：一个 Future 或 Task 对象的集合，表示已经完成的任务。</span></span><br><span class="line">    <span class="comment"># pending：一个 Future 或 Task 对象的集合，表示尚未完成的任务。</span></span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task_1</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务 1 完成&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task_2</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务 2 完成&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task_3</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务 3 完成&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    tasks = [task_1(), task_2(), task_3()]</span><br><span class="line">    </span><br><span class="line">    done, pending = <span class="keyword">await</span> asyncio.wait(tasks, return_when=asyncio.ALL_COMPLETED)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> done:</span><br><span class="line">        <span class="built_in">print</span>(task.result())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行主函数</span></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">任务 <span class="number">1</span> 完成</span><br><span class="line">任务 <span class="number">2</span> 完成</span><br><span class="line">任务 <span class="number">3</span> 完成</span><br></pre></td></tr></table></figure>

<h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h3><p><code>asyncio.sleep()</code> 是一个非阻塞的休眠方法，它不会阻塞事件循环，适用于模拟延时操作。</p>
<h3 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore()"></a>Semaphore()</h3><p>Semaphore 对象维护一个内部计数器，这个计数器表示当前可用的“许可”。每当一个协程想要访问某个资源时，它需要获取一个许可（即递减计数器）。  </p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line">sem = asyncio.Semaphore(value)</span><br></pre></td></tr></table></figure>
<p><strong>使用示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个最大并发数为2的信号量</span></span><br><span class="line">sem = asyncio.Semaphore(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">limited_task</span>(<span class="params">task_id</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> sem:  <span class="comment"># 在执行任务前，先获取信号量</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;任务 <span class="subst">&#123;task_id&#125;</span> 开始执行&quot;</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 模拟长时间运行的任务</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;任务 <span class="subst">&#123;task_id&#125;</span> 执行完毕&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    tasks = [asyncio.create_task(limited_task(i)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行主函数</span></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">任务 <span class="number">0</span> 开始执行</span><br><span class="line">任务 <span class="number">1</span> 开始执行</span><br><span class="line">任务 <span class="number">0</span> 执行完毕</span><br><span class="line">任务 <span class="number">1</span> 执行完毕</span><br><span class="line">任务 <span class="number">2</span> 开始执行</span><br><span class="line">任务 <span class="number">3</span> 开始执行</span><br><span class="line">任务 <span class="number">2</span> 执行完毕</span><br><span class="line">任务 <span class="number">3</span> 执行完毕</span><br><span class="line">任务 <span class="number">4</span> 开始执行</span><br><span class="line">任务 <span class="number">4</span> 执行完毕</span><br></pre></td></tr></table></figure>
<h1 id="aiohttp"><a href="#aiohttp" class="headerlink" title="aiohttp"></a>aiohttp</h1><p>aiohttp专为异步 HTTP 请求设计，支持异步 HTTP 客户端和服务器功能。</p>
<h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步函数，用于发送 GET 请求并获取响应</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch</span>(<span class="params">session, url</span>):</span><br><span class="line">    <span class="comment"># 使用异步上下文管理器发送 GET 请求</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        <span class="comment"># 等待并返回响应内容</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> response.text()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建一个 aiohttp 客户端会话，用于管理连接池</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="comment"># 调用 fetch 函数，异步获取网页内容</span></span><br><span class="line">        data = <span class="keyword">await</span> fetch(session, <span class="string">&quot;https://www.httpbin.org/headers&quot;</span>)</span><br><span class="line">        <span class="comment"># 打印获取到的响应内容</span></span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行事件循环并执行主函数</span></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;www.httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Python/3.13 aiohttp/3.11.10&quot;</span>, </span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-6754315d-47b2a5f425b27f9c291a1d25&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建一个 aiohttp 客户端会话，用于管理连接池</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="comment"># 定义 GET 请求的参数</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span> : <span class="string">&quot;bileton&quot;</span>  <span class="comment"># 参数 name 的值为 &#x27;bileton&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 使用异步上下文管理器发送 GET 请求，携带查询参数</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(<span class="string">&quot;https://www.httpbin.org/get&quot;</span>, params=params) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="comment"># 打印并等待返回的响应内容</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="keyword">await</span> response.text())  <span class="comment"># 返回响应的文本内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行事件循环并执行主函数</span></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;bileton&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;www.httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Python/3.13 aiohttp/3.11.10&quot;</span>, </span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-675445c7-26e8b0e703e73a524d319146&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;219.156.133.197&quot;</span>, </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://www.httpbin.org/get?name=bileton&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch</span>(<span class="params">session, url</span>):</span><br><span class="line">    <span class="comment"># 异步请求</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.post(url,data=<span class="string">&quot;Bileton&quot;</span>) <span class="keyword">as</span> response:</span><br><span class="line">        <span class="comment"># 返回响应</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> response.text()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        data = <span class="keyword">await</span> fetch(session, <span class="string">&quot;https://www.httpbin.org/post&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;data&quot;</span>: <span class="string">&quot;Bileton&quot;</span>, </span><br><span class="line">  <span class="string">&quot;files&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;form&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;7&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain; charset=utf-8&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;www.httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Python/3.13 aiohttp/3.11.10&quot;</span>, </span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-675439c8-4dc6dcb32d0fe49e1686cd1a&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;json&quot;</span>: null, </span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;219.156.133.197&quot;</span>, </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://www.httpbin.org/post&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="aiofiles"><a href="#aiofiles" class="headerlink" title="aiofiles"></a>aiofiles</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> aiofiles</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiofiles.<span class="built_in">open</span>(<span class="string">&quot;filename&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data =  <span class="keyword">await</span> f.readlines()</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>adb: Android调试桥</title>
    <url>/2024/12/07/adb-Android%E8%B0%83%E8%AF%95%E6%A1%A5/</url>
    <content><![CDATA[<p>Android Debug Bridge调试桥 (adb) 是一种功能多样的命令行工具，可以通过命令行与设备进行通信。</p>
<h1 id="查询设备"><a href="#查询设备" class="headerlink" title="查询设备"></a>查询设备</h1><ul>
<li><code>adb devices</code><br>adb 会创建一个字符串，用于通过端口号唯一标识设备。</li>
<li><code>adb devices -l</code><br>加入 -l 选项，devices 命令会告知设备是什么。当连接了多个设备时，此信息会很有用，方便区分这些设备。</li>
</ul>
<h2 id="设备状态"><a href="#设备状态" class="headerlink" title="设备状态"></a>设备状态</h2><ul>
<li><code>offline</code>：设备未连接到 adb 或没有响应。</li>
<li><code>device</code>：设备已连接到 adb 服务器。<br>请注意，此状态并不表示 Android 系统已完全启动并可正常运行，因为在设备连接到 adb 时系统仍在启动。系统完成启动后，设备通常处于此运行状态。</li>
<li><code>no device</code>：未连接任何设备。</li>
<li><code>unauthorized</code>：电脑与安卓设备之间的调试授权未完成。</li>
</ul>
<h2 id="指定目标设备（-s选项）"><a href="#指定目标设备（-s选项）" class="headerlink" title="指定目标设备（-s选项）"></a>指定目标设备（-s选项）</h2><ul>
<li>如果有多个设备在运行，必须指定目标设备 。  </li>
<li>使用 devices 命令获取目标设备的序列号。  </li>
<li>获得序列号后，结合使用-s选项与 adb 命令来指定序列号。</li>
</ul>
<h1 id="安装应用"><a href="#安装应用" class="headerlink" title="安装应用"></a>安装应用</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb install path_to_apk</span><br></pre></td></tr></table></figure>

<h1 id="卸载应用"><a href="#卸载应用" class="headerlink" title="卸载应用"></a>卸载应用</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb uninstall &lt;package_name&gt;</span><br></pre></td></tr></table></figure>

<h1 id="端口转发（forward）"><a href="#端口转发（forward）" class="headerlink" title="端口转发（forward）"></a>端口转发（forward）</h1><p>可以使用 forward 命令设置任意端口转发，将特定主机端口上的请求转发到设备上的其他端口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb forward tcp:6100 tcp:7100</span><br></pre></td></tr></table></figure>
<h1 id="push与pull"><a href="#push与pull" class="headerlink" title="push与pull"></a>push与pull</h1><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p>如需将某个文件或目录（及其子目录）从PC端复制到Android端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb push local remote</span><br></pre></td></tr></table></figure>
<h2 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h2><p>从Android端复制某个文件或目录（及其子目录）到PC端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb pull remote local</span><br></pre></td></tr></table></figure>
<h1 id="停止-adb-服务器"><a href="#停止-adb-服务器" class="headerlink" title="停止 adb 服务器"></a>停止 adb 服务器</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb kill-server</span><br></pre></td></tr></table></figure>

<p>停止 adb 服务器，可以通过发出其他任何 adb 命令来重启服务器。</p>
<h1 id="shell-命令"><a href="#shell-命令" class="headerlink" title="shell 命令"></a>shell 命令</h1><p>可以使用 shell 命令通过 adb 发出设备命令，也可以使用该命令启动交互式 shell。</p>
<h1 id="软件包管理器"><a href="#软件包管理器" class="headerlink" title="软件包管理器"></a>软件包管理器</h1><ul>
<li><p>列出所有已安装应用</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell pm list packages</span><br></pre></td></tr></table></figure></li>
<li><p>列出安卓设备上的所有系统应用</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell pm list packages -s</span><br></pre></td></tr></table></figure></li>
<li><p>列出所有用户应用（非系统应用）</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell pm list packages -3</span><br></pre></td></tr></table></figure>
</li>
<li><p>清除指定应用程序的数据和缓存</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell pm clear package_name</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h1><p>在shell中，进入<code>/sdcard</code>目录下，使用命令<code>screencap filename</code><br>在PC端，从命令行使用 screencap，使用命令<code>adb shell screencap /sdcard/filename</code></p>
<p>从手机端截图发送到电脑端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//使用以下命令截屏操作并将截图保存在手机的SD卡或内部存储中</span><br><span class="line">adb shell /system/bin/screencap -p /sdcard/xxx.png</span><br><span class="line"></span><br><span class="line">//确认截图操作成功后，使用以下命令将截图文件从手机拉取到电脑上的指定位置：</span><br><span class="line">adb pull /sdcard/xxx.png ./xxx.png</span><br><span class="line"></span><br><span class="line">//使用以下命令将手机上的截图删除以节省空间</span><br><span class="line">adb shell rm /sdcard/xxx.png</span><br></pre></td></tr></table></figure>



<h1 id="logcat"><a href="#logcat" class="headerlink" title="logcat"></a>logcat</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb logcat [options]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb logcat --help</span><br><span class="line">Usage: logcat [options] [filterspecs]</span><br><span class="line">options include:</span><br><span class="line">  -s              Set default filter to silent. Equivalent to filterspec &#x27;*:S&#x27;</span><br><span class="line">  -f &lt;file&gt;, --file=&lt;file&gt;               Log to file. Default is stdout</span><br><span class="line">  -r &lt;kbytes&gt;, --rotate-kbytes=&lt;kbytes&gt;</span><br><span class="line">                  Rotate log every kbytes. Requires -f option</span><br><span class="line">  -n &lt;count&gt;, --rotate-count=&lt;count&gt;</span><br><span class="line">                  Sets max number of rotated logs to &lt;count&gt;, default 4</span><br><span class="line">  --id=&lt;id&gt;       If the signature id for logging to file changes, then clear</span><br><span class="line">                  the fileset and continue</span><br><span class="line">  -v &lt;format&gt;, --format=&lt;format&gt;</span><br><span class="line">                  Sets log print format verb and adverbs, where &lt;format&gt; is:</span><br><span class="line">                    brief help long process raw tag thread threadtime time</span><br><span class="line">                  and individually flagged modifying adverbs can be added:</span><br><span class="line">                    color descriptive epoch monotonic printable uid</span><br><span class="line">                    usec UTC year zone</span><br><span class="line">                  Multiple -v parameters or comma separated list of format and</span><br><span class="line">                  format modifiers are allowed.</span><br><span class="line">  -D, --dividers  Print dividers between each log buffer</span><br><span class="line">  -c, --clear     Clear (flush) the entire log and exit</span><br><span class="line">                  if Log to File specified, clear fileset instead</span><br><span class="line">  -d              Dump the log and then exit (don&#x27;t block)</span><br><span class="line">  -e &lt;expr&gt;, --regex=&lt;expr&gt;</span><br><span class="line">                  Only print lines where the log message matches &lt;expr&gt;</span><br><span class="line">                  where &lt;expr&gt; is a Perl-compatible regular expression</span><br><span class="line">  -m &lt;count&gt;, --max-count=&lt;count&gt;</span><br><span class="line">                  Quit after printing &lt;count&gt; lines. This is meant to be</span><br><span class="line">                  paired with --regex, but will work on its own.</span><br><span class="line">  --print         Paired with --regex and --max-count to let content bypass</span><br><span class="line">                  regex filter but still stop at number of matches.</span><br><span class="line">  -t &lt;count&gt;      Print only the most recent &lt;count&gt; lines (implies -d)</span><br><span class="line">  -t &#x27;&lt;time&gt;&#x27;     Print most recent lines since specified time (implies -d)</span><br><span class="line">  -T &lt;count&gt;      Print only the most recent &lt;count&gt; lines (does not imply -d)</span><br><span class="line">  -T &#x27;&lt;time&gt;&#x27;     Print most recent lines since specified time (not imply -d)</span><br><span class="line">                  count is pure numerical, time is &#x27;MM-DD hh:mm:ss.mmm...&#x27;</span><br><span class="line">                  &#x27;YYYY-MM-DD hh:mm:ss.mmm...&#x27; or &#x27;sssss.mmm...&#x27; format</span><br><span class="line">  -g, --buffer-size                      Get the size of the ring buffer.</span><br><span class="line">  -G &lt;size&gt;, --buffer-size=&lt;size&gt;</span><br><span class="line">                  Set size of log ring buffer, may suffix with K or M.</span><br><span class="line">  -L, --last      Dump logs from prior to last reboot</span><br><span class="line">  -b &lt;buffer&gt;, --buffer=&lt;buffer&gt;         Request alternate ring buffer, &#x27;main&#x27;,</span><br><span class="line">                  &#x27;system&#x27;, &#x27;radio&#x27;, &#x27;events&#x27;, &#x27;crash&#x27;, &#x27;default&#x27; or &#x27;all&#x27;.</span><br><span class="line">                  Multiple -b parameters or comma separated list of buffers are</span><br><span class="line">                  allowed. Buffers interleaved. Default -b main,system,crash.</span><br><span class="line">  -B, --binary    Output the log in binary.</span><br><span class="line">  -S, --statistics                       Output statistics.</span><br><span class="line">  -p, --prune     Print prune white and ~black list. Service is specified as</span><br><span class="line">                  UID, UID/PID or /PID. Weighed for quicker pruning if prefix</span><br><span class="line">                  with ~, otherwise weighed for longevity if unadorned. All</span><br><span class="line">                  other pruning activity is oldest first. Special case ~!</span><br><span class="line">                  represents an automatic quicker pruning for the noisiest</span><br><span class="line">                  UID as determined by the current statistics.</span><br><span class="line">  -P &#x27;&lt;list&gt; ...&#x27;, --prune=&#x27;&lt;list&gt; ...&#x27;</span><br><span class="line">                  Set prune white and ~black list, using same format as</span><br><span class="line">                  listed above. Must be quoted.</span><br><span class="line">  --pid=&lt;pid&gt;     Only prints logs from the given pid.</span><br><span class="line">  --wrap          Sleep for 2 hours or when buffer about to wrap whichever</span><br><span class="line">                  comes first. Improves efficiency of polling by providing</span><br><span class="line">                  an about-to-wrap wakeup.</span><br><span class="line"></span><br><span class="line">filterspecs are a series of</span><br><span class="line">  &lt;tag&gt;[:priority]</span><br><span class="line"></span><br><span class="line">where &lt;tag&gt; is a log component tag (or * for all) and priority is:</span><br><span class="line">  V    Verbose (default for &lt;tag&gt;)</span><br><span class="line">  D    Debug (default for &#x27;*&#x27;)</span><br><span class="line">  I    Info</span><br><span class="line">  W    Warn</span><br><span class="line">  E    Error</span><br><span class="line">  F    Fatal</span><br><span class="line">  S    Silent (suppress all output)</span><br><span class="line"></span><br><span class="line">&#x27;*&#x27; by itself means &#x27;*:D&#x27; and &lt;tag&gt; by itself means &lt;tag&gt;:V.</span><br><span class="line">If no &#x27;*&#x27; filterspec or -s on command line, all filter defaults to &#x27;*:V&#x27;.</span><br><span class="line">eg: &#x27;*:S &lt;tag&gt;&#x27; prints only &lt;tag&gt;, &#x27;&lt;tag&gt;:S&#x27; suppresses all &lt;tag&gt; log messages.</span><br><span class="line"></span><br><span class="line">If not specified on the command line, filterspec is set from ANDROID_LOG_TAGS.</span><br><span class="line"></span><br><span class="line">If not specified with -v on command line, format is set from ANDROID_PRINTF_LOG</span><br><span class="line">or defaults to &quot;threadtime&quot;</span><br></pre></td></tr></table></figure>

<h1 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb reboot				// 重启设备</span><br><span class="line">adb reboot bootloader 	// 进入引导加载模式</span><br><span class="line">adb reboot recovery 	// 进入恢复模式</span><br></pre></td></tr></table></figure>

<h1 id="fastboot"><a href="#fastboot" class="headerlink" title="fastboot"></a>fastboot</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot devices		// 列出当前连接的设备及其序列号</span><br><span class="line">fastboot reboot			// 退出 fastboot 模式并正常重启设备。</span><br><span class="line">fastboot flashing unlock	// 解锁bl锁</span><br><span class="line">fastboot flashing lock		// 锁定bl锁</span><br><span class="line">fastboot flash boot boot.img	// 刷写镜像文件</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>逆向工具集</category>
      </categories>
      <tags>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>Xposed-API</title>
    <url>/2025/01/26/Xposed-API/</url>
    <content><![CDATA[<h1 id="XposedHelpers"><a href="#XposedHelpers" class="headerlink" title="XposedHelpers"></a>XposedHelpers</h1><h2 id="findAndHookConstructor"><a href="#findAndHookConstructor" class="headerlink" title="findAndHookConstructor()"></a>findAndHookConstructor()</h2><p>Hook 类的构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">findAndHookMethod(</span><br><span class="line">    String className,         <span class="comment">// 要 Hook 的类的完整类名</span></span><br><span class="line">    ClassLoader classLoader,  <span class="comment">// 类加载器</span></span><br><span class="line">    String methodName,        <span class="comment">// 要 Hook 的方法名</span></span><br><span class="line">    Object... parameterTypesAndCallback <span class="comment">// 方法参数类型和回调</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="demo测试"><a href="#demo测试" class="headerlink" title="demo测试"></a>demo测试</h3><p><strong>Person类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=<span class="string">&quot;Bileton&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> aage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        age = aage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>MainActivity</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        EdgeToEdge.enable(<span class="built_in">this</span>);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.constructor).setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (v.getId()==R.id.constructor)&#123;</span><br><span class="line">            <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bileton&quot;</span>,<span class="number">18</span>);</span><br><span class="line">            Log.d(<span class="string">&quot;Person&quot;</span>,<span class="string">&quot;name:&quot;</span>+person.name+<span class="string">&quot; age:&quot;</span>+Person.age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Xposed hook</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lsptest</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        XposedBridge.log(<span class="string">&quot;Bileton-&gt;package&quot;</span>+loadPackageParam.packageName);</span><br><span class="line"></span><br><span class="line">        XposedHelpers.findAndHookConstructor(<span class="string">&quot;com.example.lsphookdemo.Person&quot;</span>, loadPackageParam.classLoader,String.class,<span class="type">int</span>.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="built_in">super</span>.beforeHookedMethod(param);</span><br><span class="line">                Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;before hook &quot;</span>+<span class="string">&quot;name: &quot;</span>+param.args[<span class="number">0</span>]+<span class="string">&quot; age:&quot;</span>+param.args[<span class="number">1</span>]);</span><br><span class="line">                param.args[<span class="number">0</span>] = <span class="string">&quot;bileton&quot;</span>;</span><br><span class="line">                param.args[<span class="number">1</span>] = <span class="number">22</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="built_in">super</span>.afterHookedMethod(param);</span><br><span class="line">                Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;after hook &quot;</span>+<span class="string">&quot;name: &quot;</span>+param.args[<span class="number">0</span>]+<span class="string">&quot; age:&quot;</span>+param.args[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动程序，点击按钮，查看日志，如下，hook成功</p>
<p><img src="/2025/01/26/Xposed-API/1.jpg"></p>
<h2 id="findAndHookMethod"><a href="#findAndHookMethod" class="headerlink" title="findAndHookMethod()"></a>findAndHookMethod()</h2><p>Hook 类的方法</p>
<p><strong>重载1</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">XposedHelpers.findAndHookMethod(</span><br><span class="line">    String className,       <span class="comment">// 要 Hook 的类的完整类名</span></span><br><span class="line">    ClassLoader classLoader, <span class="comment">// 类加载器</span></span><br><span class="line">    String methodName,      <span class="comment">// 要 Hook 的方法名</span></span><br><span class="line">    Object... parameterTypesAndCallback <span class="comment">// 方法参数类型和回调</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>重载2</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">findAndHookMethod(</span><br><span class="line">    Class&lt;?&gt; clazz,         <span class="comment">// 目标类的 Class 对象</span></span><br><span class="line">    String methodName,      <span class="comment">// 要 Hook 的方法名</span></span><br><span class="line">    Object... parameterTypesAndCallback <span class="comment">// 方法参数类型和回调</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>回调方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 在目标方法调用之前执行的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 在目标方法调用之后执行的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="demo测试-1"><a href="#demo测试-1" class="headerlink" title="demo测试"></a>demo测试</h3><p><strong>person类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=<span class="string">&quot;Bileton&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        Person.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>MainActivity</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        EdgeToEdge.enable(<span class="built_in">this</span>);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        </span><br><span class="line">        findViewById(R.id.method).setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (v.getId()==R.id.method)&#123;</span><br><span class="line">            <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">            person.setName(<span class="string">&quot;Bileton&quot;</span>);</span><br><span class="line">            Person.setAge(<span class="number">18</span>);</span><br><span class="line">            Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;name:&quot;</span>+person.name+<span class="string">&quot; age:&quot;</span>+Person.age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Xposed hook</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lsptest</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        XposedBridge.log(<span class="string">&quot;Bileton-&gt;package&quot;</span>+loadPackageParam.packageName);</span><br><span class="line"></span><br><span class="line">        XposedHelpers.findAndHookMethod(<span class="string">&quot;com.example.lsphookdemo.Person&quot;</span>, loadPackageParam.classLoader, <span class="string">&quot;setName&quot;</span>, String.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="built_in">super</span>.beforeHookedMethod(param);</span><br><span class="line">                Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;before hook &quot;</span>+<span class="string">&quot;name: &quot;</span>+param.args[<span class="number">0</span>]);</span><br><span class="line">                param.args[<span class="number">0</span>] = <span class="string">&quot;bileton&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="built_in">super</span>.afterHookedMethod(param);</span><br><span class="line">                Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;after hook &quot;</span>+<span class="string">&quot;name: &quot;</span>+param.args[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        XposedHelpers.findAndHookMethod(<span class="string">&quot;com.example.lsphookdemo.Person&quot;</span>, loadPackageParam.classLoader, <span class="string">&quot;setAge&quot;</span>, <span class="type">int</span>.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="built_in">super</span>.beforeHookedMethod(param);</span><br><span class="line">                Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;before hook &quot;</span>+<span class="string">&quot;age: &quot;</span>+param.args[<span class="number">0</span>]);</span><br><span class="line">                param.args[<span class="number">0</span>] =<span class="number">21</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="built_in">super</span>.afterHookedMethod(param);</span><br><span class="line">                Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;after hook &quot;</span>+<span class="string">&quot;age: &quot;</span>+param.args[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动程序，点击按钮，查看日志，如下，hook成功</p>
<p><img src="/2025/01/26/Xposed-API/2.jpg"></p>
<h2 id="newInstance"><a href="#newInstance" class="headerlink" title="newInstance()"></a>newInstance()</h2><p>动态地创建对象实例。</p>
<p><strong>重载方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object <span class="title function_">newInstance</span><span class="params">(Class&lt;?&gt; clazz)</span>;</span><br><span class="line"></span><br><span class="line">Object <span class="title function_">newInstance</span><span class="params">(Class&lt;?&gt; clazz, Object... args)</span>;</span><br><span class="line"></span><br><span class="line">Object <span class="title function_">newInstance</span><span class="params">(Class&lt;?&gt; clazz, Class&lt;?&gt;[] parameterTypes, Object[] args)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>Person类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=<span class="string">&quot;Bileton&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> aage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        age = aage;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;name:&quot;</span>+<span class="built_in">this</span>.name+<span class="string">&quot; age:&quot;</span>+Person.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Xposed hook</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    XposedBridge.log(<span class="string">&quot;Bileton-&gt;package&quot;</span>+loadPackageParam.packageName);</span><br><span class="line"></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">clazzLoader</span> <span class="operator">=</span> loadPackageParam.classLoader;</span><br><span class="line">    Class&lt;?&gt; clazz_person = clazzLoader.loadClass(<span class="string">&quot;com.example.lsphookdemo.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj_person</span> <span class="operator">=</span> XposedHelpers.newInstance(clazz_person,<span class="string">&quot;bileton&quot;</span>,<span class="number">25</span>);</span><br><span class="line">    <span class="type">Method</span> <span class="variable">method_printInfo</span> <span class="operator">=</span> clazz_person.getDeclaredMethod(<span class="string">&quot;printInfo&quot;</span>);</span><br><span class="line">    method_printInfo.invoke(obj_person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<p><img src="/2025/01/26/Xposed-API/3.jpg"></p>
<h2 id="findField"><a href="#findField" class="headerlink" title="findField()"></a>findField()</h2><p>查找并访问类中的字段。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">XposedHelpers.findField(</span><br><span class="line">    Class&lt;?&gt; clazz,      <span class="comment">// 目标类的 Class 对象</span></span><br><span class="line">    String fieldName     <span class="comment">// 要查找的字段名</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>Person类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=<span class="string">&quot;Bileton&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> aage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        age = aage;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;name:&quot;</span>+<span class="built_in">this</span>.name+<span class="string">&quot; age:&quot;</span>+Person.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Xposed hook</strong></p>
<p>通过反射获取和修改字段的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lsptest</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        XposedBridge.log(<span class="string">&quot;Bileton-&gt;package&quot;</span>+loadPackageParam.packageName);</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">clazzLoader</span> <span class="operator">=</span> loadPackageParam.classLoader;</span><br><span class="line">        Class&lt;?&gt; clazz_person = clazzLoader.loadClass(<span class="string">&quot;com.example.lsphookdemo.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj_person</span> <span class="operator">=</span> XposedHelpers.newInstance(clazz_person,<span class="string">&quot;Bileton&quot;</span>,<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> XposedHelpers.findField(clazz_person,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) nameField.get(obj_person);</span><br><span class="line">        XposedBridge.log(<span class="string">&quot;Bileton---name:&quot;</span>+name);</span><br><span class="line">        nameField.set(obj_person,<span class="string">&quot;bileton&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">ageField</span> <span class="operator">=</span> XposedHelpers.findField(clazz_person,<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> ageField.getInt(<span class="literal">null</span>);</span><br><span class="line">        XposedBridge.log(<span class="string">&quot;Bileton---age:&quot;</span>+age);</span><br><span class="line">        ageField.setInt(<span class="literal">null</span>,<span class="number">21</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method_printInfo</span> <span class="operator">=</span> clazz_person.getDeclaredMethod(<span class="string">&quot;printInfo&quot;</span>);</span><br><span class="line">        method_printInfo.invoke(obj_person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出如下</p>
<p><img src="/2025/01/26/Xposed-API/4.jpg"></p>
]]></content>
      <categories>
        <category>LSPosed</category>
      </categories>
      <tags>
        <tag>Xposed</tag>
      </tags>
  </entry>
  <entry>
    <title>dex文件结构</title>
    <url>/2025/02/09/dex%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>dex（Dalvik Executable）是Android平台源代码文件（java，kotlin）经过编译、重构、重排、压缩、混淆后的字节码文件，是对传统的class 文件再处理。和class 文件比，dex的体积更小，dex可以将多个class文件特征进行统一处理，在程序执行过程中可以一次性载入。</p>
<h2 id="dex文件的生成过程"><a href="#dex文件的生成过程" class="headerlink" title="dex文件的生成过程"></a>dex文件的生成过程</h2><p>通过编译器将源代码编译为.class字节码文件，将所有的.class字节码文件打包成一个Jar文件包，使用<code>d8</code>工具将Jar文件包转为dex格式。</p>
<h2 id="Leb128"><a href="#Leb128" class="headerlink" title="Leb128"></a>Leb128</h2><p>在 Dex（Dalvik Executable）文件格式中，LEB128（Little Endian Base 128） 是一种变长编码方式，用于紧凑地存储整数。</p>
<p>它有三种主要形式：</p>
<ul>
<li><p>ULEB128（Unsigned LEB128） - 存储无符号整数</p>
</li>
<li><p>SLEB128（Signed LEB128） - 存储有符号整数</p>
</li>
<li><p>ULEB128P1（ULEB128 + 1） - 变体，适用于存储可为 <code>-1</code> 的索引值</p>
</li>
</ul>
<h1 id="文件格式详解"><a href="#文件格式详解" class="headerlink" title="文件格式详解"></a>文件格式详解</h1><p><strong>文件结构组成</strong></p>
<p><img src="/2025/02/09/dex%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/1.jpg"></p>
<h2 id="dex文件中的数据类型"><a href="#dex文件中的数据类型" class="headerlink" title="dex文件中的数据类型"></a>dex文件中的数据类型</h2><table>
<thead>
<tr>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>u1</td>
<td>等同于uint8_t，1字节无符号数</td>
</tr>
<tr>
<td>u2</td>
<td>等同于uint16_t，2字节无符号数</td>
</tr>
<tr>
<td>u4</td>
<td>等同于uint32_t，4字节无符号数</td>
</tr>
<tr>
<td>u8</td>
<td>等同于uint64_t，8字节无符号数</td>
</tr>
<tr>
<td>sleb128</td>
<td>有符号LEB128，可变长度1~5字节</td>
</tr>
<tr>
<td>uleb128</td>
<td>无符号LEB128，可变长度1~5字节</td>
</tr>
<tr>
<td>uleb128p1</td>
<td>无符号LEB128值加1，可变长度1~5字节</td>
</tr>
</tbody></table>
<h2 id="header"><a href="#header" class="headerlink" title="header"></a>header</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexHeader</span> &#123;</span></span><br><span class="line">    u1  magic[<span class="number">8</span>];           <span class="comment">// 魔数</span></span><br><span class="line">    u4  checksum;           <span class="comment">// adler 校验值</span></span><br><span class="line">    u1  signature[kSHA1DigestLen]; <span class="comment">// sha1 校验值</span></span><br><span class="line">    u4  fileSize;           <span class="comment">// DEX 文件大小</span></span><br><span class="line">    u4  headerSize;         <span class="comment">// DEX 文件头大小</span></span><br><span class="line">    u4  endianTag;          <span class="comment">// 字节序</span></span><br><span class="line">    u4  linkSize;           <span class="comment">// 链接段大小</span></span><br><span class="line">    u4  linkOff;            <span class="comment">// 链接段的偏移量</span></span><br><span class="line">    u4  mapOff;             <span class="comment">// DexMapList 偏移量</span></span><br><span class="line">    u4  stringIdsSize;      <span class="comment">// DexStringId 个数</span></span><br><span class="line">    u4  stringIdsOff;       <span class="comment">// DexStringId 偏移量</span></span><br><span class="line">    u4  typeIdsSize;        <span class="comment">// DexTypeId 个数</span></span><br><span class="line">    u4  typeIdsOff;         <span class="comment">// DexTypeId 偏移量</span></span><br><span class="line">    u4  protoIdsSize;       <span class="comment">// DexProtoId 个数</span></span><br><span class="line">    u4  protoIdsOff;        <span class="comment">// DexProtoId 偏移量</span></span><br><span class="line">    u4  fieldIdsSize;       <span class="comment">// DexFieldId 个数</span></span><br><span class="line">    u4  fieldIdsOff;        <span class="comment">// DexFieldId 偏移量</span></span><br><span class="line">    u4  methodIdsSize;      <span class="comment">// DexMethodId 个数</span></span><br><span class="line">    u4  methodIdsOff;       <span class="comment">// DexMethodId 偏移量</span></span><br><span class="line">    u4  classDefsSize;      <span class="comment">// DexCLassDef 个数</span></span><br><span class="line">    u4  classDefsOff;       <span class="comment">// DexClassDef 偏移量</span></span><br><span class="line">    u4  dataSize;           <span class="comment">// 数据段大小</span></span><br><span class="line">    u4  dataOff;            <span class="comment">// 数据段偏移量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="string-ids"><a href="#string-ids" class="headerlink" title="string_ids"></a>string_ids</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct DexStringId &#123;</span><br><span class="line">    u4 stringDataOff;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="type-ids"><a href="#type-ids" class="headerlink" title="type_ids"></a>type_ids</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct DexTypeId &#123;</span><br><span class="line">    u4  descriptorIdx;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="proto-ids"><a href="#proto-ids" class="headerlink" title="proto_ids"></a>proto_ids</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct DexProtoId &#123;</span><br><span class="line">    u4  shortyIdx;          /* index into stringIds for shorty descriptor */</span><br><span class="line">    u4  returnTypeIdx;      /* index into typeIds list for return type */</span><br><span class="line">    u4  parametersOff;      /* file offset to type_list for parameter types */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="field-ids"><a href="#field-ids" class="headerlink" title="field_ids"></a>field_ids</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct DexFieldId &#123;</span><br><span class="line">    u2  classIdx;           /* index into typeIds list for defining class */</span><br><span class="line">    u2  typeIdx;            /* index into typeIds for field type */</span><br><span class="line">    u4  nameIdx;            /* index into stringIds for field name */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="method-ids"><a href="#method-ids" class="headerlink" title="method_ids"></a>method_ids</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct DexMethodId &#123;</span><br><span class="line">    u2  classIdx;           /* index into typeIds list for defining class */</span><br><span class="line">    u2  protoIdx;           /* index into protoIds for method prototype */</span><br><span class="line">    u4  nameIdx;            /* index into stringIds for method name */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="class-def"><a href="#class-def" class="headerlink" title="class_def"></a>class_def</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct DexClassDef &#123;</span><br><span class="line">    u4  classIdx;           /* index into typeIds for this class */</span><br><span class="line">    u4  accessFlags;</span><br><span class="line">    u4  superclassIdx;      /* index into typeIds for superclass */</span><br><span class="line">    u4  interfacesOff;      /* file offset to DexTypeList */</span><br><span class="line">    u4  sourceFileIdx;      /* index into stringIds for source file name */</span><br><span class="line">    u4  annotationsOff;     /* file offset to annotations_directory_item */</span><br><span class="line">    u4  classDataOff;       /* file offset to class_data_item */</span><br><span class="line">    u4  staticValuesOff;    /* file offset to DexEncodedArray */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>详解文件结构</category>
      </categories>
      <tags>
        <tag>dex文件结构</tag>
      </tags>
  </entry>
  <entry>
    <title>elf文件结构</title>
    <url>/2025/02/09/elf%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>可执行与可链接格式（Executable and Linkable Format，ELF），常被称为 ELF格式，是一种用于可执行文件、目标代码、共享库和核心转储（core dump）的标准文件格式。</p>
<p>ELF文件格式在链接和程序的运行阶段的格式不同。链接阶段每个.o文件都是一个独立的ELF文件，为了效率和便利性将他们的节合并为段才能生成对应的可执行文件。<br>一个ELF文件包含的内容有：ELF文件头，程序头表，节头表和节。</p>
<p><img src="/2025/02/09/elf%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/1.jpg"></p>
]]></content>
      <categories>
        <category>详解文件结构</category>
      </categories>
      <tags>
        <tag>elf文件结构</tag>
      </tags>
  </entry>
  <entry>
    <title>frida环境搭建</title>
    <url>/2024/05/01/frida%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>Frida</strong> 是一个强大的动态代码插桩工具，用于对应用程序的运行时行为进行分析和修改。</p>
<h1 id="安装frida"><a href="#安装frida" class="headerlink" title="安装frida"></a>安装frida</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用如下命令安装frida，默认安装最新版的frida</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install frida </span><br></pre></td></tr></table></figure>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip uninstall frida</span><br></pre></td></tr></table></figure>
<h2 id="指定版本"><a href="#指定版本" class="headerlink" title="指定版本"></a>指定版本</h2><p>安装指定版本的frida</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install frida==xx.xx.xx</span><br></pre></td></tr></table></figure>
<h2 id="frida-tools（安装frida-tools会自动安装frida）"><a href="#frida-tools（安装frida-tools会自动安装frida）" class="headerlink" title="frida-tools（安装frida-tools会自动安装frida）"></a>frida-tools（安装frida-tools会自动安装frida）</h2><h3 id="安装frida-tools"><a href="#安装frida-tools" class="headerlink" title="安装frida-tools"></a>安装frida-tools</h3><p>使用如下命令安装frida-tools，默认安装最新版的frida-tools</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install frida-tools</span><br></pre></td></tr></table></figure>
<h3 id="安装指定版本的frida-tools"><a href="#安装指定版本的frida-tools" class="headerlink" title="安装指定版本的frida-tools"></a>安装指定版本的frida-tools</h3><p>frida 与 frida-tools 版本的对应关系可在github项目处查看或者直接baidu搜索</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install frida-tools==xx.xx.xx</span><br></pre></td></tr></table></figure>
<h3 id="卸载frida-tools"><a href="#卸载frida-tools" class="headerlink" title="卸载frida-tools"></a>卸载frida-tools</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip uninstall frida-tools</span><br></pre></td></tr></table></figure>
<h1 id="配置frida-server"><a href="#配置frida-server" class="headerlink" title="配置frida-server"></a>配置frida-server</h1><p>frida-server的版本需要与frida的版本相匹配，同时frida-server的运行平台要与自己的设备和架构相匹配。</p>
<h2 id="下载frida-server"><a href="#下载frida-server" class="headerlink" title="下载frida-server"></a>下载frida-server</h2><p>在github上下载frida-server。<br>将下载的压缩包解压后通过<code>adb push</code>推送到测试机的&#x2F;data&#x2F;local&#x2F;tmp目录下（需要通过USB连接手机）。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb push frida-server /data/local/tmp</span><br></pre></td></tr></table></figure>
<p>通过chmod命令为其赋予可执行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 frida-sever</span><br></pre></td></tr></table></figure>
<h1 id="安装frida脚本代码自动补全包"><a href="#安装frida脚本代码自动补全包" class="headerlink" title="安装frida脚本代码自动补全包"></a>安装frida脚本代码自动补全包</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save @types/frida-gum</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Frida</category>
      </categories>
      <tags>
        <tag>frida环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>frida_rpc</title>
    <url>/2025/01/14/frida-rpc/</url>
    <content><![CDATA[<h1 id="枚举所有进程及其进程ID"><a href="#枚举所有进程及其进程ID" class="headerlink" title="枚举所有进程及其进程ID"></a>枚举所有进程及其进程ID</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Connected to device&quot;</span>)</span><br><span class="line"></span><br><span class="line">processes = device.enumerate_processes()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Listing all processes:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> process <span class="keyword">in</span> processes:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;process.name&#125;</span> (PID: <span class="subst">&#123;process.pid&#125;</span>)&quot;</span>)</span><br></pre></td></tr></table></figure>



<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">device = frida.get_remote_device()</span><br><span class="line">processes = device.enumerate_processes()</span><br><span class="line"><span class="keyword">for</span> process <span class="keyword">in</span> processes:</span><br><span class="line">    <span class="built_in">print</span>(process)</span><br></pre></td></tr></table></figure>



<h1 id="注入进程"><a href="#注入进程" class="headerlink" title="注入进程"></a>注入进程</h1><h2 id="附加进程注入"><a href="#附加进程注入" class="headerlink" title="附加进程注入"></a>附加进程注入</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">process = frida.get_usb_device().attach(ProcessName/PID)</span><br><span class="line"></span><br><span class="line">jsCode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    console.log(&quot;frida hooked!&quot;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line">script.load()</span><br></pre></td></tr></table></figure>

<h2 id="spawn方式注入"><a href="#spawn方式注入" class="headerlink" title="spawn方式注入"></a>spawn方式注入</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">pid = device.spawn([PackageName])</span><br><span class="line">process = device.attach(pid)</span><br><span class="line"></span><br><span class="line">jsCode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    console.log(&quot;frida hooked!&quot;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">device.resume(pid) 	<span class="comment"># 恢复进程</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Script loaded&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="非标准端口注入"><a href="#非标准端口注入" class="headerlink" title="非标准端口注入"></a>非标准端口注入</h2><p>需要进行端口转发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb forword tcp:27042 tcp:27042</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">subprocess.getoutput(<span class="string">&quot;adb forward tcp:27042 tcp:27042&quot;</span>)</span><br><span class="line">subprocess.getoutput(<span class="string">&quot;adb forward tcp:7777 tcp:7777&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">device = frida.get_device_manager().add_remote_device(<span class="string">&quot;127.0.0.1:7788&quot;</span>)	<span class="comment"># 指定IP地址</span></span><br><span class="line">process = device.attach(ProcessName/PID)</span><br><span class="line"></span><br><span class="line">jsCode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    console.log(&quot;frida hooked!&quot;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line">script.load()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Script loaded&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="spawn"><a href="#spawn" class="headerlink" title="spawn"></a>spawn</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">device = frida.get_device_manager().add_remote_device(<span class="string">&quot;127.0.0.1:7788&quot;</span>)	<span class="comment"># 指定IP地址</span></span><br><span class="line">pid = device.spawn(PackageName)</span><br><span class="line">process = device.attach(pid)</span><br><span class="line"></span><br><span class="line">jsCode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    console.log(&quot;frida hooked!&quot;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">device.resume(pid)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Script loaded&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="send"><a href="#send" class="headerlink" title="send"></a>send</h1><p><code>send</code> 是用于在 Frida 脚本和主机 Python 程序之间通信的函数。</p>
<h2 id="JS端"><a href="#JS端" class="headerlink" title="JS端"></a>JS端</h2><p><code>send</code> 是 Frida 的全局函数，用于向Python程序发送字符串、对象或其他序列化数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">send</span>(<span class="string">&quot;Hello from Frida!&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Python端"><a href="#Python端" class="headerlink" title="Python端"></a>Python端</h2><p>通过 <code>script.on(&quot;message&quot;, callback)</code> 监听 JavaScript 脚本发送的消息。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Received message: <span class="subst">&#123;message&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>, on_message)  <span class="comment"># 注册消息回调</span></span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">device = frida.get_device_manager().add_remote_device(<span class="string">&quot;127.0.0.1:7788&quot;</span>)</span><br><span class="line">pid = device.spawn(PackageName)</span><br><span class="line">process = device.attach(pid)</span><br><span class="line"></span><br><span class="line">jsCode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    console.log(&quot;frida hooked!&quot;);</span></span><br><span class="line"><span class="string">    send(&quot;Hello from Frida!&quot;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message,data</span>):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;send&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Received from JavaScript: <span class="subst">&#123;message&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>,on_message)</span><br><span class="line"></span><br><span class="line">script.load()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Script loaded&quot;</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">frida hooked!</span><br><span class="line">Received <span class="keyword">from</span> JavaScript: &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;send&#x27;</span>, <span class="string">&#x27;payload&#x27;</span>: <span class="string">&#x27;Hello from Frida!&#x27;</span>&#125;</span><br><span class="line">Script loaded</span><br></pre></td></tr></table></figure>



<h2 id="双向通信"><a href="#双向通信" class="headerlink" title="双向通信"></a>双向通信</h2><h3 id="JS端-1"><a href="#JS端-1" class="headerlink" title="JS端"></a>JS端</h3><p>通过&#96;&#96;send<code>发送，</code>recv&#96;来接收。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">send</span>(<span class="string">&quot;Requesting data from Python&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收来自 Python 的消息</span></span><br><span class="line"><span class="title function_">recv</span>(<span class="keyword">function</span> (<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received from Python:&quot;</span>, message.<span class="property">payload</span>);</span><br><span class="line">&#125;).<span class="title function_">wait</span>();</span><br></pre></td></tr></table></figure>

<h3 id="Python端-1"><a href="#Python端-1" class="headerlink" title="Python端"></a>Python端</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;send&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Received from JavaScript: <span class="subst">&#123;message[<span class="string">&#x27;payload&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 回复消息给 JavaScript</span></span><br><span class="line">        script.post(&#123;<span class="string">&quot;response&quot;</span>: <span class="string">&quot;Data received!&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>, on_message)</span><br></pre></td></tr></table></figure>

<h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">device = frida.get_device_manager().add_remote_device(<span class="string">&quot;127.0.0.1:7788&quot;</span>)</span><br><span class="line">pid = device.spawn(PackageName)</span><br><span class="line">process = device.attach(pid)</span><br><span class="line"></span><br><span class="line">jsCode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    console.log(&quot;frida hooked!&quot;);</span></span><br><span class="line"><span class="string">    send(&quot;Hello from Frida!&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    recv(function (message)&#123;</span></span><br><span class="line"><span class="string">        console.log(&quot;Received from Python:&quot;, message)</span></span><br><span class="line"><span class="string">    &#125;).wait();</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message,data</span>):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;send&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Received from JavaScript: <span class="subst">&#123;message&#125;</span>&quot;</span>)</span><br><span class="line">    script.post(<span class="string">&quot;message from Python&quot;</span>)</span><br><span class="line"></span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>,on_message)</span><br><span class="line">script.load()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Script loaded&quot;</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">frida hooked!</span><br><span class="line">Received <span class="keyword">from</span> JavaScript: &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;send&#x27;</span>, <span class="string">&#x27;payload&#x27;</span>: <span class="string">&#x27;Hello from Frida!&#x27;</span>&#125;</span><br><span class="line">Received <span class="keyword">from</span> Python: message <span class="keyword">from</span> Python</span><br><span class="line">Script loaded</span><br></pre></td></tr></table></figure>

<h1 id="rpc"><a href="#rpc" class="headerlink" title="rpc"></a>rpc</h1><h2 id="JS端定义rpc函数"><a href="#JS端定义rpc函数" class="headerlink" title="JS端定义rpc函数"></a>JS端定义rpc函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rpc.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">hello</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello from Frida!&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>rpc.exports</code> 是一个对象，暴露的函数作为其属性。</p>
<h2 id="Python端调用rpc方法"><a href="#Python端调用rpc方法" class="headerlink" title="Python端调用rpc方法"></a>Python端调用rpc方法</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到目标设备和应用</span></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">pid = device.spawn([<span class="string">&quot;com.example.app&quot;</span>])</span><br><span class="line">session = device.attach(pid)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 JavaScript 脚本</span></span><br><span class="line">js_code = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">rpc.exports = &#123;</span></span><br><span class="line"><span class="string">    hello: function () &#123;</span></span><br><span class="line"><span class="string">        return &quot;Hello from Frida!&quot;;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    add: function (a, b) &#123;</span></span><br><span class="line"><span class="string">        return a + b;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">script = session.create_script(js_code)</span><br><span class="line">script.load()</span><br><span class="line">device.resume(pid)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 RPC 方法</span></span><br><span class="line"><span class="built_in">print</span>(script.exports.hello())  <span class="comment"># 输出: Hello from Frida!</span></span><br><span class="line"><span class="built_in">print</span>(script.exports.add(<span class="number">3</span>, <span class="number">5</span>))  <span class="comment"># 输出: 8</span></span><br></pre></td></tr></table></figure>

<h1 id="API详解"><a href="#API详解" class="headerlink" title="API详解"></a>API详解</h1><h2 id="frida-get-device"><a href="#frida-get-device" class="headerlink" title="frida.get_device()"></a>frida.get_device()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function) def get_device(id: str | None,timeout: int = 0) -&gt; Device</span><br></pre></td></tr></table></figure>

<p>通过设备ID获取指定的设备对象。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line">device = frida.get_device(<span class="string">&quot;xxxxxx&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(device)</span><br></pre></td></tr></table></figure>

<h2 id="frida-get-local-device"><a href="#frida-get-local-device" class="headerlink" title="frida.get_local_device()"></a>frida.get_local_device()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function) def get_local_device() -&gt; Device</span><br></pre></td></tr></table></figure>

<p>获取本地设备（即运行 Frida 的当前机器）的设备对象。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line">device = frida.get_local_device()</span><br><span class="line"><span class="built_in">print</span>(device)</span><br></pre></td></tr></table></figure>

<h2 id="frida-get-remote-device"><a href="#frida-get-remote-device" class="headerlink" title="frida.get_remote_device()"></a>frida.get_remote_device()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function) def get_remote_device() -&gt; Device</span><br></pre></td></tr></table></figure>

<p>获取远程设备对象。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line">device = frida.get_remote_device()</span><br><span class="line"><span class="built_in">print</span>(device)</span><br></pre></td></tr></table></figure>

<h2 id="frida-get-usb-device"><a href="#frida-get-usb-device" class="headerlink" title="frida.get_usb_device()"></a>frida.get_usb_device()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function) def get_usb_device(timeout: int = 0) -&gt; Device</span><br></pre></td></tr></table></figure>

<p>获取通过 USB 连接的设备对象。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line"><span class="built_in">print</span>(device)</span><br></pre></td></tr></table></figure>

<h2 id="device-enumerate-processes-…"><a href="#device-enumerate-processes-…" class="headerlink" title="device.enumerate_processes(…)"></a>device.enumerate_processes(…)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(method) def enumerate_processes(...) -&gt; List[Process]</span><br></pre></td></tr></table></figure>

<p>枚举设备上正在运行的进程。这个方法返回一个包含进程信息的列表，每个进程信息包括进程名称、进程 ID（PID）等。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">processes = device.enumerate_processes()</span><br><span class="line"><span class="keyword">for</span> process <span class="keyword">in</span> processes:</span><br><span class="line">    <span class="built_in">print</span>(process)</span><br></pre></td></tr></table></figure>

<h2 id="device-attach-…"><a href="#device-attach-…" class="headerlink" title="device.attach(…)"></a>device.attach(…)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(method) def attach(...) -&gt; Session</span><br></pre></td></tr></table></figure>

<p>附加到设备上的指定进程，参数可以是进程的PID，也可以是进程的名字。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line"><span class="comment"># 附加到指定 PID 的进程</span></span><br><span class="line">pid = <span class="number">1234</span>  </span><br><span class="line">session = device.attach(pid)</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">process_name = <span class="string">&quot;com.example.app&quot;</span>  <span class="comment"># 替换为目标进程的名称</span></span><br><span class="line">session = device.attach(process_name)</span><br></pre></td></tr></table></figure>

<h2 id="device-spawn"><a href="#device-spawn" class="headerlink" title="device.spawn()"></a>device.spawn()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(method) def spawn(...) -&gt; int</span><br></pre></td></tr></table></figure>

<p>用于在设备上启动一个新的进程，返回进程ID。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="comment"># 获取 USB 设备</span></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line"><span class="comment"># 启动 Android 应用（通过包名）</span></span><br><span class="line">package_name = <span class="string">&quot;com.example.app&quot;</span></span><br><span class="line">pid = device.spawn(package_name)</span><br><span class="line"><span class="comment"># 附加到新启动的进程</span></span><br><span class="line">session = device.attach(pid)</span><br></pre></td></tr></table></figure>

<h2 id="session-create-script-…"><a href="#session-create-script-…" class="headerlink" title="session.create_script(…)"></a>session.create_script(…)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(method) def create_script(...) -&gt; Script</span><br></pre></td></tr></table></figure>

<p>创建一个 Frida 脚本并将其与目标进程关联。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="comment"># 获取 USB 设备</span></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line"><span class="comment"># 附加到目标进程</span></span><br><span class="line">session = device.attach(<span class="string">&quot;com.example.app&quot;</span>)</span><br><span class="line"><span class="comment"># 创建并加载脚本</span></span><br><span class="line">script = session.create_script(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">console.log(&quot;Hello from Frida!&quot;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="script-load"><a href="#script-load" class="headerlink" title="script.load()"></a>script.load()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(method) def load(...) -&gt; None</span><br></pre></td></tr></table></figure>

<p>将脚本加载到目标进程中并开始执行。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="comment"># 获取 USB 设备</span></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line"><span class="comment"># 附加到目标进程</span></span><br><span class="line">session = device.attach(<span class="string">&quot;com.example.app&quot;</span>)</span><br><span class="line"><span class="comment"># 创建并加载脚本</span></span><br><span class="line">script = session.create_script(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">console.log(&quot;Hello from Frida!&quot;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line">script.load()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Frida</category>
      </categories>
      <tags>
        <tag>frida_rpc</tag>
      </tags>
  </entry>
  <entry>
    <title>ndk开发</title>
    <url>/2025/01/16/ndk%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="NDK（Native-Development-Kit）"><a href="#NDK（Native-Development-Kit）" class="headerlink" title="NDK（Native Development Kit）"></a>NDK（Native Development Kit）</h2><p>Android NDK 是一个工具集，可以使用 C 和 C++ 等语言以原生代码实现应用的各个部分。<br>NDK提供了一系列的工具，帮助开发者快速开发C（或C++）的动态库，并能自动将so和java应用一起打包成apk。</p>
<h2 id="JNI（Java-Native-Interface）"><a href="#JNI（Java-Native-Interface）" class="headerlink" title="JNI（Java Native Interface）"></a>JNI（Java Native Interface）</h2><p>从Java1.1开始，jni标准成为Java平台的一部分，允许Java代码和其他语言写的代码进行交互。<br>NDK是开发套件，JNI才是调用的框架。JNI是Java调用Native 语言的一种特性。通过JNI可以使得Java与C&#x2F;C++机型交互。</p>
<h1 id="ndk中的Log输出"><a href="#ndk中的Log输出" class="headerlink" title="ndk中的Log输出"></a>ndk中的Log输出</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;android/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_TAG <span class="string">&quot;MyApp&quot;</span>  <span class="comment">// 设置日志标签</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __android_log_print(<span class="type">int</span> priority, <span class="type">const</span> <span class="type">char</span> *tag,  <span class="type">const</span> <span class="type">char</span> *fmt, ...);</span><br><span class="line"></span><br><span class="line"><span class="comment">// priority: 日志的优先级（日志级别），决定日志的严重性。</span></span><br><span class="line"><span class="comment">// tag: 日志标签，用于标识日志来源。通常是应用的名称或功能模块。</span></span><br><span class="line"><span class="comment">// fmt: 格式化字符串，类似于 C 标准库中的 printf 格式。</span></span><br><span class="line"><span class="comment">// ...: 可选的附加参数，用于格式化字符串的内容。</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;android/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG_TAG <span class="string">&quot;MyNDKApp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">logExample</span><span class="params">()</span> &#123;</span><br><span class="line">    __android_log_print(ANDROID_LOG_VERBOSE, LOG_TAG, <span class="string">&quot;This is a VERBOSE log&quot;</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, <span class="string">&quot;This is a DEBUG log&quot;</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_INFO, LOG_TAG, <span class="string">&quot;This is an INFO log&quot;</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_WARN, LOG_TAG, <span class="string">&quot;This is a WARN log&quot;</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, <span class="string">&quot;This is an ERROR log&quot;</span>);</span><br><span class="line">    __android_log_print(ANDROID_LOG_FATAL, LOG_TAG, <span class="string">&quot;This is a FATAL log&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="ndk初始化函数与构造函数"><a href="#ndk初始化函数与构造函数" class="headerlink" title="ndk初始化函数与构造函数"></a>ndk初始化函数与构造函数</h1><h2 id="init-函数"><a href="#init-函数" class="headerlink" title="_init 函数"></a>_init 函数</h2><p><code>_init</code> 函数与程序初始化有关。它会在动态库被加载时自动调用，通常用于执行一些初始化操作。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">void</span> _init() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="attribute-constructor-构造函数"><a href="#attribute-constructor-构造函数" class="headerlink" title="attribute((constructor))构造函数"></a><strong>attribute</strong>((constructor))构造函数</h2><p>指定函数为构造函数，使得它们在程序或动态库加载时自动执行。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__attribute__ ((constructor)) <span class="type">void</span> <span class="title function_">init_function1</span><span class="params">()</span> &#123;</span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, <span class="string">&quot;initTest&quot;</span>, <span class="string">&quot;This is a init_function1 log&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>设置优先级</strong></p>
<p>当定义多个构造函数时，它们会按优先级顺序执行。如果没有显式指定优先级，则按声明顺序执行。优先级越低的构造函数会先执行，数字越高，执行顺序越靠后。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__attribute__ ((constructor(<span class="number">300</span>))) <span class="type">void</span> <span class="title function_">init_function2</span><span class="params">()</span>&#123;</span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, <span class="string">&quot;initTest&quot;</span>, <span class="string">&quot;This is a init_function2 log&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__ ((constructor(<span class="number">200</span>))) <span class="type">void</span> <span class="title function_">init_function3</span><span class="params">()</span>&#123;</span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, <span class="string">&quot;initTest&quot;</span>, <span class="string">&quot;This is a init_function3 log&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>隐藏函数符号</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__attribute__ ((constructor, visibility(<span class="string">&quot;hidden&quot;</span>))) <span class="type">void</span> <span class="title function_">init_function4</span><span class="params">()</span> &#123;</span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, <span class="string">&quot;initTest&quot;</span>, <span class="string">&quot;This is a init_function4 log&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="demo测试"><a href="#demo测试" class="headerlink" title="demo测试"></a>demo测试</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">void</span> _init()&#123;</span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, <span class="string">&quot;initTest&quot;</span>, <span class="string">&quot;This is a _init log&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__ ((constructor)) <span class="type">void</span> <span class="title function_">init_function1</span><span class="params">()</span>&#123;</span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, <span class="string">&quot;initTest&quot;</span>, <span class="string">&quot;This is a init_function1 log&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__ ((constructor(<span class="number">300</span>))) <span class="type">void</span> <span class="title function_">init_function2</span><span class="params">()</span>&#123;</span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, <span class="string">&quot;initTest&quot;</span>, <span class="string">&quot;This is a init_function2 log&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__ ((constructor(<span class="number">200</span>))) <span class="type">void</span> <span class="title function_">init_function3</span><span class="params">()</span>&#123;</span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, <span class="string">&quot;initTest&quot;</span>, <span class="string">&quot;This is a init_function3 log&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__ ((constructor, visibility(<span class="string">&quot;hidden&quot;</span>))) <span class="type">void</span> <span class="title function_">init_function4</span><span class="params">()</span>&#123;</span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, <span class="string">&quot;initTest&quot;</span>, <span class="string">&quot;This is a init_function4 log&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出日志</strong></p>
<p><img src="/2025/01/16/ndk%E5%BC%80%E5%8F%91/1.jpg"></p>
<p><code>_init</code>函数是最先执行的函数，然后按照构造函数的优先级顺序执行。</p>
<h2 id="反汇编分析"><a href="#反汇编分析" class="headerlink" title="反汇编分析"></a>反汇编分析</h2><p><code>__init</code>函数经过反编译得到了<code>.init_proc</code>函数</p>
<p><img src="/2025/01/16/ndk%E5%BC%80%E5%8F%91/2.jpg"></p>
<p>构造函数出现在<code>.init_array</code>段里</p>
<p><img src="/2025/01/16/ndk%E5%BC%80%E5%8F%91/3.jpg"></p>
<h2 id="函数执行顺序"><a href="#函数执行顺序" class="headerlink" title="函数执行顺序"></a>函数执行顺序</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_init</span><br><span class="line">constructor</span><br><span class="line">JNI_Onload</span><br><span class="line">其他函数</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>安卓开发</category>
      </categories>
      <tags>
        <tag>ndk</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+github从0到1博客环境搭建</title>
    <url>/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul>
<li>操作系统：Windows</li>
<li>VSCode（进行文本编辑）</li>
<li>Node.js</li>
<li>Git</li>
<li>Github账号和github仓库（部署到github）</li>
<li>Hexo（博客框架）</li>
</ul>
<h2 id="安装VSCode"><a href="#安装VSCode" class="headerlink" title="安装VSCode"></a>安装VSCode</h2><p>无脑下载安装</p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p><a href="https://nodejs.org/en/download/">Node.js</a><br>无脑下载安装<br>打开终端，输入<code>node -v</code>，可以看到版本信息，则安装成功。<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.jpg"></p>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><a href="https://git-scm.com/download/win">Git</a><br>无脑下载安装</p>
<h3 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h3><p>常用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config -l  //查看所有配置</span><br><span class="line"></span><br><span class="line">git config --system --list //查看系统配置</span><br><span class="line"></span><br><span class="line">git config --global --list //查看用户（全局）配置</span><br></pre></td></tr></table></figure>
<p>配置用户名和邮箱</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br><span class="line"></span><br><span class="line">输入后没有报错代表设置成功</span><br></pre></td></tr></table></figure>
<p>通过git config -l检查配置是否成功<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2.jpg"><br>git配置完成。</p>
<h2 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h2><p>先创建一个自己的Github账号。<br>然后去创建仓库<br>仓库名的格式必须为：&lt;用户名&gt;.github.io<br>Destricption：为仓库描述<br>勾选：Initialize this respository with:Add a README file初始化一个README.md文件<br>点击Creat repository 进行创建<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.jpg"></p>
<h2 id="连接Github"><a href="#连接Github" class="headerlink" title="连接Github"></a>连接Github</h2><p>生成ssh公钥<br>打开终端，执行如下命令，如果提示输入一直回车就好</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure>
<p>然后找到在c盘用户文件夹下的.ssh文件夹，会看到id_rsa.pub,这是公钥<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/4.jpg">  </p>
<p>用记事本打开id_rsa.pub，复制里面的内容，然后在GitHub中配置ssh密钥<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/5.jpg">  </p>
<p>进入GitHub，右上角点击头像选择settings<br>进入设置页选择SSH and GPG keys<br>然后点 New SSH key<br>title可以随便可以取，把key粘过去<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/6.jpg"><br>然后点<code>Add SSH KEY</code></p>
<h3 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/7.jpg"><br>可以正常连接！</p>
<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>自己选定一个目录，新建一个文件夹，可以命名MyBlog（自己起个名字，后面的博客项目都在这个文件夹里了）<br>从MyBlog目录下打开终端，执行如下命令，安装hexo</p>
<blockquote>
<p>npm换源<br>npm 官方注册表在国内访问可能受限，会导致下载速度很慢。<br>如果接下来的npm命令报错，可以改为国内镜像源，也可以使用cnmp来代替nmp<br>cnpm 是淘宝镜像的命令行工具，速度比默认的 npm 快<br>npm install -g cnpm –registry&#x3D;<a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a></p>
</blockquote>
<p><strong>安装hexo</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>安装完成，输入<code>hexo -v</code>验证是否安装成功。<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/8.jpg"> </p>
<h2 id="初始化Hexo项目"><a href="#初始化Hexo项目" class="headerlink" title="初始化Hexo项目"></a>初始化Hexo项目</h2><p>从MyBlog目录下打开终端，执行<code>hexo init</code>命令初始化项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/9.jpg"><br>在文件夹中可以看到有了这些文件<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/10.jpg"><br>继续执行npm i ，安装依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure>
<p><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/11.jpg">   </p>
<p>打开终端，在终端输入hexo sever或者hexo s<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/12.jpg">  </p>
<p>Ctrl键+鼠标左键单击网址，打开链接<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/13.jpg">  </p>
<p>这就成功在本地部署了</p>
<h2 id="将静态博客部署到GitHub-Pages"><a href="#将静态博客部署到GitHub-Pages" class="headerlink" title="将静态博客部署到GitHub Pages"></a>将静态博客部署到GitHub Pages</h2><p>安装<code>npm install hexo-deployer-git --save</code><br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/14.jpg"><br>修改_config.yml文件<br>将博客目录下的_config.yml，也就是整个Hexo框架的配置文件了，可以在里面修改大部分配置。<br>修改最后一行的配置，将repository修改为自己的github项目地址。<br>项目地址可以到github仓库复制过来。<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/15.jpg"><br>设置分支为：main</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:Bileton/Bileton.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<h1 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h1><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;文章标题&quot;</span><br></pre></td></tr></table></figure>
<p>就会创建一个md文件，就可以在vscode里面写文章了。<br>Ctrl+k + (大写锁定下的)V，可以打开侧边预览实时看到预览效果。</p>
<h2 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h2><p>在终端输入hexo sever或者hexo s<br>输出信息会包含一个链接，打开链接即可在浏览器预览效果。</p>
<h2 id="部署项目到github"><a href="#部署项目到github" class="headerlink" title="部署项目到github"></a>部署项目到github</h2><p>在终端执行如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>hexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令，可用hexo cl。<br>hexo generate：生成静态文章，可以用hexo g缩写<br>hexo deploy：部署文章，可以用hexo d缩写<br>出现 Deploy done，则说明部署成功。<br>打开浏览器访问：<a href="https://bileton.github.io/">https://Bileton.github.io</a>，就可以看到博客内容了。</p>
<p>部署命令简洁版</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure>

<h2 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h2><p>在博客目录下的<code>_config.yml文件里</code>，可以进行修改</p>
<h3 id="站点信息"><a href="#站点信息" class="headerlink" title="站点信息"></a>站点信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: &#x27;&#x27; # 标题</span><br><span class="line">subtitle: &#x27;&#x27; # 副标题</span><br><span class="line">description: &#x27;&#x27; # 描述</span><br><span class="line">keywords:</span><br><span class="line">author: &#x27;&#x27; # 作者</span><br><span class="line">language: zh-CN # 语言</span><br><span class="line">timezone: &#x27;&#x27;</span><br></pre></td></tr></table></figure>

<h1 id="托管Cloudflare加速访问"><a href="#托管Cloudflare加速访问" class="headerlink" title="托管Cloudflare加速访问"></a>托管Cloudflare加速访问</h1><p>进入Cloudflare官网注册账号</p>
<p>进入<code>Workers 和 Pages</code>新建一个<code>Pages</code></p>
<p><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/16.jpg"></p>
<p>点击<code>Connect to Git</code></p>
<p><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/17.jpg"></p>
<p>点击<code>Begin setup</code></p>
<p><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/18.jpg"></p>
<p>点击<code>Save and Deploy</code>进行部署</p>
<p>部署成功可查看子域名</p>
<p><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/19.jpg"></p>
<p>可通过<code>bileton-github-io.pages.dev</code>进行访问。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>root检测原理及绕过</title>
    <url>/2025/02/17/root%E6%A3%80%E6%B5%8B%E5%8E%9F%E7%90%86%E5%8F%8A%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Root，即“获取超级用户权限”，是指通过一系列技术手段绕过Android系统的安全机制，使普通用户获得类似于Linux系统中root用户的权限。拥有Root权限后，用户可以访问和修改系统文件、安装未经官方认证的应用等。</p>
<h1 id="检测原理"><a href="#检测原理" class="headerlink" title="检测原理"></a>检测原理</h1><ul>
<li><p>已经root设备，会增加一些特殊包或文件，所以可以通过检测这些包(如Superuser.apk、检测su命令)、activity、文件是否存在来判断。</p>
</li>
<li><p>app检测是否可以执行在root下才能运行的命令。</p>
</li>
<li><p>检测busybox工具是否存在,关于busybox的知识google上一大堆，简单的说BusyBox<br>   是很多标准 Linux 工具的一个单个可执行实现。BusyBox<br>   包含了一些简单的工具,例如 cat 和 echo,还包含了一些更大、更复杂的工具,例如 grep、find、moun)</p>
</li>
<li><p>运行su命令</p>
</li>
<li><p>检测Android 沙盒目录文件或文件夹读取权限（在Android系统中，有些目录是普通用户不能访问的，例如 &#x2F;data、&#x2F;system、&#x2F;etc 等；比如微信沙盒目录下的文件或文件夹权限是否正常）</p>
</li>
</ul>
<h1 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h1><ul>
<li><p>使用面具安装Shamiko模块，配置排除列表</p>
</li>
<li><p>使用狐妖面具，配置排除列表</p>
</li>
<li><p>通用root检测hook脚本</p>
</li>
<li><p>反编译apk分析检测逻辑通过hook进行绕过</p>
</li>
</ul>
]]></content>
      <categories>
        <category>root</category>
      </categories>
      <tags>
        <tag>root</tag>
      </tags>
  </entry>
  <entry>
    <title>selenium</title>
    <url>/2024/12/05/selenium/</url>
    <content><![CDATA[<p>Selenium 是一个自动化测试工具，利用它我们可以驱动浏览器执行特定的动作。</p>
<h1 id="安装ChromeDriver"><a href="#安装ChromeDriver" class="headerlink" title="安装ChromeDriver"></a>安装ChromeDriver</h1><p>Selenium的使用需要配合Chrome浏览器，需要额外安装ChromeDriver 和 Chrome 浏览器。<br>安装好Chrome 浏览器并可以正常运行之后，点击 Chrome 的菜单，帮助 -&gt; 关于 Chrome，查看 Chrome 的版本号，然后到ChromeDriver 的官方网站<a href="https://sites.google.com/chromium.org/driver/downloads">https://sites.google.com/chromium.org/driver/downloads</a>下载对应的ChromeDriver 版本。</p>
<h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><p>Windows建议直接将 chromedriver.exe 文件拖到 Python 的 Scripts 目录下。<br>也可以单独将其所在路径配置到环境变量。<br>配置完成之后，就可以在命令行下直接执行 chromedriver 命令了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chromedriver</span><br></pre></td></tr></table></figure>
<h1 id="安装Selenium"><a href="#安装Selenium" class="headerlink" title="安装Selenium"></a>安装Selenium</h1><p>使用pip直接安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure>
<p><strong>可以运行一个脚本测试</strong><br>弹出一个 Chrome 浏览器并加载了百度页面，10 秒之后就关闭。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">sleep(<span class="number">10</span>)</span><br><span class="line">browser.close() </span><br></pre></td></tr></table></figure>
<h1 id="常用浏览器操作"><a href="#常用浏览器操作" class="headerlink" title="常用浏览器操作"></a>常用浏览器操作</h1><h2 id="打开页面"><a href="#打开页面" class="headerlink" title="打开页面"></a>打开页面</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">driver.get(<span class="string">&quot;https://xxx.com&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="获取URL"><a href="#获取URL" class="headerlink" title="获取URL"></a>获取URL</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">url = driver.current_url</span><br></pre></td></tr></table></figure>
<h2 id="获取标题"><a href="#获取标题" class="headerlink" title="获取标题"></a>获取标题</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">title = driver.title</span><br></pre></td></tr></table></figure>

<h2 id="页面元素定位"><a href="#页面元素定位" class="headerlink" title="页面元素定位"></a>页面元素定位</h2><p>使用By类型（需要导入By）  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium.webdriver.common.by import By</span><br></pre></td></tr></table></figure>
<h3 id="通过ID定位"><a href="#通过ID定位" class="headerlink" title="通过ID定位"></a>通过ID定位</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">element = driver.find_element(By.ID, <span class="string">&quot;xxx&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="通过"><a href="#通过" class="headerlink" title="通过"></a>通过</h3>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>hook脚本大全</title>
    <url>/2024/11/29/hook%E8%84%9A%E6%9C%AC%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="Java层"><a href="#Java层" class="headerlink" title="Java层"></a>Java层</h1><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PrintMap"><a href="#PrintMap" class="headerlink" title="PrintMap"></a>PrintMap</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printMap</span>(<span class="params">map</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> key = map.<span class="title function_">keySet</span>();</span><br><span class="line">    <span class="keyword">let</span> it = key.<span class="title function_">iterator</span>();</span><br><span class="line">    <span class="keyword">while</span>(it.<span class="title function_">hasNext</span>())&#123;</span><br><span class="line">        <span class="keyword">let</span> keystr = it.<span class="title function_">next</span>();</span><br><span class="line">        <span class="keyword">let</span> valuestr = map.<span class="title function_">get</span>(keystr);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key:&quot;</span>,keystr,<span class="string">&quot;| value:&quot;</span>,valuestr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="PrintTreeMap"><a href="#PrintTreeMap" class="headerlink" title="PrintTreeMap"></a>PrintTreeMap</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printMap</span>(<span class="params">map</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">TreeMap</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.TreeMap&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> cast_map = <span class="title class_">Java</span>.<span class="title function_">cast</span>(map,<span class="title class_">TreeMap</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;map:&quot;</span>,cast_map.<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PrintHashMap"><a href="#PrintHashMap" class="headerlink" title="PrintHashMap"></a>PrintHashMap</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printHashMap</span>(<span class="params">map</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> hashMap = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.HashMap&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> cast_map = <span class="title class_">Java</span>.<span class="title function_">cast</span>(map,hashMap);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(cast_map.<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PrintSet"><a href="#PrintSet" class="headerlink" title="PrintSet"></a>PrintSet</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printSet</span>(<span class="params">set</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">size</span>())</span><br><span class="line">    <span class="keyword">while</span>(set.<span class="property">hasNext</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;set:&quot;</span>,set.<span class="title function_">next</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="打印调用栈"><a href="#打印调用栈" class="headerlink" title="打印调用栈"></a>打印调用栈</h2><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showStacks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>)</span><br><span class="line">            .<span class="title function_">getStackTraceString</span>(</span><br><span class="line">                <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()</span><br><span class="line">            )</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printStack</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Exception</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> ins = <span class="title class_">Exception</span>.$new(<span class="string">&quot;Exception&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> straces = ins.<span class="title function_">getStackTrace</span>();</span><br><span class="line">        <span class="keyword">if</span> (straces != <span class="literal">undefined</span> &amp;&amp; straces != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> strace = straces.<span class="title function_">toString</span>();</span><br><span class="line">            <span class="keyword">var</span> replaceStr = strace.<span class="title function_">replace</span>(<span class="regexp">/,/g</span>, <span class="string">&quot;\\n&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=============================&quot;</span> + name + <span class="string">&quot; Stack strat=======================&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(replaceStr);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=============================&quot;</span> + name + <span class="string">&quot; Stack end=======================\r\n&quot;</span>);</span><br><span class="line">            <span class="title class_">Exception</span>.$dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="native"><a href="#native" class="headerlink" title="native"></a>native</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`native stack:`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>) + <span class="string">&quot;\n&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="消息摘要算法通杀"><a href="#消息摘要算法通杀" class="headerlink" title="消息摘要算法通杀"></a>消息摘要算法通杀</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">showStacks</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">            <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>)</span><br><span class="line">                .<span class="title function_">getStackTraceString</span>(</span><br><span class="line">                    <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">ByteString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">toBase64</span>(<span class="params">tag, data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(tag + <span class="string">&quot; Base64: &quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(data).<span class="title function_">base64</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params">tag, data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(tag + <span class="string">&quot; Hex: &quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(data).<span class="title function_">hex</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">toUtf8</span>(<span class="params">tag, data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(tag + <span class="string">&quot; Utf8: &quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(data).<span class="title function_">utf8</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">var</span> messageDigest = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.MessageDigest&quot;</span>);</span><br><span class="line">    messageDigest.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;byte&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MessageDigest.update(&#x27;byte&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    messageDigest.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.nio.ByteBuffer&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MessageDigest.update(&#x27;java.nio.ByteBuffer&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    messageDigest.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MessageDigest.update(&#x27;[B&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; update data&quot;</span>;</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, data);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, data);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, data);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    messageDigest.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data, start, length</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MessageDigest.update(&#x27;[B&#x27;, &#x27;int&#x27;, &#x27;int&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; update data&quot;</span>;</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, data);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, data);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, data);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>, start, length);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(data, start, length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    messageDigest.<span class="property">digest</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MessageDigest.digest() is called!&quot;</span>);</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">digest</span>();</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; digest result&quot;</span>;</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, result);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, result);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, result);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    messageDigest.<span class="property">digest</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MessageDigest.digest(&#x27;[B&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; digest data&quot;</span>;</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, data);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, data);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, data);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">digest</span>(data);</span><br><span class="line">        <span class="keyword">var</span> tags = algorithm + <span class="string">&quot; digest result&quot;</span>;</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, result);</span><br><span class="line">        <span class="title function_">toHex</span>(tags, result);</span><br><span class="line">        <span class="title function_">toBase64</span>(tags, result);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    messageDigest.<span class="property">digest</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data, start, length</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MessageDigest.digest(&#x27;[B&#x27;, &#x27;int&#x27;, &#x27;int&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; digest data&quot;</span>;</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, data);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, data);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, data);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">digest</span>(data, start, length);</span><br><span class="line">        <span class="keyword">var</span> tags = algorithm + <span class="string">&quot; digest result&quot;</span>;</span><br><span class="line">        <span class="title function_">toHex</span>(tags, result);</span><br><span class="line">        <span class="title function_">toBase64</span>(tags, result);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>, start, length);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mac = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.crypto.Mac&quot;</span>);</span><br><span class="line">    mac.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.spec.AlgorithmParameterSpec&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">key, AlgorithmParameterSpec</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.init(&#x27;java.security.Key&#x27;, &#x27;java.security.spec.AlgorithmParameterSpec&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">init</span>(key, <span class="title class_">AlgorithmParameterSpec</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.security.Key&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.init(&#x27;java.security.Key&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; init Key&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> keyBytes = key.<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, keyBytes);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, keyBytes);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, keyBytes);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">init</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;byte&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.update(&#x27;byte&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.nio.ByteBuffer&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.update(&#x27;java.nio.ByteBuffer&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.update(&#x27;[B&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; update data&quot;</span>;</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, data);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, data);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, data);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data, start, length</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.update(&#x27;[B&#x27;, &#x27;int&#x27;, &#x27;int&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; update data&quot;</span>;</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, data);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, data);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, data);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>, start, length);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(data, start, length);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">doFinal</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.doFinal() is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">doFinal</span>();</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; doFinal result&quot;</span>;</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, result);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, result);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, result);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">doFinal</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.doFinal.overload(&#x27;[B&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">doFinal</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">doFinal</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">output, outOffset</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.doFinal.overload(&#x27;[B&#x27;, &#x27;int&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">doFinal</span>(output, outOffset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="获取context"><a href="#获取context" class="headerlink" title="获取context"></a>获取context</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get_context</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> current_application = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;android.app.ActivityThread&#x27;</span>).<span class="title function_">currentApplication</span>();</span><br><span class="line">    <span class="keyword">let</span> context = current_application.<span class="title function_">getApplicationContext</span>();</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="hook-StringBuilder-toString"><a href="#hook-StringBuilder-toString" class="headerlink" title="hook StringBuilder_toString()"></a>hook StringBuilder_toString()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_StringBuilder_toString</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">StringBuilder</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.StringBuilder&quot;</span>);</span><br><span class="line">        <span class="title class_">StringBuilder</span>.<span class="property">toString</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>.<span class="title function_">toString</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>,result)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_StringBuilder_toString</span>()</span><br></pre></td></tr></table></figure>

<h2 id="jbyteArray类型打印"><a href="#jbyteArray类型打印" class="headerlink" title="jbyteArray类型打印"></a>jbyteArray类型打印</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function jbyteArray2Array(jbyteArray) &#123;</span><br><span class="line">    var ret;</span><br><span class="line">    Java.perform(function() &#123;</span><br><span class="line">        var b = Java.use(&#x27;[B&#x27;);</span><br><span class="line">        var buffer = Java.cast(jbyteArray, b);</span><br><span class="line">        ret = Java.array(&#x27;byte&#x27;, buffer);</span><br><span class="line">    &#125;);</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字节数组转字符串"><a href="#字节数组转字符串" class="headerlink" title="字节数组转字符串"></a>字节数组转字符串</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bArrToString</span>(<span class="params">bArr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(bArr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串转字节数组"><a href="#字符串转字节数组" class="headerlink" title="字符串转字节数组"></a>字符串转字节数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">StringToByteArray</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(str).<span class="title function_">getBytes</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="hook动态加载的dex"><a href="#hook动态加载的dex" class="headerlink" title="hook动态加载的dex"></a>hook动态加载的dex</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基础监控脚本</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">monitorDexLoading</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 枚举所有已加载的类</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">className</span>) &#123;</span><br><span class="line">                <span class="comment">// 处理每个加载的类</span></span><br><span class="line">                <span class="title function_">processClass</span>(className);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Class enumeration completed&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监控新类加载</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.ClassLoader&quot;</span>).<span class="property">loadClass</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>.<span class="title function_">loadClass</span>(name);</span><br><span class="line">            <span class="title function_">processClass</span>(name);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processClass</span>(<span class="params">className</span>) &#123;</span><br><span class="line">    <span class="comment">// 根据类名过滤目标类</span></span><br><span class="line">    <span class="keyword">if</span> (className.<span class="title function_">startsWith</span>(<span class="string">&#x27;com.example.target&#x27;</span>)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Found target class:&#x27;</span>, className);</span><br><span class="line">        <span class="title function_">hookTargetClass</span>(className);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="so层hook"><a href="#so层hook" class="headerlink" title="so层hook"></a>so层hook</h1><h2 id="hook-dlopen"><a href="#hook-dlopen" class="headerlink" title="hook_dlopen"></a>hook_dlopen</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 在Android8.0之前加载so通过dlopen函数</span></span><br><span class="line">    <span class="keyword">var</span> dlopen = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;dlopen&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_dlopen&quot;</span>,dlopen);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(dlopen,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dlopen:&quot;</span>,path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;leave!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Android8.0之后加载so通过android_dlopen_ext函数</span></span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;leave!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_dlopen</span>()</span><br></pre></td></tr></table></figure>
<h3 id="指定so的dlopen"><a href="#指定so的dlopen" class="headerlink" title="指定so的dlopen"></a><strong>指定so的dlopen</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;SoName&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_dlopen</span>()</span><br></pre></td></tr></table></figure>

<h3 id="替换参数，不加载so"><a href="#替换参数，不加载so" class="headerlink" title="替换参数，不加载so"></a>替换参数，不加载so</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params">so_name</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(path);</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(so_name)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    args[<span class="number">0</span>] = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="string">&quot;libc.so&quot;</span>);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced!&quot;</span>);</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">match</span> = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">match</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(so_name,<span class="string">&quot;加载成功&quot;</span>);</span><br><span class="line">                <span class="keyword">let</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(so_name);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_dlopen</span>(so_name)</span><br></pre></td></tr></table></figure>





<h2 id="hook-pthread"><a href="#hook-pthread" class="headerlink" title="hook_pthread"></a>hook_pthread</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_pthread</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pth_create = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[pth_create]&quot;</span>, pth_create);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pth_create, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(args[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address&quot;</span>, <span class="variable language_">module</span>.<span class="property">name</span>, args[<span class="number">2</span>].<span class="title function_">sub</span>(<span class="variable language_">module</span>.<span class="property">base</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_pthread</span>()</span><br></pre></td></tr></table></figure>
<h3 id="hook-dlopen配合pthread"><a href="#hook-dlopen配合pthread" class="headerlink" title="hook_dlopen配合pthread"></a>hook_dlopen配合pthread</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                    <span class="title function_">hook_pthread</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_pthread</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pth_create = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[pth_create]&quot;</span>, pth_create);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pth_create, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(args[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address&quot;</span>, <span class="variable language_">module</span>.<span class="property">name</span>, args[<span class="number">2</span>].<span class="title function_">sub</span>(<span class="variable language_">module</span>.<span class="property">base</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hook_dlopen</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>

<h3 id="替换pthread-create函数打印参数信息"><a href="#替换pthread-create函数打印参数信息" class="headerlink" title="替换pthread_create函数打印参数信息"></a>替换pthread_create函数打印参数信息</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func_new_pthread_create</span>(<span class="params">pthread_create_addr</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> pthread_create = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(pthread_create_addr, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">parg0, parg1, parg2, parg3</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(parg2);</span><br><span class="line">        <span class="keyword">const</span> so_name = <span class="variable language_">module</span>.<span class="property">name</span>;</span><br><span class="line">        <span class="keyword">const</span> baseAddr = <span class="variable language_">module</span>.<span class="property">base</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pthread_create&quot;</span>, so_name, <span class="string">&quot;0x&quot;</span> + parg2.<span class="title function_">sub</span>(baseAddr).<span class="title function_">toString</span>(<span class="number">16</span>), <span class="string">&quot;0x&quot;</span> + parg3.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">pthread_create</span>(parg0, parg1, parg2, parg3);</span><br><span class="line">    &#125;,<span class="string">&quot;int&quot;</span>,[<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>])</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">replace_pthread_create</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> pthread_create_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libart.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> new_pthread_create = <span class="title function_">func_new_pthread_create</span>(pthread_create_addr);</span><br><span class="line">    <span class="comment">// 函数替换</span></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(pthread_create_addr,new_pthread_create);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">replace_pthread_create</span>();</span><br></pre></td></tr></table></figure>

<h3 id="替换pthread-create函数并指定so"><a href="#替换pthread-create函数并指定so" class="headerlink" title="替换pthread_create函数并指定so"></a>替换pthread_create函数并指定so</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func_new_pthread_create</span>(<span class="params">pthread_create_addr</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> pthread_create = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(pthread_create_addr, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">parg0, parg1, parg2, parg3</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(parg2);</span><br><span class="line">        <span class="keyword">const</span> so_name = <span class="variable language_">module</span>.<span class="property">name</span>;</span><br><span class="line">        <span class="keyword">const</span> baseAddr = <span class="variable language_">module</span>.<span class="property">base</span>;</span><br><span class="line">        <span class="keyword">if</span> (so_name === <span class="string">&quot;libmsaoaidsec.so&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pthread_create&quot;</span>, so_name, <span class="string">&quot;0x&quot;</span> + parg2.<span class="title function_">sub</span>(baseAddr).<span class="title function_">toString</span>(<span class="number">16</span>), <span class="string">&quot;0x&quot;</span> + parg3.<span class="title function_">toString</span>(<span class="number">16</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 成功的返回值是0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">pthread_create</span>(parg0, parg1, parg2, parg3);</span><br><span class="line">    &#125;,<span class="string">&quot;int&quot;</span>,[<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>])</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">replace_pthread_create</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> pthread_create_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libart.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> new_pthread_create = <span class="title function_">func_new_pthread_create</span>(pthread_create_addr);</span><br><span class="line">    <span class="comment">// 函数替换</span></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(pthread_create_addr,new_pthread_create);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">replace_pthread_create</span>();</span><br></pre></td></tr></table></figure>

<h3 id="替换pthread-create函数并指定函数"><a href="#替换pthread-create函数并指定函数" class="headerlink" title="替换pthread_create函数并指定函数"></a>替换pthread_create函数并指定函数</h3><h2 id="hook-RegisterNatives"><a href="#hook-RegisterNatives" class="headerlink" title="hook_RegisterNatives"></a>hook_RegisterNatives</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_RegisterNatives</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">RegisterNatives</span>_addr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libart.so&quot;</span>).<span class="title function_">enumerateSymbols</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i].<span class="property">name</span>;</span><br><span class="line">        <span class="keyword">if</span> ((symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) == -<span class="number">1</span>) &amp;&amp; (symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;RegisterNatives&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="title class_">RegisterNatives</span>_addr = symbols[i].<span class="property">address</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RegisterNatives_addr: &quot;</span>, <span class="title class_">RegisterNatives</span>_addr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">RegisterNatives</span>_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> env = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> jclass = args[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> class_name = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>().<span class="title function_">getClassName</span>(jclass);</span><br><span class="line">            <span class="keyword">var</span> methods_ptr = <span class="title function_">ptr</span>(args[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">var</span> method_count = args[<span class="number">3</span>].<span class="title function_">toInt32</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RegisterNatives method counts: &quot;</span>, method_count);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; method_count; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> name = methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span>).<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">var</span> sig = methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span>).<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">var</span> fnPtr_ptr = methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">2</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">                <span class="keyword">var</span> find_module = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(fnPtr_ptr);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ClasssName: &quot;</span>, class_name, <span class="string">&quot;MethodName: &quot;</span>, name, <span class="string">&quot;Sig: &quot;</span>, sig, <span class="string">&quot;Function_addr: &quot;</span>, fnPtr_ptr, <span class="string">&quot;ModuleName: &quot;</span>, find_module.<span class="property">name</span>, <span class="string">&quot;Fun_Offset: &quot;</span>, <span class="title function_">ptr</span>(fnPtr_ptr).<span class="title function_">sub</span>(find_module.<span class="property">base</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_RegisterNatives</span>()</span><br></pre></td></tr></table></figure>
<h2 id="hook-RegisterNative2"><a href="#hook-RegisterNative2" class="headerlink" title="hook_RegisterNative2"></a>hook_RegisterNative2</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">STD_STRING_SIZE</span> = <span class="number">3</span> * <span class="title class_">Process</span>.<span class="property">pointerSize</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StdString</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">handle</span> = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(<span class="variable constant_">STD_STRING_SIZE</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">dispose</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> [data, isTiny] = <span class="variable language_">this</span>.<span class="title function_">_getData</span>();</span><br><span class="line">        <span class="keyword">if</span> (!isTiny) &#123;</span><br><span class="line">            <span class="title class_">Java</span>.<span class="property">api</span>.$delete(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">disposeToString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="variable language_">this</span>.<span class="title function_">toString</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">dispose</span>();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> [data] = <span class="variable language_">this</span>.<span class="title function_">_getData</span>();</span><br><span class="line">        <span class="keyword">return</span> data.<span class="title function_">readUtf8String</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">_getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> str = <span class="variable language_">this</span>.<span class="property">handle</span>;</span><br><span class="line">        <span class="keyword">const</span> isTiny = (str.<span class="title function_">readU8</span>() &amp; <span class="number">1</span>) === <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> data = isTiny ? str.<span class="title function_">add</span>(<span class="number">1</span>) : str.<span class="title function_">add</span>(<span class="number">2</span> * <span class="title class_">Process</span>.<span class="property">pointerSize</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">        <span class="keyword">return</span> [data, isTiny];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">prettyMethod</span>(<span class="params">method_id, withSignature</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="title class_">StdString</span>();</span><br><span class="line">    <span class="title class_">Java</span>.<span class="property">api</span>[<span class="string">&#x27;art::ArtMethod::PrettyMethod&#x27;</span>](result, method_id, withSignature ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> result.<span class="title function_">disposeToString</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">attach</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>]</span><br><span class="line">        &#125;, </span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> modulemap = <span class="keyword">new</span> <span class="title class_">ModuleMap</span>()</span><br><span class="line">            modulemap.<span class="title function_">update</span>()</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = modulemap.<span class="title function_">find</span>(retval)</span><br><span class="line">            <span class="keyword">var</span> string = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(<span class="number">0x100</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&lt;&#x27;</span> + <span class="variable language_">module</span>.<span class="property">name</span> + <span class="string">&#x27;&gt; method_name =&gt;&#x27;</span>,<span class="title function_">prettyMethod</span>(<span class="variable language_">this</span>.<span class="property">arg0</span>,<span class="number">1</span>), <span class="string">&#x27;,offset=&gt;&#x27;</span>, <span class="title function_">ptr</span>(retval).<span class="title function_">sub</span>(<span class="variable language_">module</span>.<span class="property">base</span>), <span class="string">&#x27;,module_name=&gt;&#x27;</span>, <span class="variable language_">module</span>.<span class="property">name</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&lt;anonymous&gt; method_name =&gt;&#x27;</span>, <span class="title function_">readStdString</span>(string), <span class="string">&#x27;, addr =&gt;&#x27;</span>, <span class="title function_">ptr</span>(retval))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_RegisterNative</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> libart = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&#x27;libart.so&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> symbols = libart.<span class="title function_">enumerateSymbols</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (symbols[i].<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;RegisterNative&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; symbols[i].<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;ArtMethod&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; symbols[i].<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;RuntimeCallbacks&#x27;</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="title function_">attach</span>(symbols[i].<span class="property">address</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">hook_RegisterNative</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure>



<h2 id="hook-dlsym"><a href="#hook-dlsym" class="headerlink" title="hook_dlsym"></a>hook_dlsym</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlsym</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 获取dlsym函数的地址</span></span><br><span class="line">    <span class="keyword">let</span> dlsymAddr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libdl.so&quot;</span>,<span class="string">&quot;dlsym&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dlsymAddr);</span><br><span class="line">    <span class="comment">// hook dlsym</span></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(dlsymAddr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">args1</span> = args[<span class="number">1</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> md= <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(retval);</span><br><span class="line">            <span class="keyword">if</span>(md==<span class="literal">null</span>)<span class="keyword">return</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;function:&quot;</span>+<span class="variable language_">this</span>.<span class="property">args1</span>.<span class="title function_">readCString</span>(),<span class="string">&quot;module:&quot;</span>+md.<span class="property">name</span>,<span class="string">&quot;address:&quot;</span>+retval,<span class="string">&quot;offset:&quot;</span>+retval.<span class="title function_">sub</span>(md.<span class="property">base</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_dlsym</span>()</span><br></pre></td></tr></table></figure>

<h2 id="hook-call-constructors"><a href="#hook-call-constructors" class="headerlink" title="hook_call_constructors()"></a>hook_call_constructors()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_call_constructors</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> linker = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Process</span>.<span class="property">pointerSize</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        linker = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;linker&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        linker = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;linker64&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> call_constructors_addr, get_soname</span><br><span class="line">    <span class="keyword">let</span> symbols = linker.<span class="title function_">enumerateSymbols</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; symbols.<span class="property">length</span>; index++) &#123;</span><br><span class="line">        <span class="keyword">let</span> symbol = symbols[index];</span><br><span class="line">        <span class="keyword">if</span> (symbol.<span class="property">name</span> === <span class="string">&quot;__dl__ZN6soinfo17call_constructorsEv&quot;</span>) &#123;</span><br><span class="line">            call_constructors_addr = symbol.<span class="property">address</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.<span class="property">name</span> === <span class="string">&quot;__dl__ZNK6soinfo10get_sonameEv&quot;</span>) &#123;</span><br><span class="line">            get_soname = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(symbol.<span class="property">address</span>, <span class="string">&quot;pointer&quot;</span>, [<span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(call_constructors_addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hooked call_constructors!&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_call_constructors</span>()</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_init_array</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> linker = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Process</span>.<span class="property">pointerSize</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        linker = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;linker&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        linker = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;linker64&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> call_constructors_addr, get_soname</span><br><span class="line">    <span class="keyword">let</span> symbols = linker.<span class="title function_">enumerateSymbols</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; symbols.<span class="property">length</span>; index++) &#123;</span><br><span class="line">        <span class="keyword">let</span> symbol = symbols[index];</span><br><span class="line">        <span class="keyword">if</span> (symbol.<span class="property">name</span> === <span class="string">&quot;__dl__ZN6soinfo17call_constructorsEv&quot;</span>) &#123;</span><br><span class="line">            call_constructors_addr = symbol.<span class="property">address</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.<span class="property">name</span> === <span class="string">&quot;__dl__ZNK6soinfo10get_sonameEv&quot;</span>) &#123;</span><br><span class="line">            get_soname = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(symbol.<span class="property">address</span>, <span class="string">&quot;pointer&quot;</span>, [<span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(call_constructors_addr)</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(call_constructors_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> soinfo = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">let</span> soname = <span class="title function_">get_soname</span>(soinfo).<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="comment">// 此时还没有执行完成初始化函数</span></span><br><span class="line">            <span class="comment">// 这个时候就可以加载so了，可以在这个位置nop掉其他的东西</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">match</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;libDexHelper.so&quot;</span>, <span class="string">&quot;加载成功&quot;</span>)</span><br><span class="line">                <span class="keyword">const</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libDexHelper.so&quot;</span>);</span><br><span class="line">                <span class="comment">// 执行结束初始化函数了，接下来会跑dlopen结束位置，执行JNI_OnLoad</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="配合dlopen使用hook-call-constructors"><a href="#配合dlopen使用hook-call-constructors" class="headerlink" title="配合dlopen使用hook_call_constructors()"></a>配合dlopen使用hook_call_constructors()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;xxx.so&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                    <span class="title function_">hook_call_constructors</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_call_constructors</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> linker = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;linker64&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> symbols = linker.<span class="title function_">enumerateSymbols</span>();</span><br><span class="line">    <span class="keyword">var</span> addr_call_constructors = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbol = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> index =<span class="number">0</span>;index&lt;symbols.<span class="property">length</span>;index++)&#123;</span><br><span class="line">        symbol = symbols[index];</span><br><span class="line">        <span class="keyword">if</span>(symbol.<span class="property">name</span>===<span class="string">&quot;__dl__ZN6soinfo17call_constructorsEv&quot;</span>)&#123;</span><br><span class="line">            addr_call_constructors = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> listener = <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr_call_constructors,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hooked call_constructors&quot;</span>)</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;xxx.so&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x175f8</span>), <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0x175f8:替换成功&quot;</span>)</span><br><span class="line">                &#125;, <span class="string">&quot;void&quot;</span>, []))</span><br><span class="line">                <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x16d30</span>), <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0x16d30:替换成功&quot;</span>)</span><br><span class="line">                &#125;, <span class="string">&quot;void&quot;</span>, []))</span><br><span class="line">                listener.<span class="title function_">detach</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hook_dlopen</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>

<h2 id="nop-addr"><a href="#nop-addr" class="headerlink" title="nop_addr"></a>nop_addr</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">nop_addr</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">protect</span>(addr, <span class="number">4</span> , <span class="string">&#x27;rwx&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> w = <span class="keyword">new</span> <span class="title class_">Arm64Writer</span>(addr);</span><br><span class="line">    w.<span class="title function_">putRet</span>();</span><br><span class="line">    w.<span class="title function_">flush</span>();</span><br><span class="line">    w.<span class="title function_">dispose</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配合hook-call-constructors-使用"><a href="#配合hook-call-constructors-使用" class="headerlink" title="配合hook_call_constructors()使用"></a>配合hook_call_constructors()使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//Android8.0之后加载so通过android_dlopen_ext函数</span></span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                    <span class="title function_">hook_call_constructors</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="comment">//console.log(&quot;leave!&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_call_constructors</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> linker64_base_addr = <span class="title class_">Module</span>.<span class="title function_">getBaseAddress</span>(<span class="string">&quot;linker64&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> call_constructors_func_off = <span class="number">0x2C274</span> <span class="comment">//这个地址是从手机上把linker64 pull出来，然后到IDA中找到的，不同的机型，地址可能不一样</span></span><br><span class="line">    <span class="keyword">var</span> call_constructors_func_addr = linker64_base_addr.<span class="title function_">add</span>(call_constructors_func_off)</span><br><span class="line">    <span class="keyword">var</span> listener = <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(call_constructors_func_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hooked call_constructors&quot;</span>)</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="title function_">nop_addr</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x1c544</span>))</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0x1c544:替换成功&quot;</span>)</span><br><span class="line">                <span class="title function_">nop_addr</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x1b924</span>))</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0x1B924:替换成功&quot;</span>)</span><br><span class="line">                <span class="title function_">nop_addr</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x26e5c</span>))</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0x26e5c:替换成功&quot;</span>)</span><br><span class="line">                listener.<span class="title function_">detach</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">nop_addr</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">protect</span>(addr, <span class="number">4</span> , <span class="string">&#x27;rwx&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> w = <span class="keyword">new</span> <span class="title class_">Arm64Writer</span>(addr);</span><br><span class="line">    w.<span class="title function_">putRet</span>();</span><br><span class="line">    w.<span class="title function_">flush</span>();</span><br><span class="line">    w.<span class="title function_">dispose</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hook_dlopen</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>



<h2 id="hook-JNI-OnLoad"><a href="#hook-JNI-OnLoad" class="headerlink" title="hook_JNI_OnLoad()"></a>hook_JNI_OnLoad()</h2><p>hook JNI_OnLoad需要一个时机，就是在指定的so刚加载完成的时候进行hook</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_JNI_OnLoad</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Addr</span>_JNI_OnLoad = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;xxx.so&quot;</span>,<span class="string">&quot;JNI_OnLoad&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Addr</span>_JNI_OnLoad,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hooked JNI_OnLoad!&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;JNI_OnLoad over!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下是一个示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="keyword">var</span> ismsaoaidsec = <span class="literal">false</span>;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;xxx.so&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    ismsaoaidsec = <span class="literal">true</span>;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ismsaoaidsec)&#123;</span><br><span class="line">                <span class="title function_">hook_JNI_OnLoad</span>();</span><br><span class="line">                ismsaoaidsec = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_JNI_OnLoad</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Addr</span>_JNI_OnLoad = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;xxx.so&quot;</span>,<span class="string">&quot;JNI_OnLoad&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Addr</span>_JNI_OnLoad,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hooked JNI_OnLoad!&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;JNI_OnLoad over!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hook_dlopen</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>

<h2 id="hook-NewStringUTF"><a href="#hook-NewStringUTF" class="headerlink" title="hook_NewStringUTF()"></a>hook_NewStringUTF()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义 Hook NewStringUTF 函数的逻辑</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_NewStringUTF</span>(<span class="params"></span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 同步枚举 libart.so 模块中的所有符号（Android Runtime 库）</span></span><br><span class="line">    <span class="keyword">let</span> symbols = <span class="title class_">Module</span>.<span class="title function_">enumerateSymbolsSync</span>(<span class="string">&quot;libart.so&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于存储找到的 NewStringUTF 函数地址</span></span><br><span class="line">    <span class="keyword">let</span> addrNewStringUTF = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有符号，查找目标函数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; symbols.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> symbol = symbols[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 筛选条件：名称包含 NewStringUTF 且不包含 CheckJNI（避免 hook 到 JNI 检查函数）</span></span><br><span class="line">        <span class="keyword">if</span> (symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;NewStringUTF&quot;</span>) != -<span class="number">1</span> &amp;&amp; symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 找到符合条件的符号地址</span></span><br><span class="line">            addrNewStringUTF = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;NewStringUTF&#x27;s addr:&quot;</span>, symbol.<span class="property">address</span>, <span class="string">&quot; name:&quot;</span>, symbol.<span class="property">name</span>);</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 找到后立即退出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确认找到目标函数地址后进行 Hook</span></span><br><span class="line">    <span class="keyword">if</span> (addrNewStringUTF != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 使用 Frida 的 Interceptor 附加到目标地址</span></span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addrNewStringUTF, &#123;</span><br><span class="line">            <span class="comment">// 进入函数时的回调（参数在 args 数组中）</span></span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="comment">// args[1] 对应 NewStringUTF 的第二个参数：const char* bytes</span></span><br><span class="line">                <span class="keyword">var</span> c_string = args[<span class="number">1</span>];</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 从内存中读取 C 字符串（UTF-8 编码）</span></span><br><span class="line">                <span class="keyword">var</span> dataString = c_string.<span class="title function_">readCString</span>();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (dataString) &#123;</span><br><span class="line">                    <span class="comment">// 判断字符串长度是否为 32（例如可能用于捕获 MD5、UUID 等）</span></span><br><span class="line">                    <span class="keyword">if</span> (dataString.<span class="property">length</span> === <span class="number">32</span>) &#123;</span><br><span class="line">                        <span class="comment">// 打印字符串内容</span></span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;捕获到 32 位字符串:&quot;</span>, dataString);</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// 打印 Native 层堆栈跟踪（使用精确回溯模式）</span></span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Native 堆栈跟踪：&quot;</span>);</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>)</span><br><span class="line">                            .<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>) + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// 打印 Java 层堆栈跟踪（需要 Android 环境支持）</span></span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Java 堆栈跟踪：&quot;</span>);</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(</span><br><span class="line">                            <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 函数离开时的回调（本示例未使用）</span></span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;未找到 NewStringUTF 函数地址！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 主要功能说明：</span></span><br><span class="line"><span class="comment">   此脚本用于 Hook Android JNI 的 NewStringUTF 函数，</span></span><br><span class="line"><span class="comment">   当检测到创建长度为 32 的字符串时，会同时打印：</span></span><br><span class="line"><span class="comment">   - 字符串内容</span></span><br><span class="line"><span class="comment">   - Native 层调用堆栈</span></span><br><span class="line"><span class="comment">   - Java 层调用堆栈</span></span><br><span class="line"><span class="comment">   典型应用场景：逆向分析中追踪加密密钥、身份令牌等敏感信息的生成位置</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>无注释版本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_NewStringUTF</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> symbols = <span class="title class_">Module</span>.<span class="title function_">enumerateSymbolsSync</span>(<span class="string">&quot;libart.so&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> addrNewStringUTF = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;symbols.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> symbol = symbols[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;NewStringUTF&quot;</span>)!=-<span class="number">1</span> &amp;&amp; symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>)==-<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">            addrNewStringUTF = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;NewStringUTF&#x27;s addr:&quot;</span>,symbol.<span class="property">address</span>,<span class="string">&quot; name:&quot;</span>,symbol.<span class="property">name</span>);</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(addrNewStringUTF != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addrNewStringUTF,&#123;</span><br><span class="line">            <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> c_string = args[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> dataString = c_string.<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(dataString)&#123;</span><br><span class="line">                    <span class="comment">// console.log(dataString)</span></span><br><span class="line">                    <span class="keyword">if</span>(dataString.<span class="property">length</span>===<span class="number">32</span>)&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dataString:&quot;</span>,dataString);</span><br><span class="line">                        </span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(<span class="variable language_">this</span>.<span class="property">context</span>,<span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>)+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="stalker测试"><a href="#stalker测试" class="headerlink" title="stalker测试"></a>stalker测试</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> threadId = <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>();</span><br><span class="line"><span class="title class_">Stalker</span>.<span class="title function_">follow</span>(tid, &#123;</span><br><span class="line">    <span class="attr">transform</span>: <span class="keyword">function</span>(<span class="params">iterator</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> instruction = iterator.<span class="title function_">next</span>()</span><br><span class="line">            <span class="keyword">if</span> (iterator === <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            iterator.<span class="title function_">keep</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Frida</category>
      </categories>
      <tags>
        <tag>Frida</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh服务实现文件传输</title>
    <url>/2025/02/18/ssh%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>ssh 是一种网络协议，用于加密方式远程登录到其他计算机。它提供了一种安全的方式来访问远程服务器，传输数据，以及运行远程命令。</p>
<h1 id="配置ssh服务"><a href="#配置ssh服务" class="headerlink" title="配置ssh服务"></a>配置ssh服务</h1><p>虚拟机安装openssh-server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure>

<p>启动ssh服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable ssh.service</span><br><span class="line"></span><br><span class="line">sudo systemctl start ssh // 手动启动ssh服务</span><br><span class="line">sudo systemctl enable ssh // 配置服务在系统引导时启动</span><br></pre></td></tr></table></figure>

<p>查看ssh服务状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status ssh</span><br></pre></td></tr></table></figure>

<p>停止ssh服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop ssh // 手动停止</span><br><span class="line">sudo systemctl disable ssh // 防止服务在系统启动时自动运行</span><br></pre></td></tr></table></figure>

<p>验证连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh username@192.168.1.100</span><br></pre></td></tr></table></figure>

<h1 id="传输文件"><a href="#传输文件" class="headerlink" title="传输文件"></a>传输文件</h1><p>将文件从主机传输到虚拟机：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp /path/to/local/file** username@192.168.1.100:/path/to/remote/directory</span><br></pre></td></tr></table></figure>

<p>将文件从虚拟机传输到主机：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp username@192.168.1.100:/path/to/remote/file /path/to/local/directory</span><br></pre></td></tr></table></figure>

<p>如果要传输文件夹，加上<code>-r</code>选项</p>
]]></content>
      <categories>
        <category>高效率工具合集</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT主题美化</title>
    <url>/2024/01/02/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h1 id="NexT主题"><a href="#NexT主题" class="headerlink" title="NexT主题"></a>NexT主题</h1><p>从博客目录打开终端，执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>下载好了之后会在themes目录下生成一个next目录，里面是next主题的配置文件。<br>修改主题只需要在博客根目录下的_config.yml配置文件里找到theme，将其修改为next即可。<br><img src="/2024/01/02/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/1.png"></p>
<h2 id="修改布局"><a href="#修改布局" class="headerlink" title="修改布局"></a>修改布局</h2><p>在next目录下的_config.yml文件里搜索<code>Scheme</code>，有四种默认局部<br><img src="/2024/01/02/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/2.png"></p>
<h3 id="主题颜色"><a href="#主题颜色" class="headerlink" title="主题颜色"></a>主题颜色</h3><p>白色模式和黑色模式<br><img src="/2024/01/02/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/3.png"><br>false为白色模式，true为黑色模式</p>
<h2 id="增加标签页和分类页"><a href="#增加标签页和分类页" class="headerlink" title="增加标签页和分类页"></a>增加标签页和分类页</h2><p>在next目录下的_config.yml文件里搜索<code>menu</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  #about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br><span class="line"></span><br><span class="line"># Enable / Disable menu icons / item badges.</span><br><span class="line">menu_settings:</span><br><span class="line">  icons: true</span><br><span class="line">  badges: true</span><br></pre></td></tr></table></figure>
<p>把tags和categories前面的<code>#</code>去掉<br><strong>进一步配置</strong><br>创建两个文件，一个是tags，一个是categories</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n page tags</span><br><span class="line">hexo n page categories</span><br></pre></td></tr></table></figure>
<p>文件内容稍作修改<br><img src="/2024/01/02/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/4.jpg"><br><img src="/2024/01/02/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/5.jpg"></p>
<h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>把menu下的about前面的<code>#</code>去掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br></pre></td></tr></table></figure>
<p>新建页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>
<p>在source目录下生成了一个about文件夹，里面有一个index.md文件，可以对about页面进行修改。</p>
<h2 id="侧边栏位置"><a href="#侧边栏位置" class="headerlink" title="侧边栏位置"></a>侧边栏位置</h2><p>侧边栏中包含多种配置，可通过修改主题<code>_config.yml</code>实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  # Sidebar Position.</span><br><span class="line">  position: left</span><br><span class="line">  #position: right</span><br></pre></td></tr></table></figure>

<h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line">  url: /images/android.svg</span><br><span class="line">  # If true, the avatar will be dispalyed in circle.</span><br><span class="line">  rounded: true</span><br><span class="line">  # If true, the avatar will be rotated with the cursor.</span><br><span class="line">  rotated: true</span><br></pre></td></tr></table></figure>
<ul>
<li><code>url</code>：图像地址。默认为<code>NexT</code>包下<code>/source/images/avatar.gif</code>，也可放置在站点路径<code>/source/uploads</code>文件夹内</li>
<li><code>rounded</code>：是否显示为圆形图标</li>
<li><code>rotated</code>：光标移动到图标是否旋转</li>
</ul>
<h2 id="返回顶部"><a href="#返回顶部" class="headerlink" title="返回顶部"></a>返回顶部</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line">  # Back to top in sidebar.</span><br><span class="line">  sidebar: true</span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></table></figure>
<ul>
<li><code>enable</code>：默认为<code>true</code>。在右下角显示返回顶部图标</li>
<li><code>sidebar</code>：默认为<code>false</code>。在侧边栏显示</li>
<li><code>scrollpercent</code>：默认为<code>false</code>。是否显示进度</li>
</ul>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span><br><span class="line">  # See: https://github.com/chriskempson/tomorrow-theme</span><br><span class="line">  highlight_theme: normal</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Show text copy result.</span><br><span class="line">    show_result: true</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style: mac</span><br></pre></td></tr></table></figure>

<h2 id="自定义主页"><a href="#自定义主页" class="headerlink" title="自定义主页"></a>自定义主页</h2><ul>
<li>在根目录的source目录下，新建一个index.md文档<br>这个source目录下的index.md文档即是我们自定义的主页。在文档中做出的任何修改均会体现在自定义主页中。  </li>
<li>修改根目录下的_config.yml文件的index_generator项<br>打开根目录下的 <code>_config.yml</code> 文件，将 <code>index_generator</code> 项下的 <code>path</code> 项的值修改为一个无效值，例如：我将这一项修改为了default-index。目的是使Hexo框架的默认主页指向一个无效值。</li>
<li>启用home（默认已启用）<br>打开 <code>themes/next/</code> 目录下的 <code>_config.yml</code> 文件，将 <code>menu</code> 项下的 <code>home</code> 项的值修改为<code>/ || fa fa-home</code> 。使得点击页面中的Home菜单时，可以返回自定义主页。</li>
</ul>
<h2 id="添加网站运行时间"><a href="#添加网站运行时间" class="headerlink" title="添加网站运行时间"></a>添加网站运行时间</h2><p>在<code>\themes\next\layout\_partials</code>目录下，找到footer.swig文件，添加如下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var now = new Date();</span><br><span class="line">    function createtime() &#123;</span><br><span class="line">        var grt= new Date(&quot;7/18/2023 10:00:00&quot;); //修改为你的网站开始运行的时间</span><br><span class="line">        now.setTime(now.getTime()+250);</span><br><span class="line">        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);</span><br><span class="line">        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);</span><br><span class="line">        if(String(hnum).length ==1 )&#123;hnum = &quot;0&quot; + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">        mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = &quot;0&quot; + mnum;&#125;</span><br><span class="line">        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">        snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = &quot;0&quot; + snum;&#125;</span><br><span class="line">        document.getElementById(&quot;timeDate&quot;).innerHTML = &quot;本站已安全运行 &quot;+dnum+&quot; 天 &quot;;</span><br><span class="line">        document.getElementById(&quot;times&quot;).innerHTML = hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">setInterval(&quot;createtime()&quot;,250);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="去除文章底部带-的标签"><a href="#去除文章底部带-的标签" class="headerlink" title="去除文章底部带#的标签"></a>去除文章底部带<code>#</code>的标签</h2><p>文章底部的标签前会有一个#,我们可以将其修改<br>根据路径找到这个文件<code>\MyBlog\themes\next\layout\_macro\post.swig</code>，<br>找到对应文件后全文搜索<code>footer</code>，原内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &lt;footer class=&quot;post-footer&quot;&gt;</span><br><span class="line">    &#123;%- if post.tags and post.tags.length %&#125;</span><br><span class="line">      &#123;%- if theme.tag_icon %&#125;</span><br><span class="line">        &#123;%- set tag_indicate = &#x27;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;&#x27; %&#125;</span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">        &#123;%- set tag_indicate = &#x27;#&#x27; %&#125;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">      &lt;div class=&quot;post-tags&quot;&gt;</span><br><span class="line">        &#123;%- for tag in post.tags.toArray() %&#125;</span><br><span class="line">          &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">        &#123;%- endfor %&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; partial(&#x27;_partials/post/post-footer.swig&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; post_nav(post) &#125;&#125;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">  &lt;footer class=&quot;post-footer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;post-eof&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>
<p>修改后的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &lt;footer class=&quot;post-footer&quot;&gt;</span><br><span class="line">    &#123;%- if post.tags and post.tags.length %&#125;</span><br><span class="line">      &#123;%- if theme.tag_icon %&#125;</span><br><span class="line">        &#123;%- set tag_indicate = &#x27;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;&#x27; %&#125;</span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">        &#123;%- set tag_indicate = &#x27;&#x27; %&#125;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">      &lt;div class=&quot;post-tags&quot;&gt;</span><br><span class="line">        &#123;%- for tag in post.tags.toArray() %&#125;</span><br><span class="line">          &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">        &#123;%- endfor %&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; partial(&#x27;_partials/post/post-footer.swig&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; post_nav(post) &#125;&#125;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">  &lt;footer class=&quot;post-footer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;post-eof&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>

<h1 id="字数统计及阅读时长"><a href="#字数统计及阅读时长" class="headerlink" title="字数统计及阅读时长"></a>字数统计及阅读时长</h1><p>安装插件hexo-wordcount</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>
<h2 id="配置NexT目录下的-config-yml"><a href="#配置NexT目录下的-config-yml" class="headerlink" title="配置NexT目录下的_config.yml"></a>配置NexT目录下的_config.yml</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span><br><span class="line">symbols_count_time:</span><br><span class="line">    separated_meta: true</span><br><span class="line">    item_text_post: true</span><br><span class="line">    item_text_total: false</span><br><span class="line">    awl: 2</span><br><span class="line">    wpm: 275</span><br></pre></td></tr></table></figure>
<h1 id="自定义文件的路径"><a href="#自定义文件的路径" class="headerlink" title="自定义文件的路径"></a>自定义文件的路径</h1><p>修改主题配置文件 custom_file_path 部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  head: source/_data/head.swig #添加自定义内容在 head</span><br><span class="line">  #header: source/_data/header.swig #添加自定义内容在顶栏</span><br><span class="line">  #sidebar: source/_data/sidebar.swig #添加自定义内容在边栏</span><br><span class="line">  #postMeta: source/_data/post-meta.swig #添加自定义文章的 meta 信息</span><br><span class="line">  postBodyEnd: source/_data/post-body-end.swig #添加自定义内容在文章尾部</span><br><span class="line">  footer: source/_data/footer.swig #添加自定义内容在页脚</span><br><span class="line">  #bodyEnd: source/_data/body-end.swig</span><br><span class="line">  #variable: source/_data/variables.styl</span><br><span class="line">  #mixin: source/_data/mixins.styl</span><br><span class="line">  style: source/_data/styles.styl #添加自定义css</span><br></pre></td></tr></table></figure>
<h2 id="文章图片圆角"><a href="#文章图片圆角" class="headerlink" title="文章图片圆角"></a>文章图片圆角</h2><p>添加以下内容到 source&#x2F;_data&#x2F;styles.styl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 图片圆角</span><br><span class="line">.post-body img &#123;</span><br><span class="line">  border-radius: 1em </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="首页文章阴影-卡片化-效果"><a href="#首页文章阴影-卡片化-效果" class="headerlink" title="首页文章阴影(卡片化)效果"></a>首页文章阴影(卡片化)效果</h2><p>添加以下内容到source&#x2F;_data&#x2F;styles.styl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line">.post-block &#123;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="鼠标点击出现小红心"><a href="#鼠标点击出现小红心" class="headerlink" title="鼠标点击出现小红心"></a>鼠标点击出现小红心</h2><p>将如下内容保存到source&#x2F;js&#x2F;love.js（没有这个文件就自己创建）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;use strict&quot;;!function(e,r,t)&#123;function a()&#123;for(var e=0;e&lt;i.length;e++)i[e].alpha&lt;=0?(r.body.removeChild(i[e].el),i.splice(e,1)):(i[e].y--,i[e].scale+=.004,i[e].alpha-=.013,i[e].el.style.cssText=&quot;left:&quot;+i[e].x+&quot;px;top:&quot;+i[e].y+&quot;px;opacity:&quot;+i[e].alpha+&quot;;transform:scale(&quot;+i[e].scale+&quot;,&quot;+i[e].scale+&quot;) rotate(45deg);background:&quot;+i[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(a)&#125;var o,i=[];e.requestAnimationFrame=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;,function(t)&#123;var a=r.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(r.createTextNode(t))&#125;catch(e)&#123;a.styleSheet.cssText=t&#125;r.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick,e.onclick=function(e)&#123;var t,a;o&amp;&amp;o(),t=e,(a=r.createElement(&quot;div&quot;)).className=&quot;heart&quot;,i.push(&#123;el:a,x:t.clientX-5,y:t.clientY-5,scale:1,alpha:1,color:&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;),r.body.appendChild(a)&#125;,a()&#125;(window,document);</span><br></pre></td></tr></table></figure>
<p>在 source&#x2F;_data&#x2F;head.swig 添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/love.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="自定义背景"><a href="#自定义背景" class="headerlink" title="自定义背景"></a>自定义背景</h2><p>把想设置的背景放入.&#x2F;themes&#x2F;next&#x2F;source&#x2F;images中，命名为background.jpg。在根目录的source文件夹下新建source&#x2F;_data&#x2F;styles.styl，添加如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 整体背景设置</span><br><span class="line">body &#123;</span><br><span class="line">	background:url(/images/background.png);// 设定背景图片,images同处于source文件夹下</span><br><span class="line">	background-repeat: no-repeat;// 设定背景图片非重复填充</span><br><span class="line">	background-attachment:fixed;// 设置背景图片不随页面滚动</span><br><span class="line">	background-position:50% 50%;// 设置背景图片位置</span><br><span class="line">	background-size: cover// 设置保持图像的纵横比并将图像缩放成将完全覆盖背景定位区域的最小大小</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设置透明度</span><br><span class="line">.main-inner&#123;</span><br><span class="line">	opacity: 0.9;</span><br><span class="line">&#125;</span><br><span class="line">.header-inner&#123;</span><br><span class="line">	opacity: 0.9;</span><br><span class="line">	z-index: 10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="添加本地搜索服务"><a href="#添加本地搜索服务" class="headerlink" title="添加本地搜索服务"></a>添加本地搜索服务</h1><p>使用<code>NexT</code>自带的本地搜索服务，执行如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>在Hexo目录下的配置文件中添加如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
<p>在Next配置文件中进行修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # If auto, trigger search by changing input.</span><br><span class="line">  # If manual, trigger search by pressing enter key or search button.</span><br><span class="line">  trigger: auto</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br></pre></td></tr></table></figure>
<p>把enable的值改为true即可</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>关于ptrace</title>
    <url>/2024/12/22/%E5%85%B3%E4%BA%8Eptrace/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>&emsp;&emsp;<code>ptrace</code> 是一个系统调用，允许一个进程（父进程即调试器）观察和控制另一个进程（子进程即被调试的目标进程）。同时，它还能检查和改变目标进程的内存、寄存器和执行状态。这种机制广泛用于调试器和逆向分析工具。</p>
<h1 id="ptrace-函数原型"><a href="#ptrace-函数原型" class="headerlink" title="ptrace 函数原型"></a>ptrace 函数原型</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="type">long</span> <span class="title function_">ptrace</span><span class="params">(<span class="keyword">enum</span> __ptrace_request request, <span class="type">pid_t</span> pid, <span class="type">void</span> *addr, <span class="type">void</span> *data)</span>;</span><br></pre></td></tr></table></figure>

<p><strong><code>request</code></strong><br>指定执行的操作，决定了 <code>ptrace</code> 的具体功能，比如追踪进程、读取内存、单步执行等。常见值如下：</p>
<ul>
<li><code>PTRACE_TRACEME</code>：表示当前进程希望被其父进程调试。</li>
<li><code>PTRACE_ATTACH</code>：将当前进程附加到目标进程上。</li>
<li><code>PTRACE_CONT</code>：继续运行目标进程。</li>
<li><code>PTRACE_PEEKDATA</code>：读取目标进程的内存。</li>
<li><code>PTRACE_POKEDATA</code>：写入目标进程的内存。</li>
<li><code>PTRACE_SINGLESTEP</code>：让目标进程执行单条指令。</li>
<li><code>PTRACE_GETREGS</code> 和 <code>PTRACE_SETREGS</code>：获取或设置目标进程的寄存器。</li>
<li>其他值：具体见系统调用文档。</li>
</ul>
<p><strong><code>pid</code></strong><br>指定目标进程的 PID（进程 ID）。</p>
<p><strong><code>addr</code></strong><br>表示地址参数：</p>
<ul>
<li>对于内存相关操作（如 <code>PTRACE_PEEKDATA</code> 和 <code>PTRACE_POKEDATA</code>），这是目标进程的内存地址。</li>
<li>对于寄存器操作，可以忽略此参数。</li>
</ul>
<p><strong><code>data</code></strong><br>根据操作的不同，此参数可以用作输入或输出：</p>
<ul>
<li>用于传递写入目标进程的值。</li>
<li>保存读取到的数据（如寄存器内容）。</li>
</ul>
<p>&emsp;&emsp;当一个调试器（如 <code>gdb</code> 或自定义调试器）使用 <code>ptrace(PTRACE_ATTACH)</code> 附加到目标进程时，内核会更新目标进程的 <code>TracerPid</code> 字段，记录调试器的 PID。</p>
<h1 id="TracerPid"><a href="#TracerPid" class="headerlink" title="TracerPid"></a>TracerPid</h1><p>&emsp;&emsp;<code>/proc/&lt;pid&gt;/status</code> 文件中的 <code>TracerPid</code> 字段与 <code>ptrace</code> 密切相关，<code>TracerPid</code> 表示该进程的调试状态。</p>
<ul>
<li><p><code>TracerPid: 0</code> 表示当前进程没有被调试。</p>
</li>
<li><p><code>TracerPid: &lt;pid&gt;</code> 表示该进程正在被调试，且调试器的进程 ID 是 <code>&lt;pid&gt;</code>。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Android系统</category>
      </categories>
      <tags>
        <tag>ptrace</tag>
      </tags>
  </entry>
  <entry>
    <title>关于面试杂记</title>
    <url>/2025/03/05/%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Xposed"><a href="#Xposed" class="headerlink" title="Xposed"></a>Xposed</h1><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>xp是一种针对 Android 系统的模块化框架，通过模块的方式修改应用程序的行为，主要通过修改 Android 系统的运行时环境来实现动态插桩。</p>
<h2 id="xp注入机制"><a href="#xp注入机制" class="headerlink" title="xp注入机制"></a>xp注入机制</h2><ul>
<li><p>Xposed 的注入是通过修改 Android 系统的 Zygote 进程实现的</p>
</li>
<li><p>Zygote 是 Android 系统中所有应用程序进程的父进程</p>
</li>
<li><p>工作原理：</p>
<ul>
<li><p>Xposed 在系统启动时修改 &#x2F;system&#x2F;bin&#x2F;app_process 文件，将其替换为自己的版本，使其加载Xposed的核心模块<code>XposedBridge.jar</code></p>
</li>
<li><p>当 Zygote 进程启动时，会加载 Xposed 框架</p>
</li>
<li><p>所有从 Zygote fork 出来的应用进程都会包含 Xposed 框架</p>
</li>
<li><p>Xposed 通过修改 ART&#x2F;Dalvik 虚拟机，实现了对 Java 方法的 hook</p>
</li>
</ul>
</li>
<li><p>特点</p>
<ul>
<li><p>需要 ROOT 权限</p>
</li>
<li><p>系统级别的注入，稳定性好</p>
</li>
<li><p>只能 hook Java 层代码</p>
</li>
<li><p>需要重启设备才能生效</p>
</li>
</ul>
</li>
</ul>
<h1 id="EdXposed"><a href="#EdXposed" class="headerlink" title="EdXposed"></a>EdXposed</h1><p>EdXposed 是一款基于 Xposed 框架的增强工具，基于Riru框架开发，使用 yahfa (Yet Another Hook Framework for ART) 和 SandHook 作为 Hook 框架，它的出现是为了解决 Xposed 在 ART 环境下的兼容性问题。</p>
<p>注入方式：在 Android 系统启动时，所有应用进程均由 Zygote 进程 fork 而来。EdXposed 通过注入 Zygote 进程，确保所有应用进程都能加载 EdXposed 的功能。</p>
<h1 id="LSPosed"><a href="#LSPosed" class="headerlink" title="LSPosed"></a>LSPosed</h1><h2 id="注入机制的改进"><a href="#注入机制的改进" class="headerlink" title="注入机制的改进"></a>注入机制的改进</h2><ul>
<li><p>采用 Riru&#x2F;Zygisk 作为注入框架</p>
</li>
<li><p>不需要修改系统文件</p>
</li>
<li><p>支持 Zygote 重启生效（软重启）</p>
</li>
<li><p>通过 Magisk 模块方式安装，更加安全和灵活</p>
</li>
</ul>
<h2 id="兼容性改进"><a href="#兼容性改进" class="headerlink" title="兼容性改进"></a>兼容性改进</h2><ul>
<li><p>完整支持 Android 8.0-14</p>
</li>
<li><p>适配了 Android Runtime (ART)</p>
</li>
<li><p>支持 64 位架构</p>
</li>
<li><p>对各种定制 ROM 有更好的兼容性</p>
</li>
</ul>
<h1 id="Zygisk"><a href="#Zygisk" class="headerlink" title="Zygisk"></a>Zygisk</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li><p>Zygisk 是 Magisk 的一个模块</p>
</li>
<li><p>运行在 Zygote 进程中</p>
</li>
<li><p>提供了一个在 Zygote 进程中注入代码的框架</p>
</li>
<li><p>是 Riru 的继任者</p>
</li>
</ul>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>注入原理：Zygisk加载是通过替换app_process，修改LD_PRELOAD，再执行原app_process实现的，用LD_PRELOAD注入的。</p>
<p>启动流程：</p>
<ol>
<li>Magisk 守护进程启动</li>
<li>Zygisk 模块加载</li>
<li>注入到 Zygote 进程</li>
<li>子进程继承注入代码</li>
<li>模块在应用进程中执行</li>
</ol>
<h1 id="Frida"><a href="#Frida" class="headerlink" title="Frida"></a>Frida</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>Frida 是一个动态二进制插桩工具，可以在程序运行时向目标进程注入自定义的代码，修改程序的行为来获取信息。</p>
<h2 id="frida注入机制"><a href="#frida注入机制" class="headerlink" title="frida注入机制"></a>frida注入机制</h2><ul>
<li><p>Frida 主要通过 ptrace 系统调用实现注入</p>
</li>
<li><p>工作原理</p>
<ul>
<li><p>使用 ptrace attach 到目标进程</p>
</li>
<li><p>在目标进程中注入一个动态链接库（frida-agent.so）</p>
</li>
<li><p>通过修改进程内存和寄存器状态，实现代码执行</p>
</li>
<li><p>建立与注入进程的通信通道</p>
</li>
</ul>
</li>
<li><p>具体步骤</p>
<ol>
<li>使用 ptrace 附加到目标进程</li>
<li>暂停目标进程的执行</li>
<li>在目标进程中分配内存空间</li>
<li>写入 loader 代码</li>
<li>修改寄存器状态，使进程执行注入的代码</li>
<li>加载 frida-agent</li>
</ol>
</li>
<li><p>特点</p>
<ul>
<li><p>支持 Native 层和 Java 层的 hook</p>
</li>
<li><p>动态注入，不需要重启设备</p>
</li>
<li><p>跨平台支持（iOS、Android、Windows 等）</p>
</li>
<li><p>提供了强大的 JavaScript 脚本引擎</p>
</li>
<li><p>可以实时调试和修改</p>
</li>
</ul>
</li>
</ul>
<h2 id="注入进程的两种方式"><a href="#注入进程的两种方式" class="headerlink" title="注入进程的两种方式"></a>注入进程的两种方式</h2><h3 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h3><p>附加到已有进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">步骤1: 进程附加</span><br><span class="line">- 通过进程名或 PID 定位目标进程</span><br><span class="line">- 使用 ptrace(PTRACE_ATTACH) 附加到目标进程</span><br><span class="line">- waitpid() 等待进程暂停</span><br><span class="line"></span><br><span class="line">步骤2: 内存操作</span><br><span class="line">- 打开 /proc/[pid]/mem 获取进程内存访问权限</span><br><span class="line">- 使用 process_vm_writev 写入 frida-agent.so</span><br><span class="line">- 定位 libc.so 中的 dlopen 函数</span><br><span class="line"></span><br><span class="line">步骤3: 注入执行</span><br><span class="line">- 调用目标进程的 dlopen 加载 frida-agent.so</span><br><span class="line">- 初始化 agent 运行环境</span><br><span class="line">- 建立与 frida-server 的通信通道</span><br><span class="line"></span><br><span class="line">步骤4: 恢复执行</span><br><span class="line">- 恢复原始寄存器状态</span><br><span class="line">- ptrace(PTRACE_DETACH) 解除附加</span><br><span class="line">- 进程继续执行</span><br></pre></td></tr></table></figure>

<h3 id="spawn"><a href="#spawn" class="headerlink" title="spawn"></a>spawn</h3><p>创建进程，在进程初始化之前进行注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">步骤1: 创建进程</span><br><span class="line">- 使用 fork() 创建子进程</span><br><span class="line">- 子进程通过 execve() 加载目标程序</span><br><span class="line">- 进程创建后立即暂停</span><br><span class="line"></span><br><span class="line">步骤2: 早期注入</span><br><span class="line">- 在进程初始化之前注入</span><br><span class="line">- 写入 frida-agent.so</span><br><span class="line">- 设置必要的环境变量和参数</span><br><span class="line"></span><br><span class="line">步骤3: 设置 Hook</span><br><span class="line">- 准备 Hook 点</span><br><span class="line">- 设置断点</span><br><span class="line">- 配置监控函数</span><br><span class="line"></span><br><span class="line">步骤4: 启动执行</span><br><span class="line">- 恢复进程执行</span><br><span class="line">- 监控进程初始化</span><br><span class="line">- 捕获所有函数调用</span><br></pre></td></tr></table></figure>

<h2 id="Frida核心组件"><a href="#Frida核心组件" class="headerlink" title="Frida核心组件"></a>Frida核心组件</h2><h3 id="Frida-core（核心引擎）"><a href="#Frida-core（核心引擎）" class="headerlink" title="Frida-core（核心引擎）"></a>Frida-core（核心引擎）</h3><p><strong>功能职责</strong></p>
<ul>
<li><p>提供核心注入引擎</p>
</li>
<li><p>管理进程间通信</p>
</li>
<li><p>处理跨平台兼容</p>
</li>
<li><p>提供底层 API 接口</p>
</li>
</ul>
<p><strong>主要模块</strong></p>
<ul>
<li><p>gum：底层指令插桩引擎</p>
</li>
<li><p>gumjs：JavaScript 绑定层</p>
</li>
<li><p>gumpp：C++ 绑定层</p>
</li>
<li><p>内存管理模块</p>
</li>
<li><p>进程控制模块</p>
</li>
</ul>
<h3 id="Frida-server（服务端）"><a href="#Frida-server（服务端）" class="headerlink" title="Frida-server（服务端）"></a>Frida-server（服务端）</h3><p><strong>基本功能</strong></p>
<ul>
<li><p>运行在目标设备上</p>
</li>
<li><p>监听来自客户端的连接</p>
</li>
<li><p>执行进程注入操作</p>
</li>
<li><p>管理注入的 agents</p>
</li>
</ul>
<p><strong>工作流程</strong></p>
<pre><code>1. 启动并监听端口（默认 27042）
2. 接收客户端连接请求
3. 处理注入命令
4. 管理目标进程
5. 转发通信数据
</code></pre>
<h3 id="Frida-agent（注入模块）"><a href="#Frida-agent（注入模块）" class="headerlink" title="Frida-agent（注入模块）"></a>Frida-agent（注入模块）</h3><p><strong>核心功能</strong></p>
<ul>
<li><p>运行在目标进程内</p>
</li>
<li><p>执行 JavaScript 代码</p>
</li>
<li><p>提供 API 接口</p>
</li>
<li><p>处理 Hook 操作</p>
</li>
</ul>
<p><strong>主要组件</strong></p>
<ul>
<li>JavaScript 引擎</li>
<li>Native Bridge</li>
<li>Hook 引擎</li>
<li>内存操作接口</li>
</ul>
<p><strong>工作机制</strong></p>
<pre><code>1. 被注入到目标进程
2. 初始化 JavaScript 运行环境
3. 加载用户脚本
4. 执行 Hook 操作
5. 与 frida-server 通信
</code></pre>
<h3 id="Frida-client（客户端）"><a href="#Frida-client（客户端）" class="headerlink" title="Frida-client（客户端）"></a>Frida-client（客户端）</h3><p><strong>主要功能</strong></p>
<ul>
<li><p>连接 frida-server</p>
</li>
<li><p>发送控制命令</p>
</li>
<li><p>管理脚本执行</p>
</li>
<li><p>处理返回数据</p>
</li>
</ul>
<p><strong>工具集</strong></p>
<ul>
<li>frida-cli：交互式命令行</li>
<li>frida-ps：进程管理</li>
<li>frida-trace：函数追踪</li>
<li>frida-discover：API 发现</li>
</ul>
<h2 id="javahook"><a href="#javahook" class="headerlink" title="javahook"></a>javahook</h2><p>hook java要借助libart.so</p>
<p>frida hook java的时候会修改ArtMethod::PrettyMethod，在内存中检测该字段是否一致即可判断是否被hook了。</p>
<h2 id="inlinehook原理"><a href="#inlinehook原理" class="headerlink" title="inlinehook原理"></a>inlinehook原理</h2><p>Inline hook的核心思想是在目标函数的入口处覆盖写入跳转指令，将执行流程重定向到我们的hook处理函数。</p>
<p><strong>备份原始指令</strong></p>
<ul>
<li><p>在修改目标函数前，Frida会先保存目标函数开头的若干字节的原始指令</p>
</li>
<li><p>保存的长度必须足够放置一个跳转指令（比如x86上至少5字节，ARM上至少8字节）</p>
</li>
</ul>
<p><strong>覆盖写入跳转指令</strong></p>
<ul>
<li>在目标函数开头写入跳转指令(JMP&#x2F;B)，指向我们的hook处理函数</li>
</ul>
<p><img src="/2025/03/05/%E5%85%B3%E4%BA%8E%E9%9D%A2%E8%AF%95%E6%9D%82%E8%AE%B0/1.jpg"></p>
<h3 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h3><p>inline hook实现会修改.text段内容，crc32比较对比。</p>
<h1 id="Xp与Frida"><a href="#Xp与Frida" class="headerlink" title="Xp与Frida"></a>Xp与Frida</h1><h2 id="主要区别"><a href="#主要区别" class="headerlink" title="主要区别"></a>主要区别</h2><ul>
<li><p>注入时机：</p>
<ul>
<li><p>Xposed：系统启动时，通过修改 Zygote进行注入</p>
</li>
<li><p>Frida：运行时，通过 ptrace 动态注入</p>
</li>
</ul>
</li>
<li><p>作用范围：</p>
<ul>
<li><p>Xposed：全局性，影响所有应用</p>
</li>
<li><p>Frida：可以针对特定进程进行注入</p>
</li>
</ul>
</li>
<li><p>功能范围：</p>
<ul>
<li><p>Xposed：主要针对 Java 层</p>
</li>
<li><p>Frida：同时支持 Native 层和 Java 层</p>
</li>
</ul>
</li>
<li><p>使用场景：</p>
<ul>
<li><p>Xposed：适合需要持久化修改的场景</p>
</li>
<li><p>Frida：适合动态调试和分析的场景</p>
</li>
</ul>
</li>
</ul>
<h2 id="安全性考虑"><a href="#安全性考虑" class="headerlink" title="安全性考虑"></a>安全性考虑</h2><ul>
<li><p>Xposed 需要修改系统文件，风险较大</p>
</li>
<li><p>Frida 的 ptrace 注入可能被一些应用的反调试机制检测到</p>
</li>
<li><p>两种方式都可能被应用的完整性校验机制发现</p>
</li>
</ul>
<p>这两种注入技术各有优势，在实际应用中可以根据具体需求选择：</p>
<ul>
<li><p>如果需要持久化的系统级修改，选择 Xposed</p>
</li>
<li><p>如果需要灵活的动态分析和调试，选择 Frida</p>
</li>
</ul>
<h1 id="Android系统启动流程"><a href="#Android系统启动流程" class="headerlink" title="Android系统启动流程"></a>Android系统启动流程</h1><h1 id="App启动流程"><a href="#App启动流程" class="headerlink" title="App启动流程"></a>App启动流程</h1><h1 id="加解密"><a href="#加解密" class="headerlink" title="加解密"></a>加解密</h1><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><h1 id="混淆"><a href="#混淆" class="headerlink" title="混淆"></a>混淆</h1><h1 id="改机"><a href="#改机" class="headerlink" title="改机"></a>改机</h1><h2 id="改机ROM"><a href="#改机ROM" class="headerlink" title="改机ROM"></a>改机ROM</h2><p>一般都是定制ROM实现改机效果，但是改机操作一般需要借助manager app，一般检测这个为主，其次会配合大数据筛选系统中特定的文件，诸如framework、libc.so等md5值。</p>
<p>收集设备型号、品牌、android版本、内核版本、内核libc文件md5值，收集后交由后端做数据模型分析。</p>
<h2 id="软改机"><a href="#软改机" class="headerlink" title="软改机"></a>软改机</h2><p>一般是xposed插件Hook实现改机效果，所以检测xposed相关信息，以及相应的模块名，并且需要结合Java API返回值与native 获取相应值进行比对。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓开发</title>
    <url>/2025/01/06/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h1><p>新建一个项目，分析项目目录结构</p>
<p><img src="/2025/01/06/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/1.jpg"></p>
<p><strong>1.gradle和.idea</strong></p>
<p>这两个目录下放置的都是Android Studio 自动生成的一些文件，我们无需关心和编辑。</p>
<p><strong>2.app</strong></p>
<p>项目中的代码、资源等内容几乎都是放置在这个目录下的，我们后面的开发工作也都是在这个目录下进行的。</p>
<p><strong>3.gradle</strong></p>
<p>这个目录包含了gradle wrapper的配置文件。</p>
<h2 id="app目录"><a href="#app目录" class="headerlink" title="app目录"></a>app目录</h2><p><img src="/2025/01/06/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/2.jpg"></p>
<h3 id="build"><a href="#build" class="headerlink" title="build"></a><strong>build</strong></h3><p>包含编译时自动生成的文件。</p>
<h3 id="src"><a href="#src" class="headerlink" title="src"></a>src</h3><p>存放源代码。</p>
<h4 id="androidTest"><a href="#androidTest" class="headerlink" title="androidTest"></a>androidTest</h4><p>存放测试代码。</p>
<h4 id="main"><a href="#main" class="headerlink" title="main"></a>main</h4><p>存放应用核心代码和资源。</p>
<h5 id="java"><a href="#java" class="headerlink" title="java"></a>java</h5><p>放置java代码。</p>
<h5 id="res"><a href="#res" class="headerlink" title="res"></a>res</h5><p>存放资源文件，包括布局、图像、字符串等。</p>
<h5 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h5><p>这是整个Android项目的配置文件，在程序中定义的所有四大组件都需要在这个文件里注册，还可以在这个文件中添加权限声明。</p>
<h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><p>用来编写UnitTest测试用例的，是对项目及逆行自动化测试的另一种方式。</p>
<h4 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h4><p>app模块的gradle构建脚本，这个文件会指定很多项目构建相关的配置。</p>
<h1 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h1><p>Activity 是一种用户界面的组件，是 Android 应用的一个核心部分。每个 Activity 通常代表一个单独的屏幕或界面，用户与应用的互动通常发生在 Activity 中。</p>
<h2 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h2><p>在使用Android Studio创建项目的时候，它会自动帮我们创建MainActivity。<br>其内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    <span class="comment">//// 设置布局，接受一个布局文件的资源 ID，并将该布局文件作为当前活动的界面。</span></span><br><span class="line">    setContentView(R.layout.activity_main);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h2><p>布局文件定义了用户界面（UI）的结构和视图元素。</p>
<p>在res目录里有一个layout目录，展开后可以看到有一个activity_main.xml文件，其内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/main&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Hello World!&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Activity的注册"><a href="#Activity的注册" class="headerlink" title="Activity的注册"></a>Activity的注册</h2><p>所有的活动都要在AndroidManifest.xml文件中注册才能生效。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:dataExtractionRules</span>=<span class="string">&quot;@xml/data_extraction_rules&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fullBackupContent</span>=<span class="string">&quot;@xml/backup_rules&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme.HelloWorld&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:targetApi</span>=<span class="string">&quot;31&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>活动的注册声明在<code>&lt;application&gt;</code>标签内，通过<code>&lt;activity&gt;</code>标签来进行注册。<br>在<code>&lt;activity&gt;</code>标签中使用<code>android:name</code>指定具体注册的活动，这里<code>.MainActivity</code>是省略了包名。</p>
<h2 id="程序入口activity"><a href="#程序入口activity" class="headerlink" title="程序入口activity"></a>程序入口activity</h2><p>在程序的actitity中添加如下内容指定程序入口<code>activity</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>action</code>中的<code>.MAIN</code>动作用于启动一个应用程序的主界面。</p>
<p><code>category</code>中的<code>LAUNCHER</code>类别意味着这个活动应该在设备的应用程序启动器（应用抽屉）中显示一个图标，允许用户点击图标来启动应用程序。</p>
<h2 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h2><p>使用Intent可以从主活动跳转到其他活动。<br>Intent是Android程序中各组件之间进行交互的一种重要方式。</p>
<h3 id="显式-Intent"><a href="#显式-Intent" class="headerlink" title="显式 Intent"></a>显式 Intent</h3><p>显式 <code>Intent</code> 直接指定了目标组件，通常用于在应用内部启动 <code>Activity</code>、<code>Service</code> 或与之通信。</p>
<p>启动 <code>Activity</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">secondintent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, SecondActivity.class);</span><br><span class="line">startActivity(secondintent)</span><br></pre></td></tr></table></figure>

<h3 id="隐式-Intent"><a href="#隐式-Intent" class="headerlink" title="隐式 Intent"></a>隐式 Intent</h3><p>隐式 <code>Intent</code> 不直接指定目标组件，而是声明一个意图（通常是动作），然后由 Android 系统根据该动作来匹配适合的组件来处理 <code>Intent</code>。这种方式不需要明确指定目标组件，系统会根据设备上所有能够处理该动作的应用来选择合适的组件。</p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="/2025/01/06/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/3.jpg"></p>
<h3 id="四种状态"><a href="#四种状态" class="headerlink" title="四种状态"></a>四种状态</h3><ul>
<li><strong>运行状态</strong><br>  活动位于栈顶并在前台运行，用户可以与之交互。</li>
<li><strong>暂停状态</strong><br>  活动部分可见但未完全覆盖用户界面，它仍在前台但无法与用户交互。</li>
<li><strong>停止状态</strong><br>  活动完全不可见，已被其他活动完全覆盖。</li>
<li><strong>销毁状态</strong><br>  活动已被系统或用户完全移除，实例不再存在。</li>
</ul>
<h3 id="生命周期的回调方法"><a href="#生命周期的回调方法" class="headerlink" title="生命周期的回调方法"></a>生命周期的回调方法</h3><h4 id="onCreate"><a href="#onCreate" class="headerlink" title="onCreate()"></a>onCreate()</h4><p><strong>调用时机</strong>：当 <code>Activity</code> 被创建时，系统会调用此方法。此时 <code>Activity</code> 尚未显示在屏幕上。</p>
<h4 id="onStart"><a href="#onStart" class="headerlink" title="onStart()"></a>onStart()</h4><p><strong>调用时机</strong>：当 <code>Activity</code> 即将变得可见时，系统会调用此方法。这时 <code>Activity</code> 还没有与用户交互。</p>
<h4 id="onResume"><a href="#onResume" class="headerlink" title="onResume()"></a>onResume()</h4><p><strong>调用时机</strong>：当 <code>Activity</code> 准备好与用户交互时，系统会调用此方法，表示 <code>Activity</code> 已经位于前台并处于活动状态。</p>
<h4 id="onPause"><a href="#onPause" class="headerlink" title="onPause()"></a>onPause()</h4><p><strong>调用时机</strong>：当系统即将启动或恢复另一个 <code>Activity</code> 时，当前的 <code>Activity</code> 将被暂停。</p>
<h4 id="onStop"><a href="#onStop" class="headerlink" title="onStop()"></a>onStop()</h4><p><strong>调用时机</strong>：当 <code>Activity</code> 不再对用户可见时，系统会调用此方法。</p>
<h4 id="onRestart"><a href="#onRestart" class="headerlink" title="onRestart()"></a>onRestart()</h4><p><strong>调用时机</strong>：当 <code>Activity</code> 从停止状态恢复并重新变得可见时，系统会调用此方法。</p>
<h4 id="onDestroy"><a href="#onDestroy" class="headerlink" title="onDestroy()"></a>onDestroy()</h4><p><strong>调用时机</strong>：当 <code>Activity</code> 被销毁时（如 <code>finish()</code> 被调用、系统内存不足等），系统会调用此方法。</p>
<h2 id="启动模式"><a href="#启动模式" class="headerlink" title="启动模式"></a>启动模式</h2><p><code>Activity</code> 的启动模式决定了新的 <code>Activity</code> 如何在任务栈（task stack）中管理和显示。</p>
<h3 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h3><p>这是 <code>Activity</code> 默认的启动模式。每次启动一个新的 <code>Activity</code> 时，都会在任务栈的顶部创建一个新的 <code>Activity</code> 实例。</p>
<p>无论栈中是否已经有该 <code>Activity</code> 的实例，都会新建一个 <code>Activity</code> 实例并添加到栈中。</p>
<p>在standard模式下，每当启动一个新的<code>Activity</code>，它就会在返回栈中入栈，并处于栈顶的位置。</p>
<h3 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h3><p>如果任务栈的顶部已经有该 <code>Activity</code> 的实例，则不会再创建一个新的实例，而是复用栈顶的实例，调用 <code>onNewIntent()</code> 方法来处理新的 <code>Intent</code>。</p>
<p><strong>使用方式</strong>：在 <code>AndroidManifest.xml</code> 中配置 <code>launchMode</code> 为 <code>singleTop</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:launchMode</span>=<span class="string">&quot;singleTop&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果 <code>MainActivity</code> 已经在栈顶，则会复用现有实例，并通过 <code>onNewIntent()</code> 接收新的 <code>Intent</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onNewIntent</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onNewIntent(intent);</span><br><span class="line">    <span class="comment">// 处理新的 Intent</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h3><p>该模式下，<code>Activity</code> 会被启动为一个新的任务，并且栈中只能有该 <code>Activity</code> 的一个实例。即使栈中已经有该 <code>Activity</code> 的实例，也会先销毁栈中所有的 <code>Activity</code>，然后启动这个新的 <code>Activity</code>。</p>
<p><strong>使用方式</strong>： 在 <code>AndroidManifest.xml</code> 中配置 <code>launchMode</code> 为 <code>singleTask</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:launchMode</span>=<span class="string">&quot;singleTask&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h3><p>这是最严格的启动模式。系统会创建一个新的任务栈，并且栈中只能有该 <code>Activity</code> 的一个实例。即使有其他 <code>Activity</code> 启动该 <code>Activity</code>，也会使用独立的栈，不与其他任务栈共享。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:launchMode</span>=<span class="string">&quot;singleInstance&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h1><h2 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/textView&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;Hello, World!&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textColor</span>=<span class="string">&quot;#FF0000&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="EditText"><a href="#EditText" class="headerlink" title="EditText"></a>EditText</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/editText&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:hint</span>=<span class="string">&quot;input&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:inputType</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/imageView&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:src</span>=<span class="string">&quot;@drawable/image&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">WebView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/webView&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="Broadcast"><a href="#Broadcast" class="headerlink" title="Broadcast"></a>Broadcast</h1><p>广播（Broadcast）是一种消息传递机制，允许应用之间或应用内部的不同组件之间进行通信。</p>
<h2 id="广播的分类"><a href="#广播的分类" class="headerlink" title="广播的分类"></a>广播的分类</h2><h3 id="标准广播"><a href="#标准广播" class="headerlink" title="标准广播"></a>标准广播</h3><ul>
<li><p>是一种异步广播，所有接收者几乎在同一时间接收广播。</p>
</li>
<li><p>优点：效率高，因为广播是同时分发的。</p>
</li>
<li><p>缺点：接收器之间无法中断广播，无法保证接收顺序。</p>
</li>
</ul>
<h3 id="有序广播"><a href="#有序广播" class="headerlink" title="有序广播"></a>有序广播</h3><ul>
<li><p>是一种同步广播，按接收器的优先级依次接收广播。</p>
</li>
<li><p>每个接收器可以处理后终止广播的传递，或者修改广播内容。</p>
</li>
<li><p>优点：可控制广播的传播，并允许对广播进行修改。</p>
</li>
<li><p>缺点：效率较低，因为接收器按顺序逐个处理广播。</p>
</li>
</ul>
<h2 id="广播的类型"><a href="#广播的类型" class="headerlink" title="广播的类型"></a>广播的类型</h2><p><strong>系统广播</strong></p>
<p>安卓系统定义了一些广播来通知应用程序系统事件。</p>
<p><strong>自定义广播</strong></p>
<p>开发者可以发送自己定义的广播，用于应用内部或多个应用之间的通信。</p>
<h2 id="广播接收器"><a href="#广播接收器" class="headerlink" title="广播接收器"></a>广播接收器</h2><p>广播接收器可以通过两种方式注册：</p>
<h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>静态注册的广播接收器在应用未运行时也可以接收到广播。</p>
<h4 id="静态注册广播实现开机启动"><a href="#静态注册广播实现开机启动" class="headerlink" title="静态注册广播实现开机启动"></a>静态注册广播实现开机启动</h4><p>创建广播接收器，右键Java包-&gt;New-&gt;Other-&gt;Broadcast Reveiver</p>
<p><img src="/2025/01/06/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/4.jpg"></p>
<p>实现<code>onReceive</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BootCompleteReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">        Toast.makeText(context,<span class="string">&quot;Boot Complete!&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">        Log.d(<span class="string">&quot;Broadcast&quot;</span>,<span class="string">&quot;Boot Complete!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>AndroidManifest.xml</code>进行注册和添加权限</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 声明权限：允许应用接收设备启动完成后的广播 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    	<span class="attr">...</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">receiver</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.BootCompleteReceiver&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:enabled</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    		<span class="comment">&lt;!-- 定义接收器要监听的广播类型 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 接收系统广播：设备启动完成 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">        	<span class="attr">...</span></span></span><br><span class="line"><span class="tag">        &lt;/<span class="attr">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关闭设备，重新启动，就可以看到开机广播。</p>
<h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p>动态注册的广播只在应用运行时有效。</p>
<h4 id="动态注册广播监听网络变化"><a href="#动态注册广播监听网络变化" class="headerlink" title="动态注册广播监听网络变化"></a>动态注册广播监听网络变化</h4><p><strong>声明权限</strong></p>
<p>需要在 <code>AndroidManifest.xml</code> 文件中添加以下权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p><strong>定义广播接收器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NetworkReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">        <span class="type">ConnectivityManager</span> <span class="variable">connectivityManager</span> <span class="operator">=</span></span><br><span class="line">                (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line">        <span class="keyword">if</span>(connectivityManager!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">NetworkInfo</span> <span class="variable">activeNetwork</span> <span class="operator">=</span> connectivityManager.getActiveNetworkInfo();</span><br><span class="line">            <span class="keyword">if</span>(activeNetwork!=<span class="literal">null</span> &amp;&amp; activeNetwork.isConnected())&#123;</span><br><span class="line">                <span class="comment">// 网络已连接</span></span><br><span class="line">                <span class="keyword">if</span>(activeNetwork.getType()==ConnectivityManager.TYPE_WIFI)&#123;</span><br><span class="line">                    Toast.makeText(context, <span class="string">&quot;已连接 Wi-Fi&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (activeNetwork.getType()==ConnectivityManager.TYPE_MOBILE)&#123;</span><br><span class="line">                    Toast.makeText(context, <span class="string">&quot;已连接移动网络&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 网络断开</span></span><br><span class="line">                Toast.makeText(context, <span class="string">&quot;网络已断开&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>动态注册广播</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个广播接收器，用于监听网络状态变化</span></span><br><span class="line">    <span class="keyword">private</span> NetworkReceiver networkReceiver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        EdgeToEdge.enable(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置当前 Activity 的布局文件</span></span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建网络状态广播接收器实例</span></span><br><span class="line">        networkReceiver = <span class="keyword">new</span> <span class="title class_">NetworkReceiver</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 IntentFilter，指定接收的广播类型为网络连接状态变化</span></span><br><span class="line">        <span class="type">IntentFilter</span> <span class="variable">intentFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntentFilter</span>();</span><br><span class="line">        intentFilter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册广播接收器，将其绑定到网络状态变化的广播上</span></span><br><span class="line">        registerReceiver(networkReceiver, intentFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在 Activity 销毁时注销广播接收器，避免内存泄漏</span></span><br><span class="line">        unregisterReceiver(networkReceiver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在切换网络状态的时候就会看到广播效果。</p>
<h3 id="使用本地广播"><a href="#使用本地广播" class="headerlink" title="使用本地广播"></a>使用本地广播</h3><p><strong>定义广播接收器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理广播内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> intent.getStringExtra(<span class="string">&quot;message&quot;</span>);</span><br><span class="line">        Toast.makeText(context, <span class="string">&quot;LocalBroadcast: &quot;</span> + message, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发送和接收本地广播</p>
<p>添加一个按钮，通过按钮触发本地广播的发送</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> LocalBroadcastReceiver localBroadcastReceiver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> LocalBroadcastManager localBroadcastManager;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    EdgeToEdge.enable(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化广播接收器</span></span><br><span class="line">    localBroadcastReceiver = <span class="keyword">new</span> <span class="title class_">LocalBroadcastReceiver</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 IntentFilter，并设置要监听的 Action</span></span><br><span class="line">    <span class="type">IntentFilter</span> <span class="variable">intentFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntentFilter</span>();</span><br><span class="line">    intentFilter.addAction(<span class="string">&quot;com.example.helloworld.LOCAL_BROADCAST&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册本地广播接收器</span></span><br><span class="line">    localBroadcastManager = LocalBroadcastManager.getInstance(<span class="built_in">this</span>);</span><br><span class="line">    localBroadcastManager.registerReceiver(localBroadcastReceiver,intentFilter);</span><br><span class="line"></span><br><span class="line">    <span class="type">Button</span> <span class="variable">send_button</span> <span class="operator">=</span> findViewById(R.id.send_broadcast);</span><br><span class="line">    send_button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">            <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="string">&quot;com.example.helloworld.LOCAL_BROADCAST&quot;</span>);</span><br><span class="line">            intent.putExtra(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;This is a Broadcast message!&quot;</span>);</span><br><span class="line">            localBroadcastManager.sendBroadcast(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onDestroy();</span><br><span class="line">    <span class="comment">// 注销广播接收器，防止内存泄漏</span></span><br><span class="line">    unregisterReceiver(localBroadcastReceiver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击按钮，发送广播。</p>
]]></content>
      <categories>
        <category>安卓开发</category>
      </categories>
      <tags>
        <tag>安卓开发</tag>
      </tags>
  </entry>
  <entry>
    <title>小米手机线刷指南</title>
    <url>/2025/02/09/%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E7%BA%BF%E5%88%B7%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>线刷方式刷机会清除手机数据。</p>
<p>线刷需要手机已完成 BL 解锁，否则无法操作。</p>
<h1 id="解BL锁"><a href="#解BL锁" class="headerlink" title="解BL锁"></a>解BL锁</h1><p>在解锁前确认小米账号是否可以解锁（即每月最多解锁 1 台手机，每年最多 4 台，超过需要更换帐号）。</p>
<p>需要插入SIM卡。</p>
<h2 id="打开开发者模式"><a href="#打开开发者模式" class="headerlink" title="打开开发者模式"></a>打开开发者模式</h2><p>进入设置-&gt;我的设备-&gt;全部参数-&gt;连点”MIUI版本” 即可打开开发者模式</p>
<h2 id="OEM解锁"><a href="#OEM解锁" class="headerlink" title="OEM解锁"></a>OEM解锁</h2><p>进入设置-&gt;更多设置-&gt;开发者选项-&gt;勾选”OEM解锁”</p>
<h2 id="绑定账号和设备"><a href="#绑定账号和设备" class="headerlink" title="绑定账号和设备"></a>绑定账号和设备</h2><p>进入设置-&gt;更多设置-&gt;开发者选项-&gt;设备解锁状态-&gt;绑定账号和设备</p>
<h2 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h2><p>下载小米BL解锁工具，解压后运行<code>miflash.unlock.exe</code>程序，登录小米账号。</p>
<p><a href="https://www.miui.com/unlock/index.html">小米BL解锁工具</a></p>
<p>进入 Fastboot 模式，用数据线连接电脑，识别手机连接后，点击“解锁”按钮，稍等片刻就会看到 BL 解锁结果，然后重启手机，BL 解锁就完成了。</p>
<h1 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h1><p>设备预先保持充足的电量。</p>
<p>下载MIUI版本线刷包和MiFlash线刷工具。</p>
<p><a href="https://xiaomirom.com/">小米刷机包</a></p>
<p><a href="https://miuiver.com/miflash/">MiFlash 线刷工具下载合集</a></p>
<p>进入fastboot模式，用数据线连接电脑。</p>
<p>在线刷工具文件夹里找到 <code>XiaoMiFlash.exe</code> 双击运行，如果电脑没有驱动会提示安装，然后软件界面点击“选择”按钮，选中之前解压的线刷包文件夹（留意路径不要选错了，选择线刷包解压的根目录，也就是 <code>images</code> 上一级目录）。</p>
<p><img src="/2025/02/09/%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E7%BA%BF%E5%88%B7%E6%8C%87%E5%8D%97/1.jpg"></p>
<p>选择刷机模式</p>
<p><img src="/2025/02/09/%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E7%BA%BF%E5%88%B7%E6%8C%87%E5%8D%97/2.jpg"></p>
<p>点击“加载设备”，识别到手机设备后就可以点击刷机。刷机过程大约需时十几分钟，完成后手机会自动重启进入系统。</p>
<p><img src="/2025/02/09/%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E7%BA%BF%E5%88%B7%E6%8C%87%E5%8D%97/3.jpg"></p>
<h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><ul>
<li><p>如果出现Not catch checkpoint </p>
<p>  <img src="/2025/02/09/%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E7%BA%BF%E5%88%B7%E6%8C%87%E5%8D%97/4.jpg"></p>
<p>  导致这个问题的原因是，新版 MiFlash 在刷机完成后会检测手机是否已上 BL 锁。由于这个检查是在刷机完成后进行的，所以实际上对手机并没有影响，这是 MiFlash 本身的问题。</p>
<p>  <strong>解决办法</strong></p>
<p>  在菜单栏点击“Configuration”，点击“MiFlash Configuration”，在弹出窗口删除 CheckPoint 里的 <code>\$fastboot -s .*lock</code> 文本。</p>
<p>  <img src="/2025/02/09/%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E7%BA%BF%E5%88%B7%E6%8C%87%E5%8D%97/5.jpg"></p>
<p>  保持设置后再次刷机就不会遇到 <code>error:Not catch checkpoint (\$fastboot -s .*lock), flash is not done</code> 问题了。</p>
</li>
</ul>
<h1 id="root"><a href="#root" class="headerlink" title="root"></a>root</h1><p>在系统设置里打开开发者模式，然后找到开发者选项，勾选USB调试</p>
<p>打开刷机包，在<code>images</code>文件夹里找到<code>boot.img</code>文件</p>
<p>利用adb工具将其push到<code>/sdcard/Download</code>目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> adb push /sdcard/Download</span><br></pre></td></tr></table></figure>

<p>安装面具Magisk</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb install magisk.apk</span><br></pre></td></tr></table></figure>

<p>打开Magisk，找到Magisk的安装，点击选择并修补一个文件，找到<code>/sdcard/Download</code>目录下的<code>boot.img</code>文件，然后进行修补，修补完成后找到<code>/sdcard/Download</code>目录下生成的修补文件<code>magisk...xxx.img</code>，把它导出到电脑端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb pull /sdcard/Download/magisk...xxx.img</span><br></pre></td></tr></table></figure>

<p>然后进入fastboot模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure>

<p>把<code>magisk...xxx.img</code>镜像刷入到boot分区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot flash boot magisk...xxx.img</span><br></pre></td></tr></table></figure>

<p>然后重启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>刷机</category>
      </categories>
      <tags>
        <tag>小米手机线刷指南</tag>
      </tags>
  </entry>
  <entry>
    <title>唯品会设备注册及搜索接口逆向分析</title>
    <url>/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.achievo.vipshop</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/appdata.jpg"></p>
<h1 id="设备注册"><a href="#设备注册" class="headerlink" title="设备注册"></a>设备注册</h1><p>抓包找到有关设备注册的接口</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/device_reg.jpg" alt="device_reg"></p>
<p>测试一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;okhttp/4.9.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;authorization&quot;</span>:<span class="string">&quot;OAuth api_sign=fee2a0810c0b9637b6aa0f64b2d91f172dc4e397&quot;</span>,</span><br><span class="line">    <span class="string">&quot;accept-encoding&quot;</span>:<span class="string">&quot;gzip&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parameters = &#123;</span><br><span class="line">    <span class="string">&quot;app_name&quot;</span>:<span class="string">&quot;achievo_ad&quot;</span>,</span><br><span class="line">    <span class="string">&quot;app_version&quot;</span>:<span class="string">&quot;9.39.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;device_token&quot;</span>:<span class="string">&quot;b3aad8e2-2840-39a5-8b51-e5b1c5b16bad&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;warehouse&quot;</span>:<span class="string">&quot;VIP_HZ&quot;</span>,</span><br><span class="line">    <span class="string">&quot;manufacturer&quot;</span>:<span class="string">&quot;Google&quot;</span>,</span><br><span class="line">    <span class="string">&quot;device&quot;</span>:<span class="string">&quot;Pixel 3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;os_version&quot;</span>:<span class="string">&quot;28&quot;</span>,</span><br><span class="line">    <span class="string">&quot;channel&quot;</span>:<span class="string">&quot;yro8nr0d:::&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vipruid&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;regPlat&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;regid&quot;</span>:<span class="string">&quot;null&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rom&quot;</span>:<span class="string">&quot;Dalvik/2.1.0 (Linux; U; Android 9; Pixel 3 Build/PD1A.180720.030)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;skey&quot;</span>:<span class="string">&quot;6692c461c3810ab150c9a980d0c275ec&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://mp.appvipshop.com/apns/device_reg&quot;</span></span><br><span class="line">response = requests.get(url,headers=headers,params=parameters)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">200</span></span><br><span class="line">&#123;<span class="string">&quot;result&quot;</span>:<span class="string">&quot;ok&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;注册成功&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>参数中<code>device_token</code>是变动的，对其进行逆向</p>
<p>反编译app搜索<code>device_token</code></p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/device_token.jpg" alt="device_token"></p>
<h2 id="of"><a href="#of" class="headerlink" title="of"></a>of</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/of.jpg" alt="device_token"></p>
<h2 id="l"><a href="#l" class="headerlink" title="l"></a>l</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/l.jpg" alt="device_token"></p>
<h2 id="a"><a href="#a" class="headerlink" title="a"></a>a</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/a.jpg" alt="device_token"></p>
<h2 id="getMid"><a href="#getMid" class="headerlink" title="getMid"></a>getMid</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/getMid.jpg" alt="device_token"></p>
<p>MidProvider是一个接口，Injector是静态内部类，MidProvider接口定义两个方法<code>String getMid()</code>和<code>String getMidOnly()</code></p>
<h2 id="找MidProvider接口的实现类"><a href="#找MidProvider接口的实现类" class="headerlink" title="找MidProvider接口的实现类"></a>找MidProvider接口的实现类</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/vipmidmanager.jpg" alt="device_token"></p>
<h2 id="VipMidManager"><a href="#VipMidManager" class="headerlink" title="VipMidManager"></a>VipMidManager</h2><p>在vipMidManager类里面找getMid方法，发现jadx并不能反编译这个函数，使用jeb反编译。</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/19.jpg" alt="device_token"></p>
<p>这个方法的解析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getMid()方法根据一些条件生成或获取一个 MID，应该是设备唯一标识符。</span><br><span class="line">stringBuilder0用于构建字符串</span><br><span class="line">application0是当前应用的 Application 实例</span><br><span class="line">s为从 SharedPreferences（应用的配置文件）中获取键为 &quot;VIPS_MID&quot; 的值，假设这个值表示设备的唯一标识符。</span><br><span class="line">判断s是否有效，如果无效，设置 stringBuilder0 为 null，创建一个新的 StringBuilder对象，构造日志信息。</span><br><span class="line">调用 DeviceUuidFactory.getDeviceUuid(application0) 获取设备的唯一标识符（UUID）</span><br><span class="line">将 s 设置为 UUID 的字符串形式，并记录日志信息 | create by androidId。</span><br><span class="line">生成新的 MID：</span><br><span class="line">生成一个新的随机 UUID 并将其赋值给 s ， 同时更新日志，记录生成方式为 | create by uuid。</span><br></pre></td></tr></table></figure>

<h2 id="生成uuid"><a href="#生成uuid" class="headerlink" title="生成uuid"></a>生成uuid</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">random_uuid = uuid.uuid4()</span><br><span class="line"><span class="built_in">print</span>(random_uuid)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">85acb30b-3b28-<span class="number">4975</span>-b8cd-2bb53f08b472</span><br></pre></td></tr></table></figure>

<h2 id="设备注册逆向"><a href="#设备注册逆向" class="headerlink" title="设备注册逆向"></a>设备注册逆向</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">device_token = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;okhttp/4.9.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;authorization&quot;</span>:<span class="string">&quot;OAuth api_sign=fee2a0810c0b9637b6aa0f64b2d91f172dc4e397&quot;</span>,</span><br><span class="line">    <span class="string">&quot;accept-encoding&quot;</span>:<span class="string">&quot;gzip&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parameters = &#123;</span><br><span class="line">    <span class="string">&quot;app_name&quot;</span>:<span class="string">&quot;achievo_ad&quot;</span>,</span><br><span class="line">    <span class="string">&quot;app_version&quot;</span>:<span class="string">&quot;9.39.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;device_token&quot;</span>:device_token,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;warehouse&quot;</span>:<span class="string">&quot;VIP_HZ&quot;</span>,</span><br><span class="line">    <span class="string">&quot;manufacturer&quot;</span>:<span class="string">&quot;Google&quot;</span>,</span><br><span class="line">    <span class="string">&quot;device&quot;</span>:<span class="string">&quot;Pixel 3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;os_version&quot;</span>:<span class="string">&quot;28&quot;</span>,</span><br><span class="line">    <span class="string">&quot;channel&quot;</span>:<span class="string">&quot;yro8nr0d:::&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vipruid&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;regPlat&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;regid&quot;</span>:<span class="string">&quot;null&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rom&quot;</span>:<span class="string">&quot;Dalvik/2.1.0 (Linux; U; Android 9; Pixel 3 Build/PD1A.180720.030)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;skey&quot;</span>:<span class="string">&quot;6692c461c3810ab150c9a980d0c275ec&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://mp.appvipshop.com/apns/device_reg&quot;</span></span><br><span class="line">response = requests.get(url,headers=headers,params=parameters)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">200</span></span><br><span class="line">&#123;<span class="string">&quot;result&quot;</span>:<span class="string">&quot;ok&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;注册成功&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h1 id="参数api-sign"><a href="#参数api-sign" class="headerlink" title="参数api_sign"></a>参数api_sign</h1><p>分析数据包，找到Authorization参数的api_sign</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20241217095807281.png" alt="image-20241217095807281"></p>
<h1 id="jadx反编译"><a href="#jadx反编译" class="headerlink" title="jadx反编译"></a>jadx反编译</h1><p>文本搜索api_sign</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/Snipaste_2024-12-17_10-06-59.jpg" alt="Snipaste_2024-12-17_10-06-59"></p>
<p>追踪函数</p>
<h2 id="getApiSign"><a href="#getApiSign" class="headerlink" title="getApiSign"></a>getApiSign</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/getapisign.jpg" alt="getapisign"></p>
<p>分析，<code>getApiSign</code> 函数用于为网络请求生成包含 API 签名的授权头。</p>
<p>猜测<code>VCSPCommonsConfig.getIAppInfo().getUserTokenSecret()</code> 的作用是从应用程序的配置中获取当前用户的令牌密钥，该密钥通常用于生成 API 签名或进行身份验证。</p>
<h2 id="apisign"><a href="#apisign" class="headerlink" title="apisign"></a>apisign</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/apisign.jpg" alt="apisign"></p>
<p>调用 <code>VCSPSecurityConfig.getMapParamsSign(context, treeMap, str, false)</code> 方法生成签名</p>
<h3 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">VCSPSecurityBasicService</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.vip.vcsp.security.api.VCSPSecurityBasicService&quot;</span>);</span><br><span class="line">        <span class="title class_">VCSPSecurityBasicService</span>[<span class="string">&quot;apiSign&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">context, treeMap, str</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`VCSPSecurityBasicService.apiSign is called!`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;context:&quot;</span>,context);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;treeMap:&quot;</span>,treeMap);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str:&quot;</span>,str);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;apiSign&quot;</span>](context, treeMap, str);                                  </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`VCSPSecurityBasicService.apiSign result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_function</span>()</span><br></pre></td></tr></table></figure>

<h3 id="hook结果"><a href="#hook结果" class="headerlink" title="hook结果"></a>hook结果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VCSPSecurityBasicService.apiSign is called!</span><br><span class="line">context: com.achievo.vipshop.common.VipApplicationLike@41bfc24</span><br><span class="line">treeMap: &#123;activity=null, activity_endtime=null, activity_id=7660011, activity_param=&#123;&quot;page_info&quot;:&#123;&quot;source_from&quot;:&#123;&quot;ffp&quot;:&quot;-99&quot;,&quot;s&quot;:&quot;9&quot;,&quot;fp&quot;:&#123;&quot;ot&quot;:&quot;23&quot;,&quot;chi&quot;:&quot;1024&quot;,&quot;f&quot;:&quot;1&quot;,&quot;tsf&quot;:&quot;0&quot;,&quot;pi&quot;:&quot;20180930001&quot;,&quot;page&quot;:&quot;page_channel&quot;,&quot;cn&quot;:&quot;推荐&quot;&#125;,&quot;tp&quot;:&#123;&quot;pi&quot;:&quot;裤子男款&quot;,&quot;page&quot;:&quot;page_te_commodity_search&quot;&#125;,&quot;sp&quot;:&#123;&quot;ot&quot;:&quot;s93&quot;,&quot;of&quot;:&quot;sf1&quot;,&quot;oi&quot;:&quot;裤子男款&quot;,&quot;page&quot;:&quot;page_te_globle_classify_search&quot;&#125;&#125;,&quot;page_id&quot;:&quot;page_commodity_detail_1734423751094&quot;,&quot;page_propety&quot;:&#123;&quot;sale_id&quot;:&quot;1711235467&quot;,&quot;detailStatus&quot;:&quot;0&quot;,&quot;goods_rank&quot;:&quot;1&quot;,&quot;banStatus&quot;:&quot;-99&quot;,&quot;mr&quot;:&quot;-6017890654677737204&quot;,&quot;scene_entry_id&quot;:&quot;-99&quot;,&quot;refer_page_id&quot;:&quot;page_te_commodity_search_1734423543145&quot;,&quot;goods_id&quot;:&quot;6921055391784126923&quot;,&quot;isPreSale&quot;:&quot;0&quot;,&quot;store&quot;:&quot;0&quot;,&quot;type&quot;:&quot;-99&quot;,&quot;direct_buy&quot;:&quot;-99&quot;,&quot;brand_id&quot;:&quot;1711235467&quot;,&quot;has_color&quot;:&quot;1&quot;,&quot;isBgToFront&quot;:&quot;0&quot;,&quot;buy_mode_scene&quot;:&quot;-99&quot;,&quot;module_name&quot;:&quot;com.achievo.vipshop.productdetail&quot;,&quot;with_image&quot;:&quot;0&quot;,&quot;sr&quot;:&quot;-6017890015095286044&quot;,&quot;is_back_page&quot;:&quot;0&quot;&#125;,&quot;page&quot;:&quot;page_commodity_detail&quot;&#125;,&quot;biz_data&quot;:&#123;&quot;sequence&quot;:&quot;-99&quot;,&quot;target_type&quot;:&quot;1&quot;,&quot;target_id&quot;:&quot;9e8b047b52d0&quot;&#125;&#125;, activity_propety=null, activity_starttime=1734423752401, app_name=shop_android, app_version=9.39.4, channel=1, deeplink_cps=, face_flag=0_1, fdc_area_id=104101113, local_time=1734423856870, location=104101, mid=b3aad8e2-2840-39a5-8b51-e5b1c5b16bad, other_cps=, page_id=page_commodity_detail_1734423751094, repeat=0, service=mobile.activityinfo.logger, session_id=b3aad8e2-2840-39a5-8b51-e5b1c5b16bad_shop_android_1734423526867, skey=6692c461c3810ab150c9a980d0c275ec, status=, status_descrit=null, user_class=A1, user_group=20460_【23年新客首页】安卓-5.23-[快应用-独立首页]-[顶部导航-测试-18], user_label=3105,310505, userid=null, vipruid=null, warehouse=VIP_HZ&#125;</span><br><span class="line">str: null</span><br><span class="line">VCSPSecurityBasicService.apiSign result=2ba1c5746ce498722dc8eb444f7170ef7319f848</span><br></pre></td></tr></table></figure>



<h2 id="getMapParamsSign"><a href="#getMapParamsSign" class="headerlink" title="getMapParamsSign"></a>getMapParamsSign</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/getMapParamsSign.jpg" alt="getMapParamsSign"></p>
<p><code>getMapParamsSign</code> 函数用于生成 API 请求的签名</p>
<p>调用 <code>getSignHash(context, treeMap, str2, z10)</code> 方法，生成签名并返回。</p>
<h2 id="getSignHash"><a href="#getSignHash" class="headerlink" title="getSignHash"></a>getSignHash</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/getSignHash.jpg" alt="getSignHash"></p>
<p>调用 <code>gs(context.getApplicationContext(), map, str, z10)</code> 来生成签名哈希值。</p>
<h2 id="gs"><a href="#gs" class="headerlink" title="gs"></a>gs</h2><p>这里jadx不能正常反编译gs函数，使用jeb进行反编译</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/gs.jpg" alt="gs"></p>
<p>调用 <code>VCSPSecurityConfig.initInstance()</code> 方法进行初始化。</p>
<p>通过反射获取 <code>clazz</code> 对应的类中名为 <code>&quot;gs&quot;</code> 的方法，该方法接受 <code>Context</code>、<code>Map</code>、<code>String</code> 和 <code>boolean</code> 类型的参数。</p>
<p>使用反射调用获取到的 <code>gsMethod</code> 方法，传入参数 <code>context0</code>、<code>map0</code>、<code>s</code> 和 <code>z</code>，并将结果转换为 <code>String</code> 类型返回。</p>
<h2 id="initInstance"><a href="#initInstance" class="headerlink" title="initInstance"></a>initInstance</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/instance.jpg"></p>
<p>初始化 <code>VCSPSecurityConfig</code> 类的静态成员 <code>clazz</code> 和 <code>object</code>。</p>
<p><strong><code>clazz = KeyInfo.class</code></strong></p>
<h2 id="KeyInfo-gs"><a href="#KeyInfo-gs" class="headerlink" title="KeyInfo.gs"></a>KeyInfo.gs</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">gs</span><span class="params">(Context context, Map&lt;String, String&gt; map, String str, <span class="type">boolean</span> z10)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> gsNav(context, map, str, z10);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable th2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;KI gs: &quot;</span> + th2.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable unused) &#123;</span><br><span class="line">        SoLoader.load(context, LibName);</span><br><span class="line">        <span class="keyword">return</span> gsNav(context, map, str, z10);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用 <code>gsNav(context, map, str, z10)</code> 来生成签名。</p>
<h2 id="gsNav"><a href="#gsNav" class="headerlink" title="gsNav"></a>gsNav</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">gsNav</span><span class="params">(Context context, Map&lt;String, String&gt; map, String str, <span class="type">boolean</span> z10)</span>;</span><br></pre></td></tr></table></figure>

<p>这是一个native方法</p>
<h2 id="so"><a href="#so" class="headerlink" title="so"></a>so</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;keyinfo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Throwable throwable0) &#123;</span><br><span class="line">        throwable0.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="hook-gsNav"><a href="#hook-gsNav" class="headerlink" title="hook gsNav"></a>hook gsNav</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printMap</span>(<span class="params">param_map</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">HashMap</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.TreeMap&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> arg_map = <span class="title class_">Java</span>.<span class="title function_">cast</span>(param_map,<span class="title class_">HashMap</span>);</span><br><span class="line">    <span class="keyword">return</span> arg_map.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_gsNav</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">KeyInfo</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.vip.vcsp.KeyInfo&quot;</span>);</span><br><span class="line">        <span class="title class_">KeyInfo</span>[<span class="string">&quot;gsNav&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">context, map, str, z10</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----hooked gsNav----&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`KeyInfo.gsNav is called: context=<span class="subst">$&#123;context&#125;</span>, map=<span class="subst">$&#123;map&#125;</span>, str=<span class="subst">$&#123;str&#125;</span>, z10=<span class="subst">$&#123;z10&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;gsNav map:&quot;</span>,<span class="title function_">printMap</span>(map))</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;gsNav&quot;</span>](context, map, str, z10);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`KeyInfo.gsNav result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----hooked over!----&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_gsNav</span>()</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----hooked gsNav----</span><br><span class="line">KeyInfo.gsNav is called: context=com.achievo.vipshop.common.VipApplicationLike@478a323, map=[object Object], str=null, z10=false</span><br><span class="line">gsNav map: &#123;activity=lightart_click, activity_endtime=null, activity_propety=&#123;&quot;obj_data&quot;:&quot;sub_sn=1&amp;id=2085883&amp;code=10052420&amp;slotId=4&amp;source=pcmp&amp;slot_type=84&quot;,&quot;hole_type&quot;:&quot;pcmp&quot;,&quot;obj_id&quot;:&quot;336&quot;,&quot;unique_id&quot;:&quot;10052420:7:2085883&quot;,&quot;content_id&quot;:&quot;mst_100056642&quot;,&quot;content_sn&quot;:&quot;1&quot;,&quot;mr&quot;:&quot;-6009657029902736963&quot;,&quot;hole_id&quot;:&quot;2085883&quot;,&quot;operation_code&quot;:&quot;10052420&quot;,&quot;biz_data&quot;:&quot;tt=url&amp;ti=mst_100056642&quot;,&quot;obj_location&quot;:&quot;3:&quot;,&quot;content_type&quot;:&quot;mst&quot;,&quot;ext_data&quot;:&quot;code=10052420&amp;layout_id=52921&amp;slotType=84&amp;slotAbtestId=4218&amp;goodsId=6920749529361397578&amp;floorId=2085883&amp;slotPoolId=53109357&amp;m_name=AA%E7%89%88C%E4%BD%8D&amp;material=108&amp;brandSn=10000542&amp;product_id=6920749529361397578&amp;recommendImageId=f70c02f25aa57695679&amp;menu_code=20180930001&amp;slotId=4&amp;nodeId=1&quot;,&quot;obj_type&quot;:&quot;5&quot;,&quot;page&quot;:&quot;page_channel&quot;,&quot;cache_data&quot;:&quot;0&quot;&#125;, activity_starttime=1734846844455, app_name=shop_android, app_version=9.39.4, channel=1, deeplink_cps=, face_flag=0_1, fdc_area_id=104101113, local_time=1734846955236, location=104101, mid=b3aad8e2-2840-39a5-8b51-e5b1c5b16bad, other_cps=, page_id=page_channel_1734846541245, repeat=0, service=mobile.activityinfo.logger, session_id=b3aad8e2-2840-39a5-8b51-e5b1c5b16bad_shop_android_1734845336928, skey=6692c461c3810ab150c9a980d0c275ec, status=, status_descrit=null, user_class=A1, user_group=20460_【23年新客首页】安卓-5.23-[快应用-独立首页]-[顶部导航-测试-18], user_label=3105,310505, userid=null, vipruid=null, warehouse=VIP_HZ&#125;</span><br><span class="line">KeyInfo.gsNav result=0aff60c1b478fdafc0ea9700cdd80d1ae4c46f7d</span><br><span class="line">----hooked over!----</span><br></pre></td></tr></table></figure>

<h1 id="分析so"><a href="#分析so" class="headerlink" title="分析so"></a>分析so</h1><p>导出函数中找gsNav</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/exports.jpg"></p>
<h2 id="Java-com-vip-vcsp-KeyInfo-gsNav"><a href="#Java-com-vip-vcsp-KeyInfo-gsNav" class="headerlink" title="Java_com_vip_vcsp_KeyInfo_gsNav"></a>Java_com_vip_vcsp_KeyInfo_gsNav</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">Java_com_vip_vcsp_KeyInfo_gsNav</span><span class="params">(</span></span><br><span class="line"><span class="params">        __int64 a1,</span></span><br><span class="line"><span class="params">        __int64 a2,</span></span><br><span class="line"><span class="params">        __int64 a3,</span></span><br><span class="line"><span class="params">        __int64 a4,</span></span><br><span class="line"><span class="params">        __int64 a5,</span></span><br><span class="line"><span class="params">        <span class="type">unsigned</span> <span class="type">int</span> a6)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v11; <span class="comment">// x20</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)Utils_ima(a1, a2, a3) )</span><br><span class="line">    v11 = Functions_gs(a1, a2, a4, a5, a6);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v11 = <span class="number">0LL</span>;</span><br><span class="line">  Utils_checkJniException(a1);</span><br><span class="line">  <span class="keyword">return</span> v11;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Functions-gs"><a href="#Functions-gs" class="headerlink" title="Functions_gs"></a>Functions_gs</h2><p>关键代码</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/functions_gs.jpg"></p>
<h2 id="getByteHash"><a href="#getByteHash" class="headerlink" title="getByteHash"></a>getByteHash</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *__fastcall <span class="title function_">getByteHash</span><span class="params">(JNIEnv *a1, jobject a2, __int64 a3, <span class="type">unsigned</span> <span class="type">int</span> a4, <span class="type">char</span> *a5)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 i; <span class="comment">// x20</span></span><br><span class="line">  _OWORD v10[<span class="number">4</span>]; <span class="comment">// [xsp+0h] [xbp-E0h] BYREF</span></span><br><span class="line">  _BYTE v11[<span class="number">104</span>]; <span class="comment">// [xsp+40h] [xbp-A0h] BYREF</span></span><br><span class="line">  __int64 v12; <span class="comment">// [xsp+A8h] [xbp-38h]</span></span><br><span class="line"></span><br><span class="line">  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(<span class="number">3</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">2</span>)) + <span class="number">40</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !a3 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  SHA1Reset(v11);</span><br><span class="line">  SHA1Input(v11, a3, a4);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)SHA1Result(v11) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i != <span class="number">20</span>; i += <span class="number">4LL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">memset</span>(v10, <span class="number">0</span>, <span class="keyword">sizeof</span>(v10));</span><br><span class="line">      sub_F2328(v10);</span><br><span class="line">      <span class="built_in">strcat</span>(a5, (<span class="type">const</span> <span class="type">char</span> *)v10);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里看出这是SHA1算法</p>
<h2 id="hook-getByteHash"><a href="#hook-getByteHash" class="headerlink" title="hook getByteHash"></a>hook getByteHash</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_native</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> soAddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libkeyinfo.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> functionaddr = soAddr.<span class="title function_">add</span>(<span class="number">0xF2260</span>)</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(functionaddr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg2&quot;</span>,<span class="title function_">hexdump</span>(args[<span class="number">2</span>],&#123;length : args[<span class="number">3</span>].<span class="title function_">toInt32</span>()&#125;));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg3&quot;</span>,args[<span class="number">3</span>]);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg4&quot;</span>,<span class="title function_">hexdump</span>(args[<span class="number">4</span>]));</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret:&quot;</span>,<span class="title function_">hexdump</span>(ret))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_native</span>()</span><br></pre></td></tr></table></figure>

<h3 id="示例一个hook结果"><a href="#示例一个hook结果" class="headerlink" title="示例一个hook结果"></a>示例一个hook结果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arg2              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">71fb5bdf50  61 65 65 34 63 34 32 35 64 62 62 32 32 38 38 62  aee4c425dbb2288b</span><br><span class="line">71fb5bdf60  38 30 63 37 31 33 34 37 63 63 33 37 64 30 34 62  80c71347cc37d04b</span><br><span class="line">71fb5bdf70  65 66 66 63 38 31 33 35 31 39 36 61 63 30 35 64  effc8135196ac05d</span><br><span class="line">71fb5bdf80  63 64 36 39 64 35 36 39 32 66 32 31 37 34 33 33  cd69d5692f217433</span><br><span class="line">71fb5bdf90  30 39 62 31 38 62 36 63                          09b18b6c</span><br><span class="line">arg3 0x48</span><br><span class="line">arg4              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">71fb5be050  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">71fb5be060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">71fb5be070  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">71fb5be080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">71fb5be090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">71fb5be0a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">71fb5be050  36 61 38 35 66 30 38 65 35 37 66 37 30 38 35 38  6a85f08e57f70858</span><br><span class="line">71fb5be060  33 35 37 32 35 33 61 37 32 34 34 62 33 32 63 65  357253a7244b32ce</span><br><span class="line">71fb5be070  62 36 33 39 62 62 66 39 00 00 00 00 00 00 00 00  b639bbf9........</span><br><span class="line">71fb5be080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">71fb5be090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br></pre></td></tr></table></figure>

<p>如下验证了这是一个标准的SHA1算法</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/tttt.jpg" alt="tttt"></p>
<h3 id="升级一下脚本继续hook"><a href="#升级一下脚本继续hook" class="headerlink" title="升级一下脚本继续hook"></a>升级一下脚本继续hook</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_native</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> soAddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libkeyinfo.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> functionaddr = soAddr.<span class="title function_">add</span>(<span class="number">0xF2260</span>)  </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(functionaddr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----hooked getByteHash----&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg2:&quot;</span>,<span class="title function_">hexdump</span>(args[<span class="number">2</span>],&#123;length : args[<span class="number">3</span>].<span class="title function_">toInt32</span>()&#125;));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg3:&quot;</span>,args[<span class="number">3</span>]);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg4:&quot;</span>,<span class="title function_">hexdump</span>(args[<span class="number">4</span>]));</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg2</span> = args[<span class="number">2</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg3</span> = args[<span class="number">3</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg4</span> = args[<span class="number">4</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret_arg2:&quot;</span>,<span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg2</span>,&#123;length : <span class="variable language_">this</span>.<span class="property">arg3</span>.<span class="title function_">toInt32</span>()&#125;));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret_arg3:&quot;</span>,<span class="variable language_">this</span>.<span class="property">arg3</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret_arg4:&quot;</span>,<span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg4</span>));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret:&quot;</span>,<span class="title function_">hexdump</span>(ret));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----hooked over!----&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_native</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----hooked getByteHash----</span><br><span class="line">arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">724c411400  61 65 65 34 63 34 32 35 64 62 62 32 32 38 38 62  aee4c425dbb2288b</span><br><span class="line">724c411410  38 30 63 37 31 33 34 37 63 63 33 37 64 30 34 62  80c71347cc37d04b</span><br><span class="line">724c411420  61 63 74 69 76 69 74 79 3d 61 63 74 69 76 65 5f  activity=active_</span><br><span class="line">724c411430  74 65 5f 64 79 6e 61 6d 69 63 5f 72 65 73 26 61  te_dynamic_res&amp;a</span><br><span class="line">724c411440  63 74 69 76 69 74 79 5f 65 6e 64 74 69 6d 65 3d  ctivity_endtime=</span><br><span class="line">724c411450  6e 75 6c 6c 26 61 63 74 69 76 69 74 79 5f 70 72  null&amp;activity_pr</span><br><span class="line">724c411460  6f 70 65 74 79 3d 7b 22 61 63 74 69 76 69 74 79  opety=&#123;&quot;activity</span><br><span class="line">724c411470  5f 6e 61 6d 65 22 3a 22 22 2c 22 64 65 70 65 6e  _name&quot;:&quot;&quot;,&quot;depen</span><br><span class="line">724c411480  64 5f 73 74 61 74 75 73 22 3a 2d 31 2c 22 6d 6f  d_status&quot;:-1,&quot;mo</span><br><span class="line">724c411490  64 75 6c 65 22 3a 22 73 6d 61 72 74 52 6f 75 74  dule&quot;:&quot;smartRout</span><br><span class="line">724c4114a0  65 22 2c 22 6d 61 74 63 68 22 3a 31 2c 22 69 73  e&quot;,&quot;match&quot;:1,&quot;is</span><br><span class="line">724c4114b0  5f 64 65 62 75 67 22 3a 22 30 22 2c 22 61 70 6b  _debug&quot;:&quot;0&quot;,&quot;apk</span><br><span class="line">724c4114c0  5f 74 79 70 65 22 3a 22 31 22 2c 22 73 63 65 6e  _type&quot;:&quot;1&quot;,&quot;scen</span><br><span class="line">724c4114d0  65 22 3a 22 61 70 69 22 2c 22 69 73 5f 6d 61 69  e&quot;:&quot;api&quot;,&quot;is_mai</span><br><span class="line">724c4114e0  6e 5f 70 72 6f 63 65 73 73 22 3a 31 2c 22 66 61  n_process&quot;:1,&quot;fa</span><br><span class="line">724c4114f0  69 6c 5f 62 61 63 6b 22 3a 30 2c 22 65 76 65 6e  il_back&quot;:0,&quot;even</span><br><span class="line">724c411500  74 5f 69 64 22 3a 30 2c 22 68 61 73 5f 6d 6f 64  t_id&quot;:0,&quot;has_mod</span><br><span class="line">724c411510  75 6c 65 22 3a 30 2c 22 72 65 6d 6f 76 65 5f 73  ule&quot;:0,&quot;remove_s</span><br><span class="line">724c411520  6f 22 3a 22 30 22 2c 22 61 63 74 69 6f 6e 22 3a  o&quot;:&quot;0&quot;,&quot;action&quot;:</span><br><span class="line">724c411530  22 72 65 73 5f 73 63 65 6e 65 22 2c 22 73 74 61  &quot;res_scene&quot;,&quot;sta</span><br><span class="line">724c411540  74 75 73 22 3a 30 7d 26 61 63 74 69 76 69 74 79  tus&quot;:0&#125;&amp;activity</span><br><span class="line">724c411550  5f 73 74 61 72 74 74 69 6d 65 3d 31 37 33 34 38  _starttime=17348</span><br><span class="line">724c411560  34 37 33 37 31 36 36 38 26 61 70 70 5f 6e 61 6d  47371668&amp;app_nam</span><br><span class="line">724c411570  65 3d 73 68 6f 70 5f 61 6e 64 72 6f 69 64 26 61  e=shop_android&amp;a</span><br><span class="line">724c411580  70 70 5f 76 65 72 73 69 6f 6e 3d 39 2e 33 39 2e  pp_version=9.39.</span><br><span class="line">724c411590  34 26 63 68 61 6e 6e 65 6c 3d 31 26 64 65 65 70  4&amp;channel=1&amp;deep</span><br><span class="line">724c4115a0  6c 69 6e 6b 5f 63 70 73 3d 26 66 61 63 65 5f 66  link_cps=&amp;face_f</span><br><span class="line">724c4115b0  6c 61 67 3d 30 5f 31 26 66 64 63 5f 61 72 65 61  lag=0_1&amp;fdc_area</span><br><span class="line">724c4115c0  5f 69 64 3d 31 30 34 31 30 31 31 31 33 26 6c 6f  _id=104101113&amp;lo</span><br><span class="line">724c4115d0  63 61 6c 5f 74 69 6d 65 3d 31 37 33 34 38 34 37  cal_time=1734847</span><br><span class="line">724c4115e0  33 37 31 36 36 38 26 6c 6f 63 61 74 69 6f 6e 3d  371668&amp;location=</span><br><span class="line">724c4115f0  31 30 34 31 30 31 26 6d 69 64 3d 62 33 61 61 64  104101&amp;mid=b3aad</span><br><span class="line">724c411600  38 65 32 2d 32 38 34 30 2d 33 39 61 35 2d 38 62  8e2-2840-39a5-8b</span><br><span class="line">724c411610  35 31 2d 65 35 62 31 63 35 62 31 36 62 61 64 26  51-e5b1c5b16bad&amp;</span><br><span class="line">724c411620  6f 74 68 65 72 5f 63 70 73 3d 26 70 61 67 65 5f  other_cps=&amp;page_</span><br><span class="line">724c411630  69 64 3d 70 61 67 65 5f 74 65 5f 6c 6f 64 69 6e  id=page_te_lodin</span><br><span class="line">724c411640  67 5f 61 63 74 69 76 69 74 79 5f 31 37 33 34 38  g_activity_17348</span><br><span class="line">724c411650  34 37 33 37 31 34 30 31 26 72 65 70 65 61 74 3d  47371401&amp;repeat=</span><br><span class="line">724c411660  30 26 73 65 72 76 69 63 65 3d 6d 6f 62 69 6c 65  0&amp;service=mobile</span><br><span class="line">724c411670  2e 61 63 74 69 76 69 74 79 69 6e 66 6f 2e 6c 6f  .activityinfo.lo</span><br><span class="line">724c411680  67 67 65 72 26 73 65 73 73 69 6f 6e 5f 69 64 3d  gger&amp;session_id=</span><br><span class="line">724c411690  62 33 61 61 64 38 65 32 2d 32 38 34 30 2d 33 39  b3aad8e2-2840-39</span><br><span class="line">724c4116a0  61 35 2d 38 62 35 31 2d 65 35 62 31 63 35 62 31  a5-8b51-e5b1c5b1</span><br><span class="line">724c4116b0  36 62 61 64 5f 73 68 6f 70 5f 61 6e 64 72 6f 69  6bad_shop_androi</span><br><span class="line">724c4116c0  64 5f 31 37 33 34 38 34 37 33 37 31 33 33 35 26  d_1734847371335&amp;</span><br><span class="line">724c4116d0  73 6b 65 79 3d 36 36 39 32 63 34 36 31 63 33 38  skey=6692c461c38</span><br><span class="line">724c4116e0  31 30 61 62 31 35 30 63 39 61 39 38 30 64 30 63  10ab150c9a980d0c</span><br><span class="line">724c4116f0  32 37 35 65 63 26 73 74 61 74 75 73 3d 26 73 74  275ec&amp;status=&amp;st</span><br><span class="line">724c411700  61 74 75 73 5f 64 65 73 63 72 69 74 3d 6e 75 6c  atus_descrit=nul</span><br><span class="line">724c411710  6c 26 75 73 65 72 5f 63 6c 61 73 73 3d 41 31 26  l&amp;user_class=A1&amp;</span><br><span class="line">724c411720  75 73 65 72 5f 67 72 6f 75 70 3d 32 30 34 36 30  user_group=20460</span><br><span class="line">724c411730  5f e3 80 90 32 33 e5 b9 b4 e6 96 b0 e5 ae a2 e9  _...23..........</span><br><span class="line">724c411740  a6 96 e9 a1 b5 e3 80 91 e5 ae 89 e5 8d 93 2d 35  ..............-5</span><br><span class="line">724c411750  2e 32 33 2d 5b e5 bf ab e5 ba 94 e7 94 a8 2d e7  .23-[.........-.</span><br><span class="line">724c411760  8b ac e7 ab 8b e9 a6 96 e9 a1 b5 5d 2d 5b e9 a1  ...........]-[..</span><br><span class="line">724c411770  b6 e9 83 a8 e5 af bc e8 88 aa 2d e6 b5 8b e8 af  ..........-.....</span><br><span class="line">724c411780  95 2d 31 38 5d 26 75 73 65 72 5f 6c 61 62 65 6c  .-18]&amp;user_label</span><br><span class="line">724c411790  3d 33 31 30 35 2c 33 31 30 35 30 35 26 75 73 65  =3105,310505&amp;use</span><br><span class="line">724c4117a0  72 69 64 3d 6e 75 6c 6c 26 76 69 70 72 75 69 64  rid=null&amp;vipruid</span><br><span class="line">724c4117b0  3d 6e 75 6c 6c 26 77 61 72 65 68 6f 75 73 65 3d  =null&amp;warehouse=</span><br><span class="line">724c4117c0  56 49 50 5f 48 5a                                VIP_HZ</span><br><span class="line">arg3: 0x3c6</span><br><span class="line">arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">72342e4050  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4070  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e40a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e40b0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret_arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">724c411400  61 65 65 34 63 34 32 35 64 62 62 32 32 38 38 62  aee4c425dbb2288b</span><br><span class="line">724c411410  38 30 63 37 31 33 34 37 63 63 33 37 64 30 34 62  80c71347cc37d04b</span><br><span class="line">724c411420  61 63 74 69 76 69 74 79 3d 61 63 74 69 76 65 5f  activity=active_</span><br><span class="line">724c411430  74 65 5f 64 79 6e 61 6d 69 63 5f 72 65 73 26 61  te_dynamic_res&amp;a</span><br><span class="line">724c411440  63 74 69 76 69 74 79 5f 65 6e 64 74 69 6d 65 3d  ctivity_endtime=</span><br><span class="line">724c411450  6e 75 6c 6c 26 61 63 74 69 76 69 74 79 5f 70 72  null&amp;activity_pr</span><br><span class="line">724c411460  6f 70 65 74 79 3d 7b 22 61 63 74 69 76 69 74 79  opety=&#123;&quot;activity</span><br><span class="line">724c411470  5f 6e 61 6d 65 22 3a 22 22 2c 22 64 65 70 65 6e  _name&quot;:&quot;&quot;,&quot;depen</span><br><span class="line">724c411480  64 5f 73 74 61 74 75 73 22 3a 2d 31 2c 22 6d 6f  d_status&quot;:-1,&quot;mo</span><br><span class="line">724c411490  64 75 6c 65 22 3a 22 73 6d 61 72 74 52 6f 75 74  dule&quot;:&quot;smartRout</span><br><span class="line">724c4114a0  65 22 2c 22 6d 61 74 63 68 22 3a 31 2c 22 69 73  e&quot;,&quot;match&quot;:1,&quot;is</span><br><span class="line">724c4114b0  5f 64 65 62 75 67 22 3a 22 30 22 2c 22 61 70 6b  _debug&quot;:&quot;0&quot;,&quot;apk</span><br><span class="line">724c4114c0  5f 74 79 70 65 22 3a 22 31 22 2c 22 73 63 65 6e  _type&quot;:&quot;1&quot;,&quot;scen</span><br><span class="line">724c4114d0  65 22 3a 22 61 70 69 22 2c 22 69 73 5f 6d 61 69  e&quot;:&quot;api&quot;,&quot;is_mai</span><br><span class="line">724c4114e0  6e 5f 70 72 6f 63 65 73 73 22 3a 31 2c 22 66 61  n_process&quot;:1,&quot;fa</span><br><span class="line">724c4114f0  69 6c 5f 62 61 63 6b 22 3a 30 2c 22 65 76 65 6e  il_back&quot;:0,&quot;even</span><br><span class="line">724c411500  74 5f 69 64 22 3a 30 2c 22 68 61 73 5f 6d 6f 64  t_id&quot;:0,&quot;has_mod</span><br><span class="line">724c411510  75 6c 65 22 3a 30 2c 22 72 65 6d 6f 76 65 5f 73  ule&quot;:0,&quot;remove_s</span><br><span class="line">724c411520  6f 22 3a 22 30 22 2c 22 61 63 74 69 6f 6e 22 3a  o&quot;:&quot;0&quot;,&quot;action&quot;:</span><br><span class="line">724c411530  22 72 65 73 5f 73 63 65 6e 65 22 2c 22 73 74 61  &quot;res_scene&quot;,&quot;sta</span><br><span class="line">724c411540  74 75 73 22 3a 30 7d 26 61 63 74 69 76 69 74 79  tus&quot;:0&#125;&amp;activity</span><br><span class="line">724c411550  5f 73 74 61 72 74 74 69 6d 65 3d 31 37 33 34 38  _starttime=17348</span><br><span class="line">724c411560  34 37 33 37 31 36 36 38 26 61 70 70 5f 6e 61 6d  47371668&amp;app_nam</span><br><span class="line">724c411570  65 3d 73 68 6f 70 5f 61 6e 64 72 6f 69 64 26 61  e=shop_android&amp;a</span><br><span class="line">724c411580  70 70 5f 76 65 72 73 69 6f 6e 3d 39 2e 33 39 2e  pp_version=9.39.</span><br><span class="line">724c411590  34 26 63 68 61 6e 6e 65 6c 3d 31 26 64 65 65 70  4&amp;channel=1&amp;deep</span><br><span class="line">724c4115a0  6c 69 6e 6b 5f 63 70 73 3d 26 66 61 63 65 5f 66  link_cps=&amp;face_f</span><br><span class="line">724c4115b0  6c 61 67 3d 30 5f 31 26 66 64 63 5f 61 72 65 61  lag=0_1&amp;fdc_area</span><br><span class="line">724c4115c0  5f 69 64 3d 31 30 34 31 30 31 31 31 33 26 6c 6f  _id=104101113&amp;lo</span><br><span class="line">724c4115d0  63 61 6c 5f 74 69 6d 65 3d 31 37 33 34 38 34 37  cal_time=1734847</span><br><span class="line">724c4115e0  33 37 31 36 36 38 26 6c 6f 63 61 74 69 6f 6e 3d  371668&amp;location=</span><br><span class="line">724c4115f0  31 30 34 31 30 31 26 6d 69 64 3d 62 33 61 61 64  104101&amp;mid=b3aad</span><br><span class="line">724c411600  38 65 32 2d 32 38 34 30 2d 33 39 61 35 2d 38 62  8e2-2840-39a5-8b</span><br><span class="line">724c411610  35 31 2d 65 35 62 31 63 35 62 31 36 62 61 64 26  51-e5b1c5b16bad&amp;</span><br><span class="line">724c411620  6f 74 68 65 72 5f 63 70 73 3d 26 70 61 67 65 5f  other_cps=&amp;page_</span><br><span class="line">724c411630  69 64 3d 70 61 67 65 5f 74 65 5f 6c 6f 64 69 6e  id=page_te_lodin</span><br><span class="line">724c411640  67 5f 61 63 74 69 76 69 74 79 5f 31 37 33 34 38  g_activity_17348</span><br><span class="line">724c411650  34 37 33 37 31 34 30 31 26 72 65 70 65 61 74 3d  47371401&amp;repeat=</span><br><span class="line">724c411660  30 26 73 65 72 76 69 63 65 3d 6d 6f 62 69 6c 65  0&amp;service=mobile</span><br><span class="line">724c411670  2e 61 63 74 69 76 69 74 79 69 6e 66 6f 2e 6c 6f  .activityinfo.lo</span><br><span class="line">724c411680  67 67 65 72 26 73 65 73 73 69 6f 6e 5f 69 64 3d  gger&amp;session_id=</span><br><span class="line">724c411690  62 33 61 61 64 38 65 32 2d 32 38 34 30 2d 33 39  b3aad8e2-2840-39</span><br><span class="line">724c4116a0  61 35 2d 38 62 35 31 2d 65 35 62 31 63 35 62 31  a5-8b51-e5b1c5b1</span><br><span class="line">724c4116b0  36 62 61 64 5f 73 68 6f 70 5f 61 6e 64 72 6f 69  6bad_shop_androi</span><br><span class="line">724c4116c0  64 5f 31 37 33 34 38 34 37 33 37 31 33 33 35 26  d_1734847371335&amp;</span><br><span class="line">724c4116d0  73 6b 65 79 3d 36 36 39 32 63 34 36 31 63 33 38  skey=6692c461c38</span><br><span class="line">724c4116e0  31 30 61 62 31 35 30 63 39 61 39 38 30 64 30 63  10ab150c9a980d0c</span><br><span class="line">724c4116f0  32 37 35 65 63 26 73 74 61 74 75 73 3d 26 73 74  275ec&amp;status=&amp;st</span><br><span class="line">724c411700  61 74 75 73 5f 64 65 73 63 72 69 74 3d 6e 75 6c  atus_descrit=nul</span><br><span class="line">724c411710  6c 26 75 73 65 72 5f 63 6c 61 73 73 3d 41 31 26  l&amp;user_class=A1&amp;</span><br><span class="line">724c411720  75 73 65 72 5f 67 72 6f 75 70 3d 32 30 34 36 30  user_group=20460</span><br><span class="line">724c411730  5f e3 80 90 32 33 e5 b9 b4 e6 96 b0 e5 ae a2 e9  _...23..........</span><br><span class="line">724c411740  a6 96 e9 a1 b5 e3 80 91 e5 ae 89 e5 8d 93 2d 35  ..............-5</span><br><span class="line">724c411750  2e 32 33 2d 5b e5 bf ab e5 ba 94 e7 94 a8 2d e7  .23-[.........-.</span><br><span class="line">724c411760  8b ac e7 ab 8b e9 a6 96 e9 a1 b5 5d 2d 5b e9 a1  ...........]-[..</span><br><span class="line">724c411770  b6 e9 83 a8 e5 af bc e8 88 aa 2d e6 b5 8b e8 af  ..........-.....</span><br><span class="line">724c411780  95 2d 31 38 5d 26 75 73 65 72 5f 6c 61 62 65 6c  .-18]&amp;user_label</span><br><span class="line">724c411790  3d 33 31 30 35 2c 33 31 30 35 30 35 26 75 73 65  =3105,310505&amp;use</span><br><span class="line">724c4117a0  72 69 64 3d 6e 75 6c 6c 26 76 69 70 72 75 69 64  rid=null&amp;vipruid</span><br><span class="line">724c4117b0  3d 6e 75 6c 6c 26 77 61 72 65 68 6f 75 73 65 3d  =null&amp;warehouse=</span><br><span class="line">724c4117c0  56 49 50 5f 48 5a                                VIP_HZ</span><br><span class="line">ret_arg3: 0x3c6</span><br><span class="line">ret_arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">72342e4050  32 31 63 34 63 31 31 63 35 30 36 33 37 64 34 33  21c4c11c50637d43</span><br><span class="line">72342e4060  31 36 65 63 63 31 62 62 66 37 65 36 61 34 61 62  16ecc1bbf7e6a4ab</span><br><span class="line">72342e4070  64 66 36 66 62 65 36 31 00 00 00 00 00 00 00 00  df6fbe61........</span><br><span class="line">72342e4080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e40a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">72342e4050  32 31 63 34 63 31 31 63 35 30 36 33 37 64 34 33  21c4c11c50637d43</span><br><span class="line">72342e4060  31 36 65 63 63 31 62 62 66 37 65 36 61 34 61 62  16ecc1bbf7e6a4ab</span><br><span class="line">72342e4070  64 66 36 66 62 65 36 31 00 00 00 00 00 00 00 00  df6fbe61........</span><br><span class="line">72342e4080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">----hooked over!----</span><br><span class="line">----hooked getByteHash----</span><br><span class="line">arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">72342e3f50  61 65 65 34 63 34 32 35 64 62 62 32 32 38 38 62  aee4c425dbb2288b</span><br><span class="line">72342e3f60  38 30 63 37 31 33 34 37 63 63 33 37 64 30 34 62  80c71347cc37d04b</span><br><span class="line">72342e3f70  32 31 63 34 63 31 31 63 35 30 36 33 37 64 34 33  21c4c11c50637d43</span><br><span class="line">72342e3f80  31 36 65 63 63 31 62 62 66 37 65 36 61 34 61 62  16ecc1bbf7e6a4ab</span><br><span class="line">72342e3f90  64 66 36 66 62 65 36 31                          df6fbe61</span><br><span class="line">arg3: 0x48</span><br><span class="line">arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">72342e4050  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4070  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e40a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret_arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">72342e3f50  61 65 65 34 63 34 32 35 64 62 62 32 32 38 38 62  aee4c425dbb2288b</span><br><span class="line">72342e3f60  38 30 63 37 31 33 34 37 63 63 33 37 64 30 34 62  80c71347cc37d04b</span><br><span class="line">72342e3f70  32 31 63 34 63 31 31 63 35 30 36 33 37 64 34 33  21c4c11c50637d43</span><br><span class="line">72342e3f80  31 36 65 63 63 31 62 62 66 37 65 36 61 34 61 62  16ecc1bbf7e6a4ab</span><br><span class="line">72342e3f90  64 66 36 66 62 65 36 31                          df6fbe61</span><br><span class="line">ret_arg3: 0x48</span><br><span class="line">ret_arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">72342e4050  32 33 37 66 32 64 66 62 33 34 64 38 38 34 36 63  237f2dfb34d8846c</span><br><span class="line">72342e4060  61 37 66 31 31 30 37 31 35 38 33 66 62 33 61 66  a7f11071583fb3af</span><br><span class="line">72342e4070  35 66 39 38 62 39 66 65 00 00 00 00 00 00 00 00  5f98b9fe........</span><br><span class="line">72342e4080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">72342e4050  32 33 37 66 32 64 66 62 33 34 64 38 38 34 36 63  237f2dfb34d8846c</span><br><span class="line">72342e4060  61 37 66 31 31 30 37 31 35 38 33 66 62 33 61 66  a7f11071583fb3af</span><br><span class="line">72342e4070  35 66 39 38 62 39 66 65 00 00 00 00 00 00 00 00  5f98b9fe........</span><br><span class="line">72342e4080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">----hooked over!----</span><br></pre></td></tr></table></figure>

<h3 id="主动调用gsNav方法，来观察getByteHash的输出结果"><a href="#主动调用gsNav方法，来观察getByteHash的输出结果" class="headerlink" title="主动调用gsNav方法，来观察getByteHash的输出结果"></a>主动调用gsNav方法，来观察getByteHash的输出结果</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">call_gsNav</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----call gsNav----&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> currentApplication = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>).<span class="title function_">currentApplication</span>();</span><br><span class="line">        <span class="keyword">var</span> context = currentApplication.<span class="title function_">getApplicationContext</span>();</span><br><span class="line">        <span class="keyword">var</span> map = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.TreeMap&quot;</span>).$new();</span><br><span class="line">        map.<span class="title function_">put</span>(<span class="string">&quot;api_key&quot;</span>,<span class="string">&quot;bileton&quot;</span>)</span><br><span class="line">        map.<span class="title function_">put</span>(<span class="string">&quot;app_name&quot;</span>,<span class="string">&quot;shop_android&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> string = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> boolean = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">KeyInfo</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.vip.vcsp.KeyInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="title class_">KeyInfo</span>.<span class="title function_">gsNav</span>(context,map,string,boolean)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;call gsNav result:&quot;</span>,result)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----call gsNav over----&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_native</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> soAddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libkeyinfo.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> functionaddr = soAddr.<span class="title function_">add</span>(<span class="number">0xF2260</span>)  </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(functionaddr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----hooked getByteHash----&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg2:&quot;</span>,<span class="title function_">hexdump</span>(args[<span class="number">2</span>],&#123;length : args[<span class="number">3</span>].<span class="title function_">toInt32</span>()&#125;));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg3:&quot;</span>,args[<span class="number">3</span>]);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg4:&quot;</span>,<span class="title function_">hexdump</span>(args[<span class="number">4</span>]));</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg2</span> = args[<span class="number">2</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg3</span> = args[<span class="number">3</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg4</span> = args[<span class="number">4</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret_arg2:&quot;</span>,<span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg2</span>,&#123;length : <span class="variable language_">this</span>.<span class="property">arg3</span>.<span class="title function_">toInt32</span>()&#125;));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret_arg3:&quot;</span>,<span class="variable language_">this</span>.<span class="property">arg3</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret_arg4:&quot;</span>,<span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg4</span>));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret:&quot;</span>,<span class="title function_">hexdump</span>(ret));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----hooked over!----&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hook_native</span>();</span><br><span class="line">    <span class="title function_">call_gsNav</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----call gsNav----</span><br><span class="line">----hooked getByteHash----</span><br><span class="line">arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7d0246f580  30 82 02 5f 30 82 01 c8 a0 03 02 01 02 02 04 4e  0.._0..........N</span><br><span class="line">7d0246f590  77 18 86 30 0d 06 09 2a 86 48 86 f7 0d 01 01 05  w..0...*.H......</span><br><span class="line">7d0246f5a0  05 00 30 73 31 0b 30 09 06 03 55 04 06 13 02 63  ..0s1.0...U....c</span><br><span class="line">7d0246f5b0  6e 31 12 30 10 06 03 55 04 08 13 09 67 75 61 6e  n1.0...U....guan</span><br><span class="line">7d0246f5c0  67 64 6f 6e 67 31 12 30 10 06 03 55 04 07 13 09  gdong1.0...U....</span><br><span class="line">7d0246f5d0  67 75 61 6e 67 7a 68 6f 75 31 10 30 0e 06 03 55  guangzhou1.0...U</span><br><span class="line">7d0246f5e0  04 0a 13 07 76 69 70 73 68 6f 70 31 18 30 16 06  ....vipshop1.0..</span><br><span class="line">7d0246f5f0  03 55 04 0b 13 0f 77 77 77 2e 76 69 70 73 68 6f  .U....www.vipsho</span><br><span class="line">7d0246f600  70 2e 63 6f 6d 31 10 30 0e 06 03 55 04 03 13 07  p.com1.0...U....</span><br><span class="line">7d0246f610  76 69 70 73 68 6f 70 30 20 17 0d 31 31 30 39 31  vipshop0 ..11091</span><br><span class="line">7d0246f620  39 31 30 32 35 31 30 5a 18 0f 32 32 38 35 30 37  9102510Z..228507</span><br><span class="line">7d0246f630  30 34 31 30 32 35 31 30 5a 30 73 31 0b 30 09 06  04102510Z0s1.0..</span><br><span class="line">7d0246f640  03 55 04 06 13 02 63 6e 31 12 30 10 06 03 55 04  .U....cn1.0...U.</span><br><span class="line">7d0246f650  08 13 09 67 75 61 6e 67 64 6f 6e 67 31 12 30 10  ...guangdong1.0.</span><br><span class="line">7d0246f660  06 03 55 04 07 13 09 67 75 61 6e 67 7a 68 6f 75  ..U....guangzhou</span><br><span class="line">7d0246f670  31 10 30 0e 06 03 55 04 0a 13 07 76 69 70 73 68  1.0...U....vipsh</span><br><span class="line">7d0246f680  6f 70 31 18 30 16 06 03 55 04 0b 13 0f 77 77 77  op1.0...U....www</span><br><span class="line">7d0246f690  2e 76 69 70 73 68 6f 70 2e 63 6f 6d 31 10 30 0e  .vipshop.com1.0.</span><br><span class="line">7d0246f6a0  06 03 55 04 03 13 07 76 69 70 73 68 6f 70 30 81  ..U....vipshop0.</span><br><span class="line">7d0246f6b0  9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00  .0...*.H........</span><br><span class="line">7d0246f6c0  03 81 8d 00 30 81 89 02 81 81 00 93 34 83 f8 c0  ....0.......4...</span><br><span class="line">7d0246f6d0  1a 56 74 4a a3 a0 54 73 95 ca c4 22 ea 07 ae a0  .VtJ..Ts...&quot;....</span><br><span class="line">7d0246f6e0  3f 38 45 90 c1 fc bb eb d3 0c 71 39 5e a8 b6 bd  ?8E.......q9^...</span><br><span class="line">7d0246f6f0  1a 1b 04 84 47 49 0e 4b af 36 5a 4b 49 72 6f 35  ....GI.K.6ZKIro5</span><br><span class="line">7d0246f700  4e 57 96 35 f5 40 7e 63 86 57 49 2f 6c af 66 5c  NW.5.@~c.WI/l.f\</span><br><span class="line">7d0246f710  27 18 11 8c cc ba d9 2f 1f fc ab 62 3c c7 ca 9e  &#x27;....../...b&lt;...</span><br><span class="line">7d0246f720  a8 ca 9a d5 8c 47 ab 21 05 ba 7c 7c 6d 6f fe 46  .....G.!..||mo.F</span><br><span class="line">7d0246f730  6d 7e 94 06 bb f0 28 cb 9b b5 43 3a 74 cb 85 47  m~....(...C:t..G</span><br><span class="line">7d0246f740  d1 b6 de de f8 84 56 a1 67 9d 3d 02 03 01 00 01  ......V.g.=.....</span><br><span class="line">7d0246f750  30 0d 06 09 2a 86 48 86 f7 0d 01 01 05 05 00 03  0...*.H.........</span><br><span class="line">7d0246f760  81 81 00 17 fd cc f7 dd 2f 1a 42 80 92 89 a2 15  ......../.B.....</span><br><span class="line">7d0246f770  9b 64 aa 5a b0 57 91 35 88 18 37 74 3b ca 21 18  .d.Z.W.5..7t;.!.</span><br><span class="line">7d0246f780  0b f3 30 50 75 4b b8 a8 44 90 02 c6 07 5e b6 d7  ..0PuK..D....^..</span><br><span class="line">7d0246f790  1a 65 80 06 a6 b6 00 94 c1 69 f0 77 fb 06 3b 93  .e.......i.w..;.</span><br><span class="line">7d0246f7a0  91 64 d1 64 e6 70 4a ae a1 14 c1 fa ed b4 eb fc  .d.d.pJ.........</span><br><span class="line">7d0246f7b0  25 db ca 96 21 a5 58 d2 8b 87 1c 72 7f ff b6 0e  %...!.X....r....</span><br><span class="line">7d0246f7c0  c7 40 e8 64 01 53 e8 e9 4d a9 da 7b 09 9e 30 82  .@.d.S..M..&#123;..0.</span><br><span class="line">7d0246f7d0  c3 77 e4 6d 2d 4e 9c 4a 25 8a b2 54 99 d1 da 85  .w.m-N.J%..T....</span><br><span class="line">7d0246f7e0  5b 14 ca                                         [..</span><br><span class="line">arg3: 0x263</span><br><span class="line">arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea9c80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9c90  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9ca0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9cb0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9cc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9cd0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line"></span><br><span class="line">ret_arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7d0246f580  30 82 02 5f 30 82 01 c8 a0 03 02 01 02 02 04 4e  0.._0..........N</span><br><span class="line">7d0246f590  77 18 86 30 0d 06 09 2a 86 48 86 f7 0d 01 01 05  w..0...*.H......</span><br><span class="line">7d0246f5a0  05 00 30 73 31 0b 30 09 06 03 55 04 06 13 02 63  ..0s1.0...U....c</span><br><span class="line">7d0246f5b0  6e 31 12 30 10 06 03 55 04 08 13 09 67 75 61 6e  n1.0...U....guan</span><br><span class="line">7d0246f5c0  67 64 6f 6e 67 31 12 30 10 06 03 55 04 07 13 09  gdong1.0...U....</span><br><span class="line">7d0246f5d0  67 75 61 6e 67 7a 68 6f 75 31 10 30 0e 06 03 55  guangzhou1.0...U</span><br><span class="line">7d0246f5e0  04 0a 13 07 76 69 70 73 68 6f 70 31 18 30 16 06  ....vipshop1.0..</span><br><span class="line">7d0246f5f0  03 55 04 0b 13 0f 77 77 77 2e 76 69 70 73 68 6f  .U....www.vipsho</span><br><span class="line">7d0246f600  70 2e 63 6f 6d 31 10 30 0e 06 03 55 04 03 13 07  p.com1.0...U....</span><br><span class="line">7d0246f610  76 69 70 73 68 6f 70 30 20 17 0d 31 31 30 39 31  vipshop0 ..11091</span><br><span class="line">7d0246f620  39 31 30 32 35 31 30 5a 18 0f 32 32 38 35 30 37  9102510Z..228507</span><br><span class="line">7d0246f630  30 34 31 30 32 35 31 30 5a 30 73 31 0b 30 09 06  04102510Z0s1.0..</span><br><span class="line">7d0246f640  03 55 04 06 13 02 63 6e 31 12 30 10 06 03 55 04  .U....cn1.0...U.</span><br><span class="line">7d0246f650  08 13 09 67 75 61 6e 67 64 6f 6e 67 31 12 30 10  ...guangdong1.0.</span><br><span class="line">7d0246f660  06 03 55 04 07 13 09 67 75 61 6e 67 7a 68 6f 75  ..U....guangzhou</span><br><span class="line">7d0246f670  31 10 30 0e 06 03 55 04 0a 13 07 76 69 70 73 68  1.0...U....vipsh</span><br><span class="line">7d0246f680  6f 70 31 18 30 16 06 03 55 04 0b 13 0f 77 77 77  op1.0...U....www</span><br><span class="line">7d0246f690  2e 76 69 70 73 68 6f 70 2e 63 6f 6d 31 10 30 0e  .vipshop.com1.0.</span><br><span class="line">7d0246f6a0  06 03 55 04 03 13 07 76 69 70 73 68 6f 70 30 81  ..U....vipshop0.</span><br><span class="line">7d0246f6b0  9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00  .0...*.H........</span><br><span class="line">7d0246f6c0  03 81 8d 00 30 81 89 02 81 81 00 93 34 83 f8 c0  ....0.......4...</span><br><span class="line">7d0246f6d0  1a 56 74 4a a3 a0 54 73 95 ca c4 22 ea 07 ae a0  .VtJ..Ts...&quot;....</span><br><span class="line">7d0246f6e0  3f 38 45 90 c1 fc bb eb d3 0c 71 39 5e a8 b6 bd  ?8E.......q9^...</span><br><span class="line">7d0246f6f0  1a 1b 04 84 47 49 0e 4b af 36 5a 4b 49 72 6f 35  ....GI.K.6ZKIro5</span><br><span class="line">7d0246f700  4e 57 96 35 f5 40 7e 63 86 57 49 2f 6c af 66 5c  NW.5.@~c.WI/l.f\</span><br><span class="line">7d0246f710  27 18 11 8c cc ba d9 2f 1f fc ab 62 3c c7 ca 9e  &#x27;....../...b&lt;...</span><br><span class="line">7d0246f720  a8 ca 9a d5 8c 47 ab 21 05 ba 7c 7c 6d 6f fe 46  .....G.!..||mo.F</span><br><span class="line">7d0246f730  6d 7e 94 06 bb f0 28 cb 9b b5 43 3a 74 cb 85 47  m~....(...C:t..G</span><br><span class="line">7d0246f740  d1 b6 de de f8 84 56 a1 67 9d 3d 02 03 01 00 01  ......V.g.=.....</span><br><span class="line">7d0246f750  30 0d 06 09 2a 86 48 86 f7 0d 01 01 05 05 00 03  0...*.H.........</span><br><span class="line">7d0246f760  81 81 00 17 fd cc f7 dd 2f 1a 42 80 92 89 a2 15  ......../.B.....</span><br><span class="line">7d0246f770  9b 64 aa 5a b0 57 91 35 88 18 37 74 3b ca 21 18  .d.Z.W.5..7t;.!.</span><br><span class="line">7d0246f780  0b f3 30 50 75 4b b8 a8 44 90 02 c6 07 5e b6 d7  ..0PuK..D....^..</span><br><span class="line">7d0246f790  1a 65 80 06 a6 b6 00 94 c1 69 f0 77 fb 06 3b 93  .e.......i.w..;.</span><br><span class="line">7d0246f7a0  91 64 d1 64 e6 70 4a ae a1 14 c1 fa ed b4 eb fc  .d.d.pJ.........</span><br><span class="line">7d0246f7b0  25 db ca 96 21 a5 58 d2 8b 87 1c 72 7f ff b6 0e  %...!.X....r....</span><br><span class="line">7d0246f7c0  c7 40 e8 64 01 53 e8 e9 4d a9 da 7b 09 9e 30 82  .@.d.S..M..&#123;..0.</span><br><span class="line">7d0246f7d0  c3 77 e4 6d 2d 4e 9c 4a 25 8a b2 54 99 d1 da 85  .w.m-N.J%..T....</span><br><span class="line">7d0246f7e0  5b 14 ca                                         [..</span><br><span class="line">ret_arg3: 0x263</span><br><span class="line">ret_arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea9c80  31 65 64 35 36 32 65 31 65 39 30 62 32 33 61 65  1ed562e1e90b23ae</span><br><span class="line">7cd7ea9c90  33 66 39 61 34 30 66 38 62 32 61 36 35 33 38 32  3f9a40f8b2a65382</span><br><span class="line">7cd7ea9ca0  62 39 35 61 34 37 35 32 00 00 00 00 00 00 00 00  b95a4752........</span><br><span class="line">7cd7ea9cb0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9cc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9cd0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea9c80  31 65 64 35 36 32 65 31 65 39 30 62 32 33 61 65  1ed562e1e90b23ae</span><br><span class="line">7cd7ea9c90  33 66 39 61 34 30 66 38 62 32 61 36 35 33 38 32  3f9a40f8b2a65382</span><br><span class="line">7cd7ea9ca0  62 39 35 61 34 37 35 32 00 00 00 00 00 00 00 00  b95a4752........</span><br><span class="line">7cd7ea9cb0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9cc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9cd0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9ce0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">----hooked over!----</span><br><span class="line">----hooked getByteHash----</span><br><span class="line">arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7d02424b30  61 65 65 34 63 34 32 35 64 62 62 32 32 38 38 62  aee4c425dbb2288b</span><br><span class="line">7d02424b40  38 30 63 37 31 33 34 37 63 63 33 37 64 30 34 62  80c71347cc37d04b</span><br><span class="line">7d02424b50  61 70 69 5f 6b 65 79 3d 62 69 6c 65 74 6f 6e 26  api_key=bileton&amp;</span><br><span class="line">7d02424b60  61 70 70 5f 6e 61 6d 65 3d 73 68 6f 70 5f 61 6e  app_name=shop_an</span><br><span class="line">7d02424b70  64 72 6f 69 64                                   droid</span><br><span class="line">arg3: 0x45</span><br><span class="line">arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea99f0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a10  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a30  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret_arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7d02424b30  61 65 65 34 63 34 32 35 64 62 62 32 32 38 38 62  aee4c425dbb2288b</span><br><span class="line">7d02424b40  38 30 63 37 31 33 34 37 63 63 33 37 64 30 34 62  80c71347cc37d04b</span><br><span class="line">7d02424b50  61 70 69 5f 6b 65 79 3d 62 69 6c 65 74 6f 6e 26  api_key=bileton&amp;</span><br><span class="line">7d02424b60  61 70 70 5f 6e 61 6d 65 3d 73 68 6f 70 5f 61 6e  app_name=shop_an</span><br><span class="line">7d02424b70  64 72 6f 69 64                                   droid</span><br><span class="line">ret_arg3: 0x45</span><br><span class="line">ret_arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea99f0  62 30 64 63 61 36 66 31 35 36 66 37 39 30 32 38  b0dca6f156f79028</span><br><span class="line">7cd7ea9a00  62 33 61 36 38 63 31 36 36 32 39 34 30 34 65 34  b3a68c16629404e4</span><br><span class="line">7cd7ea9a10  35 37 39 31 32 30 62 64 00 00 00 00 00 00 00 00  579120bd........</span><br><span class="line">7cd7ea9a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a30  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea99f0  62 30 64 63 61 36 66 31 35 36 66 37 39 30 32 38  b0dca6f156f79028</span><br><span class="line">7cd7ea9a00  62 33 61 36 38 63 31 36 36 32 39 34 30 34 65 34  b3a68c16629404e4</span><br><span class="line">7cd7ea9a10  35 37 39 31 32 30 62 64 00 00 00 00 00 00 00 00  579120bd........</span><br><span class="line">7cd7ea9a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a30  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">----hooked over!----</span><br><span class="line">----hooked getByteHash----</span><br><span class="line">arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea98f0  61 65 65 34 63 34 32 35 64 62 62 32 32 38 38 62  aee4c425dbb2288b</span><br><span class="line">7cd7ea9900  38 30 63 37 31 33 34 37 63 63 33 37 64 30 34 62  80c71347cc37d04b</span><br><span class="line">7cd7ea9910  62 30 64 63 61 36 66 31 35 36 66 37 39 30 32 38  b0dca6f156f79028</span><br><span class="line">7cd7ea9920  62 33 61 36 38 63 31 36 36 32 39 34 30 34 65 34  b3a68c16629404e4</span><br><span class="line">7cd7ea9930  35 37 39 31 32 30 62 64                          579120bd</span><br><span class="line">arg3: 0x48</span><br><span class="line">arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea99f0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a10  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a30  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret_arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea98f0  61 65 65 34 63 34 32 35 64 62 62 32 32 38 38 62  aee4c425dbb2288b</span><br><span class="line">7cd7ea9900  38 30 63 37 31 33 34 37 63 63 33 37 64 30 34 62  80c71347cc37d04b</span><br><span class="line">7cd7ea9910  62 30 64 63 61 36 66 31 35 36 66 37 39 30 32 38  b0dca6f156f79028</span><br><span class="line">7cd7ea9920  62 33 61 36 38 63 31 36 36 32 39 34 30 34 65 34  b3a68c16629404e4</span><br><span class="line">7cd7ea9930  35 37 39 31 32 30 62 64                          579120bd</span><br><span class="line">ret_arg3: 0x48</span><br><span class="line">ret_arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea99f0  63 39 31 34 63 39 64 64 32 62 38 36 32 61 37 34  c914c9dd2b862a74</span><br><span class="line">7cd7ea9a00  63 35 65 39 31 61 63 31 65 36 62 37 39 33 32 38  c5e91ac1e6b79328</span><br><span class="line">7cd7ea9a10  36 62 33 63 31 61 63 32 00 00 00 00 00 00 00 00  6b3c1ac2........</span><br><span class="line">7cd7ea9a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a30  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a50  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea99f0  63 39 31 34 63 39 64 64 32 62 38 36 32 61 37 34  c914c9dd2b862a74</span><br><span class="line">7cd7ea9a00  63 35 65 39 31 61 63 31 65 36 62 37 39 33 32 38  c5e91ac1e6b79328</span><br><span class="line">7cd7ea9a10  36 62 33 63 31 61 63 32 00 00 00 00 00 00 00 00  6b3c1ac2........</span><br><span class="line">7cd7ea9a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a30  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a50  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">----hooked over!----</span><br><span class="line">call gsNav result: c914c9dd2b862a74c5e91ac1e6b793286b3c1ac2</span><br><span class="line">----call gsNav over----</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>发现当主动调用gsNav函数的时候，主动调用了三次getByteHash方法，而第一次调用getByteHash方法时的入参和返回值都没有找到相关的信息，在IDA里查看getByteHash交叉引用，发现</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/22.jpg"></p>
<p>发现在其他函数里也调用了getByteHash函数，溯源一下，最后找到是在<code>Utils_ima</code>方法里调用的，并不影响<code>Function_gs</code>函数调用的<code>getByteHash</code>。</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/23.jpg"></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从Functions_gs函数里可以看出来，getByteHash函数被调用了两次，这个函数是标准SHA1算法，那么要分析的话就要拿连续的两个hook结果，从hook结果来看，getByteHash传入的第三个参数是map，但是它的开头加盐了，<code>aee4c425dbb2288b80c71347cc37d04b</code>，这个盐的值是固定的</p>
<p>如下是我对Functions_gs函数变量重命名后的关键代码</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/20.jpg"></p>
<p>SaltMap是加盐后的Map的值，经过第一次SHA1签名之后，得到ByteHash，然后在ByteHash前面加盐，再一次进行SHA1签名，得到最终的<code>api_sign</code></p>
<h2 id="验证一下"><a href="#验证一下" class="headerlink" title="验证一下"></a>验证一下</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"> </span><br><span class="line">mapdata = <span class="string">&#x27;activity=active_te_dynamic_res&amp;activity_endtime=null&amp;activity_propety=&#123;&quot;activity_name&quot;:&quot;&quot;,&quot;depend_status&quot;:-1,&quot;module&quot;:&quot;smartRoute&quot;,&quot;match&quot;:1,&quot;is_debug&quot;:&quot;0&quot;,&quot;apk_type&quot;:&quot;1&quot;,&quot;scene&quot;:&quot;api&quot;,&quot;is_main_process&quot;:1,&quot;fail_back&quot;:0,&quot;event_id&quot;:0,&quot;has_module&quot;:0,&quot;remove_so&quot;:&quot;0&quot;,&quot;action&quot;:&quot;res_scene&quot;,&quot;status&quot;:0&#125;&amp;activity_starttime=1734847371668&amp;app_name=shop_android&amp;app_version=9.39.4&amp;channel=1&amp;deeplink_cps=&amp;face_flag=0_1&amp;fdc_area_id=104101113&amp;local_time=1734847371668&amp;location=104101&amp;mid=b3aad8e2-2840-39a5-8b51-e5b1c5b16bad&amp;other_cps=&amp;page_id=page_te_loding_activity_1734847371401&amp;repeat=0&amp;service=mobile.activityinfo.logger&amp;session_id=b3aad8e2-2840-39a5-8b51-e5b1c5b16bad_shop_android_1734847371335&amp;skey=6692c461c3810ab150c9a980d0c275ec&amp;status=&amp;status_descrit=null&amp;user_class=A1&amp;user_group=20460_【23年新客首页】安卓-5.23-[快应用-独立首页]-[顶部导航-测试-18]&amp;user_label=3105,310505&amp;userid=null&amp;vipruid=null&amp;warehouse=VIP_HZ&#x27;</span></span><br><span class="line"></span><br><span class="line">Salt = <span class="string">&quot;aee4c425dbb2288b80c71347cc37d04b&quot;</span></span><br><span class="line">SaltMap = Salt+mapdata</span><br><span class="line">cipher1 = hashlib.sha1()</span><br><span class="line">cipher1.update(SaltMap.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">ByteHash = cipher1.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(ByteHash)</span><br><span class="line">SecondEnc = Salt+ByteHash</span><br><span class="line">cipher2 = hashlib.sha1()</span><br><span class="line">cipher2.update(SecondEnc.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">api_sign = cipher2.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(api_sign)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">21c4c11c50637d4316ecc1bbf7e6a4abdf6fbe61</span><br><span class="line">237f2dfb34d8846ca7f11071583fb3af5f98b9fe</span><br></pre></td></tr></table></figure>

<p>还原完成</p>
<h1 id="设备注册接口复现"><a href="#设备注册接口复现" class="headerlink" title="设备注册接口复现"></a>设备注册接口复现</h1><p>这次我们可以用自己生成的api_sign来进行设备注册</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">def <span class="title function_">sha1</span>(data):</span><br><span class="line">    cipher = hashlib.<span class="title function_">sha1</span>()</span><br><span class="line">    cipher.<span class="title function_">update</span>(data)</span><br><span class="line">    <span class="keyword">return</span> cipher.<span class="title function_">hexdigest</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">device_token = <span class="title function_">str</span>(uuid.<span class="title function_">uuid4</span>())</span><br><span class="line"></span><br><span class="line">parameters = &#123;</span><br><span class="line">    <span class="string">&quot;app_name&quot;</span>:<span class="string">&quot;achievo_ad&quot;</span>,</span><br><span class="line">    <span class="string">&quot;app_version&quot;</span>:<span class="string">&quot;9.39.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;device_token&quot;</span>:device_token,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;warehouse&quot;</span>:<span class="string">&quot;VIP_HZ&quot;</span>,</span><br><span class="line">    <span class="string">&quot;manufacturer&quot;</span>:<span class="string">&quot;Google&quot;</span>,</span><br><span class="line">    <span class="string">&quot;device&quot;</span>:<span class="string">&quot;Pixel 3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;os_version&quot;</span>:<span class="string">&quot;28&quot;</span>,</span><br><span class="line">    <span class="string">&quot;channel&quot;</span>:<span class="string">&quot;yro8nr0d:::&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vipruid&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;regPlat&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;regid&quot;</span>:<span class="string">&quot;null&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rom&quot;</span>:<span class="string">&quot;Dalvik/2.1.0 (Linux; U; Android 9; Pixel 3 Build/PD1A.180720.030)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;skey&quot;</span>:<span class="string">&quot;6692c461c3810ab150c9a980d0c275ec&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://mp.appvipshop.com/apns/device_reg&quot;</span></span><br><span class="line"></span><br><span class="line">mapdata = <span class="string">&quot;&amp;&quot;</span>.<span class="title function_">join</span>([key+<span class="string">&quot;=&quot;</span>+value <span class="keyword">for</span> key,value <span class="keyword">in</span> parameters.<span class="title function_">items</span>()])</span><br><span class="line">salt = <span class="string">&quot;aee4c425dbb2288b80c71347cc37d04b&quot;</span></span><br><span class="line">onesha1 = <span class="title function_">sha1</span>((salt+mapdata).<span class="title function_">encode</span>(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">apisign = <span class="title function_">sha1</span>((salt+onesha1).<span class="title function_">encode</span>(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;okhttp/4.9.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;authorization&quot;</span>:<span class="string">&quot;OAuth api_sign=&quot;</span>+apisign,</span><br><span class="line">    <span class="string">&quot;accept-encoding&quot;</span>:<span class="string">&quot;gzip&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.<span class="title function_">get</span>(url,headers=headers,params=parameters)</span><br><span class="line"><span class="title function_">print</span>(response.<span class="property">status_code</span>)</span><br><span class="line"><span class="title function_">print</span>(response.<span class="property">text</span>)</span><br></pre></td></tr></table></figure>

<h1 id="搜索接口逆向"><a href="#搜索接口逆向" class="headerlink" title="搜索接口逆向"></a>搜索接口逆向</h1><h2 id="搜索接口抓包"><a href="#搜索接口抓包" class="headerlink" title="搜索接口抓包"></a>搜索接口抓包</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/21.jpg"></p>
<h2 id="逆向还原"><a href="#逆向还原" class="headerlink" title="逆向还原"></a>逆向还原</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha1</span>(<span class="params">data</span>):</span><br><span class="line">    cipher = hashlib.sha1()</span><br><span class="line">    cipher.update(data)</span><br><span class="line">    <span class="keyword">return</span> cipher.hexdigest()</span><br><span class="line"></span><br><span class="line">keyword = <span class="built_in">input</span>(<span class="string">&quot;input keyword:&quot;</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://mapi.appvipshop.com/vips-mobile/rest/shopping/search/product/list/v1&quot;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;api_key&quot;</span>: <span class="string">&quot;23e7f28019e8407b98b84cd05b5aef2c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;app_name&quot;</span>: <span class="string">&quot;shop_android&quot;</span>,</span><br><span class="line">    <span class="string">&quot;app_version&quot;</span>: <span class="string">&quot;9.39.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bigSaleTagIds&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brandIds&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brandStoreSns&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;categoryId&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;channelId&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;channel_flag&quot;</span>: <span class="string">&quot;0_1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;clickFrom&quot;</span>: <span class="string">&quot;userword&quot;</span>,</span><br><span class="line">    <span class="string">&quot;client&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">    <span class="string">&quot;client_type&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">    <span class="string">&quot;couponIds&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;darkmode&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;deeplink_cps&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;device_model&quot;</span>: <span class="string">&quot;Google Pixel 3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;did&quot;</span>: <span class="string">&quot;0.0.7dd2447b686b5292535eeee5df76af4e.e30722&quot;</span>,</span><br><span class="line">    <span class="string">&quot;elder&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;evgid&quot;</span>: <span class="string">&quot;MEPeuS28WvKWWBaORXRayvPD91hpo6rtPhqtYlf9h/sqV/qXMrLitm9X/TxB0xIU0R0HnbOuRkt494w2LedGeuzIt0jR6xdfSfROjGrf92s=&quot;</span>,</span><br><span class="line">    <span class="string">&quot;extParams&quot;</span>: <span class="string">&#x27;&#123;&quot;priceVer&quot;:&quot;2&quot;,&quot;video_playable&quot;:&quot;1&quot;,&quot;mclabel&quot;:&quot;1&quot;,&quot;cmpStyle&quot;:&quot;1&quot;,&quot;statusVer&quot;:&quot;2&quot;,&quot;ic2label&quot;:&quot;1&quot;,&quot;video&quot;:&quot;2&quot;,&quot;uiVer&quot;:&quot;2&quot;,&quot;preheatTipsVer&quot;:&quot;4&quot;,&quot;floatwin&quot;:&quot;1&quot;,&quot;superHot&quot;:&quot;1&quot;,&quot;exclusivePrice&quot;:&quot;1&quot;,&quot;router&quot;:&quot;1&quot;,&quot;coupons&quot;:&quot;4&quot;,&quot;needVideoExplain&quot;:&quot;1&quot;,&quot;rank&quot;:&quot;2&quot;,&quot;needVideoGive&quot;:&quot;1&quot;,&quot;attr&quot;:&quot;2&quot;,&quot;bigBrand&quot;:&quot;2&quot;,&quot;couponVer&quot;:&quot;v2&quot;,&quot;videoExplainUrl&quot;:&quot;1&quot;,&quot;live&quot;:&quot;1&quot;,&quot;sellpoint&quot;:&quot;1&quot;,&quot;reco&quot;:&quot;1&quot;,&quot;vreimg&quot;:&quot;1&quot;,&quot;search_tag&quot;:&quot;2&quot;,&quot;tpl&quot;:&quot;1&quot;,&quot;ads&quot;:&quot;2&quot;,&quot;stdSizeVids&quot;:&quot;&quot;,&quot;labelVer&quot;:&quot;2&quot;,&quot;preheatView&quot;:&quot;1&quot;&#125;&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;fdc_area_id&quot;</span>: <span class="string">&quot;104101113&quot;</span>,</span><br><span class="line">    <span class="string">&quot;functions&quot;</span>: <span class="string">&quot;RTRecomm,flagshipInfo,couponBarV2,lowPriceTabs,discountTabs,feedbackV2,otdAds,zoneCode,slotOp,survey,outfit,aiRealtime,floaterParams,tabGroupV2,bsAndSeason,parallelCall&quot;</span>,</span><br><span class="line">    <span class="string">&quot;harmony_app&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;harmony_os&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>: <span class="string">&quot;2028&quot;</span>,</span><br><span class="line">    <span class="string">&quot;isMultiTab&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;is_default_area&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;keyword&quot;</span>: keyword,</span><br><span class="line">    <span class="string">&quot;lastPageProperty&quot;</span>: <span class="string">&quot;&#123;\&quot;isBgToFront\&quot;:\&quot;0\&quot;,\&quot;scene_entry_id\&quot;:\&quot;-99\&quot;,\&quot;refer_page_id\&quot;:\&quot;page_channel_1734917260119\&quot;,\&quot;text\&quot;:\&quot;女童加绒裤子\&quot;,\&quot;module_name\&quot;:\&quot;com.achievo.vipshop.search\&quot;,\&quot;type\&quot;:\&quot;-99\&quot;,\&quot;is_back_page\&quot;:\&quot;0\&quot;&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;maker&quot;</span>: <span class="string">&quot;GOOGLE&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mars_cid&quot;</span>: <span class="string">&quot;b3aad8e2-2840-39a5-8b51-e5b1c5b16bad&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mobile_channel&quot;</span>: <span class="string">&quot;yro8nr0d:::&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mobile_platform&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;net&quot;</span>: <span class="string">&quot;WIFI&quot;</span>,</span><br><span class="line">    <span class="string">&quot;operator&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;os&quot;</span>: <span class="string">&quot;Android&quot;</span>,</span><br><span class="line">    <span class="string">&quot;osv&quot;</span>: <span class="string">&quot;9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;otddid&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;other_cps&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;page_id&quot;</span>: <span class="string">&quot;page_te_globle_classify_search_1734917270854&quot;</span>,</span><br><span class="line">    <span class="string">&quot;phone_brand&quot;</span>: <span class="string">&quot;google&quot;</span>,</span><br><span class="line">    <span class="string">&quot;phone_model&quot;</span>: <span class="string">&quot;pixel 3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;priceMax&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;priceMin&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;props&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;province_id&quot;</span>: <span class="string">&quot;104101&quot;</span>,</span><br><span class="line">    <span class="string">&quot;referer&quot;</span>: <span class="string">&quot;com.achievo.vipshop.search.activity.TabSearchProductListActivity&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rom&quot;</span>: <span class="string">&quot;Dalvik/2.1.0 (Linux; U; Android 9; Pixel 3 Build/PD1A.180720.030)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sd_tuijian&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;service_provider&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;session_id&quot;</span>: <span class="string">&quot;b3aad8e2-2840-39a5-8b51-e5b1c5b16bad_shop_android_1734917371208&quot;</span>,</span><br><span class="line">    <span class="string">&quot;skey&quot;</span>: <span class="string">&quot;6692c461c3810ab150c9a980d0c275ec&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sort&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;source&quot;</span>: <span class="string">&quot;app&quot;</span>,</span><br><span class="line">    <span class="string">&quot;source_app&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">    <span class="string">&quot;standby_id&quot;</span>: <span class="string">&quot;yro8nr0d:::&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sys_version&quot;</span>: <span class="string">&quot;28&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tabFields&quot;</span>: <span class="string">&quot;gender,tabs,priceTabs,discountTabs,tabGroupV2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;timestamp&quot;</span>: <span class="string">&quot;1734917303&quot;</span>,</span><br><span class="line">    <span class="string">&quot;union_mark&quot;</span>: <span class="string">&quot;blank&amp;_&amp;blank&amp;_&amp;yro8nr0d:::&amp;_&amp;blank&amp;_&amp;blank&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vipService&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;warehouse&quot;</span>: <span class="string">&quot;VIP_HZ&quot;</span>,</span><br><span class="line">    <span class="string">&quot;width&quot;</span>: <span class="string">&quot;1080&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mapdata = <span class="string">&quot;&amp;&quot;</span>.join([key+<span class="string">&quot;=&quot;</span>+value <span class="keyword">for</span> key,value <span class="keyword">in</span> data.items()])</span><br><span class="line">salt = <span class="string">&quot;aee4c425dbb2288b80c71347cc37d04b&quot;</span></span><br><span class="line">onesha1 = sha1((salt+mapdata).encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">apisign = sha1((salt+onesha1).encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">&quot;authorization&quot;</span>: <span class="string">&quot;OAuth api_sign=&quot;</span>+apisign,</span><br><span class="line">  <span class="string">&quot;x-vip-host&quot;</span>: <span class="string">&quot;mapi.appvipshop.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">  <span class="string">&quot;content-length&quot;</span>: <span class="string">&quot;2886&quot;</span>,</span><br><span class="line">  <span class="string">&quot;accept-encoding&quot;</span>: <span class="string">&quot;gzip&quot;</span>,</span><br><span class="line">  <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;okhttp/4.9.1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url=url,data=data,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>



<h1 id="Unidbg"><a href="#Unidbg" class="headerlink" title="Unidbg"></a>Unidbg</h1><h2 id="模拟执行getNavInfo"><a href="#模拟执行getNavInfo" class="headerlink" title="模拟执行getNavInfo()"></a>模拟执行getNavInfo()</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/24.jpg"></p>
<p>so是<code>libkeyinfo.so</code></p>
<h3 id="hook-getNavInfo"><a href="#hook-getNavInfo" class="headerlink" title="hook getNavInfo()"></a>hook getNavInfo()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_getNavInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">KeyInfo</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.vip.vcsp.KeyInfo&quot;</span>);</span><br><span class="line">        <span class="title class_">KeyInfo</span>[<span class="string">&quot;getNavInfo&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">context, str</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`KeyInfo.getNavInfo is called: context=<span class="subst">$&#123;context&#125;</span>, str=<span class="subst">$&#123;str&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;getNavInfo&quot;</span>](context, str);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`KeyInfo.getNavInfo result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_getNavInfo</span>();</span><br></pre></td></tr></table></figure>

<p>hook结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KeyInfo.getNavInfo is called: context=com.achievo.vipshop.common.VipApplicationLike@ff37661, str=skey</span><br><span class="line">KeyInfo.getNavInfo result=6692c461c3810ab150c9a980d0c275ec</span><br></pre></td></tr></table></figure>

<h3 id="call-getNavInfo"><a href="#call-getNavInfo" class="headerlink" title="call getNavInfo()"></a>call getNavInfo()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">call_getNavInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">KeyInfo</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.vip.vcsp.KeyInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> context = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>).<span class="title function_">currentApplication</span>().<span class="title function_">getApplicationContext</span>();</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&quot;skey&quot;</span>;               </span><br><span class="line">        <span class="keyword">let</span> result = <span class="title class_">KeyInfo</span>[<span class="string">&quot;getNavInfo&quot;</span>](context, str);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`KeyInfo.getNavInfo result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KeyInfo.getNavInfo result=6692c461c3810ab150c9a980d0c275ec</span><br></pre></td></tr></table></figure>

<h3 id="Unidbg执行getNavInfo"><a href="#Unidbg执行getNavInfo" class="headerlink" title="Unidbg执行getNavInfo()"></a>Unidbg执行getNavInfo()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KeyInfo</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> DalvikModule dm;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KeyInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder</span><br><span class="line">                .for64Bit() <span class="comment">// for32Bit()</span></span><br><span class="line">                .setRootDir(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;target/rootfs&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">        memory = emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/java/com/achievo/vipshop/weipinhui.apk&quot;</span>));</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);</span><br><span class="line">        dm = vm.loadLibrary(<span class="string">&quot;keyinfo&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNavInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DvmClass</span> <span class="variable">KeyInfoClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.vip.vcsp.KeyInfo&quot;</span>);</span><br><span class="line">        <span class="type">DvmObject</span> <span class="variable">context</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;android/app/Application&quot;</span>,vm.resolveClass(<span class="string">&quot;android/content/ContextWrapper&quot;</span>,vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>))).newObject(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">stringObject</span> <span class="operator">=</span> KeyInfoClass.callStaticJniMethodObject(emulator,<span class="string">&quot;getNavInfo(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/String;&quot;</span>,context,<span class="string">&quot;skey&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> stringObject.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">KeyInfo</span> <span class="variable">keyInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyInfo</span>();</span><br><span class="line">        System.out.println(keyInfo.getNavInfo()); <span class="comment">// 6692c461c3810ab150c9a980d0c275ec</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="模拟执行gsNav"><a href="#模拟执行gsNav" class="headerlink" title="模拟执行gsNav()"></a>模拟执行gsNav()</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/25.jpg"></p>
<h3 id="hook-gsNav-1"><a href="#hook-gsNav-1" class="headerlink" title="hook gsNav()"></a>hook gsNav()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_gsNav</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">KeyInfo</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.vip.vcsp.KeyInfo&quot;</span>);</span><br><span class="line">        <span class="title class_">KeyInfo</span>[<span class="string">&quot;gsNav&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">context, map, str, z10</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----hooked gsNav----&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`KeyInfo.gsNav is called: context=<span class="subst">$&#123;context&#125;</span>, map=<span class="subst">$&#123;map&#125;</span>, str=<span class="subst">$&#123;str&#125;</span>, z10=<span class="subst">$&#123;z10&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;gsNav map:&quot;</span>,<span class="title function_">printMap</span>(map))</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;gsNav&quot;</span>](context, map, str, z10);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`KeyInfo.gsNav result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----hooked over!----&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_gsNav</span>()</span><br></pre></td></tr></table></figure>

<p>hook结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----hooked gsNav----</span><br><span class="line">KeyInfo.gsNav is called: context=com.achievo.vipshop.common.VipApplicationLike@17ab95c, map=[object Object], str=null, z10=false</span><br><span class="line">gsNav map: &#123;app_name=achievo_ad, app_version=9.39.4, channel=yro8nr0d:::, device=Pixel 3, device_token=c6e072c0-ec5c-3fd4-8b3d-993abbdcb72a, manufacturer=Google, os_version=29, regPlat=0, regid=null, rom=Dalvik/2.1.0 (Linux; U; Android 10; Pixel 3 Build/QQ3A.200705.002), skey=6692c461c3810ab150c9a980d0c275ec, status=1, vipruid=, warehouse=VIP_HZ&#125;</span><br><span class="line">KeyInfo.gsNav result=a05a0d94df429a4cdc0d2cd68bce1291b046d667</span><br><span class="line">----hooked over!----</span><br></pre></td></tr></table></figure>

<h3 id="unidbg执行gsNav"><a href="#unidbg执行gsNav" class="headerlink" title="unidbg执行gsNav()"></a>unidbg执行gsNav()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KeyInfo</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> DalvikModule dm;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KeyInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder</span><br><span class="line">                .for64Bit() <span class="comment">// for32Bit()</span></span><br><span class="line">                .setRootDir(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;target/rootfs&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">        memory = emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/java/com/achievo/vipshop/weipinhui.apk&quot;</span>));</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);</span><br><span class="line">        dm = vm.loadLibrary(<span class="string">&quot;keyinfo&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">gsNav</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DvmClass</span> <span class="variable">KeyInfoClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.vip.vcsp.KeyInfo&quot;</span>);</span><br><span class="line"><span class="comment">//        DvmObject context = vm.resolveClass(&quot;android/app/Application&quot;,vm.resolveClass(&quot;android/content/ContextWrapper&quot;,vm.resolveClass(&quot;android/content/Context&quot;))).newObject(null);</span></span><br><span class="line">        <span class="type">DvmObject</span> <span class="variable">context</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="literal">null</span>);</span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;app_name&quot;</span>,<span class="string">&quot;achievo_ad&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;app_version&quot;</span>,<span class="string">&quot;9.39.4&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;channel&quot;</span>,<span class="string">&quot;yro8nr0d:::&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;device&quot;</span>,<span class="string">&quot;Pixel 3&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;device_token&quot;</span>,<span class="string">&quot;c6e072c0-ec5c-3fd4-8b3d-993abbdcb72a&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;manufacturer&quot;</span>,<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;os_version&quot;</span>,<span class="string">&quot;29&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;regPlat&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;regid&quot;</span>,<span class="string">&quot;null&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;rom&quot;</span>,<span class="string">&quot;Dalvik/2.1.0 (Linux; U; Android 10; Pixel 3 Build/QQ3A.200705.002)&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;skey&quot;</span>,<span class="string">&quot;6692c461c3810ab150c9a980d0c275ec&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;status&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;vipruid&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;warehouse&quot;</span>,<span class="string">&quot;VIP_HZ&quot;</span>);</span><br><span class="line">        <span class="type">DvmObject</span> <span class="variable">map_dvmobj</span> <span class="operator">=</span> ProxyDvmObject.createObject(vm,map);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">stringObject</span> <span class="operator">=</span> KeyInfoClass.callStaticJniMethodObject(emulator,<span class="string">&quot;gsNav(Landroid/content/Context;Ljava/util/Map;Ljava/lang/String;Z)Ljava/lang/String;&quot;</span>,context,map_dvmobj,<span class="string">&quot;&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> stringObject.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">KeyInfo</span> <span class="variable">keyInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyInfo</span>();</span><br><span class="line">        System.out.println(keyInfo.gsNav());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行一下，需要补环境</p>
<h4 id="补entrySet"><a href="#补entrySet" class="headerlink" title="补entrySet()"></a>补entrySet()</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.UnsupportedOperationException: java/util/TreeMap-&gt;entrySet()Ljava/util/Set;</span><br><span class="line">	at com.github.unidbg.linux.android.dvm.AbstractJni.callObjectMethod(AbstractJni.java:933)</span><br></pre></td></tr></table></figure>

<p>补</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&quot;java/util/TreeMap-&gt;entrySet()Ljava/util/Set;&quot;</span>:&#123;</span><br><span class="line">    <span class="type">TreeMap</span> <span class="variable">map</span> <span class="operator">=</span> (TreeMap) dvmObject.getValue();</span><br><span class="line">    Set&lt;String&gt; set = map.entrySet();</span><br><span class="line">    <span class="keyword">return</span> ProxyDvmObject.createObject(vm,set);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行一下继续补环境</p>
<h4 id="补iterator"><a href="#补iterator" class="headerlink" title="补iterator()"></a>补iterator()</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.UnsupportedOperationException: java/util/Set-&gt;iterator()Ljava/util/Iterator;</span><br><span class="line">	at com.github.unidbg.linux.android.dvm.AbstractJni.callObjectMethod(AbstractJni.java:933)</span><br></pre></td></tr></table></figure>

<p>补</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&quot;java/util/Set-&gt;iterator()Ljava/util/Iterator;&quot;</span>:&#123;</span><br><span class="line">    <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> (Set) dvmObject.getValue();</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">    <span class="keyword">return</span> ProxyDvmObject.createObject(vm,it);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行一下继续补环境</p>
<h4 id="补hasNext"><a href="#补hasNext" class="headerlink" title="补hasNext()"></a>补hasNext()</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.UnsupportedOperationException: java/util/Iterator-&gt;hasNext()Z</span><br><span class="line">	at com.github.unidbg.linux.android.dvm.AbstractJni.callBooleanMethod(AbstractJni.java:598)</span><br></pre></td></tr></table></figure>

<p>补</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &quot;java/util/Iterator-&gt;hasNext()Z&quot;:&#123;</span><br><span class="line">    Iterator it = (Iterator) dvmObject.getValue();</span><br><span class="line">    boolean hasNext = it.hasNext();</span><br><span class="line">    return hasNext;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行一下继续补环境</p>
<h4 id="补next"><a href="#补next" class="headerlink" title="补next()"></a>补next()</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.UnsupportedOperationException: java/util/Iterator-&gt;next()Ljava/lang/Object;</span><br><span class="line">	at com.github.unidbg.linux.android.dvm.AbstractJni.callObjectMethod(AbstractJni.java:933)</span><br></pre></td></tr></table></figure>

<p>补</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &quot;java/util/Iterator-&gt;next()Ljava/lang/Object;&quot;:&#123;</span><br><span class="line">    Iterator iterator = (Iterator) dvmObject.getValue();</span><br><span class="line">    Object next = iterator.next();</span><br><span class="line">    return ProxyDvmObject.createObject(vm,next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行一下继续补环境</p>
<h4 id="补getKey"><a href="#补getKey" class="headerlink" title="补getKey()"></a>补getKey()</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.UnsupportedOperationException: java/util/Map$Entry-&gt;getKey()Ljava/lang/Object;</span><br><span class="line">	at com.github.unidbg.linux.android.dvm.AbstractJni.callObjectMethod(AbstractJni.java:933)</span><br></pre></td></tr></table></figure>

<p>补</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &quot;java/util/Map$Entry-&gt;getKey()Ljava/lang/Object;&quot;:&#123;</span><br><span class="line">    Map.Entry entry = (Map.Entry) dvmObject.getValue();</span><br><span class="line">    Object key = entry.getKey();</span><br><span class="line">    return ProxyDvmObject.createObject(vm,key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="补getValue"><a href="#补getValue" class="headerlink" title="补getValue()"></a>补getValue()</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.UnsupportedOperationException: java/util/Map$Entry-&gt;getValue()Ljava/lang/Object;</span><br><span class="line">	at com.github.unidbg.linux.android.dvm.AbstractJni.callObjectMethod(AbstractJni.java:933)</span><br></pre></td></tr></table></figure>

<p>补</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&quot;java/util/Map$Entry-&gt;getValue()Ljava/lang/Object;&quot;</span>:&#123;</span><br><span class="line">    Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) dvmObject.getValue();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">    <span class="keyword">return</span> ProxyDvmObject.createObject(vm,value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="over"><a href="#over" class="headerlink" title="over"></a>over</h4><p>出结果了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a05a0d94df429a4cdc0d2cd68bce1291b046d667</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>唯品会</tag>
      </tags>
  </entry>
  <entry>
    <title>快速上手unidbg</title>
    <url>/2025/02/16/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bunidbg/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Unidbg是一个轻量级模拟器，支持对Android Native函数的模拟执行。</p>
<p>Unidbg是一个基于Maven构建的 JAVA 项目，可在 Github 下载源代码，然后在 IDEA&#x2F;VScode 等 IDE 里打开，其依赖下载完成后，测试运行。</p>
<h1 id="初始化环境"><a href="#初始化环境" class="headerlink" title="初始化环境"></a>初始化环境</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Emulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.backend.Unicorn2Factory;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.file.FileResult;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.file.IOResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.DalvikModule;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.VM;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> <span class="keyword">implements</span> <span class="title class_">IOResolver</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">process</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> DalvikModule dm;</span><br><span class="line">    <span class="keyword">private</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MainActivity</span><span class="params">()</span> &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder</span><br><span class="line">                .for64Bit() <span class="comment">// for32Bit()</span></span><br><span class="line">                .setProcessName(process)</span><br><span class="line">                .setRootDir(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;target/rootfs&quot;</span>))</span><br><span class="line">                .addBackendFactory(<span class="keyword">new</span> <span class="title class_">Unicorn2Factory</span>(<span class="literal">false</span>))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 设置执行多少条指令切换一次线程</span></span><br><span class="line"><span class="comment">//        emulator.getBackend().registerEmuCountHook(10000);</span></span><br><span class="line">        <span class="comment">// 启用系统调用的详细日志输出。</span></span><br><span class="line"><span class="comment">//        emulator.getSyscallHandler().setVerbose(true);</span></span><br><span class="line">        <span class="comment">// 开启线程调度器</span></span><br><span class="line"><span class="comment">//        emulator.getSyscallHandler().setEnableThreadDispatcher(true);</span></span><br><span class="line">        memory = emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);</span><br><span class="line">        dm = vm.loadLibrary(<span class="string">&quot;&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        emulator.getSyscallHandler().addIOResolver(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FileResult <span class="title function_">resolve</span><span class="params">(Emulator emulator, String pathname, <span class="type">int</span> oflags)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;pathname:&quot;</span> + pathname);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="加载动态链接库"><a href="#加载动态链接库" class="headerlink" title="加载动态链接库"></a>加载动态链接库</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DalvikModule <span class="title function_">loadLibrary</span><span class="params">(String libname, <span class="type">boolean</span> forceCallInit)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// libname:共享库的名字，不包含路径和扩展名</span></span><br><span class="line"><span class="comment">// forceCallInit:是否强制调用库的初始化函数</span></span><br><span class="line"><span class="comment">// 返回 DalvikModule 对象，它表示已加载的库，并且可以通过该对象调用库中的函数。</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DalvikModule <span class="title function_">loadLibrary</span><span class="params">(File elfFile, <span class="type">boolean</span> forceCallInit)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// elfFile:File 类型的对象，指向共享库的路径</span></span><br><span class="line"><span class="comment">// forceCallInit:是否强制调用库的初始化函数</span></span><br><span class="line"><span class="comment">// 返回 DalvikModule 对象，它表示已加载的库，并且可以通过该对象调用库中的函数。</span></span><br></pre></td></tr></table></figure>

<h1 id="获取类和对象"><a href="#获取类和对象" class="headerlink" title="获取类和对象"></a>获取类和对象</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="resolveClass"><a href="#resolveClass" class="headerlink" title="resolveClass()"></a>resolveClass()</h3><p>方法签名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DvmClass <span class="title function_">resolveClass</span><span class="params">(String className, DvmClass... interfaceClasses)</span>;</span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DvmClass</span> <span class="variable">myClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com/example/MyClass&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="DvmClass-newObject"><a href="#DvmClass-newObject" class="headerlink" title="DvmClass.newObject()"></a>DvmClass.newObject()</h3><p>通过类获取对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DvmObject</span> <span class="variable">myobject</span> <span class="operator">=</span> myClass.newObject(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<h3 id="ProxyDvmObject-createObject"><a href="#ProxyDvmObject-createObject" class="headerlink" title="ProxyDvmObject.createObject()"></a>ProxyDvmObject.createObject()</h3><p>方法签名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DvmObject&lt;?&gt; createObject(VM vm, Object value)</span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DvmObject</span> <span class="variable">myobject</span> <span class="operator">=</span> ProxyDvmObject.createObject(vm,value)</span><br></pre></td></tr></table></figure>

<h1 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h1><h2 id="调用静态方法与实例方法的区别"><a href="#调用静态方法与实例方法的区别" class="headerlink" title="调用静态方法与实例方法的区别"></a>调用静态方法与实例方法的区别</h2><ul>
<li><p><strong>静态方法</strong></p>
<p>  通过类直接调用，不需要实例对象。</p>
</li>
<li><p><strong>实例方法</strong></p>
<p>  需要通过类的实例对象调用。</p>
</li>
</ul>
<h2 id="调用静态方法"><a href="#调用静态方法" class="headerlink" title="调用静态方法"></a>调用静态方法</h2><p>根据返回值使用合适的调用方法。</p>
<p><img src="/2025/02/16/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bunidbg/1.jpg"></p>
<h2 id="调用实例方法"><a href="#调用实例方法" class="headerlink" title="调用实例方法"></a>调用实例方法</h2><p>根据返回值使用合适的调用方法。</p>
<p><img src="/2025/02/16/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bunidbg/2.jpg"></p>
<h2 id="通过module调用so中方法"><a href="#通过module调用so中方法" class="headerlink" title="通过module调用so中方法"></a>通过module调用so中方法</h2><h3 id="通过符号名调用"><a href="#通过符号名调用" class="headerlink" title="通过符号名调用"></a>通过符号名调用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Number <span class="title function_">callFunction</span><span class="params">(Emulator&lt;?&gt; emulator, String symbolName, Object... args)</span>; </span><br></pre></td></tr></table></figure>

<h3 id="通过地址调用"><a href="#通过地址调用" class="headerlink" title="通过地址调用"></a>通过地址调用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Number <span class="title function_">callFunction</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> offset, Object... args)</span>;</span><br></pre></td></tr></table></figure>

<h1 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h1><h2 id="基本类型的参数传递"><a href="#基本类型的参数传递" class="headerlink" title="基本类型的参数传递"></a>基本类型的参数传递</h2><p>Java 中的基本类型（如<code>byte</code>、<code>char</code>、<code>short</code>、 <code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>、<code>boolean</code> 等）可以直接作为参数传递。</p>
<p>String类型也可以直接作为参数传递（不建议，有时候可能导致错误）。</p>
<h2 id="基本对象的参数传递"><a href="#基本对象的参数传递" class="headerlink" title="基本对象的参数传递"></a>基本对象的参数传递</h2><p>这里的基本对象指的是基本类型的包装类、字符串、基本类型数组，对象类型数组等</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>可以用如下方式处理<code>StringObject</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringObject</span> <span class="variable">stringObj</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;java/lang/String&quot;</span>).newObject(<span class="string">&quot;Hello World&quot;</span>); 	<span class="comment">// 这样写太冗长了，不建议</span></span><br><span class="line"><span class="type">StringObject</span> <span class="variable">stringObj</span> <span class="operator">=</span> (StringObject) ProxyDvmObject.createObject(vm, <span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"><span class="type">StringObject</span> <span class="variable">stringObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm,<span class="string">&quot;Hello World&quot;</span>); 	<span class="comment">// 建议这样写，简单又直观</span></span><br></pre></td></tr></table></figure>

<h3 id="字节数组"><a href="#字节数组" class="headerlink" title="字节数组"></a>字节数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ByteArray</span> <span class="variable">byteArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArray</span>(vm, <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">0x64</span>, (<span class="type">byte</span>) <span class="number">0xBC</span>, <span class="number">0x0C</span>, <span class="number">0x65</span>, (<span class="type">byte</span>) <span class="number">0xAA</span>, <span class="number">0x1E</span>&#125;);</span><br><span class="line"><span class="type">ByteArray</span> <span class="variable">byteArray</span> <span class="operator">=</span> (ByteArray) ProxyDvmObject.createObject(vm, <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">0x64</span>, (<span class="type">byte</span>) <span class="number">0xBC</span>, <span class="number">0x0C</span>, <span class="number">0x65</span>, (<span class="type">byte</span>) <span class="number">0xAA</span>, <span class="number">0x1E</span>&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="字符串数组"><a href="#字符串数组" class="headerlink" title="字符串数组"></a>字符串数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ArrayObject</span> <span class="variable">arrayObject</span> <span class="operator">=</span> ArrayObject.newStringArray(vm, <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>);</span><br><span class="line"><span class="type">ArrayObject</span> <span class="variable">arrayObject</span> <span class="operator">=</span> (ArrayObject) ProxyDvmObject.createObject(vm,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">List&lt;DvmObject&lt;?&gt;&gt; myList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        myList.add(i);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayListObject</span>(vm, myList);  </span><br></pre></td></tr></table></figure>

<h3 id="对象参数"><a href="#对象参数" class="headerlink" title="对象参数"></a>对象参数</h3><p>对象类型的参数都可以用<code>ProxyDvmObject.createObject()</code>来处理</p>
<p>HashMap 对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ProxyDvmObject.createObject(vm, new HashMap&lt;&gt;());</span><br></pre></td></tr></table></figure>

<h3 id="Android里的类和对象"><a href="#Android里的类和对象" class="headerlink" title="Android里的类和对象"></a>Android里的类和对象</h3><p>对于Android里的类和对象，用<code>vm.resolveClass()</code>来处理比较好。</p>
<h1 id="获取模块的基地址"><a href="#获取模块的基地址" class="headerlink" title="获取模块的基地址"></a>获取模块的基地址</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Module</span> <span class="variable">module</span> <span class="operator">=</span> emulator.getMemory().getModule(<span class="string">&quot;target.so&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Base address: 0x&quot;</span> + Long.toHexString(<span class="keyword">module</span>.base));</span><br></pre></td></tr></table></figure>

<h1 id="补环境"><a href="#补环境" class="headerlink" title="补环境"></a>补环境</h1><h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p>系统调用是由<code>svc</code>软中断发起的，依赖与<code>svc</code>后面的数字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">svc imm</span><br><span class="line">bx lr</span><br></pre></td></tr></table></figure>

<p>在系统调用的调用约定里，<code>imm</code>无实际意义，而且默认使用<code>0</code>，<code>svc 0</code>，Unidbg可以根据<code>imm</code>是否为0来确认模拟的是JNI函数调用还是系统调用。</p>
<h2 id="JNI调用"><a href="#JNI调用" class="headerlink" title="JNI调用"></a>JNI调用</h2><p>Unidbg构造了<code>JNIEnv</code>和<code>JavaVM</code>这两个JNI中的关键结构，凭借系统调用的处理模块来实现对JNI的代理，在<code>svc imm</code>及<code>bx lr</code>这部分，有意义的是<code>lr</code>，它是<code>svc</code>的返回地址，对应样本发起JNI调用的位置。</p>
<h2 id="补环境的原因"><a href="#补环境的原因" class="headerlink" title="补环境的原因"></a>补环境的原因</h2><p>对于对样本的Java层数据做访问的一系列JNI函数，由于Unidbg未运行Dex以及Apk，就需要自己去填充外部信息。</p>
<p>为了减少补环境的负担，Unidbg预处理了常见的JNI函数调用和字段访问，逻辑位于<code>src/main/java/com/github/unidbg/linux/android/dvm/AbstractJni.java</code>类里。</p>
<h1 id="日志打印"><a href="#日志打印" class="headerlink" title="日志打印"></a>日志打印</h1><p>Unidbg 中使用 Apache 的开源项目 <a href="https://mvnrepository.com/artifact/log4j/log4j/1.2.17">log4j</a> 和 <a href="https://mvnrepository.com/artifact/commons-logging/commons-logging/1.2">commons-logging</a> 处理日志。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    Logger.getLogger(ARM32SyscallHandler.class).setLevel(Level.DEBUG);</span><br><span class="line">    Logger.getLogger(AndroidSyscallHandler.class).setLevel(Level.DEBUG);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ARM64 JNI 详细日志</span></span><br><span class="line">    Logger.getLogger(DalvikVM64.class).setLevel(Level.DEBUG);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ARM32 JNI 详细日志</span></span><br><span class="line">    Logger.getLogger(DalvikVM.class).setLevel(Level.DEBUG);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果希望输出所有模块的日志，可以修改<code>unidbg-android/src/test/resources/log4j.properties</code>文件，将 unidbg 的日志等级从 INFO 改为 DEBUG。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改前</span><br><span class="line">log4j.logger.com.github.unidbg=INFO</span><br><span class="line"># 修改后</span><br><span class="line">log4j.logger.com.github.unidbg=DEBUG</span><br></pre></td></tr></table></figure>

<h2 id="虚拟机日志"><a href="#虚拟机日志" class="headerlink" title="虚拟机日志"></a>虚拟机日志</h2><p>除了常规日志，Unidbg 还有另一套日志输出，主要打印 JNI 、Syscall 调用相关的内容。它和常规日志的输出有重叠，但内容更详细一些。</p>
<p>通过 vm.setVerbose 开启或关闭它。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置是否打印以 JNI 为主的虚拟机调用细节</span></span><br><span class="line">vm.setVerbose(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<h1 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BreakPoint <span class="title function_">addBreakPoint</span><span class="params">(<span class="type">long</span> address)</span>;</span><br><span class="line"><span class="comment">// 在指定的内存地址处添加一个断点。当程序执行到这个地址时，断点会被触发。</span></span><br><span class="line"><span class="comment">// 返回一个 BreakPoint 对象，用于后续管理（例如：禁用或移除断点）。</span></span><br><span class="line"><span class="comment">// Unidbg 内部会监控执行流程，当指令指针（PC）到达该地址时，自动触发断点。</span></span><br><span class="line">BreakPoint <span class="title function_">addBreakPoint</span><span class="params">(<span class="type">long</span> address, BreakPointCallback callback)</span>;</span><br><span class="line"><span class="comment">// 在指定地址处添加一个断点，并绑定一个自定义回调。每当执行到该地址时，不仅触发断点，还会调用你提供的回调函数。</span></span><br><span class="line"><span class="comment">// 同样返回一个 BreakPoint 对象，用于管理该断点。</span></span><br><span class="line"><span class="comment">// 当程序执行到设定的地址时，除了触发断点外，Unidbg 会调用实现了 BreakPointCallback 接口的回调方法。</span></span><br></pre></td></tr></table></figure>

<p>示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在地址 0x1000 处设置断点，并绑定一个自定义回调</span></span><br><span class="line"><span class="type">BreakPoint</span> <span class="variable">bp</span> <span class="operator">=</span> emulator.addBreakPoint(<span class="number">0x1000</span>, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">        <span class="comment">// 当断点命中时，打印相关信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;断点命中，地址：&quot;</span> + Long.toHexString(address));</span><br><span class="line">        <span class="comment">// 此处可以添加更多调试操作，比如查看寄存器或内存状态</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c: continue</span><br><span class="line">// 可以让程序继续运行，直到遇到下一个断点或程序执行结束。</span><br><span class="line">n: step over</span><br><span class="line">// 单步执行当前指令，但不会进入函数内部。</span><br><span class="line">bt: back trace</span><br><span class="line">// 打印当前的调用栈信息，也就是从当前执行点一直追溯到程序入口的函数调用链。</span><br><span class="line">nb: break at next block</span><br><span class="line">// 在下一个基本块（Basic Block） 开始执行时自动暂停。</span><br><span class="line">s|si: step into</span><br><span class="line">// 单步执行，如果下一条指令是函数调用，它会进入该函数内部执行。</span><br><span class="line">s[decimal]: execute specified amount instruction</span><br><span class="line">// 允许一次性执行多条指令，然后暂停，而不是一条一条手动执行。</span><br><span class="line">s(bl): execute util BL mnemonic, low performance</span><br><span class="line">// 执行直到遇到 BL 指令</span><br><span class="line">m(op) [size]: show memory, default size is 0x70, size may hex or decimal</span><br><span class="line">// 显示从某个起始地址开始的内存内容。</span><br><span class="line">// 默认显示的内存大小为 0x70 字节（约112字节）。</span><br><span class="line">// [size] 参数可选，可以以十六进制（例如 0x50）或十进制（例如 80）的形式提供</span><br><span class="line">mx0-mx28, mfp, mip, msp [size]: show memory of specified register</span><br><span class="line">// 显示某个寄存器所存储地址处的内存数据。</span><br><span class="line">m(address) [size]: show memory of specified address, address must start with 0x</span><br><span class="line">// 查看该地址处的数据</span><br><span class="line">b(address): add temporarily breakpoint, address must start with 0x, can be module offset</span><br><span class="line">// 在指定地址处添加一个临时断点</span><br><span class="line">b: add breakpoint of register PC</span><br><span class="line">// 在当前程序计数器（PC）指向的地址设置断点。</span><br><span class="line">r: remove breakpoint of register PC</span><br><span class="line">// 命令 r 用于移除之前通过 b 命令设置的 PC 断点。</span><br><span class="line">blr: add temporarily breakpoint of register LR</span><br><span class="line">// 在链接寄存器（LR）所指向的地址上添加一个临时断点。</span><br></pre></td></tr></table></figure>



<h1 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h1><h2 id="traceCode"><a href="#traceCode" class="headerlink" title="traceCode()"></a>traceCode()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TraceHook <span class="title function_">traceCode</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 无参的 traceCode() 方法返回一个 TraceHook 对象，该对象默认对整个代码模块的执行进行追踪，不对地址范围作任何限制。</span></span><br><span class="line"></span><br><span class="line">TraceHook <span class="title function_">traceCode</span><span class="params">(<span class="type">long</span> begin, <span class="type">long</span> end)</span>;</span><br><span class="line"><span class="comment">// 这个重载版本接收两个 long 类型的参数，分别代表代码追踪的起始地址和结束地址。返回的 TraceHook 对象只会对指定地址区间内的指令进行追踪。</span></span><br><span class="line"></span><br><span class="line">TraceHook <span class="title function_">traceCode</span><span class="params">(<span class="type">long</span> begin, <span class="type">long</span> end, TraceCodeListener listener)</span>;</span><br><span class="line"><span class="comment">// 除了指定起始与结束地址外，此方法还允许传入一个自定义的 TraceCodeListener。该监听器在每次执行到追踪范围内的指令时都会被调用，从而让你能够在运行时动态处理或记录这些指令信息。</span></span><br></pre></td></tr></table></figure>

<p>用法示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">emulator.traceCode(module.base, module.base + module.size);</span><br></pre></td></tr></table></figure>

<h2 id="trace的时机"><a href="#trace的时机" class="headerlink" title="trace的时机"></a>trace的时机</h2><ul>
<li><p>如果想 trace 从某个函数开始的执行流，那就让 traceCode 早于它执行即可。</p>
</li>
<li><p>想trace 从 JNI_OnLoad 开始的目标 SO 执行流，在<code>dm.callJNI_OnLoad(emulator);</code>前添加 trace。</p>
<p>  如下</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">emulator.traceCode(<span class="keyword">module</span>.base, <span class="keyword">module</span>.base + <span class="keyword">module</span>.size);</span><br><span class="line">dm.callJNI_OnLoad(emulator);</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果想到更早的时机开启追踪，即追踪 init_proc、init_array 这些初始化函数的执行情况，那就需要将 traceCode 放到 loadLibrary 之前调用，代码直接提前到前面是不行的，因为此时还没有取到<code>module</code>对象，自然也没有什么<code>module.base</code>和<code>module.size</code>，这时候最正确的处理办法是使用模块监听器，在模块加载的第一时间开始 trace 。</p>
<p>  如下</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">memory.addModuleListener(<span class="keyword">new</span> <span class="title class_">ModuleListener</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLoaded</span><span class="params">(Emulator&lt;?&gt; emulator, Module <span class="keyword">module</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">module</span>.name.equals(<span class="string">&quot;lib.so&quot;</span>))&#123;</span><br><span class="line">            emulator.traceCode(<span class="keyword">module</span>.base, <span class="keyword">module</span>.base+<span class="keyword">module</span>.size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="type">DalvikModule</span> <span class="variable">dm</span> <span class="operator">=</span> vm.loadLibrary(<span class="string">&quot;xxx&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">dm.callJNI_OnLoad(emulator);</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="AndroidEmulator"><a href="#AndroidEmulator" class="headerlink" title="AndroidEmulator"></a>AndroidEmulator</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AndroidEmulator emulator;</span><br><span class="line"></span><br><span class="line">emulator.getSyscallHandler().addIOResolver(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">// 注册一个自定义的IO解析器，用于处理模拟执行期间的文件系统操作。</span></span><br></pre></td></tr></table></figure>







<h1 id="打包及Python调用"><a href="#打包及Python调用" class="headerlink" title="打包及Python调用"></a>打包及Python调用</h1><h2 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h2><p>这里我在<code>unidbg</code>的根目录下创建了一个文件夹<code>apks</code>，在这里面放apk文件，在java文件里写apk路径的时候可以直接<code>apks/.../example.apk</code>，就可以了。</p>
<p><img src="/2025/02/16/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bunidbg/3.jpg"></p>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>点击菜单中的<code>File</code>-&gt;<code>Project Structure</code>，然后在<code>Project Settings</code>里点击<code>Artifacts</code>，依次点击如下内容</p>
<p><img src="/2025/02/16/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bunidbg/4.jpg"></p>
<p>然后会弹出如下的窗口，在Main Class里选择要打包的类，勾选下图中的选项，并指定META-INF&#x2F;MANIFEST.MF目录</p>
<p><img src="/2025/02/16/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bunidbg/5.jpg"></p>
<p>然后点击OK-&gt;Apply-&gt;OK </p>
<h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><p>菜单栏点击Build-&gt;<code>Build Artifacts</code>-&gt;<code>unidbg:jar</code>-&gt;<code>Build</code></p>
<p>完成之后会在<code>unidbg</code>根目录下生成一个<code>out</code>文件夹，打包的文件就在<code>unidbg_jar</code>里，如下。</p>
<p><img src="/2025/02/16/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bunidbg/6.jpg"></p>
<p>但是这个文件夹里没有apk文件，还需要手动把apk文件及其目录一起移动到这里面</p>
<p>直接把apks目录赋值到<code>unidbg_jar</code>里，如下</p>
<p><img src="/2025/02/16/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bunidbg/7.jpg"></p>
<h2 id="终端运行"><a href="#终端运行" class="headerlink" title="终端运行"></a>终端运行</h2><p>进入到<code>unidbg_jar</code>目录下，打开终端，执行命令，就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar unidbg.jar</span><br></pre></td></tr></table></figure>

<h2 id="Python调用"><a href="#Python调用" class="headerlink" title="Python调用"></a>Python调用</h2><p>使用<code>subprocess</code>调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line">cmd = &quot;java -jar unidbg.jar&quot;</span><br><span class="line">signature = subprocess.check_output(cmd, shell=True,cwd=&quot;unidbg_jar&quot;).decode(&quot;utf-8&quot;)</span><br><span class="line">print(signature)</span><br></pre></td></tr></table></figure>

<p><img src="/2025/02/16/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bunidbg/8.jpg"></p>
]]></content>
      <categories>
        <category>Unidbg</category>
      </categories>
      <tags>
        <tag>unidbg</tag>
      </tags>
  </entry>
  <entry>
    <title>得物app过强制更新及获取首页推荐数据</title>
    <url>/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.shizhuang.duapp</p>
<p><img src="/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/1.jpg"></p>
<h1 id="过强制更新"><a href="#过强制更新" class="headerlink" title="过强制更新"></a>过强制更新</h1><h2 id="jadx反编译apk"><a href="#jadx反编译apk" class="headerlink" title="jadx反编译apk"></a>jadx反编译apk</h2><p>搜索<code>下载最新版</code>就可以找到相关字符串，然后双击跳转</p>
<p>如下是源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Dialog <span class="title function_">a</span><span class="params">(Activity activity)</span> &#123;</span><br><span class="line">    <span class="type">PatchProxyResult</span> <span class="variable">proxy</span> <span class="operator">=</span> PatchProxy.proxy(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;activity&#125;, <span class="built_in">this</span>, changeQuickRedirect, <span class="literal">false</span>, <span class="number">168458</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Activity.class&#125;, Dialog.class);</span><br><span class="line">    <span class="keyword">if</span> (proxy.isSupported) &#123;</span><br><span class="line">        <span class="keyword">return</span> (Dialog) proxy.result;</span><br><span class="line">    &#125;</span><br><span class="line">    MaterialDialog.<span class="type">Builder</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MaterialDialog</span>.Builder(activity).e(<span class="string">&quot;版本更新提示&quot;</span>).a((CharSequence) <span class="string">&quot;为保证您的服务和体验，我们对产品进行了更新，优化了应用性能，马上下载最新版得物App，抢先体验最新的产品服务！感谢您对得物App的支持&quot;</span>).d(<span class="string">&quot;更新&quot;</span>).d(<span class="keyword">new</span> <span class="title class_">MaterialDialog</span>.SingleButtonCallback() &#123; <span class="comment">// from class: com.shizhuang.duapp.modules.userv2.setting.user.ui.MerchantCheckNotifierDialog.1</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> ChangeQuickRedirect changeQuickRedirect;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">// com.afollestad.materialdialogs.MaterialDialog.SingleButtonCallback</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(MaterialDialog materialDialog, DialogAction dialogAction)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (PatchProxy.proxy(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;materialDialog, dialogAction&#125;, <span class="built_in">this</span>, changeQuickRedirect, <span class="literal">false</span>, <span class="number">168459</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;MaterialDialog.class, DialogAction.class&#125;, Void.TYPE).isSupported) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            MerchantCheckNotifierDialog.<span class="built_in">this</span>.a();</span><br><span class="line">            SafeDialogHandle.b(materialDialog);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    d.b(<span class="string">&quot;取消&quot;</span>).b(<span class="keyword">new</span> <span class="title class_">MaterialDialog</span>.SingleButtonCallback() &#123; <span class="comment">// from class: com.shizhuang.duapp.modules.userv2.setting.user.ui.MerchantCheckNotifierDialog.2</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> ChangeQuickRedirect changeQuickRedirect;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">// com.afollestad.materialdialogs.MaterialDialog.SingleButtonCallback</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(<span class="meta">@NonNull</span> MaterialDialog materialDialog, <span class="meta">@NonNull</span> DialogAction dialogAction)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (PatchProxy.proxy(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;materialDialog, dialogAction&#125;, <span class="built_in">this</span>, changeQuickRedirect, <span class="literal">false</span>, <span class="number">168460</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;MaterialDialog.class, DialogAction.class&#125;, Void.TYPE).isSupported) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            MerchantCheckNotifierDialog.<span class="built_in">this</span>.b();</span><br><span class="line">            SafeDialogHandle.b(materialDialog);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    d.b(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> d.d();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个方法返回一个<code>Dialog</code>，一个更新对话框。</p>
<p>方法里面使用<code>MaterialDialog.Builder</code>构建对话框，设置对话框的标题和内容。</p>
<p>这里面有一行代码<code>d.b(false);</code>，用来设置对话框不可通过点击外部区域或返回键取消。</p>
<h2 id="frida-hook"><a href="#frida-hook" class="headerlink" title="frida hook"></a>frida hook</h2><p>使用frida把参数改成true实现绕过</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_update</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">Builder</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.afollestad.materialdialogs.MaterialDialog$Builder&quot;</span>);</span><br><span class="line">        <span class="title class_">Builder</span>[<span class="string">&quot;b&quot;</span>].<span class="title function_">overload</span>(<span class="string">&#x27;boolean&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">z</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Builder.b is called: z=<span class="subst">$&#123;z&#125;</span>`</span>);</span><br><span class="line">            z = <span class="literal">true</span>; <span class="comment">// 改成了true</span></span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;b&quot;</span>](z);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Builder.b result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_update</span>();</span><br></pre></td></tr></table></figure>

<p>然后进入app之后，点击空白处，更新窗口就不见了。</p>
<h1 id="抓包首页推荐数据"><a href="#抓包首页推荐数据" class="headerlink" title="抓包首页推荐数据"></a>抓包首页推荐数据</h1><h2 id="找到相应的接口"><a href="#找到相应的接口" class="headerlink" title="找到相应的接口"></a>找到相应的接口</h2><p><img src="/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/2.jpg"></p>
<h2 id="抓包数据"><a href="#抓包数据" class="headerlink" title="抓包数据"></a>抓包数据</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">url<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//app.dewu.com/sns-rec/v1/recommend/all/feed</span></span><br><span class="line"></span><br><span class="line">get</span><br><span class="line"></span><br><span class="line">params = <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;abType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;social_brand_strategy_v454&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;abValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lastId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;limit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;deliveryProjectId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;abVideoCover&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;abRectagFengge&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;abRecReason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;abLiveEntranceClose&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;newSign&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ea992f16a5e15cbfa611ab96efb1f015&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">headers = <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;debugable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;duuuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bc11eeafc514fa6b&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;duimei&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;duplatform&quot;</span><span class="punctuation">:</span> <span class="string">&quot;android&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;appId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;duapp&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;duchannel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myapp&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;humeChannel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;duv&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4.75.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;duloginToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dudeviceTrait&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pixel+3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dudeviceBrand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;google&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1739958080487&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shumeiid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;202502191641573cd0dc0c35cca79e0b43264e08ce4f320080707d260494d8&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;oaid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;User-Agent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;duapp/4.75.5(android;10)&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;X-Auth-Token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bearer eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3Mzk5NTY3NDgsImV4cCI6MTc3MTQ5Mjc0OCwiaXNzIjoiYmMxMWVlYWZjNTE0ZmE2YiIsInN1YiI6ImJjMTFlZWFmYzUxNGZhNmIiLCJ1dWlkIjoiYmMxMWVlYWZjNTE0ZmE2YiIsInVzZXJJZCI6MjQ5Njk3MjI1NSwidXNlck5hbWUiOiLlvpfniallci05SzFGMEI2SCIsImlzR3Vlc3QiOnRydWV9.s1T7_E62uvd1nCTPVb1dpIo1ggqjXmixXDeLQep5wsO8erOXpKV-6Zsr5pB7e1a6aiHyPbwh0moYHqjS4dW8l4tQ9KJrUrGCTEAYMnIJyUXSnQLXg6VTUPGtTikcMjWKYs1acxUt-ak6mGZt8wDXqBNJmGDIlOkT_H2cMnuB0JkcTHSNDKcgTxETEMnVD17mkK4SOBJRGpTiDsPFlkqAympFLRyVzKum-b6L1fXpDUIkE3sU-0IjLowmkgaheLXEC4JtYz6Jy9l0zJbyIUFFpu5Ey9-xzF_61hgpvHcfaN3oMsJBx3YXdj4R9cZWO8_gh_QdPCEIjQrA4dw695hPAQ&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isRoot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;emu&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isProxy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;SK&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9RNrI7q2DZBTU9eJoIOOBsyH8lpcfWexhNr0a7Zkm916pFB84VoQCnFbpt1xL24IsQMpxG16EjzAUB7Kw7Ze6OHpK81r&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app.dewu.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Connection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Keep-Alive&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Accept-Encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gzip&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Cookie&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HWWAFSESTIME=1739956746046; HWWAFSESID=cdf322fe67256a33a30&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">url<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//app.dewu.com/sns-rec/v1/recommend/all/feed?</span></span><br><span class="line"></span><br><span class="line">get</span><br><span class="line"></span><br><span class="line">params<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;abType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;social_brand_strategy_v454&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;abValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lastId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;limit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;deliveryProjectId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;abVideoCover&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;abRectagFengge&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;abRecReason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;newSign&quot;</span><span class="punctuation">:</span> <span class="string">&quot;455cbb7f4983593149710f1e6a7d150c&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">headers<span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;debugable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;duuuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bc11eeafc514fa6b&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;duimei&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;duplatform&quot;</span><span class="punctuation">:</span> <span class="string">&quot;android&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;appId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;duapp&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;duchannel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myapp&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;humeChannel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;duv&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4.74.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;duloginToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dudeviceTrait&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pixel+3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dudeviceBrand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;google&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1740103378954&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shumeiid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;202502211001376b2a86c46bd029859670f6b24db7f5be0030988becd7a9cc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;oaid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;User-Agent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;duapp/4.74.5(android;10)&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;X-Auth-Token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bearer eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NDAxMDMyOTgsImV4cCI6MTc3MTYzOTI5OCwiaXNzIjoiYmMxMWVlYWZjNTE0ZmE2YiIsInN1YiI6ImJjMTFlZWFmYzUxNGZhNmIiLCJ1dWlkIjoiYmMxMWVlYWZjNTE0ZmE2YiIsInVzZXJJZCI6MjQ5Njk3MjI1NSwidXNlck5hbWUiOiLlvpfniallci05SzFGMEI2SCIsImlzR3Vlc3QiOnRydWV9.u3DBybDzMvee-V9rWdGuDePZU1TvvbOvodPeJ88-lKmxMbJpK8U93jyxIdcQ8BzhdSahkWn29T6sG3S3-bq1dz9p_MWgfxw5yYSIOE4qd2NfAr1OQ4n-BGQXw7EYdC-eg0uDOIctGCJ2OSfyKlqzqeIx9RIQieJf2bkYeYFF1vkF8SKU2rf-1ESjWdpiUkvPuBN5NrafGHvL4VRkdxkCjT_NTezQ8tXm1PgrYy_73jGGma1nX8Vp49wLqoxhrimQwUremdcNUEWWdeTNsy7nSbobiArkONoRIknrO922QU4nOmFWBuPRnRRGmKHZ371Q3MobmAz7s7yCXt1uDsY4QQ&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isRoot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;emu&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isProxy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app.dewu.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Connection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Keep-Alive&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Accept-Encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gzip&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Cookie&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HWWAFSESTIME=1740103292438; HWWAFSESID=775c333dec0422ea694&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">url<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//app.dewu.com/sns-rec/v1/recommend/all/feed</span></span><br><span class="line"></span><br><span class="line">get</span><br><span class="line"></span><br><span class="line">params<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;abType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;social_brand_strategy_v454&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;abValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lastId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;limit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;deliveryProjectId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;abVideoCover&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;abRectagFengge&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;abRecReason&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;newSign&quot;</span><span class="punctuation">:</span> <span class="string">&quot;f78e63f1c3d0e7fad6d8d6688ef7e5a3&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">loginTokenpagehomeplatformandroidtestatimestamp1740054362656uuidbc11eeafc514fa6bv4<span class="number">.74</span><span class="number">.5</span></span><br><span class="line"></span><br><span class="line">headers<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;debugable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;duuuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bc11eeafc514fa6b&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;duimei&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;duplatform&quot;</span><span class="punctuation">:</span> <span class="string">&quot;android&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;appId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;duapp&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;duchannel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myapp&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;humeChannel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;duv&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4.74.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;duloginToken&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dudeviceTrait&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pixel+3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dudeviceBrand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;google&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1740103393181&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shumeiid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;202502211001376b2a86c46bd029859670f6b24db7f5be0030988becd7a9cc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;oaid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;User-Agent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;duapp/4.74.5(android;10)&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;X-Auth-Token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bearer eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NDAxMDMyOTgsImV4cCI6MTc3MTYzOTI5OCwiaXNzIjoiYmMxMWVlYWZjNTE0ZmE2YiIsInN1YiI6ImJjMTFlZWFmYzUxNGZhNmIiLCJ1dWlkIjoiYmMxMWVlYWZjNTE0ZmE2YiIsInVzZXJJZCI6MjQ5Njk3MjI1NSwidXNlck5hbWUiOiLlvpfniallci05SzFGMEI2SCIsImlzR3Vlc3QiOnRydWV9.u3DBybDzMvee-V9rWdGuDePZU1TvvbOvodPeJ88-lKmxMbJpK8U93jyxIdcQ8BzhdSahkWn29T6sG3S3-bq1dz9p_MWgfxw5yYSIOE4qd2NfAr1OQ4n-BGQXw7EYdC-eg0uDOIctGCJ2OSfyKlqzqeIx9RIQieJf2bkYeYFF1vkF8SKU2rf-1ESjWdpiUkvPuBN5NrafGHvL4VRkdxkCjT_NTezQ8tXm1PgrYy_73jGGma1nX8Vp49wLqoxhrimQwUremdcNUEWWdeTNsy7nSbobiArkONoRIknrO922QU4nOmFWBuPRnRRGmKHZ371Q3MobmAz7s7yCXt1uDsY4QQ&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isRoot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;emu&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isProxy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app.dewu.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Connection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Keep-Alive&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Accept-Encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gzip&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Cookie&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HWWAFSESTIME=1740103292438; HWWAFSESID=775c333dec0422ea694&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>参数分析</strong></p>
<p>需要破解的参数<code>newSign</code>、<code>X-Auth-Token</code></p>
<h1 id="参数还原"><a href="#参数还原" class="headerlink" title="参数还原"></a>参数还原</h1><p>使用Jadx反编译</p>
<h2 id="newSign参数还原"><a href="#newSign参数还原" class="headerlink" title="newSign参数还原"></a>newSign参数还原</h2><p>搜索<code>newSign</code></p>
<p><img src="/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/4.jpg"></p>
<h3 id="c"><a href="#c" class="headerlink" title="c()"></a>c()</h3><p>它有多种生成方式，这里面<code>RequestUtils.c()</code>出现了多次，分析这个方法</p>
<p><img src="/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/5.jpg"></p>
<p>尝试用frida对<code>c()</code>进行hook</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printHashMap</span>(<span class="params">map</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> hashMap = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.HashMap&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> cast_map = <span class="title class_">Java</span>.<span class="title function_">cast</span>(map,hashMap);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(cast_map.<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_request_utils_c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">RequestUtils</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.shizhuang.duapp.common.utils.RequestUtils&quot;</span>);</span><br><span class="line">        <span class="title class_">RequestUtils</span>[<span class="string">&quot;c&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">map, j2</span>) &#123;</span><br><span class="line">            <span class="title function_">printHashMap</span>(map);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;j2:&quot;</span>,j2);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;c&quot;</span>](map, j2);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`RequestUtils.c result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">get_request_utils_c</span>();</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;abValue=1, deliveryProjectId=0, abRectagFengge=0, abType=social_brand_strategy_v454, limit=20, lastId=, abRecReason=0, abLiveEntranceClose=0, abVideoCover=2&#125;</span><br><span class="line">j2: 1739983064504</span><br><span class="line">RequestUtils.c result=035cccf08759851fa52b47d064a75d59</span><br><span class="line"></span><br><span class="line">&#123;test=a, page=home&#125;</span><br><span class="line">j2: 1740101929941</span><br><span class="line">RequestUtils.c result=b1f54f142de32376c4e5bbf9d075f291</span><br><span class="line"></span><br><span class="line">&#123;&#125;</span><br><span class="line">j2: 1740101929945</span><br><span class="line">RequestUtils.c result=ed4a6aafe8fbdca3709f33a665af55db</span><br></pre></td></tr></table></figure>

<p>在c()方法里，向map添加了几个内容之后拼接成字符串然后调用<code>AESEncrypt.encode</code>方法，返回值又作为参数传给了<code>a</code>方法</p>
<p>通过hook发现这里面添加的参数只有<code>timestamp</code>不是定值，其他都是定值。</p>
<h3 id="encode"><a href="#encode" class="headerlink" title="encode()"></a>encode()</h3><p><img src="/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/10.jpg"></p>
<p>这里面出现了<code>getByteValues()</code>方法并且返回<code>encodeByte()</code></p>
<p>这个方法里把<code>byteValues</code>的值进行了取反，就是<code>0</code>改成<code>1</code>，<code>1</code>改成<code>0</code>。</p>
<h3 id="getByteValues"><a href="#getByteValues" class="headerlink" title="getByteValues()"></a>getByteValues()</h3><p><img src="/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/11.jpg"></p>
<p>它在native里</p>
<h3 id="hook-getByteValues"><a href="#hook-getByteValues" class="headerlink" title="hook getByteValues()"></a>hook getByteValues()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_getbytevalue</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">AESEncrypt</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.duapp.aesjni.AESEncrypt&quot;</span>);</span><br><span class="line">        <span class="title class_">AESEncrypt</span>[<span class="string">&quot;getByteValues&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`AESEncrypt.getByteValues is called`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;getByteValues&quot;</span>]();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`AESEncrypt.getByteValues result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_getbytevalue</span>();</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AESEncrypt.getByteValues is called</span><br><span class="line">AESEncrypt.getByteValues result=101001011101110101101101111100111000110100010101010111010001000101100101010010010101110111010011101001011101110101100101001100110000110100011101010111011011001101001101011101010100001101000011</span><br><span class="line">AESEncrypt.getByteValues is called</span><br><span class="line">AESEncrypt.getByteValues result=101001011101110101101101111100111000110100010101010111010001000101100101010010010101110111010011101001011101110101100101001100110000110100011101010111011011001101001101011101010100001101000011</span><br><span class="line">AESEncrypt.getByteValues is called</span><br><span class="line">AESEncrypt.getByteValues result=101001011101110101101101111100111000110100010101010111010001000101100101010010010101110111010011101001011101110101100101001100110000110100011101010111011011001101001101011101010100001101000011</span><br><span class="line">AESEncrypt.getByteValues is called</span><br><span class="line">AESEncrypt.getByteValues result=101001011101110101101101111100111000110100010101010111010001000101100101010010010101110111010011101001011101110101100101001100110000110100011101010111011011001101001101011101010100001101000011</span><br></pre></td></tr></table></figure>

<p>这里打印出来的结果都是一样的</p>
<h3 id="hook-encodeByte"><a href="#hook-encodeByte" class="headerlink" title="hook encodeByte()"></a>hook encodeByte()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bArrToString</span>(<span class="params">bArr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(bArr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_encodeByte</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">AESEncrypt</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.duapp.aesjni.AESEncrypt&quot;</span>);</span><br><span class="line">        <span class="title class_">AESEncrypt</span>[<span class="string">&quot;encodeByte&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">bArr, str</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`AESEncrypt.encodeByte is called: bArr=<span class="subst">$&#123;bArr&#125;</span>, str=<span class="subst">$&#123;str&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bArrToString(bArr)=<span class="subst">$&#123;bArrToString(bArr)&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;encodeByte&quot;</span>](bArr, str);</span><br><span class="line">        </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`AESEncrypt.encodeByte result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_encodeByte</span>();</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AESEncrypt.encodeByte is called: bArr=108,111,103,105,110,84,111,107,101,110,112,97,103,101,104,111,109,101,112,108,97,116,102,111,114,109,97,110,100,114,111,105,100,116,101,115,116,97,116,105,109,101,115,116,97,109,112,49,55,52,48,48,53,52,51,54,50,54,53,54,117,117,105,100,98,99,49,49,101,101,97,102,99,53,49,52,102,97,54,98,118,52,46,55,52,46,53, str=010110100010001010010010000011000111001011101010101000101110111010011010101101101010001000101100010110100010001010011010110011001111001011100010101000100100110010110010100010101011110010111100</span><br><span class="line">bArrToString(bArr)=loginTokenpagehomeplatformandroidtestatimestamp1740054362656uuidbc11eeafc514fa6bv4.74.5</span><br><span class="line">AESEncrypt.encodeByte result=wMz+jQaNMznb1+IAkqC/I69ZXRCgSLPm9wlJoFRbBzr3CQhDvJTqF+jy8DeE3ISxZKvHxp1mu4wEFJV1nt3Txi9SRLYxX4owLGWeMYA2cIKTAw55onwRa1Ma1U4AGlqt</span><br><span class="line">AESEncrypt.encodeByte is called: bArr=97,98,84,101,115,116,123,34,110,97,109,101,34,58,34,67,111,109,109,111,100,105,116,121,95,115,117,98,106,101,99,116,34,44,34,118,97,108,117,101,34,58,34,48,34,125,44,123,34,110,97,109,101,34,58,34,67,111,109,109,111,100,105,116,121,95,99,104,117,97,110,100,97,34,44,34,118,97,108,117,101,34,58,34,49,34,125,44,123,34,110,97,109,101,34,58,34,114,101,99,111,109,109,101,110,100,95,108,105,110,101,34,44,34,118,97,108,117,101,34,58,34,48,34,125,104,111,109,101,86,101,114,115,105,111,110,49,108,97,115,116,73,100,108,105,109,105,116,50,48,108,111,103,105,110,84,111,107,101,110,112,108,97,116,102,111,114,109,97,110,100,114,111,105,100,116,105,109,101,115,116,97,109,112,49,55,52,48,48,53,52,51,54,50,54,53,55,117,117,105,100,98,99,49,49,101,101,97,102,99,53,49,52,102,97,54,98,118,52,46,55,52,46,53, str=010110100010001010010010000011000111001011101010101000101110111010011010101101101010001000101100010110100010001010011010110011001111001011100010101000100100110010110010100010101011110010111100</span><br><span class="line">bArrToString(bArr)=abTest&#123;&quot;name&quot;:&quot;Commodity_subject&quot;,&quot;value&quot;:&quot;0&quot;&#125;,&#123;&quot;name&quot;:&quot;Commodity_chuanda&quot;,&quot;value&quot;:&quot;1&quot;&#125;,&#123;&quot;name&quot;:&quot;recommend_line&quot;,&quot;value&quot;:&quot;0&quot;&#125;homeVersion1lastIdlimit20loginTokenplatformandroidtimestamp1740054362657uuidbc11eeafc514fa6bv4.74.5</span><br><span class="line">AESEncrypt.encodeByte result=3VUAf22pQJc12obDQnsqvYlw0+yJxzwTa9UlRxJdVEvNbb4Lm0nSxOIXt7uaQUBJMyPBrC5RsVvrAYDNVuobkC5NwI68VoN4V9+AtU6Ua9abLYBoLXkpb3lLQHC2PdcAu5MmZbMSM6XuYm7gCkfIAnbMm8+dsr3fzbG8BlIpUfh/vrBlCHJNuNhdqsLnjl0s2OzGQQs4AcuAogxYqrZ+KJpADsrG578j4yW18jF8/mhgr/NUim02mxzxpr3HSs8oFSzeCZjBbyzFbUoR1QcgZ+75PCzssOndHlk8JguMh/8yDwto9jibBSjAgfR9FwV3</span><br><span class="line">AESEncrypt.encodeByte is called: bArr=108,111,103,105,110,84,111,107,101,110,112,108,97,116,102,111,114,109,97,110,100,114,111,105,100,116,105,109,101,115,116,97,109,112,49,55,52,48,48,53,52,51,54,50,54,53,55,117,117,105,100,98,99,49,49,101,101,97,102,99,53,49,52,102,97,54,98,118,52,46,55,52,46,53, str=010110100010001010010010000011000111001011101010101000101110111010011010101101101010001000101100010110100010001010011010110011001111001011100010101000100100110010110010100010101011110010111100</span><br><span class="line">bArrToString(bArr)=loginTokenplatformandroidtimestamp1740054362657uuidbc11eeafc514fa6bv4.74.5   </span><br><span class="line">AESEncrypt.encodeByte result=knGGXR0bR7LQn4eRCvJsdZ4D96wrRcYi2zPWWxLMOs3J9iG9qM2nOpCfCRHSSOX156P6zz4vEmSVdQ4XAQqeU5MngoDG9Hs7puz32nrsq3k=</span><br><span class="line">AESEncrypt.encodeByte is called: bArr=108,111,103,105,110,84,111,107,101,110,112,108,97,116,102,111,114,109,97,110,100,114,111,105,100,116,105,109,101,115,116,97,109,112,49,55,52,48,48,53,52,51,54,50,54,54,48,117,117,105,100,98,99,49,49,101,101,97,102,99,53,49,52,102,97,54,98,118,52,46,55,52,46,53, str=010110100010001010010010000011000111001011101010101000101110111010011010101101101010001000101100010110100010001010011010110011001111001011100010101000100100110010110010100010101011110010111100</span><br><span class="line">bArrToString(bArr)=loginTokenplatformandroidtimestamp1740054362660uuidbc11eeafc514fa6bv4.74.5   </span><br><span class="line">AESEncrypt.encodeByte result=knGGXR0bR7LQn4eRCvJsdZ4D96wrRcYi2zPWWxLMOs02RXd6rjP/aGB/uSRK4ukC56P6zz4vEmSVdQ4XAQqeU5MngoDG9Hs7puz32nrsq3k=</span><br></pre></td></tr></table></figure>

<p>后面在SO中分析它。</p>
<h3 id="hook-encode"><a href="#hook-encode" class="headerlink" title="hook encode()"></a>hook encode()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_encode</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">AESEncrypt</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.duapp.aesjni.AESEncrypt&quot;</span>);</span><br><span class="line">        <span class="title class_">AESEncrypt</span>[<span class="string">&quot;encode&quot;</span>].<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.Object&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">obj, str</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`AESEncrypt.encode is called: obj=<span class="subst">$&#123;obj&#125;</span>, str=<span class="subst">$&#123;str&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;encode&quot;</span>](obj, str);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`AESEncrypt.encode result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_encode</span>();</span><br></pre></td></tr></table></figure>

<p>hook结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AESEncrypt.encode is called: obj=com.shizhuang.duapp.modules.app.DuApplication@ae024e1, str=abTest&#123;&quot;name&quot;:&quot;Commodity_subject&quot;,&quot;value&quot;:&quot;2&quot;&#125;,&#123;&quot;name&quot;:&quot;Commodity_chuanda&quot;,&quot;value&quot;:&quot;1&quot;&#125;,&#123;&quot;name&quot;:&quot;recommend_line&quot;,&quot;value&quot;:&quot;0&quot;&#125;homeVersion1lastIdlimit20loginTokenplatformandroidtimestamp1740029457724uuidbc11eeafc514fa6bv4.75.5</span><br><span class="line">AESEncrypt.encode result=3VUAf22pQJc12obDQnsqvYlw0+yJxzwTa9UlRxJdVEtJdsrt8Ug8vJMXbRvBmLHUMyPBrC5RsVvrAYDNVuobkC5NwI68VoN4V9+AtU6Ua9abLYBoLXkpb3lLQHC2PdcAu5MmZbMSM6XuYm7gCkfIAnbMm8+dsr3fzbG8BlIpUfh/vrBlCHJNuNhdqsLnjl0s2OzGQQs4AcuAogxYqrZ+KJpADsrG578j4yW18jF8/mghgF2+DXCS5YOACC4b7xYyoPqaHDeYQ8l7G+3WuLEBo4hPLAYREE5dF2Brg4bXY9EyDwto9jibBSjAgfR9FwV3</span><br><span class="line">AESEncrypt.encode is called: obj=com.shizhuang.duapp.modules.app.DuApplication@ae024e1, str=loginTokenplatformandroidtimestamp1740029457725uuidbc11eeafc514fa6bv4.75.5      </span><br><span class="line">AESEncrypt.encode result=</span><br><span class="line">knGGXR0bR7LQn4eRCvJsdZ4D96wrRcYi2zPWWxLMOs3uksv9DjGS2nyb46U5bseV56P6zz4vEmSVdQ4XAQqeUwgOb5YdMIVqBmEY2kuLXS4=</span><br></pre></td></tr></table></figure>

<p> 它的返回值传递给了<code>a</code>方法</p>
<h3 id="a"><a href="#a" class="headerlink" title="a()"></a>a()</h3><p><img src="/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/8.jpg"></p>
<p><code>a</code>方法是MD5</p>
<h3 id="hook-a"><a href="#hook-a" class="headerlink" title="hook a"></a>hook a</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">RequestUtils</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.shizhuang.duapp.common.utils.RequestUtils&quot;</span>);</span><br><span class="line">        <span class="title class_">RequestUtils</span>[<span class="string">&quot;a&quot;</span>].<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`RequestUtils.a is called: str=<span class="subst">$&#123;str&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;a&quot;</span>](str);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`RequestUtils.a result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_a</span>();</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RequestUtils.a is called: str=3VUAf22pQJc12obDQnsqvYlw0+yJxzwTa9UlRxJdVEtJdsrt8Ug8vJMXbRvBmLHUMyPBrC5RsVvrAYDNVuobkC5NwI68VoN4V9+AtU6Ua9abLYBoLXkpb3lLQHC2PdcAu5MmZbMSM6XuYm7gCkfIAnbMm8+dsr3fzbG8BlIpUfh/vrBlCHJNuNhdqsLnjl0s2OzGQQs4AcuAogxYqrZ+KJpADsrG578j4yW18jF8/mg8giv5nPp2mKhwHVYxQFU+N9biMQihdFvvr/Aac6kCd4hPLAYREE5dF2Brg4bXY9EyDwto9jibBSjAgfR9FwV3</span><br><span class="line">RequestUtils.a result=d6be95d0204cf4ff8dbe1b5afaf9f9ca</span><br></pre></td></tr></table></figure>

<p>经验证，它是标准的MD5</p>
<p><img src="/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/9.jpg"></p>
<h3 id="SO分析"><a href="#SO分析" class="headerlink" title="SO分析"></a>SO分析</h3><p><code>JNIEncrypt</code></p>
<p><img src="/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/12.jpg"></p>
<p><code>getByteValues()</code>和<code>encodeByte()</code>都是通过动态注册的</p>
<p>找到JNI_OnLoad，</p>
<p><img src="/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/13.jpg"></p>
<p>找到动态注册函数的偏移地址</p>
<p><img src="/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/14.jpg"></p>
<h3 id="get-bytes"><a href="#get-bytes" class="headerlink" title="get_bytes()"></a>get_bytes()</h3><p><img src="/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/15.jpg"></p>
<p>这里的返回值就是hook得到的返回值</p>
<h3 id="encode-1"><a href="#encode-1" class="headerlink" title="encode()"></a>encode()</h3><p><img src="/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/16.jpg"></p>
<p>它返回的是<code>AES_128_ECB_PKCS5Padding_Encrypt()</code>的返回值</p>
<h3 id="AES-128-ECB-PKCS5Padding-Encrypt"><a href="#AES-128-ECB-PKCS5Padding-Encrypt" class="headerlink" title="AES_128_ECB_PKCS5Padding_Encrypt()"></a>AES_128_ECB_PKCS5Padding_Encrypt()</h3><p><img src="/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/17.jpg"></p>
<p>这里面调用了<code>AES_128_ECB_PKCS5Padding_Encrypt()</code></p>
<p><img src="/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/18.jpg"></p>
<p>在这里进行加密，加密结果进行base64编码</p>
<h3 id="hook-AES-128-ECB-PKCS5Padding-Encrypt"><a href="#hook-AES-128-ECB-PKCS5Padding-Encrypt" class="headerlink" title="hook AES_128_ECB_PKCS5Padding_Encrypt"></a>hook AES_128_ECB_PKCS5Padding_Encrypt</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_encrypt</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable language_">module</span> = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libJNIEncrypt.so&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="variable language_">module</span>.<span class="title function_">add</span>(<span class="number">0x2E24</span>),&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onEnter&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args[0]:&quot;</span>,args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args[1]:&quot;</span>,args[<span class="number">1</span>].<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onLeave&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval:&quot;</span>,retval.<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_encrypt</span>();</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onEnter</span><br><span class="line">args[<span class="number">0</span>]: loginTokenpagehomeplatformandroidtestatimestamp1740070306835uuidbc11eeafc514fa6bv4<span class="number">.74</span><span class="number">.5</span></span><br><span class="line">args[<span class="number">1</span>]: d245a0ba8d678a61</span><br><span class="line">onLeave</span><br><span class="line"><span class="attr">retval</span>: wMz+jQaNMznb1+<span class="title class_">IAkqC</span>/I69ZXRCgSLPm9wlJoFRbBzr3CQhDvJTqF+jy8DeE3ISx83Sv0LiV9r0kR3Wr7hekHi9SRLYxX4owLGWeMYA2cIKTAw55onwRa1Ma1U4AGlqt</span><br><span class="line">onEnter</span><br><span class="line">args[<span class="number">0</span>]: abTest&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Commodity_subject&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;2&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Commodity_chuanda&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;recommend_line&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;0&quot;</span>&#125;homeVersion1lastIdlimit20loginTokenplatformandroidtimestamp1740070306836uuidbc11eeafc514fa6bv4<span class="number">.74</span><span class="number">.5</span></span><br><span class="line">args[<span class="number">1</span>]: d245a0ba8d678a61</span><br><span class="line">onLeave</span><br><span class="line"><span class="attr">retval</span>: 3VUAf22pQJc12obDQnsqvYlw0+yJxzwTa9UlRxJdVEtJdsrt8Ug8vJMXbRvBmLHUMyPBrC5RsVvrAYDNVuobkC5NwI68VoN4V9+<span class="title class_">AtU6Ua9</span>abLYBoLXkpb3lLQHC2PdcAu5MmZbMSM6XuYm7gCkfIAnbMm8+dsr3fzbG8BlIpUfh/vrBlCHJNuNhdqsLnjl0s2OzGQQs4AcuAogxYqrZ+<span class="title class_">KJpADsrG</span>578j4yW18jF8/mg0VqcbuIBNm/<span class="title class_">WE9Bebirio</span>+oQRj7Nm07copMyx4hIdlO75PCzssOndHlk8JguMh/8yDwto9jibBSjAgfR9FwV3</span><br><span class="line">onEnter</span><br><span class="line">args[<span class="number">0</span>]: loginTokenplatformandroidtimestamp1740070306837uuidbc11eeafc514fa6bv4<span class="number">.74</span><span class="number">.5</span></span><br><span class="line">args[<span class="number">1</span>]: d245a0ba8d678a61</span><br><span class="line">onLeave</span><br><span class="line"><span class="attr">retval</span>: knGGXR0bR7LQn4eRCvJsdZ4D96wrRcYi2zPWWxLMOs0HawbIpLaYwOy2chTWGFnm56P6zz4vEmSVdQ4XAQqeU5MngoDG9Hs7puz32nrsq3k=</span><br><span class="line">onEnter</span><br><span class="line">args[<span class="number">0</span>]: loginTokenplatformandroidtimestamp1740070306844uuidbc11eeafc514fa6bv4<span class="number">.74</span><span class="number">.5</span></span><br><span class="line">args[<span class="number">1</span>]: d245a0ba8d678a61</span><br><span class="line">onLeave</span><br><span class="line"><span class="attr">retval</span>: knGGXR0bR7LQn4eRCvJsdZ4D96wrRcYi2zPWWxLMOs2cgKXmJbFf+k/bWQGFU8Vz56P6zz4vEmSVdQ4XAQqeU5MngoDG9Hs7puz32nrsq3k=</span><br></pre></td></tr></table></figure>

<p>这里出现了一个固定值<code>d245a0ba8d678a61</code>，猜测它是密钥</p>
<h3 id="密钥验证"><a href="#密钥验证" class="headerlink" title="密钥验证"></a>密钥验证</h3><p><img src="/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/19.jpg"></p>
<h3 id="Python生成newSign"><a href="#Python生成newSign" class="headerlink" title="Python生成newSign"></a>Python生成newSign</h3><p>hook与newSign有关的完整数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printHashMap</span>(<span class="params">map</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> hashMap = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.HashMap&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> cast_map = <span class="title class_">Java</span>.<span class="title function_">cast</span>(map,hashMap);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(cast_map.<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">get_request_utils_c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">RequestUtils</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.shizhuang.duapp.common.utils.RequestUtils&quot;</span>);</span><br><span class="line">        <span class="title class_">RequestUtils</span>[<span class="string">&quot;c&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">map, j2</span>) &#123;</span><br><span class="line">            <span class="title function_">printHashMap</span>(map);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;j2:&quot;</span>,j2);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;c&quot;</span>](map, j2);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`RequestUtils.c result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">get_request_utils_c</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bArrToString</span>(<span class="params">bArr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(bArr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_encodeByte</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">AESEncrypt</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.duapp.aesjni.AESEncrypt&quot;</span>);</span><br><span class="line">        <span class="title class_">AESEncrypt</span>[<span class="string">&quot;encodeByte&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">bArr, str</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`AESEncrypt.encodeByte is called: bArr=<span class="subst">$&#123;bArr&#125;</span>, str=<span class="subst">$&#123;str&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bArrToString(bArr)=<span class="subst">$&#123;bArrToString(bArr)&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;encodeByte&quot;</span>](bArr, str);</span><br><span class="line">        </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`AESEncrypt.encodeByte result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_encodeByte</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_encode</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">AESEncrypt</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.duapp.aesjni.AESEncrypt&quot;</span>);</span><br><span class="line">        <span class="title class_">AESEncrypt</span>[<span class="string">&quot;encode&quot;</span>].<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.Object&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">obj, str</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`AESEncrypt.encode is called: obj=<span class="subst">$&#123;obj&#125;</span>, str=<span class="subst">$&#123;str&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;encode&quot;</span>](obj, str);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`AESEncrypt.encode result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_encode</span>();</span><br></pre></td></tr></table></figure>

<p>结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;abValue=0, deliveryProjectId=0, abRectagFengge=1, abType=social_brand_strategy_v454, limit=20, lastId=, abRecReason=0, abVideoCover=0&#125;</span><br><span class="line">j2: 1740104568977</span><br><span class="line">AESEncrypt.encode is called: obj=com.shizhuang.duapp.modules.app.DuApplication@edc8ec, str=abRecReason0abRectagFengge1abTypesocial_brand_strategy_v454abValue0abVideoCover0deliveryProjectId0lastIdlimit20loginTokenplatformandroidtimestamp1740104568977uuidbc11eeafc514fa6bv4.74.5</span><br><span class="line">AESEncrypt.encodeByte is called: bArr=97,98,82,101,99,82,101,97,115,111,110,48,97,98,82,101,99,116,97,103,70,101,110,103,103,101,49,97,98,84,121,112,101,115,111,99,105,97,108,95,98,114,97,110,100,95,115,116,114,97,116,101,103,121,95,118,52,53,52,97,98,86,97,108,117,101,48,97,98,86,105,100,101,111,67,111,118,101,114,48,100,101,108,105,118,101,114,121,80,114,111,106,101,99,116,73,100,48,108,97,115,116,73,100,108,105,109,105,116,50,48,108,111,103,105,110,84,111,107,101,110,112,108,97,116,102,111,114,109,97,110,100,114,111,105,100,116,105,109,101,115,116,97,109,112,49,55,52,48,49,48,52,53,54,56,57,55,55,117,117,105,100,98,99,49,49,101,101,97,102,99,53,49,52,102,97,54,98,118,52,46,55,52,46,53, str=010110100010001010010010000011000111001011101010101000101110111010011010101101101010001000101100010110100010001010011010110011001111001011100010101000100100110010110010100010101011110010111100</span><br><span class="line">bArrToString(bArr)=abRecReason0abRectagFengge1abTypesocial_brand_strategy_v454abValue0abVideoCover0deliveryProjectId0lastIdlimit20loginTokenplatformandroidtimestamp1740104568977uuidbc11eeafc514fa6bv4.74.5</span><br><span class="line">AESEncrypt.encodeByte result=VwGEkNCFuNTmwD6w19ogqTZGaLOwO89CuqSmIFmSsXLcvS7y81d64hsABQvdu03vdj76OpM/O2awG8h9UpcJbxqhRPz5vWbp+byrFtiHVNUIdeR4xJw0+TRbBSp2lMcQMGn2O4/9BKR+RkYgwOUZd4MFCaYlia6t5gNc3rbNTJjA6aJyja63+nAcybbrLaS0yu36g6F9mlVgWMlxVSx7/ftyEz0R7CuXrCsgcRf7Q/OPUH42VNLM8McBvKNbkyQ4</span><br><span class="line">AESEncrypt.encode result=VwGEkNCFuNTmwD6w19ogqTZGaLOwO89CuqSmIFmSsXLcvS7y81d64hsABQvdu03vdj76OpM/O2awG8h9UpcJbxqhRPz5vWbp+byrFtiHVNUIdeR4xJw0+TRbBSp2lMcQMGn2O4/9BKR+RkYgwOUZd4MFCaYlia6t5gNc3rbNTJjA6aJyja63+nAcybbrLaS0yu36g6F9mlVgWMlxVSx7/ftyEz0R7CuXrCsgcRf7Q/OPUH42VNLM8McBvKNbkyQ4</span><br><span class="line">RequestUtils.c result=da11eda195bb1e88f4bb67d7f37f4b3e</span><br></pre></td></tr></table></figure>

<p>写Python</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt_ecb</span>(<span class="params">plaintext,key</span>):</span><br><span class="line">    cipher = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    padded_data = pad(plaintext,AES.block_size)</span><br><span class="line">    encrypted_data = cipher.encrypt(padded_data)</span><br><span class="line">    <span class="keyword">return</span> encrypted_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_call</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 创建md5对象</span></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    <span class="comment"># 更新要加密的数据，参数要是字节类型</span></span><br><span class="line">    md5.update(data)</span><br><span class="line">    <span class="comment"># 获取加密后的数据，以16进制表示</span></span><br><span class="line">    md5_hex = md5.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> md5_hex</span><br><span class="line"></span><br><span class="line">timestamp = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://app.dewu.com/sns-rec/v1/recommend/all/feed&quot;</span></span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">  <span class="string">&quot;abType&quot;</span>: <span class="string">&quot;social_brand_strategy_v454&quot;</span>,</span><br><span class="line">  <span class="string">&quot;abValue&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;lastId&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;limit&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">  <span class="string">&quot;deliveryProjectId&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;abVideoCover&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;abRectagFengge&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;abRecReason&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;uuid&quot;</span> : <span class="string">&quot;bc11eeafc514fa6b&quot;</span>,</span><br><span class="line">  <span class="string">&quot;platform&quot;</span> : <span class="string">&quot;android&quot;</span>,</span><br><span class="line">  <span class="string">&quot;v&quot;</span>: <span class="string">&quot;4.74.5&quot;</span>,</span><br><span class="line">  <span class="string">&quot;loginToken&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;timestamp&quot;</span> : <span class="string">&quot;1740104568977&quot;</span><span class="comment"># timestamp</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">params_sorted = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(params.items()))</span><br><span class="line"></span><br><span class="line">params_str = <span class="string">&quot;&quot;</span>.join([<span class="string">f&quot;<span class="subst">&#123;k&#125;</span><span class="subst">&#123;v&#125;</span>&quot;</span> <span class="keyword">for</span> k, v <span class="keyword">in</span> params_sorted.items()])</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(params_str)</span></span><br><span class="line"></span><br><span class="line">key = <span class="string">b&quot;d245a0ba8d678a61&quot;</span></span><br><span class="line"></span><br><span class="line">encrypted_data = aes_encrypt_ecb(params_str.encode(<span class="string">&quot;utf-8&quot;</span>),key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(encrypted_data)</span></span><br><span class="line"></span><br><span class="line">encrypted_data_base64 = base64.b64encode(encrypted_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(encrypted_data_base64)</span></span><br><span class="line"></span><br><span class="line">md5_data = md5_call(encrypted_data_base64)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(md5_data) </span><br></pre></td></tr></table></figure>

<h2 id="X-Auth-Token参数还原"><a href="#X-Auth-Token参数还原" class="headerlink" title="X-Auth-Token参数还原"></a>X-Auth-Token参数还原</h2><p>搜索<code>X-Auth-Token</code></p>
<p><img src="/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/20.jpg"></p>
<p><img src="/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/21.jpg"></p>
<p>这里获取JwtToken，分析抓包抓到的JwtToken</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;X-Auth-Token&quot;: &quot;Bearer eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NDAxMDMyOTgsImV4cCI6MTc3MTYzOTI5OCwiaXNzIjoiYmMxMWVlYWZjNTE0ZmE2YiIsInN1YiI6ImJjMTFlZWFmYzUxNGZhNmIiLCJ1dWlkIjoiYmMxMWVlYWZjNTE0ZmE2YiIsInVzZXJJZCI6MjQ5Njk3MjI1NSwidXNlck5hbWUiOiLlvpfniallci05SzFGMEI2SCIsImlzR3Vlc3QiOnRydWV9.u3DBybDzMvee-V9rWdGuDePZU1TvvbOvodPeJ88-lKmxMbJpK8U93jyxIdcQ8BzhdSahkWn29T6sG3S3-bq1dz9p_MWgfxw5yYSIOE4qd2NfAr1OQ4n-BGQXw7EYdC-eg0uDOIctGCJ2OSfyKlqzqeIx9RIQieJf2bkYeYFF1vkF8SKU2rf-1ESjWdpiUkvPuBN5NrafGHvL4VRkdxkCjT_NTezQ8tXm1PgrYy_73jGGma1nX8Vp49wLqoxhrimQwUremdcNUEWWdeTNsy7nSbobiArkONoRIknrO922QU4nOmFWBuPRnRRGmKHZ371Q3MobmAz7s7yCXt1uDsY4QQ&quot;</span><br></pre></td></tr></table></figure>

<p>这个token分为三段，通过<code>.</code>分开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Bearer eyJhbGciOiJSUzI1NiJ9</span><br><span class="line">.</span><br><span class="line">eyJpYXQiOjE3NDAxMDMyOTgsImV4cCI6MTc3MTYzOTI5OCwiaXNzIjoiYmMxMWVlYWZjNTE0ZmE2YiIsInN1YiI6ImJjMTFlZWFmYzUxNGZhNmIiLCJ1dWlkIjoiYmMxMWVlYWZjNTE0ZmE2YiIsInVzZXJJZCI6MjQ5Njk3MjI1NSwidXNlck5hbWUiOiLlvpfniallci05SzFGMEI2SCIsImlzR3Vlc3QiOnRydWV9</span><br><span class="line">.</span><br><span class="line">u3DBybDzMvee-V9rWdGuDePZU1TvvbOvodPeJ88-lKmxMbJpK8U93jyxIdcQ8BzhdSahkWn29T6sG3S3-bq1dz9p_MWgfxw5yYSIOE4qd2NfAr1OQ4n-BGQXw7EYdC-eg0uDOIctGCJ2OSfyKlqzqeIx9RIQieJf2bkYeYFF1vkF8SKU2rf-1ESjWdpiUkvPuBN5NrafGHvL4VRkdxkCjT_NTezQ8tXm1PgrYy_73jGGma1nX8Vp49wLqoxhrimQwUremdcNUEWWdeTNsy7nSbobiArkONoRIknrO922QU4nOmFWBuPRnRRGmKHZ371Q3MobmAz7s7yCXt1uDsY4QQ</span><br></pre></td></tr></table></figure>

<p>这个token串主要用来做前后端登录认证，第一段是头，第二段是荷载，第三段是签名，三段都是<code>base64</code>编码后的内容，其中签名是加密的</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(<span class="string">b&quot;eyJhbGciOiJSUzI1NiJ9&quot;</span>).decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="comment"># &#123;&quot;alg&quot;:&quot;RS256&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(<span class="string">b&quot;eyJpYXQiOjE3NDAxMDMyOTgsImV4cCI6MTc3MTYzOTI5OCwiaXNzIjoiYmMxMWVlYWZjNTE0ZmE2YiIsInN1YiI6ImJjMTFlZWFmYzUxNGZhNmIiLCJ1dWlkIjoiYmMxMWVlYWZjNTE0ZmE2YiIsInVzZXJJZCI6MjQ5Njk3MjI1NSwidXNlck5hbWUiOiLlvpfniallci05SzFGMEI2SCIsImlzR3Vlc3QiOnRydWV9&quot;</span>).decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="comment"># &#123;&quot;iat&quot;:1740103298,&quot;exp&quot;:1771639298,&quot;iss&quot;:&quot;bc11eeafc514fa6b&quot;,&quot;sub&quot;:&quot;bc11eeafc514fa6b&quot;,&quot;uuid&quot;:&quot;bc11eeafc514fa6b&quot;,&quot;userId&quot;:2496972255,&quot;userName&quot;:&quot;得物er-9K1F0B6H&quot;,&quot;isGuest&quot;:true&#125; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>token串是由后端生成的，可以通过伪造请求获取</p>
<p>这里我们直接使用抓包获取的token</p>
<h1 id="Python抓取推荐数据"><a href="#Python抓取推荐数据" class="headerlink" title="Python抓取推荐数据"></a>Python抓取推荐数据</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt_ecb</span>(<span class="params">plaintext,key</span>):</span><br><span class="line">    cipher = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    padded_data = pad(plaintext,AES.block_size)</span><br><span class="line">    encrypted_data = cipher.encrypt(padded_data)</span><br><span class="line">    <span class="keyword">return</span> encrypted_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_call</span>(<span class="params">data</span>):</span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(data)</span><br><span class="line">    md5_hex = md5.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> md5_hex</span><br><span class="line"></span><br><span class="line">timestamp = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://app.dewu.com/sns-rec/v1/recommend/all/feed&quot;</span></span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">  <span class="string">&quot;abType&quot;</span>: <span class="string">&quot;social_brand_strategy_v454&quot;</span>,</span><br><span class="line">  <span class="string">&quot;abValue&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;lastId&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;limit&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">  <span class="string">&quot;deliveryProjectId&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;abVideoCover&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;abRectagFengge&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;abRecReason&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;uuid&quot;</span> : <span class="string">&quot;bc11eeafc514fa6b&quot;</span>,</span><br><span class="line">  <span class="string">&quot;platform&quot;</span> : <span class="string">&quot;android&quot;</span>,</span><br><span class="line">  <span class="string">&quot;v&quot;</span>: <span class="string">&quot;4.74.5&quot;</span>,</span><br><span class="line">  <span class="string">&quot;loginToken&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;timestamp&quot;</span> :  timestamp <span class="comment"># &quot;1740103393181&quot;#</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">params_sorted = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(params.items()))</span><br><span class="line"></span><br><span class="line">params_str = <span class="string">&quot;&quot;</span>.join([<span class="string">f&quot;<span class="subst">&#123;k&#125;</span><span class="subst">&#123;v&#125;</span>&quot;</span> <span class="keyword">for</span> k, v <span class="keyword">in</span> params_sorted.items()])</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(params_str)</span></span><br><span class="line"></span><br><span class="line">key = <span class="string">b&quot;d245a0ba8d678a61&quot;</span></span><br><span class="line"></span><br><span class="line">encrypted_data = aes_encrypt_ecb(params_str.encode(<span class="string">&quot;utf-8&quot;</span>),key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(encrypted_data)</span></span><br><span class="line"></span><br><span class="line">encrypted_data_base64 = base64.b64encode(encrypted_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(encrypted_data_base64)</span></span><br><span class="line"></span><br><span class="line">md5_data = md5_call(encrypted_data_base64)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(md5_data)</span></span><br><span class="line"></span><br><span class="line">params[<span class="string">&quot;newSign&quot;</span>] = md5_data</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">&quot;debugable&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;duuuid&quot;</span>: <span class="string">&quot;bc11eeafc514fa6b&quot;</span>,</span><br><span class="line">  <span class="string">&quot;duimei&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;duplatform&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">  <span class="string">&quot;appId&quot;</span>: <span class="string">&quot;duapp&quot;</span>,</span><br><span class="line">  <span class="string">&quot;duchannel&quot;</span>: <span class="string">&quot;myapp&quot;</span>,</span><br><span class="line">  <span class="string">&quot;humeChannel&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;duv&quot;</span>: <span class="string">&quot;4.74.5&quot;</span>,</span><br><span class="line">  <span class="string">&quot;duloginToken&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dudeviceTrait&quot;</span>: <span class="string">&quot;Pixel+3&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dudeviceBrand&quot;</span>: <span class="string">&quot;google&quot;</span>,</span><br><span class="line">  <span class="string">&quot;timestamp&quot;</span>: timestamp,</span><br><span class="line">  <span class="string">&quot;shumeiid&quot;</span>: <span class="string">&quot;202502211001376b2a86c46bd029859670f6b24db7f5be0030988becd7a9cc&quot;</span>,</span><br><span class="line">  <span class="string">&quot;oaid&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;duapp/4.74.5(android;10)&quot;</span>,</span><br><span class="line">  <span class="string">&quot;X-Auth-Token&quot;</span>: <span class="string">&quot;Bearer eyJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3NDAxMDMyOTgsImV4cCI6MTc3MTYzOTI5OCwiaXNzIjoiYmMxMWVlYWZjNTE0ZmE2YiIsInN1YiI6ImJjMTFlZWFmYzUxNGZhNmIiLCJ1dWlkIjoiYmMxMWVlYWZjNTE0ZmE2YiIsInVzZXJJZCI6MjQ5Njk3MjI1NSwidXNlck5hbWUiOiLlvpfniallci05SzFGMEI2SCIsImlzR3Vlc3QiOnRydWV9.u3DBybDzMvee-V9rWdGuDePZU1TvvbOvodPeJ88-lKmxMbJpK8U93jyxIdcQ8BzhdSahkWn29T6sG3S3-bq1dz9p_MWgfxw5yYSIOE4qd2NfAr1OQ4n-BGQXw7EYdC-eg0uDOIctGCJ2OSfyKlqzqeIx9RIQieJf2bkYeYFF1vkF8SKU2rf-1ESjWdpiUkvPuBN5NrafGHvL4VRkdxkCjT_NTezQ8tXm1PgrYy_73jGGma1nX8Vp49wLqoxhrimQwUremdcNUEWWdeTNsy7nSbobiArkONoRIknrO922QU4nOmFWBuPRnRRGmKHZ371Q3MobmAz7s7yCXt1uDsY4QQ&quot;</span>,</span><br><span class="line">  <span class="string">&quot;isRoot&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;emu&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;isProxy&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;app.dewu.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;Keep-Alive&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;HWWAFSESTIME=1740103292438; HWWAFSESID=775c333dec0422ea694&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = requests.get(url,params=params,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br></pre></td></tr></table></figure>

<h1 id="Unidbg模拟执行"><a href="#Unidbg模拟执行" class="headerlink" title="Unidbg模拟执行"></a>Unidbg模拟执行</h1><p><img src="/2025/02/21/%E5%BE%97%E7%89%A9app%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8A%E8%8E%B7%E5%8F%96%E9%A6%96%E9%A1%B5%E6%8E%A8%E8%8D%90%E6%95%B0%E6%8D%AE/22.jpg"></p>
<p>模拟执行<code>encode</code>函数，这里面有两个参数，其中的obj并没有使用，所以不用管它，只需要一个str参数，而str参数又被传入了<code>encodeByte</code>方法里，它是一个native方法。这里面还有一个字段<code>byteValues</code>，它经过异或处理之后作为参数传给了<code>encodeByte</code>方法</p>
<p>接下来通过unidbg来实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dewu</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> DalvikModule dm;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">dewu</span><span class="params">()</span> &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder</span><br><span class="line">                .for64Bit() <span class="comment">// for32Bit()</span></span><br><span class="line">                .build();</span><br><span class="line">        memory = emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/java/com/shizhuang/duapp/dewu_4.74.5.apk&quot;</span>));</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);</span><br><span class="line">        dm = vm.loadLibrary(<span class="string">&quot;JNIEncrypt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="type">DvmClass</span> <span class="variable">AESEncryptClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.duapp.aesjni.AESEncrypt&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">byteValuesObj</span> <span class="operator">=</span> AESEncryptClass.callStaticJniMethodObject(emulator,<span class="string">&quot;getByteValues()Ljava/lang/String;&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">byteValues</span> <span class="operator">=</span> byteValuesObj.getValue();</span><br><span class="line">        System.out.println(<span class="string">&quot;byteValues=&quot;</span>+byteValues);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(byteValues.length());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>; i2 &lt; byteValues.length(); i2++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (byteValues.charAt(i2) == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                sb.append(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;sb:&quot;</span>+sb);</span><br><span class="line">        <span class="keyword">return</span> (String) AESEncryptClass.callStaticJniMethodObject(emulator,<span class="string">&quot;encodeByte([BLjava/lang/String;)Ljava/lang/String;&quot;</span>,<span class="keyword">new</span> <span class="title class_">ByteArray</span>(vm,str.getBytes()),sb.toString()).getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">dewu</span> <span class="variable">dewu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">dewu</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;encode:&quot;</span>+dewu.encode(<span class="string">&quot;loginTokenpagehomeplatformandroidtestatimestamp1740070306835uuidbc11eeafc514fa6bv4.74.5&quot;</span>));</span><br><span class="line">        <span class="comment">// wMz+jQaNMznb1+IAkqC/I69ZXRCgSLPm9wlJoFRbBzr3CQhDvJTqF+jy8DeE3ISx83Sv0LiV9r0kR3Wr7hekHi9SRLYxX4owLGWeMYA2cIKTAw55onwRa1Ma1U4AGlqt</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>得物</tag>
      </tags>
  </entry>
  <entry>
    <title>悦野圈app参数逆向及获取话题信息</title>
    <url>/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.baicorv.yueyequan</p>
<p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/1.jpg"></p>
<h1 id="抓包分析数据"><a href="#抓包分析数据" class="headerlink" title="抓包分析数据"></a>抓包分析数据</h1><p>进入全部话题，刷新进行抓包</p>
<p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/2.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url: https://customer.yueyequan.cn/comu-core/v1.0/topic/appList</span><br><span class="line"></span><br><span class="line">params: &#123;</span><br><span class="line">  &quot;pageSize&quot;: &quot;20&quot;,</span><br><span class="line">  &quot;pageNum&quot;: &quot;1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers: &#123;</span><br><span class="line">  &quot;br_interactive_uuid&quot;: &quot;79a9766d-babe-43c4-9c85-ea5ee8fdfc06&quot;,</span><br><span class="line">  &quot;User-Agent&quot;: &quot;okhttp/4.2.0 (Android 10; google Pixel 3 Build/6506677 3.1.0 30100 release baic-orv-app-android baicorvApp baic-orv-app-android)&quot;,</span><br><span class="line">  &quot;appInfo&quot;: &quot;&#123;\&quot;appVersion\&quot;:\&quot;3.1.0\&quot;,\&quot;osVersion\&quot;:\&quot;Android 10\&quot;,\&quot;appType\&quot;:\&quot;Android\&quot;,\&quot;deviceId\&quot;:\&quot;cf116fa8a23dd83ab14a3c3a384ecc0b@1739449447801\&quot;,\&quot;deviceName\&quot;:\&quot;google Pixel 3\&quot;&#125;&quot;,</span><br><span class="line">  &quot;appTheme&quot;: &quot;AQUA&quot;,</span><br><span class="line">  &quot;Cookie&quot;: &quot;;;;;&quot;,</span><br><span class="line">  &quot;Cache-Control&quot;: &quot;no-cache&quot;,</span><br><span class="line">  &quot;Accept-Encoding&quot;: &quot;identity&quot;,</span><br><span class="line">  &quot;userid&quot;: &quot;&quot;,</span><br><span class="line">  &quot;ice-auth-appkey&quot;: &quot;37893&quot;,</span><br><span class="line">  &quot;ice-auth-sign&quot;: &quot;e58dc1fb0153151edb583d13142a0039df046e447a899fe0406bd61434b394248f0f31a54dbef7adea4a89bd779a09c0ac32bdb891901019c1455ce33c6cb0cc&quot;,</span><br><span class="line">  &quot;ice-auth-timestamp&quot;: &quot;1740129904523&quot;,</span><br><span class="line">  &quot;Host&quot;: &quot;customer.yueyequan.cn&quot;,</span><br><span class="line">  &quot;Connection&quot;: &quot;Keep-Alive&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里面要逆向的参数是<code>ice-auth-sign</code></p>
<h1 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h1><p>反编译搜索<code>ice-auth-sign</code>，并没有相关信息，尝试其他思路。</p>
<p>根据数据长度分析，<code>ice-auth-sign</code>的长度是128个字节，这128字节应该是转为hex之后的长度，原长度是64字节，可能是sha512算法</p>
<h2 id="hook-RegisterNatives"><a href="#hook-RegisterNatives" class="headerlink" title="hook RegisterNatives()"></a>hook RegisterNatives()</h2><p>也是出于尝试的心理，猜测它是在so中生成的</p>
<p>恰好就找到了与sign有关的函数</p>
<p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/3.jpg"></p>
<p>对里面的签名算法进行hook</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_sign</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">SignatureUtils</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tencent.cloud.iov.signature.SignatureUtils&quot;</span>);</span><br><span class="line">        <span class="title class_">SignatureUtils</span>[<span class="string">&quot;getEncryptSign&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">str, str2, str3</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SignatureUtils.getEncryptSign is called: str=<span class="subst">$&#123;str&#125;</span>, str2=<span class="subst">$&#123;str2&#125;</span>, str3=<span class="subst">$&#123;str3&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;getEncryptSign&quot;</span>](str, str2, str3);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SignatureUtils.getEncryptSign result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">hook_sign</span>();</span><br></pre></td></tr></table></figure>

<p>hook到的签名与抓到的数据包中的签名是一样的，那就说明找到了对应的位置</p>
<p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/4.jpg"></p>
<h2 id="hook-NewStringUTF"><a href="#hook-NewStringUTF" class="headerlink" title="hook NewStringUTF()"></a>hook NewStringUTF()</h2><p>还有一种方式也是出于猜测的方式，通过hook字符串，指定长度为128，打印相关信息及调用栈</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_NewStringUTF</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> symbols = <span class="title class_">Module</span>.<span class="title function_">enumerateSymbolsSync</span>(<span class="string">&quot;libart.so&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> addrNewStringUTF = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;symbols.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> symbol = symbols[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;NewStringUTF&quot;</span>)!=-<span class="number">1</span> &amp;&amp; symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>)==-<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">            addrNewStringUTF = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;NewStringUTF&#x27;s addr:&quot;</span>,symbol.<span class="property">address</span>,<span class="string">&quot; name:&quot;</span>,symbol.<span class="property">name</span>);</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(addrNewStringUTF != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addrNewStringUTF,&#123;</span><br><span class="line">            <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> c_string = args[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> dataString = c_string.<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(dataString)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(dataString.<span class="property">length</span>===<span class="number">128</span>)&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dataString:&quot;</span>,dataString);</span><br><span class="line">                        </span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(<span class="variable language_">this</span>.<span class="property">context</span>,<span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>)+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_NewStringUTF</span>()</span><br></pre></td></tr></table></figure>

<p>也可以打印出相关信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dataString: 1f28d7d65c10c3af2d5c53d46772064ae16bdcac33880f394a351edbe957701562e4fc47dd344a02657e15bdec3054bf40da3c50df79049467955f7075fc12da</span><br><span class="line">0x7432720728 libsignature.so!_ZN6Helper11toLowerCaseEP7_JNIEnvP8_jstring+0x78</span><br><span class="line">0x7432727110 libsignature.so!getEncryptSign+0x378</span><br><span class="line">0x750ed64354 libart.so!art_quick_generic_jni_trampoline+0x94</span><br><span class="line">0x750ed5b338 libart.so!art_quick_invoke_stub+0x228</span><br><span class="line">0x750ed6a070 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0xf8</span><br><span class="line">0x750ef040d8 libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x184</span><br><span class="line">0x750eeff3b8 libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x394</span><br><span class="line">0x750f1bebe8 libart.so!MterpInvokeDirect+0x194</span><br><span class="line">0x750ed55918 libart.so!mterp_op_invoke_direct+0x18</span><br><span class="line">0x750f1bcb58 libart.so!MterpInvokeVirtual+0x59c</span><br><span class="line">0x750ed55818 libart.so!mterp_op_invoke_virtual+0x18</span><br><span class="line">0x750f1beee8 libart.so!MterpInvokeDirect+0x494</span><br><span class="line">0x750ed55918 libart.so!mterp_op_invoke_direct+0x18</span><br><span class="line">0x750f1be34c libart.so!MterpInvokeInterface+0x6d0</span><br><span class="line">0x750ed55a18 libart.so!mterp_op_invoke_interface+0x18</span><br><span class="line">0x750f1bcb58 libart.so!MterpInvokeVirtual+0x59c</span><br><span class="line"></span><br><span class="line">java.lang.Throwable</span><br><span class="line">        at com.tencent.cloud.iov.signature.SignatureUtils.getEncryptSign(Native Method)</span><br><span class="line">        at com.tencent.cloud.iov.signature.SignatureUtils.getSign(SignatureUtils.java:4)</span><br><span class="line">        at com.tencent.cloud.baicorv.base.kernel.interceptor.SignatureInterceptor.handleRequestSign(SignatureInterceptor.java:115)</span><br><span class="line">        at com.tencent.cloud.baicorv.base.kernel.interceptor.SignatureInterceptor.intercept(SignatureInterceptor.java:46)</span><br><span class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:112)</span><br><span class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:87)</span><br><span class="line">        at com.tencent.cloud.baicorv.base.kernel.interceptor.CacheInterceptor.intercept(CacheInterceptor.java:59)</span><br><span class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:112)</span><br><span class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:87)</span><br><span class="line">        at com.tencent.cloud.baicorv.base.kernel.interceptor.CookieInterceptor.intercept(CookieInterceptor.java:38)</span><br><span class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:112)</span><br><span class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:87)</span><br><span class="line">        at com.tencent.cloud.baicorv.base.kernel.interceptor.StatusInterceptor.intercept(StatusInterceptor.java:43)</span><br><span class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:112)</span><br><span class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:87)</span><br><span class="line">        at com.tencent.cloud.baicorv.base.kernel.interceptor.StatisticsInterceptor.intercept(StatisticsInterceptor.java:77)</span><br><span class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:112)</span><br><span class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:87)</span><br><span class="line">        at okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.kt:184)</span><br><span class="line">        at okhttp3.RealCall.execute(RealCall.kt:66)</span><br><span class="line">        at retrofit2.OkHttpCall.execute(OkHttpCall.java:204)</span><br><span class="line">        at com.bonree.sdk.agent.engine.external.Retrofit2Instrumentation.execute(SourceFile:177)</span><br><span class="line">        at retrofit2.adapter.rxjava2.CallExecuteObservable.subscribeActual(CallExecuteObservable.java:46)</span><br><span class="line">        at io.reactivex.Observable.subscribe(Observable.java:12267)</span><br><span class="line">        at retrofit2.adapter.rxjava2.BodyObservable.subscribeActual(BodyObservable.java:35)</span><br><span class="line">        at io.reactivex.Observable.subscribe(Observable.java:12267)</span><br><span class="line">        at io.reactivex.internal.operators.observable.ObservableObserveOn.subscribeActual(ObservableObserveOn.java:45)</span><br><span class="line">        at io.reactivex.Observable.subscribe(Observable.java:12267)</span><br><span class="line">        at io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeTask.run(ObservableSubscribeOn.java:96)</span><br><span class="line">        at io.reactivex.Scheduler$DisposeTask.run(Scheduler.java:578)</span><br><span class="line">        at io.reactivex.internal.schedulers.ScheduledRunnable.run(ScheduledRunnable.java:66)</span><br><span class="line">        at io.reactivex.internal.schedulers.ScheduledRunnable.call(ScheduledRunnable.java:57)</span><br><span class="line">        at java.util.concurrent.FutureTask.run(FutureTask.java:266)</span><br><span class="line">        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:301)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:919)</span><br></pre></td></tr></table></figure>

<h1 id="反编译分析"><a href="#反编译分析" class="headerlink" title="反编译分析"></a>反编译分析</h1><h2 id="getEncryptSign"><a href="#getEncryptSign" class="headerlink" title="getEncryptSign()"></a>getEncryptSign()</h2><p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/5.jpg"></p>
<p>查找用例是在<code>getSign()</code>中被调用的，同时<code>getEncryptSign</code>也是一个<code>native</code>函数</p>
<h2 id="getSign"><a href="#getSign" class="headerlink" title="getSign()"></a>getSign()</h2><p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/6.jpg"></p>
<h2 id="hook-getSign"><a href="#hook-getSign" class="headerlink" title="hook getSign()"></a>hook getSign()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_getsign</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">SignatureUtils</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tencent.cloud.iov.signature.SignatureUtils&quot;</span>);</span><br><span class="line">        <span class="title class_">SignatureUtils</span>[<span class="string">&quot;getSign&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">str, str2, str3</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SignatureUtils.getSign is called: str=<span class="subst">$&#123;str&#125;</span>, str2=<span class="subst">$&#123;str2&#125;</span>, str3=<span class="subst">$&#123;str3&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;getSign&quot;</span>](str, str2, str3);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SignatureUtils.getSign result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_getsign</span>();</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SignatureUtils.getSign is called: str=GET, str2=/comu-core/v1.0/topic/appList, str3=pagenum=1pagesize=20</span><br><span class="line">SignatureUtils.getSign result=&#123;ice-auth-appkey=37893, ice-auth-sign=339baf42f164b52d260c14f33aae1201986553643f2fc691ea329ef3f74edf21c8ec42ccc62f35a355c15bf6418e7cf3fb09c2d7f013e6791851be9b1cf93e3b, ice-auth-timestamp=1740131269790&#125;</span><br></pre></td></tr></table></figure>

<p>发现<code>ice-auth-sign</code>是从这个方法返回的</p>
<h2 id="call-getEncryptSign"><a href="#call-getEncryptSign" class="headerlink" title="call_getEncryptSign()"></a>call_getEncryptSign()</h2><p>在分析so之前，写一个主动调用<code>getEncryptSign()</code>的函数，用于固定参数，后面分析的时候参数是固定的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">call_getEncryptSign</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">SignatureUtils</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tencent.cloud.iov.signature.SignatureUtils&quot;</span>).$new();</span><br><span class="line">        <span class="keyword">let</span> ret = <span class="title class_">SignatureUtils</span>.<span class="title function_">getEncryptSign</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/comu-core/v1.0/topic/appList&quot;</span>,<span class="string">&quot;name=pagenum=1pagesize=10&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret&quot;</span>,ret);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// call_getEncryptSign(); </span></span><br></pre></td></tr></table></figure>

<h1 id="so分析"><a href="#so分析" class="headerlink" title="so分析"></a>so分析</h1><p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/22.jpg"></p>
<p>使用IDA反编译找到getEncryptSign()进行分析</p>
<h2 id="sub-9F368"><a href="#sub-9F368" class="headerlink" title="sub_9F368()"></a>sub_9F368()</h2><p>看到一个函数<code>sub9F368</code> </p>
<p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/7.jpg"></p>
<p>这里hook一下查看参数及返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_9f368</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> addr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libsignature.so&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr.<span class="title function_">add</span>(<span class="number">0x9f368</span>), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 onEnter&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg0:&quot;</span>,args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg1:&quot;</span>,args[<span class="number">1</span>]);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg2:&quot;</span>,args[<span class="number">2</span>]);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg3:&quot;</span>,args[<span class="number">3</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg4:&quot;</span>,args[<span class="number">4</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg5:&quot;</span>,args[<span class="number">5</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg6:&quot;</span>,args[<span class="number">6</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg7:&quot;</span>,args[<span class="number">7</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg8:&quot;</span>,args[<span class="number">8</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg9:&quot;</span>,args[<span class="number">9</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg10:&quot;</span>,args[<span class="number">10</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg11:&quot;</span>,args[<span class="number">11</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg12:&quot;</span>,args[<span class="number">12</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg13:&quot;</span>,args[<span class="number">13</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 ret:&quot;</span>,retval);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 ret arg0:&quot;</span>,<span class="variable language_">this</span>.<span class="property">arg0</span>.<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 onLeave&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_9f368</span>();</span><br></pre></td></tr></table></figure>

<p>hook结果</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">9f368 onEnter</span><br><span class="line">9f368 <span class="attr">arg0</span>: </span><br><span class="line">9f368 <span class="attr">arg1</span>: <span class="number">0xffffffffffffffff</span></span><br><span class="line">9f368 <span class="attr">arg2</span>: <span class="number">0xaf</span></span><br><span class="line">9f368 <span class="attr">arg3</span>: %s%s%s%s%s%s%s%s%s%s</span><br><span class="line">9f368 <span class="attr">arg4</span>: <span class="variable constant_">GET</span></span><br><span class="line">9f368 <span class="attr">arg5</span>: <span class="regexp">/comu-core/</span>v1<span class="number">.0</span>/topic/appList</span><br><span class="line">9f368 <span class="attr">arg6</span>: ice-auth-appkey</span><br><span class="line">9f368 <span class="attr">arg7</span>: :</span><br><span class="line">9f368 <span class="attr">arg8</span>: <span class="number">37893</span></span><br><span class="line">9f368 <span class="attr">arg9</span>: ice-auth-timestamp</span><br><span class="line">9f368 <span class="attr">arg10</span>: :</span><br><span class="line">9f368 <span class="attr">arg11</span>: <span class="number">1740194564948</span></span><br><span class="line">9f368 <span class="attr">arg12</span>: name=pagenum=1pagesize=<span class="number">10</span></span><br><span class="line">9f368 <span class="attr">arg13</span>: e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7</span><br><span class="line">9f368 <span class="attr">ret</span>: <span class="number">0xae</span></span><br><span class="line">9f368 ret <span class="attr">arg0</span>: <span class="variable constant_">GET</span>/comu-core/v1<span class="number">.0</span>/topic/appListice-auth-<span class="attr">appkey</span>:37893ice-auth-<span class="attr">timestamp</span>:1740194564948name=pagenum=1pagesize=10e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7</span><br><span class="line">9f368 onLeave</span><br></pre></td></tr></table></figure>

<p>这里是在原来的参数里拼接了<code>ice-auth-appkey</code>和<code>ice-auth-timestamp</code>及<code>e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7</code></p>
<p>这里面的<code>ice-auth-appkey</code>和<code>e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7</code>都是定值，但是<code>ice-auth-timestamp</code>这个时间戳是会变动的，所以会导致后面输出的结果也会变动</p>
<p>通过打印内存可以查看<code>ice-auth-appkey</code>和<code>e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">temp_call</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> signSecretResultChar = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libsignature.so&quot;</span>,<span class="string">&quot;signSecretResultChar&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> signIdChar = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libsignature.so&quot;</span>,<span class="string">&quot;signIdChar&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;signSecretResultChar:&quot;</span>,signSecretResultChar.<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;signIdChar:&quot;</span>,signIdChar.<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/8.jpg"></p>
<h2 id="urlEncode"><a href="#urlEncode" class="headerlink" title="urlEncode()"></a>urlEncode()</h2><p>进入到一个函数<code>urlEncode()</code></p>
<p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/9.jpg"></p>
<p>hook一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_urlcode</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libsignature.so&quot;</span>,<span class="string">&quot;_ZN6Helper9urlEncodeEPKcPc&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;urlcode is called&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;urlcode arg0:&quot;</span>,args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;urlcode arg1:&quot;</span>,args[<span class="number">1</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;urlcode arg2:&quot;</span>,args[<span class="number">2</span>]);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg1</span> = args[<span class="number">1</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg2</span> = args[<span class="number">2</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;urlcode ret:&quot;</span>,ret.<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;urlcode ret arg0:&quot;</span>,<span class="variable language_">this</span>.<span class="property">arg0</span>.<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;urlcode ret arg1:&quot;</span>,<span class="variable language_">this</span>.<span class="property">arg1</span>.<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;urlcode ret arg2:&quot;</span>,<span class="variable language_">this</span>.<span class="property">arg2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)          </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_urlcode</span>();</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">urlcode is called</span><br><span class="line">urlcode arg0: GET/comu-core/v1.0/topic/appListice-auth-appkey:37893ice-auth-timestamp:1740201456983name=pagenum=1pagesize=10e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7</span><br><span class="line">urlcode arg1:</span><br><span class="line">urlcode arg2: 0x3962333162616634</span><br><span class="line">urlcode ret: null</span><br><span class="line">urlcode ret arg0: GET/comu-core/v1.0/topic/appListice-auth-appkey:37893ice-auth-timestamp:1740201456983name=pagenum=1pagesize=10e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7</span><br><span class="line">urlcode ret arg1: GET%2Fcomu-core%2Fv1.0%2Ftopic%2FappListice-auth-appkey%3A37893ice-auth-timestamp%3A1740201456983name%3Dpagenum%3D1pagesize%3D10e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7     </span><br><span class="line">urlcode ret arg2: 0x3962333162616634</span><br></pre></td></tr></table></figure>

<p>这里就是进行了url编码</p>
<h2 id="BIO-set-fun-update"><a href="#BIO-set-fun-update" class="headerlink" title="BIO_set_fun_update()"></a>BIO_set_fun_update()</h2><p>url编码之后就来到了<code>BIO_set_fun_update()</code>函数里</p>
<p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/10.jpg"></p>
<p>对它进行hook</p>
<p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/11.jpg"></p>
<p>可以根据符号名或地址进行hook</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_updateout</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libsignature.so&quot;</span>,<span class="string">&quot;_Z18BIO_set_fun_updatePKcPc&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateout is called&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateout arg0:&quot;</span>,args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateout arg1:&quot;</span>,args[<span class="number">1</span>].<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateout ret:&quot;</span>,ret.<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_updateout</span>();</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">updateout is called</span><br><span class="line">updateout arg0: GET%2Fcomu-core%2Fv1.0%2Ftopic%2FappListice-auth-appkey%3A37893ice-auth-timestamp%3A1740201914497name%3Dpagenum%3D1pagesize%3D10e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7</span><br><span class="line">updateout arg1: 0b06</span><br><span class="line">updateout ret: 13184d65bf7401d1e3332cd7f9d087c242b30831a2b00553fce87ebdbe44fe00c74a5d686f63c62c1b440f449e64e6175b85d21c36d63b421d29468b364db9d7</span><br></pre></td></tr></table></figure>

<p>这里返回值是签名的值</p>
<p>进入<code>BIO_set_fun_update()</code>函数进行分析</p>
<p>又出现了两个<code>BIO_set_fun_update()</code></p>
<p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/12.jpg"></p>
<p>不一样的是这里的符号名和地址与前面的不一样</p>
<p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/13.jpg"></p>
<p>这里在hook一下，我用out和inner把两个<code>BIO_set_fun_update()</code>区分开了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_updateout</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libsignature.so&quot;</span>,<span class="string">&quot;_Z18BIO_set_fun_updatePKcPc&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateout is called&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateout arg0:&quot;</span>,args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateout arg1:&quot;</span>,args[<span class="number">1</span>].<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateout ret:&quot;</span>,ret.<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_updateout</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_updateinner</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libsignature.so&quot;</span>,<span class="string">&quot;_Z18BIO_set_fun_updatePKci&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateinner is called&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateinner arg0:&quot;</span>,args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateinner arg1:&quot;</span>,args[<span class="number">1</span>]);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateinner ret:&quot;</span>,ret.<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_updateinner</span>();</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">updateout is called</span><br><span class="line">updateout arg0: GET%2Fcomu-core%2Fv1.0%2Ftopic%2FappListice-auth-appkey%3A37893ice-auth-timestamp%3A1740202427152name%3Dpagenum%3D1pagesize%3D10e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7</span><br><span class="line">updateout arg1: 0b06</span><br><span class="line">updateinner is called</span><br><span class="line">updateinner arg0: GET%2Fcomu-core%2Fv1.0%2Ftopic%2FappListice-auth-appkey%3A37893ice-auth-timestamp%3A1740202427152name%3Dpagenum%3D1pagesize%3D10e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7</span><br><span class="line">updateinner arg1: 0xb</span><br><span class="line">updateinner ret: fca577ba9ea4937181e79751dbb793380f693877bbd3dabcafa43b8d04e71180</span><br><span class="line">updateinner is called</span><br><span class="line">updateinner arg0: fca577ba9ea4937181e79751dbb793380f693877bbd3dabcafa43b8d04e71180</span><br><span class="line">updateinner arg1: 0x6</span><br><span class="line">updateinner ret: 796171f9d45b2cab31cf389004704e74582b05a34cff479dcef5137b5e90879dd9cf629d73e850d43a85b821a047c4ea3b78ed7b95a98e8c29463032f8ce2181</span><br><span class="line">updateout ret: 796171f9d45b2cab31cf389004704e74582b05a34cff479dcef5137b5e90879dd9cf629d73e850d43a85b821a047c4ea3b78ed7b95a98e8c29463032f8ce2181</span><br></pre></td></tr></table></figure>

<p><code>updateinner</code>被调用了两次，它的第二个参数一个是<code>0xb</code>，另一个是<code>0x6</code>，好像是一种标识</p>
<p>根据它的源码进行分析，如下，它是用来做switch判断的</p>
<p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/14.jpg"></p>
<h2 id="firstKeyIndex和secondKeyIndex"><a href="#firstKeyIndex和secondKeyIndex" class="headerlink" title="firstKeyIndex和secondKeyIndex"></a>firstKeyIndex和secondKeyIndex</h2><p>其实在传参的时候就可以看到这两个值</p>
<p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/15.jpg"></p>
<p>通过打印内存查看这两个变量的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">temp_call</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> firstKeyIndex = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libsignature.so&quot;</span>,<span class="string">&quot;firstKeyIndex&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> secondKeyIndex = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libsignature.so&quot;</span>,<span class="string">&quot;secondKeyIndex&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;firstKeyIndex:&quot;</span>,firstKeyIndex.<span class="title function_">readInt</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;secondKeyIndex:&quot;</span>,secondKeyIndex.<span class="title function_">readInt</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下</p>
<p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/16.jpg"></p>
<h2 id="case-11"><a href="#case-11" class="headerlink" title="case 11"></a>case 11</h2><p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/18.jpg"></p>
<p>先调用<code>EVP_sha3_256()</code>然后根据返回值判断是否跳转到<code>LABEL_4</code></p>
<p>先来hook一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_EVP_sha3_256</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libsignature.so&quot;</span>,<span class="string">&quot;EVP_sha3_256&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;EVP_sha3_256 is called&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;EVP_sha3_256 ret:&quot;</span>,ret.<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_EVP_sha3_256</span>();</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EVP_sha3_256 is called</span><br><span class="line">EVP_sha3_256 ret: I</span><br></pre></td></tr></table></figure>

<p>返回值是<code>I</code>，那就回跳转到<code>LABEL_4</code></p>
<p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/17.jpg"></p>
<p>这里会调用<code>calculateHash</code></p>
<h2 id="calculateHash"><a href="#calculateHash" class="headerlink" title="calculateHash()"></a>calculateHash()</h2><p>这里就直接hook一下他</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_calculatehash</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libsignature.so&quot;</span>,<span class="string">&quot;_ZN7Encrypt13calculateHashEPKcmP9evp_md_st&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;calculatehash is called&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;calculatehash arg0:&quot;</span>,args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;calculatehash arg1:&quot;</span>,args[<span class="number">1</span>]);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;calculatehash arg2:&quot;</span>,args[<span class="number">2</span>].<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;calculatehash ret:&quot;</span>,ret.<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_calculatehash</span>();</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">calculatehash is called</span><br><span class="line">calculatehash arg0: GET%2Fcomu-core%2Fv1.0%2Ftopic%2FappListice-auth-appkey%3A37893ice-auth-timestamp%3A1740203515344name%3Dpagenum%3D1pagesize%3D10e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7   </span><br><span class="line">calculatehash arg1: 0xc0</span><br><span class="line">calculatehash arg2: I</span><br><span class="line">calculatehash ret: f9be3947aad06dcb75c8dd42625dd45477a311fed475806a4cf216cb037e6736</span><br></pre></td></tr></table></figure>

<p>经过测试，这是一个sha3-256算法</p>
<p>如下验证</p>
<p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/19.jpg"></p>
<p>这里执行完之后会跳转到下一个<code>BIO_set_fun_update()</code>里，然后到<code>case 6</code>分支里</p>
<h2 id="case-6"><a href="#case-6" class="headerlink" title="case 6"></a>case 6</h2><p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/20.jpg"></p>
<p>这里执行的是sha512</p>
<p>hook 一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_sha512</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libsignature.so&quot;</span>,<span class="string">&quot;_ZN7Encrypt6sha512EPKc&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sha512 is called&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sha512 arg0:&quot;</span>,args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sha512 arg1:&quot;</span>,args[<span class="number">1</span>]);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sha512 ret:&quot;</span>,ret.<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_sha512</span>();</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sha512 is called</span><br><span class="line">sha512 arg0: ea4f905597257683f159bb8103b78b8cca161260abfc58cfaaccc1902daff4f2</span><br><span class="line">sha512 arg1: 0x6</span><br><span class="line">sha512 ret: 0dab1fa52babb4820e36f7c83474d4436fa08d705132ed4dc84d6607f86a1ffc8b8ba31b4825f263696fc315354ec453ff2512aac3c5abd04b7ed0eb59801fe0</span><br></pre></td></tr></table></figure>

<p>验证是否为标准的sha512，如下可以确定是标准的sha512</p>
<p><img src="/2025/02/22/%E6%82%A6%E9%87%8E%E5%9C%88app%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91%E5%8F%8A%E8%8E%B7%E5%8F%96%E8%AF%9D%E9%A2%98%E4%BF%A1%E6%81%AF/21.jpg"></p>
<p>把这些代码整合一下放一起进行hook</p>
<h2 id="代码整合"><a href="#代码整合" class="headerlink" title="代码整合"></a>代码整合</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_getEncryptSign</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">SignatureUtils</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tencent.cloud.iov.signature.SignatureUtils&quot;</span>);</span><br><span class="line">        <span class="title class_">SignatureUtils</span>[<span class="string">&quot;getEncryptSign&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">str, str2, str3</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SignatureUtils.getEncryptSign is called: str=<span class="subst">$&#123;str&#125;</span>, str2=<span class="subst">$&#123;str2&#125;</span>, str3=<span class="subst">$&#123;str3&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;getEncryptSign&quot;</span>](str, str2, str3);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SignatureUtils.getEncryptSign result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_getEncryptSign</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_updateout</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libsignature.so&quot;</span>,<span class="string">&quot;_Z18BIO_set_fun_updatePKcPc&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateout is called&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateout arg0:&quot;</span>,args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateout arg1:&quot;</span>,args[<span class="number">1</span>].<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateout ret:&quot;</span>,ret.<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_updateout</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_updateinner</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libsignature.so&quot;</span>,<span class="string">&quot;_Z18BIO_set_fun_updatePKci&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateinner is called&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateinner arg0:&quot;</span>,args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateinner arg1:&quot;</span>,args[<span class="number">1</span>]);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;updateinner ret:&quot;</span>,ret.<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_updateinner</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_calculatehash</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libsignature.so&quot;</span>,<span class="string">&quot;_ZN7Encrypt13calculateHashEPKcmP9evp_md_st&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;calculatehash is called&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;calculatehash arg0:&quot;</span>,args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;calculatehash arg1:&quot;</span>,args[<span class="number">1</span>]);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;calculatehash arg2:&quot;</span>,args[<span class="number">2</span>].<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;calculatehash ret:&quot;</span>,ret.<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_calculatehash</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_sha512</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libsignature.so&quot;</span>,<span class="string">&quot;_ZN7Encrypt6sha512EPKc&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sha512 is called&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sha512 arg0:&quot;</span>,args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sha512 arg1:&quot;</span>,args[<span class="number">1</span>]);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sha512 ret:&quot;</span>,ret.<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_sha512</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_EVP_sha3_256</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libsignature.so&quot;</span>,<span class="string">&quot;EVP_sha3_256&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;EVP_sha3_256 is called&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;EVP_sha3_256 ret:&quot;</span>,ret.<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_EVP_sha3_256</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_urlcode</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libsignature.so&quot;</span>,<span class="string">&quot;_ZN6Helper9urlEncodeEPKcPc&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;urlcode is called&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;urlcode arg0:&quot;</span>,args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;urlcode arg1:&quot;</span>,args[<span class="number">1</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;urlcode arg2:&quot;</span>,args[<span class="number">2</span>]);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg1</span> = args[<span class="number">1</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg2</span> = args[<span class="number">2</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;urlcode ret:&quot;</span>,ret.<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;urlcode ret arg0:&quot;</span>,<span class="variable language_">this</span>.<span class="property">arg0</span>.<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;urlcode ret arg1:&quot;</span>,<span class="variable language_">this</span>.<span class="property">arg1</span>.<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;urlcode ret arg2:&quot;</span>,<span class="variable language_">this</span>.<span class="property">arg2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)          </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_urlcode</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_9f368</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> addr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libsignature.so&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr.<span class="title function_">add</span>(<span class="number">0x9f368</span>), &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 onEnter&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg0:&quot;</span>,args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>];</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg1:&quot;</span>,args[<span class="number">1</span>]);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg2:&quot;</span>,args[<span class="number">2</span>]);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg3:&quot;</span>,args[<span class="number">3</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg4:&quot;</span>,args[<span class="number">4</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg5:&quot;</span>,args[<span class="number">5</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg6:&quot;</span>,args[<span class="number">6</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg7:&quot;</span>,args[<span class="number">7</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg8:&quot;</span>,args[<span class="number">8</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg9:&quot;</span>,args[<span class="number">9</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg10:&quot;</span>,args[<span class="number">10</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg11:&quot;</span>,args[<span class="number">11</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg12:&quot;</span>,args[<span class="number">12</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 arg13:&quot;</span>,args[<span class="number">13</span>].<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 ret:&quot;</span>,retval);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 ret arg0:&quot;</span>,<span class="variable language_">this</span>.<span class="property">arg0</span>.<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9f368 onLeave&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_9f368</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">call_getEncryptSign</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">SignatureUtils</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tencent.cloud.iov.signature.SignatureUtils&quot;</span>).$new();</span><br><span class="line">        <span class="keyword">let</span> ret = <span class="title class_">SignatureUtils</span>.<span class="title function_">getEncryptSign</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/comu-core/v1.0/topic/appList&quot;</span>,<span class="string">&quot;name=pagenum=1pagesize=10&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret&quot;</span>,ret);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// call_getEncryptSign(); </span></span><br></pre></td></tr></table></figure>

<p>hook结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SignatureUtils.getEncryptSign is called: str=GET, str2=/comu-core/v1.0/topic/appList, str3=name=pagenum=1pagesize=10</span><br><span class="line">9f368 onEnter</span><br><span class="line">9f368 arg0: </span><br><span class="line">9f368 arg1: 0xffffffffffffffff</span><br><span class="line">9f368 arg2: 0xaf</span><br><span class="line">9f368 arg3: %s%s%s%s%s%s%s%s%s%s</span><br><span class="line">9f368 arg4: GET</span><br><span class="line">9f368 arg5: /comu-core/v1.0/topic/appList</span><br><span class="line">9f368 arg6: ice-auth-appkey</span><br><span class="line">9f368 arg7: :</span><br><span class="line">9f368 arg8: 37893</span><br><span class="line">9f368 arg9: ice-auth-timestamp</span><br><span class="line">9f368 arg10: :</span><br><span class="line">9f368 arg11: 1740211161424</span><br><span class="line">9f368 arg12: name=pagenum=1pagesize=10</span><br><span class="line">9f368 arg13: e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7</span><br><span class="line">9f368 ret: 0xae</span><br><span class="line">9f368 ret arg0: GET/comu-core/v1.0/topic/appListice-auth-appkey:37893ice-auth-timestamp:1740211161424name=pagenum=1pagesize=10e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7</span><br><span class="line">9f368 onLeave</span><br><span class="line">urlcode is called</span><br><span class="line">urlcode arg0: GET/comu-core/v1.0/topic/appListice-auth-appkey:37893ice-auth-timestamp:1740211161424name=pagenum=1pagesize=10e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7</span><br><span class="line">urlcode arg1:</span><br><span class="line">urlcode arg2: 0x3962333162616634</span><br><span class="line">urlcode ret: null</span><br><span class="line">urlcode ret arg0: GET/comu-core/v1.0/topic/appListice-auth-appkey:37893ice-auth-timestamp:1740211161424name=pagenum=1pagesize=10e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7</span><br><span class="line">urlcode ret arg1: GET%2Fcomu-core%2Fv1.0%2Ftopic%2FappListice-auth-appkey%3A37893ice-auth-timestamp%3A1740211161424name%3Dpagenum%3D1pagesize%3D10e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7</span><br><span class="line">urlcode ret arg2: 0x3962333162616634</span><br><span class="line">updateout is called</span><br><span class="line">updateout arg0: GET%2Fcomu-core%2Fv1.0%2Ftopic%2FappListice-auth-appkey%3A37893ice-auth-timestamp%3A1740211161424name%3Dpagenum%3D1pagesize%3D10e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7       </span><br><span class="line">updateout arg1: 0b06</span><br><span class="line">updateinner is called</span><br><span class="line">updateinner arg0: GET%2Fcomu-core%2Fv1.0%2Ftopic%2FappListice-auth-appkey%3A37893ice-auth-timestamp%3A1740211161424name%3Dpagenum%3D1pagesize%3D10e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7     </span><br><span class="line">updateinner arg1: 0xb</span><br><span class="line">EVP_sha3_256 is called</span><br><span class="line">EVP_sha3_256 ret: I</span><br><span class="line">calculatehash is called</span><br><span class="line">calculatehash arg0: GET%2Fcomu-core%2Fv1.0%2Ftopic%2FappListice-auth-appkey%3A37893ice-auth-timestamp%3A1740211161424name%3Dpagenum%3D1pagesize%3D10e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7   </span><br><span class="line">calculatehash arg1: 0xc0</span><br><span class="line">calculatehash arg2: I</span><br><span class="line">calculatehash ret: e11d22f0ec05913e6b8c605793354f38cfd5c747a68b58c5b8ccf3e6a5bd43a3</span><br><span class="line">updateinner ret: e11d22f0ec05913e6b8c605793354f38cfd5c747a68b58c5b8ccf3e6a5bd43a3</span><br><span class="line">updateinner is called</span><br><span class="line">updateinner arg0: e11d22f0ec05913e6b8c605793354f38cfd5c747a68b58c5b8ccf3e6a5bd43a3</span><br><span class="line">updateinner arg1: 0x6</span><br><span class="line">sha512 is called</span><br><span class="line">sha512 arg0: e11d22f0ec05913e6b8c605793354f38cfd5c747a68b58c5b8ccf3e6a5bd43a3</span><br><span class="line">sha512 arg1: 0x6</span><br><span class="line">sha512 ret: cdb64ffbd625bb5ff4fefd9cfa8404d6ec845ce8ddb5f75cc73ddecc1d9df2a30f9ad15dc17d930d6048c842eb6199a0e3e18dfa586d7ca37619ff040bfecffd</span><br><span class="line">updateinner ret: cdb64ffbd625bb5ff4fefd9cfa8404d6ec845ce8ddb5f75cc73ddecc1d9df2a30f9ad15dc17d930d6048c842eb6199a0e3e18dfa586d7ca37619ff040bfecffd</span><br><span class="line">updateout ret: cdb64ffbd625bb5ff4fefd9cfa8404d6ec845ce8ddb5f75cc73ddecc1d9df2a30f9ad15dc17d930d6048c842eb6199a0e3e18dfa586d7ca37619ff040bfecffd</span><br><span class="line">SignatureUtils.getEncryptSign result=&#123;ice-auth-appkey=37893, ice-auth-sign=cdb64ffbd625bb5ff4fefd9cfa8404d6ec845ce8ddb5f75cc73ddecc1d9df2a30f9ad15dc17d930d6048c842eb6199a0e3e18dfa586d7ca37619ff040bfecffd, ice-auth-timestamp=1740211161424&#125;</span><br><span class="line">ret &#123;ice-auth-appkey=37893, ice-auth-sign=cdb64ffbd625bb5ff4fefd9cfa8404d6ec845ce8ddb5f75cc73ddecc1d9df2a30f9ad15dc17d930d6048c842eb6199a0e3e18dfa586d7ca37619ff040bfecffd, ice-auth-timestamp=1740211161424&#125;</span><br></pre></td></tr></table></figure>

<h1 id="python生成ice-auth-sign"><a href="#python生成ice-auth-sign" class="headerlink" title="python生成ice-auth-sign"></a>python生成ice-auth-sign</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">timestamp = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line">timestamp = <span class="string">&quot;1740211161424&quot;</span></span><br><span class="line"><span class="comment"># print(timestamp)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha3_256</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.sha3_256(data.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha512</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.sha512(data.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_ice_auth_sign</span>(<span class="params">timestamp</span>):</span><br><span class="line">    data = <span class="string">&quot;GET/comu-core/v1.0/topic/appListice-auth-appkey:37893ice-auth-timestamp:&quot;</span>+timestamp+<span class="string">&quot;pagenum=1pagesize=10e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7&quot;</span></span><br><span class="line">    ice_auth_sign = sha512(sha3_256(urllib.parse.quote_plus(data)))</span><br><span class="line">    <span class="keyword">return</span> ice_auth_sign</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(g_ice_auth_sign(timestamp))</span><br><span class="line"><span class="comment"># cdb64ffbd625bb5ff4fefd9cfa8404d6ec845ce8ddb5f75cc73ddecc1d9df2a30f9ad15dc17d930d6048c842eb6199a0e3e18dfa586d7ca37619ff040bfecffd</span></span><br></pre></td></tr></table></figure>

<h1 id="Python请求获取话题数据"><a href="#Python请求获取话题数据" class="headerlink" title="Python请求获取话题数据"></a>Python请求获取话题数据</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">timestamp = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time() * <span class="number">1000</span>))</span><br><span class="line"><span class="comment"># timestamp = &quot;1740211161424&quot;</span></span><br><span class="line"><span class="comment"># timestamp = &quot;1740129904523&quot;</span></span><br><span class="line"><span class="comment"># print(timestamp)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha3_256</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.sha3_256(data.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha512</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.sha512(data.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_ice_auth_sign</span>(<span class="params">timestamp</span>):</span><br><span class="line">    data = <span class="string">&quot;GET/comu-core/v1.0/topic/appListice-auth-appkey:37893ice-auth-timestamp:&quot;</span>+timestamp+<span class="string">&quot;pagenum=1pagesize=100e494454bb61acae31109befb58aa774386b646035af606e9314fab13b9adffe7&quot;</span></span><br><span class="line">    ice_auth_sign = sha512(sha3_256(urllib.parse.quote_plus(data)))</span><br><span class="line">    <span class="keyword">return</span> ice_auth_sign</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(g_ice_auth_sign(timestamp))</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://customer.yueyequan.cn/comu-core/v1.0/topic/appList&quot;</span></span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">  <span class="string">&quot;pageSize&quot;</span>: <span class="string">&quot;100&quot;</span>,</span><br><span class="line">  <span class="string">&quot;pageNum&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">&quot;br_interactive_uuid&quot;</span>: <span class="string">&quot;79a9766d-babe-43c4-9c85-ea5ee8fdfc06&quot;</span>,</span><br><span class="line">  <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;okhttp/4.2.0 (Android 10; google Pixel 3 Build/6506677 3.1.0 30100 release baic-orv-app-android baicorvApp baic-orv-app-android)&quot;</span>,</span><br><span class="line">  <span class="string">&quot;appInfo&quot;</span>: <span class="string">&quot;&#123;\&quot;appVersion\&quot;:\&quot;3.1.0\&quot;,\&quot;osVersion\&quot;:\&quot;Android 10\&quot;,\&quot;appType\&quot;:\&quot;Android\&quot;,\&quot;deviceId\&quot;:\&quot;cf116fa8a23dd83ab14a3c3a384ecc0b@1739449447801\&quot;,\&quot;deviceName\&quot;:\&quot;google Pixel 3\&quot;&#125;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;appTheme&quot;</span>: <span class="string">&quot;AQUA&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;;;;;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;identity&quot;</span>,</span><br><span class="line">  <span class="string">&quot;userid&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ice-auth-appkey&quot;</span>: <span class="string">&quot;37893&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ice-auth-sign&quot;</span>:  g_ice_auth_sign(timestamp),<span class="comment"># &quot;e58dc1fb0153151edb583d13142a0039df046e447a899fe0406bd61434b394248f0f31a54dbef7adea4a89bd779a09c0ac32bdb891901019c1455ce33c6cb0cc&quot;,</span></span><br><span class="line">  <span class="string">&quot;ice-auth-timestamp&quot;</span>: timestamp,<span class="comment"># &quot;1740129904523&quot;,</span></span><br><span class="line">  <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;customer.yueyequan.cn&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;Keep-Alive&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url, params=params, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>悦野圈</tag>
      </tags>
  </entry>
  <entry>
    <title>抓包</title>
    <url>/2024/12/02/%E6%8A%93%E5%8C%85/</url>
    <content><![CDATA[<h1 id="HTTP抓包"><a href="#HTTP抓包" class="headerlink" title="HTTP抓包"></a>HTTP抓包</h1><p>对于HTTP的包是可以通过抓包工具+配置手机代理直接抓取的。</p>
<h2 id="demo测试"><a href="#demo测试" class="headerlink" title="demo测试"></a>demo测试</h2><p>访问<code>&quot;http://www.httpbin.org/get&quot;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OkhttpTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">http_get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                .url(<span class="string">&quot;http://www.httpbin.org/get&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute();</span><br><span class="line">                    <span class="keyword">if</span>(response.isSuccessful())&#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">responseBody</span> <span class="operator">=</span> response.body().string();</span><br><span class="line">                        Log.d(<span class="string">&quot;Response:&quot;</span>,responseBody);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        Log.d(<span class="string">&quot;Request failed&quot;</span>,String.valueOf(response.code()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过点击按钮进行访问</p>
<p><img src="/2024/12/02/%E6%8A%93%E5%8C%85/1.jpg"></p>
<p>点击按钮，输出日志，如下，访问成功</p>
<p><img src="/2024/12/02/%E6%8A%93%E5%8C%85/2.jpg"></p>
<p>通过Charles配置代理进行抓包，如下，成功抓取数据</p>
<p><img src="/2024/12/02/%E6%8A%93%E5%8C%85/3.jpg"></p>
<h1 id="HTTPS抓包"><a href="#HTTPS抓包" class="headerlink" title="HTTPS抓包"></a>HTTPS抓包</h1><p>HTTPS是有系统证书校验的，需要安装证书之后通过抓包工具+配置手机代理来进行抓包。<br>在安卓上，Android8.0之后，浏览器默认信任用户目录下的证书，而APP默认不再信任用户目录下的证书了，所以需要手动把用户目录下的证书移动到系统目录下（通过面具移动或者手动移动）。</p>
<h2 id="demo测试-1"><a href="#demo测试-1" class="headerlink" title="demo测试"></a>demo测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">https_get</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">            .url(<span class="string">&quot;https://www.httpbin.org/get&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute();</span><br><span class="line">                <span class="keyword">if</span>(response.isSuccessful())&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">responseBody</span> <span class="operator">=</span> response.body().string();</span><br><span class="line">                    Log.d(<span class="string">&quot;Response:&quot;</span>,responseBody);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    Log.d(<span class="string">&quot;Request failed&quot;</span>,String.valueOf(response.code()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过点击按钮进行访问</p>
<p><img src="/2024/12/02/%E6%8A%93%E5%8C%85/4.jpg"></p>
<p>点击按钮，输出日志，如下，访问成功</p>
<p><img src="/2024/12/02/%E6%8A%93%E5%8C%85/5.jpg"></p>
<p>通过Charles配置证书和代理进行抓包，如下，成功抓取数据</p>
<p><img src="/2024/12/02/%E6%8A%93%E5%8C%85/6.jpg"></p>
<h1 id="检测代理"><a href="#检测代理" class="headerlink" title="检测代理"></a>检测代理</h1><h2 id="检测是否设置代理"><a href="#检测是否设置代理" class="headerlink" title="检测是否设置代理"></a>检测是否设置代理</h2><p>APP在发起网络请求前会检测系统是否设置了代理，如果发现有代理，就不发起请求。</p>
<h3 id="demo测试-2"><a href="#demo测试-2" class="headerlink" title="demo测试"></a>demo测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isProxySet</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">proxyHost</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;http.proxyHost&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">proxyPort</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;http.proxyPort&quot;</span>);</span><br><span class="line">    Log.d(<span class="string">&quot;Proxy&quot;</span>,<span class="string">&quot;proxyHost:&quot;</span>+proxyHost);</span><br><span class="line">    Log.d(<span class="string">&quot;Proxy&quot;</span>,<span class="string">&quot;proxyPort:&quot;</span>+proxyPort);</span><br><span class="line">    <span class="keyword">return</span> proxyHost!=<span class="literal">null</span> || proxyPort!=<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过点击按钮进行访问</p>
<p><img src="/2024/12/02/%E6%8A%93%E5%8C%85/7.jpg"></p>
<p>点击按钮，输出日志</p>
<p>未设置代理时如下</p>
<p><img src="/2024/12/02/%E6%8A%93%E5%8C%85/8.jpg"></p>
<p>设置代理时如下</p>
<p><img src="/2024/12/02/%E6%8A%93%E5%8C%85/9.jpg"></p>
<h2 id="禁用代理"><a href="#禁用代理" class="headerlink" title="禁用代理"></a>禁用代理</h2><p>APP 用了NO_PROXY参数发起网络请求，指明不使用代理服务器，即使系统设置了代理，也会被直接绕过，APP依然能正常获取网络数据，但抓包工具无法抓到该APP的数据包。  </p>
<h3 id="demo测试-3"><a href="#demo测试-3" class="headerlink" title="demo测试"></a>demo测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">no_proxy</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder()</span><br><span class="line">            .proxy(Proxy.NO_PROXY)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">            .url(<span class="string">&quot;https://www.httpbin.org/get&quot;</span>)</span><br><span class="line"></span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute();</span><br><span class="line">                <span class="keyword">if</span>(response.isSuccessful())&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">responseBody</span> <span class="operator">=</span> response.body().string();</span><br><span class="line">                    Log.d(<span class="string">&quot;Response:&quot;</span>,responseBody);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    Log.d(<span class="string">&quot;Request failed&quot;</span>,String.valueOf(response.code()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置一下抓包代理，然后点击按钮进行访问</p>
<p><img src="/2024/12/02/%E6%8A%93%E5%8C%85/10.jpg"></p>
<p>日志里面可以正常输出内容，但是抓包看不到传输数据</p>
<p><img src="/2024/12/02/%E6%8A%93%E5%8C%85/11.jpg"></p>
<p>这种情况下可以在Charles里配置SOCKS，然后关闭手机端的系统代理，使用第三方代理转发工具如SocksDroid来进行转发流量（通过VPN劫持流量）</p>
<p><img src="/2024/12/02/%E6%8A%93%E5%8C%85/12.jpg"></p>
<p>就可以抓取数据了</p>
<p><img src="/2024/12/02/%E6%8A%93%E5%8C%85/13.jpg"></p>
<h2 id="VPN检测"><a href="#VPN检测" class="headerlink" title="VPN检测"></a>VPN检测</h2><p><strong>介绍</strong></p>
<p>VPN检测是指应用程序或系统检查用户是否正在使用虚拟专用网络（Virtual Private Network, VPN）的一种技术。当用户使用VPN时，他们的网络流量会被加密并通过一个远程服务器路由，这可以隐藏用户的实际IP地址和位置信息，同时保护数据的安全性和隐私。</p>
<p><strong>原理</strong></p>
<p>当客户端运行VPN虚拟隧道协议时，会在当前节点创建基于 eth 之上的<code> tun0</code> 接口或 <code>ppp0</code> 接口。这些接口是用于建立虚拟网络连接的特殊网络接口。</p>
<h3 id="demo测试-4"><a href="#demo测试-4" class="headerlink" title="demo测试"></a>demo测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">vpn_check</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取所有网络接口的枚举对象</span></span><br><span class="line">        Enumeration&lt;NetworkInterface&gt; networkInterfaces =</span><br><span class="line">                NetworkInterface.getNetworkInterfaces();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果没有可用的网络接口，则返回 false</span></span><br><span class="line">        <span class="keyword">if</span> (networkInterfaces == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将枚举类型转换为列表并通过迭代器遍历</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> Collections.list(networkInterfaces).iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="comment">// 获取当前网络接口</span></span><br><span class="line">            <span class="type">NetworkInterface</span> <span class="variable">networkInterface</span> <span class="operator">=</span> (NetworkInterface) it.next();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 检查网络接口是否处于活动状态（isUp()）且其绑定的接口地址不为空</span></span><br><span class="line">            <span class="keyword">if</span> (networkInterface.isUp() &amp;&amp;</span><br><span class="line">                    !networkInterface.getInterfaceAddresses().isEmpty()) &#123;</span><br><span class="line">                <span class="comment">// 打印网络接口名称用于调试</span></span><br><span class="line">                Log.d(<span class="string">&quot;GaGa===&gt;&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;端口名称: &quot;</span> + networkInterface.getName());</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 检查网络接口名称是否为 VPN 特有的名称</span></span><br><span class="line">                <span class="comment">// 常见的 VPN 接口名称包括 tun0, ppp0, p2p0, 和 ccmni0</span></span><br><span class="line">                <span class="keyword">if</span> (Intrinsics.areEqual(networkInterface.getName(), <span class="string">&quot;tun0&quot;</span>)</span><br><span class="line">                        || Intrinsics.areEqual(networkInterface.getName(), <span class="string">&quot;ppp0&quot;</span>) ||</span><br><span class="line">                        Intrinsics.areEqual(networkInterface.getName(), <span class="string">&quot;p2p0&quot;</span>) ||</span><br><span class="line">                        Intrinsics.areEqual(networkInterface.getName(), <span class="string">&quot;ccmni0&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 如果找到匹配的接口名称，说明 VPN 处于活动状态，返回 true</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果遍历完所有网络接口，没有检测到 VPN，返回 false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable th) &#123;</span><br><span class="line">        <span class="comment">// 捕获并打印任何可能的异常</span></span><br><span class="line">        th.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过点击按钮进行访问</p>
<p><img src="/2024/12/02/%E6%8A%93%E5%8C%85/14.jpg"></p>
<p>点击按钮输出如下日志，说明检测到了vpn</p>
<p><img src="/2024/12/02/%E6%8A%93%E5%8C%85/15.jpg"></p>
<h1 id="通过安装证书实现抓包的原理"><a href="#通过安装证书实现抓包的原理" class="headerlink" title="通过安装证书实现抓包的原理"></a>通过安装证书实现抓包的原理</h1><p>它的原理是基于HTTPS中间人攻击和证书信任链机制的。</p>
<p>HTTPS 使用 <strong>SSL&#x2F;TLS 协议</strong> 对通信进行加密，确保数据在传输过程中不被窃听或篡改。其核心步骤如下：</p>
<ol>
<li><strong>证书验证</strong>：客户端（如安卓应用）与服务器建立连接时，服务器会发送其 <strong>数字证书</strong>，证书包含公钥和颁发机构（CA）的签名。</li>
<li><strong>信任链校验</strong>：客户端检查证书是否由受信任的根证书颁发机构（CA）签发，并验证证书的有效性（如域名匹配、未过期等）。</li>
<li><strong>密钥协商</strong>：验证通过后，客户端使用服务器的公钥加密一个随机生成的对称密钥（Session Key），双方后续使用该密钥加密通信数据。</li>
</ol>
<p><strong>中间人攻击的漏洞</strong>：<br>若攻击者（如抓包工具）能伪造服务器的证书，并让客户端信任攻击者的根证书，即可拦截和解密 HTTPS 流量。</p>
<ul>
<li>抓包工具（如 Charles、Fiddler）会生成一个 <strong>伪造的服务器证书</strong>，并使用自己的根证书（CA）签名。</li>
<li>若客户端信任攻击者的根证书，则会接受伪造的证书，攻击者即可解密流量。</li>
</ul>
<p><strong>中间人攻击的关键：伪造信任链</strong></p>
<ul>
<li><strong>抓包工具的角色</strong>：<br>  抓包工具（如 Charles、Fiddler）会生成一个 ​<strong>自签名的根证书（Self-Signed Root CA）​</strong>，并手动将其安装到客户端（安卓系统）的信任存储中。<br>  此时，客户端会将抓包工具的根证书视为合法根 CA。</li>
<li><strong>伪造服务器证书</strong>：<br>  当客户端发起 HTTPS 请求时，抓包工具会拦截请求，并动态生成一个 ​<strong>伪造的服务器证书</strong>，该证书由抓包工具的根证书签名。<br>  由于客户端信任抓包工具的根证书，因此会接受伪造的服务器证书。</li>
</ul>
<h1 id="单向证书校验"><a href="#单向证书校验" class="headerlink" title="单向证书校验"></a>单向证书校验</h1><p>单向证书校验是指在客户端与服务器之间的通信中，只有服务器需要提供证书，客户端通过验证服务器的证书来确认服务器的身份。<br><strong>原理</strong></p>
<ul>
<li>客户端发起连接请求（如通过HTTPS）。  </li>
<li>服务器将其数字证书发送给客户端，数字证书中包含了服务器的公钥和其他信息（如证书的有效期、签发者等）。  </li>
<li>客户端收到证书后，通过信任的证书颁发机构（CA）的公钥来验证证书的有效性。如果证书有效，客户端就信任这个服务器，继续进行后续的加密通信。  </li>
<li>客户端不需要提供任何证书或身份验证。</li>
</ul>
<h1 id="双向证书校验"><a href="#双向证书校验" class="headerlink" title="双向证书校验"></a>双向证书校验</h1><p>双向证书校验则要求客户端和服务器都提供证书，并且相互验证对方的身份。这样不仅服务器要验证客户端的身份，客户端也要验证服务器的身份。<br><strong>原理</strong>  </p>
<ul>
<li>客户端发起连接请求。  </li>
<li>服务器发送其数字证书给客户端，客户端用CA公钥验证服务器证书的合法性。  </li>
<li>服务器要求客户端也提供数字证书。客户端向服务器提供自己的证书，服务器同样使用CA公钥验证客户端证书的合法性。  </li>
<li>双方都确认对方的身份后，开始建立加密通道进行安全通信。</li>
</ul>
<h1 id="SSL-pinning"><a href="#SSL-pinning" class="headerlink" title="SSL pinning"></a>SSL pinning</h1><p>SSL Pinning（SSL证书绑定）是为了增强应用程序对中间人攻击（MITM攻击）的防御的一种技术。它将特定的证书或公钥绑定到客户端应用程序中，使得客户端在建立SSL连接时，仅信任与该证书或公钥匹配的服务器证书，从而确保通信的安全性。</p>
<p>其核心原理是预先将服务器证书的特定信息嵌入客户端应用，并在建立连接时验证服务器证书是否与预设信息一致。</p>
<p>应用开发阶段，将服务器证书的 公钥哈希（Public Key Hash）、证书指纹（Certificate Fingerprint） 或完整证书 嵌入客户端代码或配置文件。</p>
<p>客户端与服务器建立 TLS 连接后，获取服务器证书链。</p>
<p>检查服务器证书的公钥哈希或指纹是否与预设值匹配。</p>
<h2 id="Certificate-Pinning"><a href="#Certificate-Pinning" class="headerlink" title="Certificate Pinning"></a>Certificate Pinning</h2><p>证书绑定是指将服务器的证书（通常是公钥）内置到客户端应用中。客户端在建立SSL连接时，会验证服务器的证书与客户端预定义的证书是否匹配。如果不匹配，连接会被拒绝，防止攻击者使用伪造的证书进行中间人攻击。  </p>
<h2 id="Public-Key-Pinning"><a href="#Public-Key-Pinning" class="headerlink" title="Public Key Pinning"></a>Public Key Pinning</h2><p>公钥绑定是SSL Pinning的一种形式，客户端不直接绑定证书，而是绑定服务器证书中的公钥。这种方式可以避免证书过期或更新时造成的连接问题，因为即便证书发生变化，只要公钥保持不变，客户端仍然可以信任新的证书。  </p>
<h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><h3 id="使用frida进行hook"><a href="#使用frida进行hook" class="headerlink" title="使用frida进行hook"></a>使用frida进行hook</h3><p>frida官方提供的客户端校验绕过脚本如下<br><a href="https://codeshare.frida.re/@akabe1/frida-multiple-unpinning/">https:&#x2F;&#x2F;codeshare.frida.re&#x2F;@akabe1&#x2F;frida-multiple-unpinning&#x2F;</a></p>
<h3 id="JustTrustMe"><a href="#JustTrustMe" class="headerlink" title="JustTrustMe"></a>JustTrustMe</h3><p>利用面具刷入LSPosed框架，然后安装JustTrustMe插件。<br>在LSPosed的模块里打开JustTrustMe，在要选择绕过的App后面方框勾选上即可。</p>
<h1 id="证书信息"><a href="#证书信息" class="headerlink" title="证书信息"></a>证书信息</h1><p><img src="/2024/12/02/%E6%8A%93%E5%8C%85/16.jpg"></p>
]]></content>
      <categories>
        <category>抓包</category>
      </categories>
      <tags>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>抓包工具的介绍及安装使用</title>
    <url>/2025/02/12/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h1><h1 id="Reqable（小黄鸟）"><a href="#Reqable（小黄鸟）" class="headerlink" title="Reqable（小黄鸟）"></a>Reqable（小黄鸟）</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>搜索Reqable进入官网进行下载安装</p>
<h2 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h2><p>点击如下图标安装证书</p>
<p><img src="/2025/02/12/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/2.jpg"></p>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>直接自动安装</p>
<h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>在Reqable官网下载安装Reqable.apk，然后根据内置的教程安装证书</p>
<h2 id="Android抓包"><a href="#Android抓包" class="headerlink" title="Android抓包"></a>Android抓包</h2><p>点击如下图标显示二维码，打开app端Reqable扫码完成配置代理，即可抓包。</p>
<p><img src="/2025/02/12/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/1.jpg"></p>
<h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p><a href="https://reqable.com/zh-CN/docs/shortcuts/">快捷键 | Reqable · API抓包调试 + API测试一站式工具</a></p>
<h4 id="调试控制"><a href="#调试控制" class="headerlink" title="调试控制"></a>调试控制</h4><ul>
<li><code>Ctrl+G</code>：启动&#x2F;停止调试</li>
<li><code>Ctrl+Shift+R</code>：清空调试列表</li>
<li><code>F12</code>：配置&#x2F;取消系统代理</li>
</ul>
]]></content>
      <categories>
        <category>抓包</category>
      </categories>
      <tags>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2024/02/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>线性表（Linear List）是由一组数据元素按一定的顺序排列组成的集合。<br><strong>线性表的基本操作</strong>  </p>
<ul>
<li>初始化：初始化线性表为空。</li>
<li>插入：在指定位置插入元素。</li>
<li>删除：删除指定位置的元素。</li>
<li>查找：查找某个元素的位置。</li>
<li>访问：通过索引访问指定位置的元素。</li>
<li>遍历：从头到尾依次访问线性表中的每个元素。</li>
<li>长度：获取线性表中的元素个数。</li>
</ul>
<h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>顺序表是一种线性表的实现方式，其核心思想是将线性表中的元素存储在一块连续的内存空间中。<br>顺序表通常是使用数组来实现的，元素可以通过索引直接访问。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 100  <span class="comment">// 假设顺序表最大容量为100</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义顺序表结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data[MAX_SIZE];  <span class="comment">// 存储数据的数组</span></span><br><span class="line">    <span class="type">int</span> length;          <span class="comment">// 顺序表当前长度</span></span><br><span class="line">&#125; SeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化顺序表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initSeqList</span><span class="params">(SeqList* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">list</span>-&gt;length = <span class="number">0</span>;  <span class="comment">// 初始化为空表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断顺序表是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isEmpty</span><span class="params">(SeqList* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>-&gt;length == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断顺序表是否已满</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isFull</span><span class="params">(SeqList* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>-&gt;length == MAX_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入元素到顺序表</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(SeqList* <span class="built_in">list</span>, <span class="type">int</span> index, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="built_in">list</span>-&gt;length || isFull(<span class="built_in">list</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 插入位置不合法或顺序表已满</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将index及其后面的元素右移一位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">list</span>-&gt;length; i &gt; index; --i) &#123;</span><br><span class="line">        <span class="built_in">list</span>-&gt;data[i] = <span class="built_in">list</span>-&gt;data[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">list</span>-&gt;data[index] = value;</span><br><span class="line">    <span class="built_in">list</span>-&gt;length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除顺序表中指定位置的元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(SeqList* <span class="built_in">list</span>, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">list</span>-&gt;length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 删除位置不合法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将index后面的元素左移一位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = index; i &lt; <span class="built_in">list</span>-&gt;length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">list</span>-&gt;data[i] = <span class="built_in">list</span>-&gt;data[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">list</span>-&gt;length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找元素在顺序表中的位置</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(SeqList* <span class="built_in">list</span>, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>-&gt;length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">list</span>-&gt;data[i] == value) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;  <span class="comment">// 找到元素，返回其位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 未找到元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问顺序表中的指定元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">get</span><span class="params">(SeqList* <span class="built_in">list</span>, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">list</span>-&gt;length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 索引越界</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>-&gt;data[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印顺序表中的所有元素</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printSeqList</span><span class="params">(SeqList* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>-&gt;length; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">list</span>-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取顺序表的长度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getLength</span><span class="params">(SeqList* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>-&gt;length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    SeqList <span class="built_in">list</span>;</span><br><span class="line">    initSeqList(&amp;<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入元素</span></span><br><span class="line">    insert(&amp;<span class="built_in">list</span>, <span class="number">0</span>, <span class="number">10</span>);  <span class="comment">// 插入10到位置0</span></span><br><span class="line">    insert(&amp;<span class="built_in">list</span>, <span class="number">1</span>, <span class="number">20</span>);  <span class="comment">// 插入20到位置1</span></span><br><span class="line">    insert(&amp;<span class="built_in">list</span>, <span class="number">2</span>, <span class="number">30</span>);  <span class="comment">// 插入30到位置2</span></span><br><span class="line">    insert(&amp;<span class="built_in">list</span>, <span class="number">1</span>, <span class="number">15</span>);  <span class="comment">// 插入15到位置1</span></span><br><span class="line">    printSeqList(&amp;<span class="built_in">list</span>);    <span class="comment">// 输出：10 15 20 30</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找元素</span></span><br><span class="line">    <span class="type">int</span> index = find(&amp;<span class="built_in">list</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">if</span> (index != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;元素20在顺序表中的位置：%d\n&quot;</span>, index);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未找到元素20\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问元素</span></span><br><span class="line">    <span class="type">int</span> value = get(&amp;<span class="built_in">list</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;顺序表中索引2的元素是：%d\n&quot;</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    delete(&amp;<span class="built_in">list</span>, <span class="number">1</span>);      <span class="comment">// 删除位置1的元素</span></span><br><span class="line">    printSeqList(&amp;<span class="built_in">list</span>);    <span class="comment">// 输出：10 20 30</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>每个节点包含两个部分：</p>
<ul>
<li>数据域 (Data)：存储节点的数据。</li>
<li>指针域 (Next)：指向下一个节点的地址。</li>
</ul>
<p>最后一个节点的 Next 指针通常为 NULL，表示链表的终点。</p>
<h4 id="无链表头"><a href="#无链表头" class="headerlink" title="无链表头"></a>无链表头</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> E;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义节点结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    E element;          <span class="comment">// 数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span>  <span class="comment">// 指针域，指向下一个节点</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新节点</span></span><br><span class="line">Node* <span class="title function_">createNode</span><span class="params">(E element)</span>&#123;</span><br><span class="line">    Node *newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(!newNode)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;内存分配失败！\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;element = element;</span><br><span class="line">    newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表头部插入节点</span></span><br><span class="line">Node* <span class="title function_">insertAtHead</span><span class="params">(Node *head,E element)</span>&#123;</span><br><span class="line">    Node *newNode = createNode(element);</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        head = newNode;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;next = head;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表尾部插入节点</span></span><br><span class="line">Node* <span class="title function_">appendAtHead</span><span class="params">(Node *head,E element)</span>&#123;</span><br><span class="line">    Node *newNode = createNode(element);</span><br><span class="line">    <span class="comment">// 如果链表为空</span></span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        head = newNode;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    temp-&gt;next = newNode;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除链表中值为 element 的节点</span></span><br><span class="line">Node* <span class="title function_">deleteNode</span><span class="params">(Node *head,E element)</span>&#123;</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    Node *prev = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(temp!=<span class="literal">NULL</span> &amp;&amp; temp-&gt;element==element)&#123;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (temp!=<span class="literal">NULL</span> &amp;&amp; temp-&gt;element!=element)&#123;</span><br><span class="line">        prev = temp;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(temp==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未找到值为 %d 的节点。\n&quot;</span>, element);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    prev-&gt;next=temp-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询链表中是否包含某个值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">queryNode</span><span class="params">(Node *head,E element)</span>&#123;</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp-&gt;element==element)&#123;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//未找到，返回 -1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历并打印链表中的所有节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(Node *head)</span>&#123;</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d-&gt;&quot;</span>,temp-&gt;element);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放链表占用的内存</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeList</span><span class="params">(Node *head)</span>&#123;</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    Node *next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        next = temp-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">        temp = next;</span><br><span class="line">    &#125;</span><br><span class="line">    head = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;free List&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Node *head = <span class="literal">NULL</span>;</span><br><span class="line">    head = insertAtHead(head,<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,head-&gt;element);	<span class="comment">// 7</span></span><br><span class="line">    head = appendAtHead(head,<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,head-&gt;next-&gt;element);	<span class="comment">// 8</span></span><br><span class="line">    head = deleteNode(head,<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,head-&gt;element);	<span class="comment">// 8</span></span><br><span class="line">    head = insertAtHead(head,<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,head-&gt;element);	<span class="comment">// 7</span></span><br><span class="line">    head = deleteNode(head,<span class="number">8</span>);		</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,head-&gt;element);	<span class="comment">// 7</span></span><br><span class="line">    <span class="type">int</span> q = queryNode(head,<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,q);		<span class="comment">// -1</span></span><br><span class="line">    printList(head);		<span class="comment">// 7-&gt;NULL</span></span><br><span class="line">    freeList(head);			<span class="comment">// free List</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="有链表头"><a href="#有链表头" class="headerlink" title="有链表头"></a>有链表头</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> E;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义节点结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    E element;          <span class="comment">// 数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span>  <span class="comment">// 指针域，指向下一个节点</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新节点</span></span><br><span class="line">Node* <span class="title function_">createNode</span><span class="params">(E element)</span>&#123;</span><br><span class="line">    Node *newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(!newNode)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;内存分配失败！\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;element = element;</span><br><span class="line">    newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表头部插入节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertAtHead</span><span class="params">(Node *head,E element)</span>&#123;</span><br><span class="line">    Node *newNode = createNode(element);</span><br><span class="line">    <span class="keyword">if</span>(head-&gt;next==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        head-&gt;next=newNode;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node *temp = head-&gt;next;</span><br><span class="line">    head-&gt;next = newNode;</span><br><span class="line">    newNode-&gt;next = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表尾部插入节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">appendAtHead</span><span class="params">(Node *head,E element)</span>&#123;</span><br><span class="line">    Node *newNode = createNode(element);</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    temp-&gt;next=newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除链表中值为 element 的节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteNode</span><span class="params">(Node *head,E element)</span>&#123;</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp-&gt;next-&gt;element==element)&#123;</span><br><span class="line">            Node *del = temp-&gt;next;</span><br><span class="line">            temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(del);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询链表中是否包含某个值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">queryNode</span><span class="params">(Node* head,E element)</span>&#123;</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    <span class="type">int</span> count =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp-&gt;next-&gt;element==element)&#123;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历并打印链表中的所有节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(Node* head)</span>&#123;</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d-&gt;&quot;</span>,temp-&gt;next-&gt;element);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放链表占用的内存</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeList</span><span class="params">(Node *head)</span>&#123;</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    Node *next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        next = temp-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">        temp = next;</span><br><span class="line">    &#125;</span><br><span class="line">    head = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;free List&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    Node *head = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    head-&gt;element=<span class="number">0</span>;</span><br><span class="line">    head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    insertAtHead(head,<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,head-&gt;next-&gt;element);	<span class="comment">//7</span></span><br><span class="line">    appendAtHead(head,<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,head-&gt;next-&gt;next-&gt;element);	<span class="comment">// 8</span></span><br><span class="line">    deleteNode(head,<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,head-&gt;next-&gt;element);		<span class="comment">// 8</span></span><br><span class="line">    appendAtHead(head,<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, queryNode(head,<span class="number">7</span>));		<span class="comment">// 2</span></span><br><span class="line">    printList(head);	<span class="comment">// 8-&gt;7-&gt;NULL</span></span><br><span class="line">    freeList(head);		<span class="comment">// free List</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p>双向链表的每个节点包含两个指针：</p>
<ul>
<li><strong>一个指向前驱节点（prev）</strong>。</li>
<li><strong>一个指向后继节点（next）</strong>。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> E;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义节点结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    E element;          <span class="comment">// 数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span>  <span class="comment">// 指针域，指向下一个节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">prev</span>;</span>  <span class="comment">// 指针域，指向上一个节点</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initList</span><span class="params">(Node* head)</span>&#123;</span><br><span class="line">    head-&gt;element=<span class="number">0</span>;</span><br><span class="line">    head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    head-&gt;prev=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新节点</span></span><br><span class="line">Node* <span class="title function_">createNode</span><span class="params">(E element)</span>&#123;</span><br><span class="line">    Node *newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(!newNode)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;内存分配失败！\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;element = element;</span><br><span class="line">    newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    newNode-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在双向链表头部插入节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertAtHead</span><span class="params">(Node *head,E element)</span>&#123;</span><br><span class="line">    Node *newNode = createNode(element);</span><br><span class="line">    <span class="keyword">if</span>(head-&gt;next==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        head-&gt;next=newNode;</span><br><span class="line">        newNode-&gt;prev=head;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node *temp = head-&gt;next;</span><br><span class="line">    head-&gt;next = newNode;</span><br><span class="line">    newNode-&gt;prev = head;</span><br><span class="line">    newNode-&gt;next = temp;</span><br><span class="line">    temp-&gt;prev = newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在双向链表尾部插入节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">appendAtHead</span><span class="params">(Node *head,E element)</span>&#123;</span><br><span class="line">    Node *newNode = createNode(element);</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    temp-&gt;next=newNode;</span><br><span class="line">    newNode-&gt;prev = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除双向链表中值为 element 的节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteNode</span><span class="params">(Node *head,E element)</span>&#123;</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp-&gt;next-&gt;element==element)&#123;</span><br><span class="line">            Node *del = temp-&gt;next;</span><br><span class="line">            temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">            temp-&gt;next-&gt;prev = temp;</span><br><span class="line">            <span class="built_in">free</span>(del);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t find %d\n&quot;</span>, element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询双向链表中是否包含某个值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">queryNode</span><span class="params">(Node* head,E element)</span>&#123;</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    <span class="type">int</span> count =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp-&gt;next-&gt;element==element)&#123;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历并打印链表中的所有节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(Node* head)</span>&#123;</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d-&gt;&quot;</span>,temp-&gt;next-&gt;element);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放链表占用的内存</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeList</span><span class="params">(Node *head)</span>&#123;</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    Node *next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        next = temp-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">        temp = next;</span><br><span class="line">    &#125;</span><br><span class="line">    head = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;free List&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    Node *head = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    initList(head);</span><br><span class="line">    insertAtHead(head,<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,head-&gt;next-&gt;element);	<span class="comment">// 7</span></span><br><span class="line">    appendAtHead(head,<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,head-&gt;next-&gt;next-&gt;element);	<span class="comment">// 8</span></span><br><span class="line">    deleteNode(head,<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,head-&gt;next-&gt;element);		<span class="comment">// 8</span></span><br><span class="line">    appendAtHead(head,<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, queryNode(head,<span class="number">7</span>));	<span class="comment">// 2</span></span><br><span class="line">    printList(head);	<span class="comment">// 8-&gt;7-&gt;NULL</span></span><br><span class="line">    freeList(head);	<span class="comment">// free List</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p>循环链表的最后一个节点指向头节点，从而形成一个环状结构。</p>
<p>在循环链表中，任何一个节点的下一个节点都不会是<code>NULL</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> E;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义节点结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    E element;          <span class="comment">// 数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span>  <span class="comment">// 指针域，指向下一个节点</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initList</span><span class="params">(Node* head)</span>&#123;</span><br><span class="line">    head-&gt;element=<span class="number">0</span>;</span><br><span class="line">    head-&gt;next=head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新节点</span></span><br><span class="line">Node *<span class="title function_">createNode</span><span class="params">(E element)</span>&#123;</span><br><span class="line">    Node *newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(!newNode)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;内存分配失败！\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;element = element;</span><br><span class="line">    newNode-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在循环链表头部插入节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertAtHead</span><span class="params">(Node *head,E element)</span>&#123;</span><br><span class="line">    Node *newNode = createNode(element);</span><br><span class="line">    head-&gt;next = newNode;</span><br><span class="line">    newNode-&gt;next = head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在循环链表尾部插入节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">appendAtHead</span><span class="params">(Node *head,E element)</span>&#123;</span><br><span class="line">    Node *newNode = createNode(element);</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next!=head)&#123;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    temp-&gt;next=newNode;</span><br><span class="line">    newNode-&gt;next = head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除循环链表中值为 element 的节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteNode</span><span class="params">(Node *head,E element)</span>&#123;</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next!=head)&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp-&gt;next-&gt;element==element)&#123;</span><br><span class="line">            Node *del = temp-&gt;next;</span><br><span class="line">            temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(del);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;can&#x27;t find %d\n&quot;</span>, element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询循环链表中是否包含某个值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">queryNode</span><span class="params">(Node* head,E element)</span>&#123;</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    <span class="type">int</span> count =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next!=head)&#123;</span><br><span class="line">        <span class="keyword">if</span>(temp-&gt;next-&gt;element==element)&#123;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历并打印链表中的所有节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(Node* head)</span>&#123;</span><br><span class="line">    Node *temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next!=head)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d-&gt;&quot;</span>,temp-&gt;next-&gt;element);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放链表占用的内存</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeList</span><span class="params">(Node *head)</span>&#123;</span><br><span class="line">    Node *temp = head-&gt;next;</span><br><span class="line">    Node *next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp!=head)&#123;</span><br><span class="line">        next = temp-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">        temp = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(head);</span><br><span class="line">    head = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;free List&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    Node *head = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    initList(head);</span><br><span class="line">    insertAtHead(head,<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,head-&gt;next-&gt;element);	<span class="comment">// 7</span></span><br><span class="line">    appendAtHead(head,<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,head-&gt;next-&gt;next-&gt;element);	<span class="comment">// 8</span></span><br><span class="line">    deleteNode(head,<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,head-&gt;next-&gt;element);	<span class="comment">// 8</span></span><br><span class="line">    appendAtHead(head,<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, queryNode(head,<span class="number">7</span>));	<span class="comment">// 2</span></span><br><span class="line">    printList(head);	<span class="comment">// 8-&gt;7-&gt;NULL</span></span><br><span class="line">    freeList(head);	<span class="comment">// free List</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈遵循后进先出的原则</p>
<h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 100  <span class="comment">// 定义栈的最大容量</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> E;  <span class="comment">// 定义元素类型为 int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈的结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data[MAX_SIZE]; <span class="comment">// 存储栈元素的数组</span></span><br><span class="line">    <span class="type">int</span> top;            <span class="comment">// 栈顶指针，指向栈顶元素的索引</span></span><br><span class="line">&#125; Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化栈，将栈顶指针初始化为 -1</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initStack</span><span class="params">(Stack *<span class="built_in">stack</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = <span class="number">-1</span>; <span class="comment">// 栈为空时，栈顶指针为 -1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isNull</span><span class="params">(Stack *<span class="built_in">stack</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;top == <span class="number">-1</span>) &#123; <span class="comment">// 如果栈顶指针为 -1，说明栈为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将元素压入栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(Stack *<span class="built_in">stack</span>, E element)</span> &#123;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = <span class="built_in">stack</span>-&gt;top + <span class="number">1</span>; <span class="comment">// 栈顶指针加 1，指向新的栈顶位置</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;top &gt;= MAX_SIZE) &#123; <span class="comment">// 检查是否超过栈的最大容量</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;out of MAX_SIZE!\n&quot;</span>); <span class="comment">// 栈溢出错误提示</span></span><br><span class="line">        <span class="built_in">stack</span>-&gt;top--; <span class="comment">// 恢复栈顶指针</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;data[<span class="built_in">stack</span>-&gt;top] = element; <span class="comment">// 将元素存入栈顶位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从栈顶弹出元素，并存储到指针 e 中</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pop</span><span class="params">(Stack *<span class="built_in">stack</span>, E *e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isNull(<span class="built_in">stack</span>)) &#123; <span class="comment">// 如果栈为空，弹出失败</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;stack is NULL!\n&quot;</span>); <span class="comment">// 提示栈为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *e = <span class="built_in">stack</span>-&gt;data[<span class="built_in">stack</span>-&gt;top]; <span class="comment">// 获取栈顶元素</span></span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = <span class="built_in">stack</span>-&gt;top - <span class="number">1</span>;  <span class="comment">// 栈顶指针减 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 弹出成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看栈顶元素，但不移除</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">peek</span><span class="params">(Stack *<span class="built_in">stack</span>, E *e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isNull(<span class="built_in">stack</span>)) &#123; <span class="comment">// 如果栈为空，查看失败</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;stack is NULL!\n&quot;</span>); <span class="comment">// 提示栈为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *e = <span class="built_in">stack</span>-&gt;data[<span class="built_in">stack</span>-&gt;top]; <span class="comment">// 获取栈顶元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 查看成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 动态分配内存创建栈</span></span><br><span class="line">    Stack *<span class="built_in">stack</span> = (Stack *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Stack));</span><br><span class="line">    initStack(<span class="built_in">stack</span>); <span class="comment">// 初始化栈</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 压栈操作</span></span><br><span class="line">    push(<span class="built_in">stack</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">stack</span>-&gt;data[<span class="built_in">stack</span>-&gt;top]); <span class="comment">// 输出栈顶元素，结果为 7</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动态分配内存创建变量用于存储弹出或查看的元素</span></span><br><span class="line">    E *e = (E *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(E));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 弹栈操作</span></span><br><span class="line">    pop(<span class="built_in">stack</span>, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *e); <span class="comment">// 输出弹出的元素，结果为 7</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再次压栈操作</span></span><br><span class="line">    push(<span class="built_in">stack</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看栈顶元素</span></span><br><span class="line">    peek(<span class="built_in">stack</span>, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *e); <span class="comment">// 输出栈顶元素，结果为 8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放动态分配的内存</span></span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">stack</span>);</span><br><span class="line">    <span class="built_in">free</span>(e);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="链式结构"><a href="#链式结构" class="headerlink" title="链式结构"></a>链式结构</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> E; <span class="comment">// 定义栈元素类型为 int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表节点结构体定义，用于实现链式栈</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">    E data;             <span class="comment">// 栈元素数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>* <span class="title">next</span>;</span> <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">&#125; Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化栈头节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initStack</span><span class="params">(Stack *head)</span> &#123;</span><br><span class="line">    head-&gt;data = <span class="number">0</span>;   <span class="comment">// 栈头数据初始化为 0</span></span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 栈头的下一节点为空，表示栈为空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新栈节点，并赋予数据 element</span></span><br><span class="line">Stack* <span class="title function_">createStack</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    Stack *<span class="built_in">stack</span> = (Stack*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Stack)); <span class="comment">// 动态分配内存</span></span><br><span class="line">    <span class="built_in">stack</span>-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 初始化节点的 next 指针为 NULL</span></span><br><span class="line">    <span class="built_in">stack</span>-&gt;data = element; <span class="comment">// 设置节点数据为 element</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">stack</span>; <span class="comment">// 返回新创建的节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isNULL</span><span class="params">(Stack* head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head-&gt;next == <span class="literal">NULL</span>) &#123; <span class="comment">// 如果头节点的 next 为空，栈为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 否则栈不为空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将元素压入栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pushStack</span><span class="params">(Stack* head, E element)</span> &#123;</span><br><span class="line">    Stack *temp = head-&gt;next;         <span class="comment">// 暂存当前栈顶节点</span></span><br><span class="line">    Stack *newNode = createStack(element); <span class="comment">// 创建新的栈节点</span></span><br><span class="line">    head-&gt;next = newNode;             <span class="comment">// 更新头节点的 next，指向新节点</span></span><br><span class="line">    newNode-&gt;next = temp;             <span class="comment">// 新节点的 next 指向原来的栈顶节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹出栈顶元素</span></span><br><span class="line">E <span class="title function_">popStack</span><span class="params">(Stack* head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isNULL(head)) &#123; <span class="comment">// 如果栈为空，无法弹出</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Stack is NULL\n&quot;</span>); <span class="comment">// 提示栈为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 返回默认值</span></span><br><span class="line">    &#125;</span><br><span class="line">    Stack *temp = head-&gt;next;         <span class="comment">// 暂存栈顶节点</span></span><br><span class="line">    head-&gt;next = head-&gt;next-&gt;next;    <span class="comment">// 更新头节点的 next 指向栈顶的下一个节点</span></span><br><span class="line">    E e = temp-&gt;data;                 <span class="comment">// 获取栈顶数据</span></span><br><span class="line">    <span class="built_in">free</span>(temp);                       <span class="comment">// 释放栈顶节点内存</span></span><br><span class="line">    <span class="keyword">return</span> e;                         <span class="comment">// 返回栈顶数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印栈中所有元素</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printStack</span><span class="params">(Stack* head)</span> &#123;</span><br><span class="line">    Stack *temp = head-&gt;next; <span class="comment">// 从头节点的 next 开始遍历栈</span></span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;    <span class="comment">// 遍历直到栈底（NULL）</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d-&gt;&quot;</span>, temp-&gt;data); <span class="comment">// 打印当前节点数据</span></span><br><span class="line">        temp = temp-&gt;next;         <span class="comment">// 移动到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>); <span class="comment">// 栈底结束后打印 NULL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放整个栈的内存</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeStack</span><span class="params">(Stack* head)</span> &#123;</span><br><span class="line">    Stack *temp = head-&gt;next; <span class="comment">// 从头节点的 next 开始释放内存</span></span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;    <span class="comment">// 遍历释放所有节点</span></span><br><span class="line">        <span class="built_in">free</span>(head);           <span class="comment">// 释放当前节点内存</span></span><br><span class="line">        temp = temp-&gt;next;    <span class="comment">// 移动到下一个节点</span></span><br><span class="line">        head = temp;          <span class="comment">// 更新头节点为当前节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Stack is NULL\n&quot;</span>); <span class="comment">// 提示栈已释放完毕</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Stack *head = (Stack*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Stack)); <span class="comment">// 动态分配栈头节点</span></span><br><span class="line">    initStack(head); <span class="comment">// 初始化栈头节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 压栈操作</span></span><br><span class="line">    pushStack(head, <span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, head-&gt;next-&gt;data); <span class="comment">// 输出栈顶元素，结果为 7</span></span><br><span class="line">    pushStack(head, <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, head-&gt;next-&gt;data); <span class="comment">// 输出栈顶元素，结果为 8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 弹栈操作</span></span><br><span class="line">    E e = popStack(head);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, e); <span class="comment">// 输出弹出的栈顶元素，结果为 8</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印栈中元素</span></span><br><span class="line">    printStack(head); <span class="comment">// 输出栈中的元素，结果为 7-&gt;NULL</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放栈内存</span></span><br><span class="line">    freeStack(head); <span class="comment">// 释放所有栈内存，并提示栈为空</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列遵循先进先出的原则</p>
<h3 id="顺序结构-1"><a href="#顺序结构-1" class="headerlink" title="顺序结构"></a>顺序结构</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 5 <span class="comment">// 定义队列的最大容量</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> E; <span class="comment">// 定义队列元素类型为 int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义队列结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data[MAX_SIZE]; <span class="comment">// 存储队列元素的数组</span></span><br><span class="line">    <span class="type">int</span> front;          <span class="comment">// 队头指针，指向队头元素</span></span><br><span class="line">    <span class="type">int</span> rear;           <span class="comment">// 队尾指针，指向队尾元素的下一个位置</span></span><br><span class="line">    <span class="type">int</span> size;           <span class="comment">// 队列中的元素个数</span></span><br><span class="line">&#125; Queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initQueue</span><span class="params">(Queue *<span class="built_in">queue</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;front = <span class="number">0</span>;  <span class="comment">// 队头指针初始化为 0</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear = <span class="number">0</span>;   <span class="comment">// 队尾指针初始化为 0</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;size = <span class="number">0</span>;   <span class="comment">// 队列大小初始化为 0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isEmpty</span><span class="params">(Queue *<span class="built_in">queue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">queue</span>-&gt;size == <span class="number">0</span>) &#123; <span class="comment">// 如果队列大小为 0，则队列为空</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Queue is NULL!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 返回 1 表示队列为空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 返回 0 表示队列不为空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否已满</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isFull</span><span class="params">(Queue *<span class="built_in">queue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">queue</span>-&gt;size == MAX_SIZE) &#123; <span class="comment">// 如果队列大小等于最大容量，则队列满</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Queue is FULL!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 返回 1 表示队列已满</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 返回 0 表示队列未满</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队操作，将元素添加到队尾</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">enQueue</span><span class="params">(Queue *<span class="built_in">queue</span>, E element)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isFull(<span class="built_in">queue</span>)) &#123; <span class="comment">// 如果队列已满，打印提示信息并返回</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Queue is FULL!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;data[<span class="built_in">queue</span>-&gt;rear] = element;         <span class="comment">// 将元素插入队尾</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear = (<span class="built_in">queue</span>-&gt;rear + <span class="number">1</span>) % MAX_SIZE; <span class="comment">// 更新队尾指针，采用循环队列</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;size++;                              <span class="comment">// 队列大小加 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队操作，将队头元素移除并返回</span></span><br><span class="line">E <span class="title function_">deQueue</span><span class="params">(Queue *<span class="built_in">queue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty(<span class="built_in">queue</span>)) &#123; <span class="comment">// 如果队列为空，返回 -1 表示无效</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    E e = <span class="built_in">queue</span>-&gt;data[<span class="built_in">queue</span>-&gt;front];          <span class="comment">// 获取队头元素</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;front = (<span class="built_in">queue</span>-&gt;front + <span class="number">1</span>) % MAX_SIZE; <span class="comment">// 更新队头指针，采用循环队列</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;size--;                            <span class="comment">// 队列大小减 1</span></span><br><span class="line">    <span class="keyword">return</span> e;                                 <span class="comment">// 返回被移除的元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印队列中所有元素</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printQueue</span><span class="params">(Queue *<span class="built_in">queue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty(<span class="built_in">queue</span>)) &#123; <span class="comment">// 如果队列为空，直接返回</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Queue elements: &quot;</span>);</span><br><span class="line">    <span class="type">int</span> size = <span class="built_in">queue</span>-&gt;size; <span class="comment">// 保存队列中元素的数量</span></span><br><span class="line">    <span class="type">int</span> temp = <span class="built_in">queue</span>-&gt;front; <span class="comment">// 从队头开始遍历</span></span><br><span class="line">    <span class="keyword">while</span> (size != <span class="number">0</span>) &#123; <span class="comment">// 遍历所有元素</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d-&gt;&quot;</span>, <span class="built_in">queue</span>-&gt;data[temp]); <span class="comment">// 打印当前元素</span></span><br><span class="line">        temp = (temp + <span class="number">1</span>) % MAX_SIZE;      <span class="comment">// 更新索引，循环队列</span></span><br><span class="line">        size--;                            <span class="comment">// 元素数量减 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>); <span class="comment">// 队列结束</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数，测试队列功能</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Queue *<span class="built_in">queue</span> = (Queue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue)); <span class="comment">// 动态分配队列内存</span></span><br><span class="line">    initQueue(<span class="built_in">queue</span>); <span class="comment">// 初始化队列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试入队操作</span></span><br><span class="line">    enQueue(<span class="built_in">queue</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">queue</span>-&gt;data[<span class="number">0</span>]); <span class="comment">// 输出：1</span></span><br><span class="line">    enQueue(<span class="built_in">queue</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">queue</span>-&gt;data[<span class="number">1</span>]); <span class="comment">// 输出：2</span></span><br><span class="line">    enQueue(<span class="built_in">queue</span>, <span class="number">3</span>);</span><br><span class="line">    enQueue(<span class="built_in">queue</span>, <span class="number">4</span>);</span><br><span class="line">    enQueue(<span class="built_in">queue</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">queue</span>-&gt;size); <span class="comment">// 输出队列大小：5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印队列</span></span><br><span class="line">    printQueue(<span class="built_in">queue</span>); <span class="comment">// 输出：Queue elements: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试出队操作</span></span><br><span class="line">    E e;</span><br><span class="line">    e = deQueue(<span class="built_in">queue</span>); <span class="comment">// 移除队头元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, e);  <span class="comment">// 输出：1</span></span><br><span class="line">    e = deQueue(<span class="built_in">queue</span>); <span class="comment">// 移除队头元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, e);  <span class="comment">// 输出：2</span></span><br><span class="line">    e = deQueue(<span class="built_in">queue</span>); <span class="comment">// 移除队头元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, e);  <span class="comment">// 输出：3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放队列内存</span></span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="链式结构-1"><a href="#链式结构-1" class="headerlink" title="链式结构"></a>链式结构</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> E; <span class="comment">// 定义队列元素类型为 int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义节点结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    E element;        <span class="comment">// 节点存储的元素</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span> <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义队列结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line">    Node *front; <span class="comment">// 队头指针</span></span><br><span class="line">    Node *rear;  <span class="comment">// 队尾指针</span></span><br><span class="line">&#125; Queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initQueue</span><span class="params">(Queue* <span class="built_in">queue</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear = <span class="literal">NULL</span>;  <span class="comment">// 队尾指针初始化为 NULL</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;front = <span class="literal">NULL</span>; <span class="comment">// 队头指针初始化为 NULL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isEmpty</span><span class="params">(Queue* <span class="built_in">queue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">queue</span>-&gt;front == <span class="literal">NULL</span>); <span class="comment">// 如果队头指针为 NULL，说明队列为空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新节点</span></span><br><span class="line">Node *<span class="title function_">createNode</span><span class="params">(E element)</span> &#123;</span><br><span class="line">    Node *newNode = (Node*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node)); <span class="comment">// 动态分配新节点内存</span></span><br><span class="line">    newNode-&gt;next = <span class="literal">NULL</span>;       <span class="comment">// 新节点的 next 指针初始化为 NULL</span></span><br><span class="line">    newNode-&gt;element = element; <span class="comment">// 将传入的元素赋值给节点</span></span><br><span class="line">    <span class="keyword">return</span> newNode;             <span class="comment">// 返回新创建的节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队操作</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">enQueue</span><span class="params">(Queue* <span class="built_in">queue</span>, E element)</span> &#123;</span><br><span class="line">    Node *newNode = createNode(element); <span class="comment">// 创建新节点</span></span><br><span class="line">    <span class="keyword">if</span> (isEmpty(<span class="built_in">queue</span>)) &#123;                <span class="comment">// 如果队列为空</span></span><br><span class="line">        <span class="built_in">queue</span>-&gt;front = newNode;          <span class="comment">// 队头指针指向新节点</span></span><br><span class="line">        <span class="built_in">queue</span>-&gt;rear = newNode;           <span class="comment">// 队尾指针指向新节点</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear-&gt;next = newNode; <span class="comment">// 队尾指针的 next 指向新节点</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear = newNode;       <span class="comment">// 更新队尾指针为新节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队操作</span></span><br><span class="line">E <span class="title function_">deQueue</span><span class="params">(Queue* <span class="built_in">queue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty(<span class="built_in">queue</span>)) &#123; <span class="comment">// 如果队列为空</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Queue is NULL\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 返回一个错误值</span></span><br><span class="line">    &#125;</span><br><span class="line">    E e = <span class="built_in">queue</span>-&gt;front-&gt;element;  <span class="comment">// 获取队头元素</span></span><br><span class="line">    Node *deNode = <span class="built_in">queue</span>-&gt;front;  <span class="comment">// 暂存队头节点</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;front = deNode-&gt;next;  <span class="comment">// 更新队头指针</span></span><br><span class="line">    <span class="built_in">free</span>(deNode);                 <span class="comment">// 释放队头节点内存</span></span><br><span class="line">    <span class="keyword">return</span> e;                      <span class="comment">// 返回出队的元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放队列内存</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeQueue</span><span class="params">(Queue* <span class="built_in">queue</span>)</span> &#123;</span><br><span class="line">    Node *temp = <span class="built_in">queue</span>-&gt;front; <span class="comment">// 从队头开始</span></span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;      <span class="comment">// 遍历所有节点</span></span><br><span class="line">        <span class="built_in">queue</span>-&gt;front = <span class="built_in">queue</span>-&gt;front-&gt;next; <span class="comment">// 更新队头指针</span></span><br><span class="line">        <span class="built_in">free</span>(temp);             <span class="comment">// 释放当前节点的内存</span></span><br><span class="line">        temp = <span class="built_in">queue</span>-&gt;front;    <span class="comment">// 移动到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">queue</span>); <span class="comment">// 释放队列结构体内存</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;free Queue!\n&quot;</span>); <span class="comment">// 输出释放提示信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Queue *<span class="built_in">queue</span> = (Queue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue)); <span class="comment">// 动态分配队列内存</span></span><br><span class="line">    initQueue(<span class="built_in">queue</span>); <span class="comment">// 初始化队列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试入队和出队操作</span></span><br><span class="line">    enQueue(<span class="built_in">queue</span>, <span class="number">7</span>); <span class="comment">// 入队 7</span></span><br><span class="line">    enQueue(<span class="built_in">queue</span>, <span class="number">8</span>); <span class="comment">// 入队 8</span></span><br><span class="line"></span><br><span class="line">    E e = deQueue(<span class="built_in">queue</span>); <span class="comment">// 出队</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Dequeued: %d\n&quot;</span>, e); <span class="comment">// 输出：Dequeued: 7</span></span><br><span class="line"></span><br><span class="line">    e = deQueue(<span class="built_in">queue</span>); <span class="comment">// 再次出队</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Dequeued: %d\n&quot;</span>, e); <span class="comment">// 输出：Dequeued: 8</span></span><br><span class="line"></span><br><span class="line">    e = deQueue(<span class="built_in">queue</span>); <span class="comment">// 出队空队列</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Dequeued: %d\n&quot;</span>, e); <span class="comment">// 输出：Queue is NULL, Dequeued: -1</span></span><br><span class="line"></span><br><span class="line">    freeQueue(<span class="built_in">queue</span>); <span class="comment">// 释放队列内存，输出：free Queue!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h2><p>树（Tree）是有n个节点的有限集，它或为空树（n&#x3D;0），或为非空树（n&gt;0）。</p>
<p>有且只有一个根节点。</p>
<p>除根节点以外的节点可以分为m个互不相交的有限集，其中每一个集合本身又是一棵树，称为根的子树。</p>
<p><img src="/2024/02/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.jpg"></p>
<h2 id="树的基本术语"><a href="#树的基本术语" class="headerlink" title="树的基本术语"></a>树的基本术语</h2><p><strong>结点</strong></p>
<p>树中的一个独立单元。包含一个数据元素及若干指向其子树的分支。</p>
<p><strong>结点的度</strong></p>
<p>结点拥有的子树数称为结点的度。</p>
<p><strong>树的度</strong></p>
<p>树的度是树内各结点度的最大值。</p>
<p><strong>叶子</strong></p>
<p>度为0的结点称为叶子或终端结点。</p>
<p><strong>非终端结点</strong></p>
<p>度不为0的结点称为非终端结点或分支结点。</p>
<p><strong>双亲和孩子</strong></p>
<p>结点的子树的根称为该结点的孩子,相应地,该结点称为孩子的双亲。</p>
<p><strong>兄弟</strong></p>
<p>同一个双亲的孩子之间互称兄弟。</p>
<p><strong>祖先</strong></p>
<p>从根到该结点所经分支上的所有结点。</p>
<p><strong>子孙</strong></p>
<p>以某结点为根的子树中的任一结点都称为该结点的子孙。</p>
<p><strong>层次</strong></p>
<p>结点的层次从根开始定义起，根为第一层,根的孩子为第二层。</p>
<p>树中任一结点的层次等于其双亲结点的层次加1。</p>
<p><strong>堂兄弟</strong></p>
<p>双亲在同一层的结点互为堂兄弟。</p>
<p><strong>树的深度</strong></p>
<p>树中结点的最大层次称为树的深度或高度。</p>
<p><strong>有序数和无序树</strong></p>
<p>如果将树中结点的各子树看成从左至右是有次序的(即不能互换), 则称该树为有序树,否则称为无序树。</p>
<p>在有序树中最左边的子树的根称为第一个孩子,最右边的称为最后一个孩子。</p>
<p><strong>森林</strong></p>
<p>是m (m≥0) 棵互不相交的树的集合。对树中每个结点而言,其子树的集合即 为森林。</p>
<h2 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h2><p>二叉树（Binary Tree）是n个结点所构成的集合，它或为空树，或为非空树。</p>
<p>有且仅有一个称之为根的节点。</p>
<p>除根结点以外的其余结点分为两个互不相交的子集T1和T2，分别称为T的左子树和右子树,且T1和T2本身又都是二叉树。</p>
<p><strong>二叉树与树的区别：</strong></p>
<p>二叉树每个结点至多只有两棵子树(即二叉树中不存在度大于2的结点);</p>
<p>二叉树的子树有左右之分,其次序不能任意颠倒。</p>
<p>二叉树的递归定义表明二叉树或为空,或是由一个根结点加上两棵分别称为左子树和右子树 的、互不相交的二叉树组成。由于这两棵子树也是二叉树,则由二叉树的定义,它们也可以是空树。</p>
<p><img src="/2024/02/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.jpg"></p>
<h2 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h2><p><img src="/2024/02/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.jpg"></p>
<p><img src="/2024/02/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/4.jpg"></p>
<h2 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h2><p>先序遍历、中序遍历、后续遍历</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x),<span class="built_in">left</span>(<span class="literal">nullptr</span>),<span class="built_in">right</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preorderRecursive</span><span class="params">(TreeNode(* root))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">    cout &lt;&lt; root-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">preorderRecursive</span>(root-&gt;left);</span><br><span class="line">    <span class="built_in">preorderRecursive</span>(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inorderRecursive</span><span class="params">(TreeNode(* root))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">inorderRecursive</span>(root-&gt;left);</span><br><span class="line">    cout &lt;&lt; root-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">inorderRecursive</span>(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postorderRecursive</span><span class="params">(TreeNode(* root))</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">postorderRecursive</span>(root-&gt;left);</span><br><span class="line">    <span class="built_in">postorderRecursive</span>(root-&gt;right);</span><br><span class="line">    cout &lt;&lt; root-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TreeNode* <span class="title">createTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">    TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">1</span>);</span><br><span class="line">    root-&gt;left = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">2</span>);</span><br><span class="line">    root-&gt;right = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">3</span>);</span><br><span class="line">    root-&gt;left-&gt;left = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">4</span>);</span><br><span class="line">    root-&gt;left-&gt;right = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">5</span>);</span><br><span class="line">    root-&gt;right-&gt;left = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    TreeNode* root = <span class="built_in">createTree</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;preorderRecursive: &quot;</span>;</span><br><span class="line">    <span class="built_in">preorderRecursive</span>(root);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;inorderRecursive: &quot;</span>;</span><br><span class="line">    <span class="built_in">inorderRecursive</span>(root);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;postorderRecursive: &quot;</span>;</span><br><span class="line">    <span class="built_in">postorderRecursive</span>(root);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// preorderRecursive: 1 2 4 5 3 6</span></span><br><span class="line"><span class="comment">// inorderRecursive: 4 2 5 1 6 3</span></span><br><span class="line"><span class="comment">// postorderRecursive: 4 5 2 6 3 1</span></span><br></pre></td></tr></table></figure>



<h2 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h2><h3 id="前序线索二叉树"><a href="#前序线索二叉树" class="headerlink" title="前序线索二叉树"></a>前序线索二叉树</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ThreadedNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ThreadedNode* left;</span><br><span class="line">    ThreadedNode* right;</span><br><span class="line">    <span class="type">int</span> leftTag;  <span class="comment">// 0: 子节点，1: 线索</span></span><br><span class="line">    <span class="type">int</span> rightTag;</span><br><span class="line">    <span class="built_in">ThreadedNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x),<span class="built_in">left</span>(<span class="literal">nullptr</span>),<span class="built_in">right</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ThreadedNode* pre = <span class="literal">nullptr</span>;  <span class="comment">// 全局变量，记录前驱节点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preThread</span><span class="params">(ThreadedNode* node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线索化左指针</span></span><br><span class="line">    <span class="keyword">if</span> (!node-&gt;left) &#123;</span><br><span class="line">        node-&gt;left = pre;    <span class="comment">// 左指针指向「前驱」</span></span><br><span class="line">        node-&gt;leftTag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线索化前驱的右指针</span></span><br><span class="line">    <span class="keyword">if</span> (pre &amp;&amp; !pre-&gt;right) &#123;</span><br><span class="line">        pre-&gt;right = node; <span class="comment">// 前驱的右指针指向「当前节点」</span></span><br><span class="line">        pre-&gt;rightTag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pre = node;  <span class="comment">// 更新前驱</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归处理子树（左子树优先）</span></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;leftTag == <span class="number">0</span>) <span class="built_in">preThread</span>(node-&gt;left);</span><br><span class="line">    <span class="keyword">if</span> (node-&gt;rightTag == <span class="number">0</span>) <span class="built_in">preThread</span>(node-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">threadedPreorder</span><span class="params">(ThreadedNode* root)</span> </span>&#123;</span><br><span class="line">    ThreadedNode* curr = root;</span><br><span class="line">    <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;threadedPreorder&quot;</span> &lt;&lt;curr-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 优先访问左子树（非线索）</span></span><br><span class="line">        <span class="keyword">if</span> (curr-&gt;leftTag == <span class="number">0</span>) &#123;</span><br><span class="line">            curr = curr-&gt;left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 通过右线索找到后继</span></span><br><span class="line">            curr = curr-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ThreadedNode* <span class="title">createTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ThreadedNode* root = <span class="keyword">new</span> <span class="built_in">ThreadedNode</span>(<span class="number">1</span>);</span><br><span class="line">    root-&gt;left = <span class="keyword">new</span> <span class="built_in">ThreadedNode</span>(<span class="number">2</span>);</span><br><span class="line">    root-&gt;right = <span class="keyword">new</span> <span class="built_in">ThreadedNode</span>(<span class="number">3</span>);</span><br><span class="line">    root-&gt;left-&gt;left = <span class="keyword">new</span> <span class="built_in">ThreadedNode</span>(<span class="number">4</span>);</span><br><span class="line">    root-&gt;left-&gt;right = <span class="keyword">new</span> <span class="built_in">ThreadedNode</span>(<span class="number">5</span>);</span><br><span class="line">    root-&gt;right-&gt;left = <span class="keyword">new</span> <span class="built_in">ThreadedNode</span>(<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ThreadedNode* threadedNode = <span class="built_in">createTree</span>();</span><br><span class="line">    <span class="built_in">preThread</span>(threadedNode);</span><br><span class="line">    <span class="built_in">threadedPreorder</span>(threadedNode);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 2 4 5 3 6</span></span><br></pre></td></tr></table></figure>

<h3 id="中序线索二叉树"><a href="#中序线索二叉树" class="headerlink" title="中序线索二叉树"></a>中序线索二叉树</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ThreadedNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ThreadedNode* left;</span><br><span class="line">    ThreadedNode* right;</span><br><span class="line">    <span class="type">int</span> leftTag;  <span class="comment">// 0: 子节点，1: 线索</span></span><br><span class="line">    <span class="type">int</span> rightTag;</span><br><span class="line">    <span class="built_in">ThreadedNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x),<span class="built_in">left</span>(<span class="literal">nullptr</span>),<span class="built_in">right</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ThreadedNode* pre = <span class="literal">nullptr</span>;  <span class="comment">// 全局变量，记录前驱节点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inThread</span><span class="params">(ThreadedNode* node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">inThread</span>(node-&gt;left);  <span class="comment">// 递归左子树</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线索化左指针</span></span><br><span class="line">    <span class="keyword">if</span> (!node-&gt;left) &#123;</span><br><span class="line">        node-&gt;left = pre;</span><br><span class="line">        node-&gt;leftTag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线索化前驱的右指针</span></span><br><span class="line">    <span class="keyword">if</span> (pre &amp;&amp; !pre-&gt;right) &#123;</span><br><span class="line">        pre-&gt;right = node;</span><br><span class="line">        pre-&gt;rightTag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pre = node;  <span class="comment">// 更新前驱</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">inThread</span>(node-&gt;right); <span class="comment">// 递归右子树</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">threadedInorder</span><span class="params">(ThreadedNode* root)</span> </span>&#123;</span><br><span class="line">    ThreadedNode* curr = root;</span><br><span class="line">    <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">        <span class="comment">// 找到最左节点（中序起点）</span></span><br><span class="line">        <span class="keyword">while</span> (curr-&gt;leftTag == <span class="number">0</span>) &#123;</span><br><span class="line">            curr = curr-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; curr-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 沿右线索遍历</span></span><br><span class="line">        <span class="keyword">while</span> (curr-&gt;rightTag == <span class="number">1</span>) &#123;</span><br><span class="line">            curr = curr-&gt;right;</span><br><span class="line">            cout &lt;&lt; curr-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curr = curr-&gt;right; <span class="comment">// 转向右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ThreadedNode* <span class="title">createTree</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ThreadedNode* root = <span class="keyword">new</span> <span class="built_in">ThreadedNode</span>(<span class="number">1</span>);</span><br><span class="line">    root-&gt;left = <span class="keyword">new</span> <span class="built_in">ThreadedNode</span>(<span class="number">2</span>);</span><br><span class="line">    root-&gt;right = <span class="keyword">new</span> <span class="built_in">ThreadedNode</span>(<span class="number">3</span>);</span><br><span class="line">    root-&gt;left-&gt;left = <span class="keyword">new</span> <span class="built_in">ThreadedNode</span>(<span class="number">4</span>);</span><br><span class="line">    root-&gt;left-&gt;right = <span class="keyword">new</span> <span class="built_in">ThreadedNode</span>(<span class="number">5</span>);</span><br><span class="line">    root-&gt;right-&gt;left = <span class="keyword">new</span> <span class="built_in">ThreadedNode</span>(<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ThreadedNode* threadedNode = <span class="built_in">createTree</span>();</span><br><span class="line">    <span class="built_in">inThread</span>(threadedNode);</span><br><span class="line">    <span class="built_in">threadedInorder</span>(threadedNode);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">6</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h2 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h2><p>有多种形式的存储结构来表示树。</p>
<h3 id="双亲表示法"><a href="#双亲表示法" class="headerlink" title="双亲表示法"></a>双亲表示法</h3><p><img src="/2024/02/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/7.jpg"></p>
<h3 id="孩子表示法"><a href="#孩子表示法" class="headerlink" title="孩子表示法"></a>孩子表示法</h3><p><img src="/2024/02/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/8.jpg"></p>
<p><img src="/2024/02/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/9.jpg"></p>
<h3 id="孩子兄弟法"><a href="#孩子兄弟法" class="headerlink" title="孩子兄弟法"></a>孩子兄弟法</h3><p><img src="/2024/02/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/10.jpg"></p>
<h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><p><strong>哈夫曼树</strong>（Huffman Tree），又称最优二叉树，是一种带权路径长度（Weighted Path Length, WPL）最小的二叉树。<br><strong>核心目标</strong>：用最小的编码长度表示频率高的字符，广泛应用于数据压缩（如哈夫曼编码）。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>某幸白盒AES</title>
    <url>/2025/03/15/%E6%9F%90%E5%B9%B8%E7%99%BD%E7%9B%92AES/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.lucky.luckyclient</p>
<p><img src="/2025/03/15/%E6%9F%90%E5%B9%B8%E7%99%BD%E7%9B%92AES/1.jpg"></p>
<h2 id="过检测"><a href="#过检测" class="headerlink" title="过检测"></a>过检测</h2><p>root检测：使用狐妖面具隐藏列表实现绕过</p>
<p>360加固：使用脱壳网站脱壳 <a href="https://56.al/">56.al</a></p>
<p>frida检测：使用小工具</p>
<h2 id="逆向目标"><a href="#逆向目标" class="headerlink" title="逆向目标"></a>逆向目标</h2><p><code>com.luckincoffee.safeboxlib.CryptoHelper</code>类下的<code>localAESWork()</code>方法</p>
<p><img src="/2025/03/15/%E6%9F%90%E5%B9%B8%E7%99%BD%E7%9B%92AES/2.jpg"></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p><code>localAESWork()</code>这个方法被通类下的<code>c</code>方法调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title function_">c</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="type">c</span> <span class="variable">cVar</span> <span class="operator">=</span> <span class="built_in">this</span>.f93097a;</span><br><span class="line">    <span class="keyword">if</span> (cVar == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(StubApp.getString2(<span class="string">&quot;32267&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">a10</span> <span class="operator">=</span> cVar.a();</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(a10)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        str2 = <span class="keyword">new</span> <span class="title class_">String</span>(Base64.encode(localAESWork(str.getBytes(), <span class="number">2</span>, Base64.decode(a10.replace(org.objectweb.asm.signature.b.f127225c, org.objectweb.asm.signature.b.f127224b).replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).getBytes(), <span class="number">2</span>)), <span class="number">2</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e10) &#123;</span><br><span class="line">        e10.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str2.replace(org.objectweb.asm.signature.b.f127224b, org.objectweb.asm.signature.b.f127225c).replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;_&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单独看与<code>localAESWork</code>有关的，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str2 = <span class="keyword">new</span> <span class="title class_">String</span>(</span><br><span class="line">    Base64.encode(</span><br><span class="line">        localAESWork(str.getBytes(), <span class="number">2</span>, </span><br><span class="line">                     Base64.decode(a10.replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;+&quot;</span>).replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).getBytes(), <span class="number">2</span>)</span><br><span class="line">                    ), </span><br><span class="line">        <span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对原始字符串str进行AES加密</span></span><br><span class="line"><span class="comment">// 将a10中的&quot;-&quot;替换为&quot;+&quot;、&quot;_&quot;替换为&quot;/&quot;，然后解码为base64字节数组</span></span><br><span class="line"><span class="comment">// 对加密结果进行Base64编码</span></span><br><span class="line"><span class="comment">// Base64的第二个参数2代表URL安全的标准Base64</span></span><br></pre></td></tr></table></figure>

<p>获取<code>a10</code>的值</p>
<p>它是一个接口，我们找到接口的实现类，然后进行hook</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">get_a10</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.lucky.lib.http2.b$a&quot;</span>).$new();</span><br><span class="line">        <span class="keyword">let</span> result = a.<span class="title function_">a</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a10:&quot;</span>,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主动调用，输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a10: gUG562L2Vf2lTAaXhg63pkkJ+lDaV2IQcqdsfGGuNDs=</span><br></pre></td></tr></table></figure>

<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>先使用<code>get_quic_code</code>脚本获取<code>jinCode</code></p>
<p>我这里是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;size&quot;:40,&quot;offset&quot;:&#123;&quot;jniCode&quot;:24,&quot;quickCode&quot;:32,&quot;accessFlags&quot;:4&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>然后通过如下脚本打印函数id(artmethodid)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoadersSync</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">classLoader</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(classLoader.<span class="title function_">loadClass</span>(<span class="string">&quot;com.alibaba.android.arouter.launcher.a&quot;</span>))&#123;</span><br><span class="line">                    <span class="title class_">Java</span>.<span class="property">classFactory</span>.<span class="property">loader</span> = classLoader;</span><br><span class="line">                    <span class="keyword">let</span> <span class="title class_">CryptoHelper</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.luckincoffee.safeboxlib.CryptoHelper&quot;</span>);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">CryptoHelper</span>.<span class="property">$l</span>.<span class="title function_">find</span>(<span class="string">&quot;localAESWork&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(a)&#123;</span><br><span class="line">    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook</span>()</span><br></pre></td></tr></table></figure>

<p>输出</p>
<p><code>m</code>代表method，<code>s</code>代表<code>static</code>，后面是artmethodid</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m:s0x78c6261350</span><br></pre></td></tr></table></figure>

<p><code>artmethodid</code>加上<code>jniCode</code>就是函数的地址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">ptr</span>(<span class="number">0x78c6261350</span>).<span class="title function_">add</span>(<span class="number">24</span>).<span class="title function_">readPointer</span>());</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x7868699ed8</span><br></pre></td></tr></table></figure>

<p>根据这个地址就可以获取函数的地址和偏移量了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(<span class="title function_">ptr</span>(<span class="number">0x7868699ed8</span>)).<span class="property">name</span>);             <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">ptr</span>(<span class="number">0x7868699ed8</span>).<span class="title function_">sub</span>(<span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(<span class="title function_">ptr</span>(<span class="title function_">ptr</span>(<span class="number">0x7868699ed8</span>))).<span class="property">base</span>));</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">libcryptoDD.so</span><br><span class="line">0x41ed8</span><br></pre></td></tr></table></figure>

<h2 id="抓个包"><a href="#抓个包" class="headerlink" title="抓个包"></a>抓个包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">utl:</span><br><span class="line">https://capi.lkcoffee.com/resource/m/user/login</span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">  &quot;x-lk-akv&quot;: &quot;5.3.15&quot;,</span><br><span class="line">  &quot;x-lk-mid&quot;: &quot;&quot;,</span><br><span class="line">  &quot;x-lk-sid&quot;: &quot;&quot;,</span><br><span class="line">  &quot;x-business-language&quot;: &quot;zh-CN&quot;,</span><br><span class="line">  &quot;x-business-regioncode&quot;: &quot;CN&quot;,</span><br><span class="line">  &quot;event_id&quot;: &quot;1741972196535&quot;,</span><br><span class="line">  &quot;x-lk-csid&quot;: &quot;38e7641d-7f62-44e9-bb24-2beca40b68bc&quot;,</span><br><span class="line">  &quot;cookie&quot;: &quot;uid=b4e31b9d-d7ab-40a9-9b64-14e52f633b911741972183784&quot;,</span><br><span class="line">  &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;,</span><br><span class="line">  &quot;content-length&quot;: &quot;704&quot;,</span><br><span class="line">  &quot;accept-encoding&quot;: &quot;gzip&quot;,</span><br><span class="line">  &quot;user-agent&quot;: &quot;okhttp/4.9.3&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body=&#123;</span><br><span class="line">  &quot;sign&quot;: &quot;997653005130164991918737828941799149694&quot;,</span><br><span class="line">  &quot;q&quot;: &quot;veIdVUqstntHvdzxURbvo9_8_soZQht-Vv8TOV4GNTFKY6eV5ccjTgjpUT5CJprcq7Cm5fuzbAvdlfrSQP4ygoeGnUubcH0XonTCzfIs4RYqF7kOdlbEDxFl84iVqKnFQX0Bg2K7cuqYRTR1YkyBckbtvaPOFk-F9jt8cNUe_PFp-oiwzzex5tcqLefG2ZmVBuWJlarfJP4h-XtNmdYpWm5k4_4jhldfVngv29YLYv8GO7m4RQCdDgoydMbu2adjsKsEKy_oWLC2a50RpV_9Yd-AcAGU4OLg3vzL9HqBNttDo6M_bylZJmvYurt3CTn4cvrX3wu0aGPMYr2rBpEEtT062cD7qL7F2mLfqeH8ijsggM0_eqqqk4m2S1dOqky_WXSVbluyFcUQBPUernSXKvLnsLCLgDUVsVeTdpXvt_UP8ia6R6IHhDXkqzjBiCWQqAAOjwfd5shrgNPRNP_h7NpjwwCfK5zJ3g1T9j084UnGoiGQo2cpvBhMWH8RTXAKI7i8K1ZgvGkzHiYAE5zN35WnsNd7ma-61nrItQzMo-TIDr-IIFlv199ErBcCs1Yl&quot;,</span><br><span class="line">  &quot;uid&quot;: &quot;b4e31b9d-d7ab-40a9-9b64-14e52f633b911741972183784&quot;,</span><br><span class="line">  &quot;t&quot;: &quot;1741972256316&quot;,</span><br><span class="line">  &quot;cid&quot;: &quot;210101&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response:</span><br><span class="line">57l6aGIjM8ySP5qUW5cmXG_swqXZ3-CDvlz4K-CW5JHHIAiIXoiAtXFef1i898pFnXG2UaYYFPgo4B-QISWmwxGVgzf63I98g8s1TCjJ2qHAI2q4UI-IP1nRHfLevhZ8Kgx6gyMYgsoibWQJ_IU1cONmes8MQqWG3BlsfA7TAVesjF0N3KaEEfHH0RONmDSU3hSp9D9T3nl-xsHSpLBlPQPQRsLBEHzAgEeKO5EueBVpw8cCq3WnWYGT_Ai2TxBpFIImOPBAMnR-T3lHx0D4Pp-iF9p7c_xa8Ek3IhwVx5m8lpQCuAta8PG1ffVGX7Pgr82woPcekBWvF9qFV4kiabebYKsMQHmAbnNfKxLsSEs=</span><br></pre></td></tr></table></figure>



<h2 id="Unidbg初始环境搭建"><a href="#Unidbg初始环境搭建" class="headerlink" title="Unidbg初始环境搭建"></a>Unidbg初始环境搭建</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">process</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> DalvikModule dm;</span><br><span class="line">    <span class="keyword">private</span> Module cryptoDDmodule;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder</span><br><span class="line">                .for64Bit() <span class="comment">// for32Bit()</span></span><br><span class="line">                .setProcessName(process)</span><br><span class="line">                .setRootDir(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;target/rootfs&quot;</span>))</span><br><span class="line">                .addBackendFactory(<span class="keyword">new</span> <span class="title class_">Unicorn2Factory</span>(<span class="literal">true</span>))</span><br><span class="line">                .build();</span><br><span class="line">        memory = emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;apktest/ruixingcoffee_5.2.65.apk&quot;</span>));</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AndroidModule</span>(emulator,vm).register(memory);</span><br><span class="line">        dm = vm.loadLibrary(<span class="string">&quot;cryptoDD&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">        cryptoDDmodule = dm.getModule();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">localAESWork</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a10</span> <span class="operator">=</span> <span class="string">&quot;gUG562L2Vf2lTAaXhg63pkkJ+lDaV2IQcqdsfGGuNDs=&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] decode_a10 = Base64.getDecoder().decode(a10.replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;+&#x27;</span>).replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).getBytes());</span><br><span class="line">        <span class="type">DvmClass</span> <span class="variable">CryptoHelperClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.luckincoffee.safeboxlib.CryptoHelper&quot;</span>);</span><br><span class="line">        <span class="type">ByteArray</span> <span class="variable">byteValues</span> <span class="operator">=</span> CryptoHelperClass.callStaticJniMethodObject(emulator, <span class="string">&quot;localAESWork([BI[B)[B&quot;</span>,</span><br><span class="line">                <span class="string">&quot;xiaojia&quot;</span>.getBytes(),</span><br><span class="line">                <span class="number">2</span>,</span><br><span class="line">                decode_a10);</span><br><span class="line">        <span class="type">String</span> <span class="variable">b64encoded</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(byteValues.getValue());</span><br><span class="line">        System.out.println(b64encoded);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        test.localAESWork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行一下，报错了，根据unidbg的日志提示，如下，是写入内存失败了</p>
<p><img src="/2025/03/15/%E6%9F%90%E5%B9%B8%E7%99%BD%E7%9B%92AES/3.jpg"></p>
<p>可以通过trace断在报错的位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">localAESWork</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">a10</span> <span class="operator">=</span> <span class="string">&quot;gUG562L2Vf2lTAaXhg63pkkJ+lDaV2IQcqdsfGGuNDs=&quot;</span>;</span><br><span class="line">    <span class="type">byte</span>[] decode_a10 = Base64.getDecoder().decode(a10.replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;+&#x27;</span>).replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).getBytes());</span><br><span class="line">    <span class="type">DvmClass</span> <span class="variable">CryptoHelperClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.luckincoffee.safeboxlib.CryptoHelper&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加trace</span></span><br><span class="line">    emulator.traceCode(cryptoDDmodule.base,cryptoDDmodule.base+cryptoDDmodule.size);</span><br><span class="line">    </span><br><span class="line">    <span class="type">ByteArray</span> <span class="variable">byteValues</span> <span class="operator">=</span> CryptoHelperClass.callStaticJniMethodObject(emulator, <span class="string">&quot;localAESWork([BI[B)[B&quot;</span>,</span><br><span class="line">            <span class="string">&quot;xiaojia&quot;</span>.getBytes(),</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            decode_a10);</span><br><span class="line">    <span class="type">String</span> <span class="variable">b64encoded</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(byteValues.getValue());</span><br><span class="line">    System.out.println(b64encoded);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看输出日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[16:56:56 473][libcryptoDD.so 0x17e64] [11de47f9] 0x12017e64: &quot;ldr x17, [x16, #0xfb8]&quot; x16=0x1204b000 =&gt; x17=0x121bbac0</span><br><span class="line">[16:56:56 473][libcryptoDD.so 0x17e68] [10e23e91] 0x12017e68: &quot;add x16, x16, #0xfb8&quot; x16=0x1204b000 =&gt; x16=0x1204bfb8</span><br><span class="line">[16:56:56 473][libcryptoDD.so 0x17e6c] [20021fd6] 0x12017e6c: &quot;br x17&quot; x17=0x121bbac0Exception in thread &quot;main&quot; java.lang.NullPointerException: Cannot invoke &quot;com.github.unidbg.linux.android.dvm.array.ByteArray.getValue()&quot; because &quot;byteValues&quot; is null</span><br><span class="line">	at com.luckincoffee.safeboxlib.Test.localAESWork(Test.java:62)</span><br><span class="line">	at com.luckincoffee.safeboxlib.Test.main(Test.java:68)</span><br></pre></td></tr></table></figure>

<p>最后是在<code>0x17e6c</code>这个地方停了下来</p>
<p>到IDA里面去看</p>
<p><img src="/2025/03/15/%E6%9F%90%E5%B9%B8%E7%99%BD%E7%9B%92AES/4.jpg"></p>
<p>是一个free函数，Unidbg无法处理这个函数</p>
<p>我们用HookZz来处理，同时把trace关掉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">localAESWork</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//        修复free函数</span></span><br><span class="line">    <span class="type">HookZz</span> <span class="variable">hookZz</span> <span class="operator">=</span> HookZz.getInstance(emulator);</span><br><span class="line">    <span class="type">Module</span> <span class="variable">module</span> <span class="operator">=</span> memory.findModule(<span class="string">&quot;libc.so&quot;</span>);</span><br><span class="line">    hookZz.replace(<span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;free&quot;</span>).getAddress(), <span class="keyword">new</span> <span class="title class_">ReplaceCallback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> HookStatus <span class="title function_">onCall</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> info)</span> &#123;</span><br><span class="line">            <span class="type">RegisterContext</span> <span class="variable">rc</span> <span class="operator">=</span> emulator.getContext();</span><br><span class="line">            <span class="keyword">return</span> HookStatus.RET(emulator, rc.getLRPointer().toIntPeer());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">a10</span> <span class="operator">=</span> <span class="string">&quot;gUG562L2Vf2lTAaXhg63pkkJ+lDaV2IQcqdsfGGuNDs=&quot;</span>;</span><br><span class="line">    <span class="type">byte</span>[] decode_a10 = Base64.getDecoder().decode(a10.replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;+&#x27;</span>).replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).getBytes());</span><br><span class="line">    <span class="type">DvmClass</span> <span class="variable">CryptoHelperClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.luckincoffee.safeboxlib.CryptoHelper&quot;</span>);</span><br><span class="line">	<span class="comment">// 关trace</span></span><br><span class="line">    <span class="comment">// emulator.traceCode(cryptoDDmodule.base,cryptoDDmodule.base+cryptoDDmodule.size);</span></span><br><span class="line"></span><br><span class="line">    <span class="type">ByteArray</span> <span class="variable">byteValues</span> <span class="operator">=</span> CryptoHelperClass.callStaticJniMethodObject(emulator, <span class="string">&quot;localAESWork([BI[B)[B&quot;</span>,</span><br><span class="line">            <span class="string">&quot;xiaojia&quot;</span>.getBytes(),</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            decode_a10);</span><br><span class="line">    <span class="type">String</span> <span class="variable">b64encoded</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(byteValues.getValue());</span><br><span class="line">    System.out.println(b64encoded);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行一下，输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sroyS1xvlvLB1iUSzRC2yw==</span><br></pre></td></tr></table></figure>

<h2 id="加密方式"><a href="#加密方式" class="headerlink" title="加密方式"></a>加密方式</h2><h3 id="ECB"><a href="#ECB" class="headerlink" title="ECB"></a>ECB</h3><p>将明文分割为固定大小的块（例如 AES 的 128 位块），每个块独立加密。</p>
<p><strong>相同明文块</strong>加密后生成<strong>相同密文块</strong>，没有块之间的关联性。</p>
<p>例如：如果两个明文块内容相同，加密后的密文块也相同。</p>
<p>如下</p>
<p><img src="/2025/03/15/%E6%9F%90%E5%B9%B8%E7%99%BD%E7%9B%92AES/5.jpg"></p>
<h3 id="CBC"><a href="#CBC" class="headerlink" title="CBC"></a>CBC</h3><p>每个明文块在加密前会与<strong>前一个密文块</strong>进行异或（XOR）操作（第一个块使用初始化向量 IV）。</p>
<p>块之间存在链式依赖，<strong>相同明文块</strong>加密后生成<strong>不同密文块</strong>。</p>
<p>例如：即使两个明文块相同，加密后的密文块也不同。</p>
<h3 id="确定加密方式"><a href="#确定加密方式" class="headerlink" title="确定加密方式"></a>确定加密方式</h3><p>我们可以传入相同的字符的明文，然后看输出有没有重复</p>
<p>将加密结果转为hex编码，然后搜索看有没有重复的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">localAESWork</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//        修复free函数</span></span><br><span class="line">    <span class="type">HookZz</span> <span class="variable">hookZz</span> <span class="operator">=</span> HookZz.getInstance(emulator);</span><br><span class="line">    <span class="type">Module</span> <span class="variable">module</span> <span class="operator">=</span> memory.findModule(<span class="string">&quot;libc.so&quot;</span>);</span><br><span class="line">    hookZz.replace(<span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;free&quot;</span>).getAddress(), <span class="keyword">new</span> <span class="title class_">ReplaceCallback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> HookStatus <span class="title function_">onCall</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> info)</span> &#123;</span><br><span class="line">            <span class="type">RegisterContext</span> <span class="variable">rc</span> <span class="operator">=</span> emulator.getContext();</span><br><span class="line">            <span class="keyword">return</span> HookStatus.RET(emulator, rc.getLRPointer().toIntPeer());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">a10</span> <span class="operator">=</span> <span class="string">&quot;gUG562L2Vf2lTAaXhg63pkkJ+lDaV2IQcqdsfGGuNDs=&quot;</span>;</span><br><span class="line">    <span class="type">byte</span>[] decode_a10 = Base64.getDecoder().decode(a10.replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;+&#x27;</span>).replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).getBytes());</span><br><span class="line">    <span class="type">DvmClass</span> <span class="variable">CryptoHelperClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.luckincoffee.safeboxlib.CryptoHelper&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">ByteArray</span> <span class="variable">byteValues</span> <span class="operator">=</span> CryptoHelperClass.callStaticJniMethodObject(emulator, <span class="string">&quot;localAESWork([BI[B)[B&quot;</span>,</span><br><span class="line">            <span class="string">&quot;xiaojiaaxiaojiaaxiaojiaaxiaojiaaxiaojiaaxiaojiaaxiaojiaaxiaojiaaxiaojiaaxiaojiaaxiaojiaaxiaojiaa&quot;</span>.getBytes(),</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            decode_a10);</span><br><span class="line">    System.out.println(Hex.encodeHex(byteValues.getValue()));</span><br><span class="line"><span class="comment">//        String b64encoded = Base64.getEncoder().encodeToString(byteValues.getValue());</span></span><br><span class="line"><span class="comment">//        System.out.println(b64encoded);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如下，有重复的</p>
<p><img src="/2025/03/15/%E6%9F%90%E5%B9%B8%E7%99%BD%E7%9B%92AES/6.jpg"></p>
<p>可以确定加密模式是ECB模式了</p>
<h2 id="trace分析"><a href="#trace分析" class="headerlink" title="trace分析"></a>trace分析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">localAESWork</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//        修复free函数</span></span><br><span class="line">    <span class="type">HookZz</span> <span class="variable">hookZz</span> <span class="operator">=</span> HookZz.getInstance(emulator);</span><br><span class="line">    <span class="type">Module</span> <span class="variable">module</span> <span class="operator">=</span> memory.findModule(<span class="string">&quot;libc.so&quot;</span>);</span><br><span class="line">    hookZz.replace(<span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;free&quot;</span>).getAddress(), <span class="keyword">new</span> <span class="title class_">ReplaceCallback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> HookStatus <span class="title function_">onCall</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> info)</span> &#123;</span><br><span class="line">            <span class="type">RegisterContext</span> <span class="variable">rc</span> <span class="operator">=</span> emulator.getContext();</span><br><span class="line">            <span class="keyword">return</span> HookStatus.RET(emulator, rc.getLRPointer().toIntPeer());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">a10</span> <span class="operator">=</span> <span class="string">&quot;gUG562L2Vf2lTAaXhg63pkkJ+lDaV2IQcqdsfGGuNDs=&quot;</span>;</span><br><span class="line">    <span class="type">byte</span>[] decode_a10 = Base64.getDecoder().decode(a10.replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;+&#x27;</span>).replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).getBytes());</span><br><span class="line">    <span class="type">DvmClass</span> <span class="variable">CryptoHelperClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.luckincoffee.safeboxlib.CryptoHelper&quot;</span>);</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// trace</span></span><br><span class="line">    emulator.traceCode(cryptoDDmodule.base,cryptoDDmodule.base+cryptoDDmodule.size);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">traceStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;trace.log&quot;</span>)),<span class="literal">true</span>);</span><br><span class="line">        traceHook.setRedirect(traceStream);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">ByteArray</span> <span class="variable">byteValues</span> <span class="operator">=</span> CryptoHelperClass.callStaticJniMethodObject(emulator, <span class="string">&quot;localAESWork([BI[B)[B&quot;</span>,</span><br><span class="line">            <span class="string">&quot;xiaojiaa&quot;</span>.getBytes(),</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            decode_a10);</span><br><span class="line">    System.out.println(Hex.encodeHex(byteValues.getValue()));</span><br><span class="line"><span class="comment">//        String b64encoded = Base64.getEncoder().encodeToString(byteValues.getValue());</span></span><br><span class="line"><span class="comment">//        System.out.println(b64encoded);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行之后，trace日志结果保存在<code>trace.log</code>文件中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c9cbd740c87749c660690b89498d077d</span><br></pre></td></tr></table></figure>

<p>根据输出结果到trace中搜索，比如<code>c9</code>、<code>cb</code>、<code>d7</code>、<code>40</code>等</p>
<p>找到一系列与输出对应的值，在<code>0xe4fff3c0</code>地址处，在IDA中跳转到他们任意的偏移地址</p>
<p><img src="/2025/03/15/%E6%9F%90%E5%B9%B8%E7%99%BD%E7%9B%92AES/7.jpg"></p>
<p>在IDA中跳转到他们任意的偏移地址，然后反汇编，可以看到处于<code>sub_189C4</code>函数里</p>
<h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * 密钥扩展 =&gt; 11轮密钥</span><br><span class="line"> * 轮密钥加 有异或操作，而且只有异或操作</span><br><span class="line"> *</span><br><span class="line"> * 循环 </span><br><span class="line"> * 字节代换 =&gt; 简单字符替换</span><br><span class="line"> * 行位移 =&gt; 只有位移，没有异或</span><br><span class="line"> * 列混淆 =&gt; 比较复杂，但是不需要key</span><br><span class="line"> * 轮密钥加</span><br><span class="line"> *</span><br><span class="line"> * 字节代换</span><br><span class="line"> * 行位移</span><br><span class="line"> * 轮密钥加</span><br><span class="line"> *</span><br><span class="line"> * 轮密钥加 </span><br><span class="line"> * 字节代换</span><br><span class="line"> * 行位移</span><br><span class="line"> * 列混淆</span><br><span class="line"> * */</span><br></pre></td></tr></table></figure>

<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">localAESWork</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//        修复free函数</span></span><br><span class="line">    <span class="type">HookZz</span> <span class="variable">hookZz</span> <span class="operator">=</span> HookZz.getInstance(emulator);</span><br><span class="line">    <span class="type">Module</span> <span class="variable">module</span> <span class="operator">=</span> memory.findModule(<span class="string">&quot;libc.so&quot;</span>);</span><br><span class="line">    hookZz.replace(<span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;free&quot;</span>).getAddress(), <span class="keyword">new</span> <span class="title class_">ReplaceCallback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> HookStatus <span class="title function_">onCall</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> info)</span> &#123;</span><br><span class="line">            <span class="type">RegisterContext</span> <span class="variable">rc</span> <span class="operator">=</span> emulator.getContext();</span><br><span class="line">            <span class="keyword">return</span> HookStatus.RET(emulator, rc.getLRPointer().toIntPeer());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">a10</span> <span class="operator">=</span> <span class="string">&quot;gUG562L2Vf2lTAaXhg63pkkJ+lDaV2IQcqdsfGGuNDs=&quot;</span>;</span><br><span class="line">    <span class="type">byte</span>[] decode_a10 = Base64.getDecoder().decode(a10.replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;+&#x27;</span>).replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).getBytes());</span><br><span class="line">    <span class="type">DvmClass</span> <span class="variable">CryptoHelperClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.luckincoffee.safeboxlib.CryptoHelper&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下断点</span></span><br><span class="line">    <span class="type">Debugger</span> <span class="variable">attach</span> <span class="operator">=</span> emulator.attach();</span><br><span class="line">    attach.addBreakPoint(cryptoDDmodule.base + <span class="number">0x189C4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">ByteArray</span> <span class="variable">byteValues</span> <span class="operator">=</span> CryptoHelperClass.callStaticJniMethodObject(emulator, <span class="string">&quot;localAESWork([BI[B)[B&quot;</span>,</span><br><span class="line">            <span class="string">&quot;xiaojiaa&quot;</span>.getBytes(),</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            decode_a10);</span><br><span class="line">    System.out.println(Hex.encodeHex(byteValues.getValue()));</span><br><span class="line"><span class="comment">//        String b64encoded = Base64.getEncoder().encodeToString(byteValues.getValue());</span></span><br><span class="line"><span class="comment">//        System.out.println(b64encoded);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>mx0</code>查看<code>x0</code>寄存器的内容</p>
<p>这就是我们传入的明文，后面是填充的内容</p>
<p>地址：0xe4fff3d0</p>
<p><img src="/2025/03/15/%E6%9F%90%E5%B9%B8%E7%99%BD%E7%9B%92AES/8.jpg"></p>
<p>通过<code>mx1</code>查看<code>x1</code>寄存器的内容</p>
<p>这是一块空内存，应该就是存放返回值的</p>
<p>地址：0xe4fff3c0</p>
<p><img src="/2025/03/15/%E6%9F%90%E5%B9%B8%E7%99%BD%E7%9B%92AES/9.jpg"></p>
<h2 id="AES流程分析"><a href="#AES流程分析" class="headerlink" title="AES流程分析"></a>AES流程分析</h2><p>对任意的AES，找到它加密流程中的四个步骤</p>
<p>字节代换</p>
<p>行位移</p>
<p>列混淆</p>
<p>轮秘钥加</p>
<p>sub_189C4这个函数应该是整个AES的函数，看它里面调用了哪些函数</p>
<h3 id="sub-219CC"><a href="#sub-219CC" class="headerlink" title="sub_219CC()"></a>sub_219CC()</h3><p>首先看<code>sub_219CC()</code>这个函数</p>
<p><img src="/2025/03/15/%E6%9F%90%E5%B9%B8%E7%99%BD%E7%9B%92AES/10.jpg"></p>
<p>进入它的函数内部，看到都是异或操作</p>
<p><img src="/2025/03/15/%E6%9F%90%E5%B9%B8%E7%99%BD%E7%9B%92AES/12.jpg"></p>
<p>那么就可能是轮秘钥加的步骤了</p>
<h3 id="sub-21BEC"><a href="#sub-21BEC" class="headerlink" title="sub_21BEC()"></a>sub_21BEC()</h3><p>接着往下看，看到一个sub_21BEC()函数</p>
<p>它里面有如下的操作</p>
<p><img src="/2025/03/15/%E6%9F%90%E5%B9%B8%E7%99%BD%E7%9B%92AES/11.jpg"></p>
<p>看大佬的手写AES代码，猜测这里可能是字节代换的操作</p>
<p>继续往下看</p>
<h3 id="sub-223E0"><a href="#sub-223E0" class="headerlink" title="sub_223E0()"></a>sub_223E0()</h3><p>它进行如下操作</p>
<p><img src="/2025/03/15/%E6%9F%90%E5%B9%B8%E7%99%BD%E7%9B%92AES/13.jpg"></p>
<p>猜测可能是行位移</p>
<p>接着往下看</p>
<h3 id="sub-22810"><a href="#sub-22810" class="headerlink" title="sub_22810()"></a>sub_22810()</h3><p><img src="/2025/03/15/%E6%9F%90%E5%B9%B8%E7%99%BD%E7%9B%92AES/14.jpg"></p>
<p>看着像是列混淆</p>
<h3 id="hook这几个地址"><a href="#hook这几个地址" class="headerlink" title="hook这几个地址"></a>hook这几个地址</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * 密钥扩展 =&gt; 11轮密钥</span><br><span class="line"> * 轮密钥加 有异或操作，而且只有异或操作</span><br><span class="line"> *</span><br><span class="line"> * 循环 9次</span><br><span class="line"> * 字节代换 =&gt; 简单字符替换</span><br><span class="line"> * 行位移 =&gt; 只有位移，没有异或</span><br><span class="line"> * 列混淆 =&gt; 比较复杂，但是不需要key</span><br><span class="line"> * 轮密钥加</span><br><span class="line"> *</span><br><span class="line"> * 字节代换</span><br><span class="line"> * 行位移</span><br><span class="line"> * 轮密钥加</span><br><span class="line"> *</span><br><span class="line"> * 轮密钥加 =&gt; 11</span><br><span class="line"> * 字节代换 =&gt; 10</span><br><span class="line"> * 行位移 =&gt; 10</span><br><span class="line"> * 列混淆 =&gt; 9次</span><br><span class="line"> * */</span><br></pre></td></tr></table></figure>

<p>打印这几个函数的参数，返回值，调用次数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Debugger</span> <span class="variable">attach</span> <span class="operator">=</span> emulator.attach();</span><br><span class="line"><span class="type">int</span>[] counts = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] offset = &#123;</span><br><span class="line">        <span class="number">0x219CC</span>,</span><br><span class="line">        <span class="number">0x21BEC</span>,</span><br><span class="line">        <span class="number">0x223E0</span>,</span><br><span class="line">        <span class="number">0x22810</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">    <span class="type">int</span> <span class="variable">finalI1</span> <span class="operator">=</span> i;</span><br><span class="line">    <span class="type">int</span> <span class="variable">finalI2</span> <span class="operator">=</span> i;</span><br><span class="line">    attach.addBreakPoint(cryptoDDmodule.base + offset[i], <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">            <span class="type">RegisterContext</span> <span class="variable">context</span> <span class="operator">=</span> emulator.getContext();</span><br><span class="line">            <span class="type">UnidbgPointer</span> <span class="variable">lr</span> <span class="operator">=</span> context.getLRPointer();</span><br><span class="line">            <span class="type">UnidbgPointer</span> <span class="variable">pointerArg</span> <span class="operator">=</span> context.getPointerArg(<span class="number">0</span>);</span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">16</span>];</span><br><span class="line">            pointerArg.read(<span class="number">0</span>, buf, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            counts[finalI]++;</span><br><span class="line">            System.out.println(Hex.encodeHex(buf));</span><br><span class="line">            attach.addBreakPoint(lr.peer, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">                    <span class="type">UnidbgPointer</span> <span class="variable">pointerArg</span> <span class="operator">=</span> context.getPointerArg(<span class="number">0</span>);</span><br><span class="line">                    pointerArg.read(<span class="number">0</span>, buf, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                    System.out.println(Hex.encodeHex(buf));</span><br><span class="line">                    System.out.printf(<span class="string">&quot;====0x%x====%d====\n&quot;</span>,offset[finalI2],counts[finalI1]);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x219cc:调用33次</span><br><span class="line">0x21bec:调用10次</span><br><span class="line">0x223e0:调用10次</span><br><span class="line">0x22810:调用9次</span><br></pre></td></tr></table></figure>

<p>这里面<code>0x219cc</code>调用了33次不太正常</p>
<h3 id="sub-219CC-1"><a href="#sub-219CC-1" class="headerlink" title="sub_219CC()"></a>sub_219CC()</h3><p>重新看sub_219CC()，把sub_219CC()单独拿出来分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Debugger</span> <span class="variable">attach</span> <span class="operator">=</span> emulator.attach();</span><br><span class="line"><span class="type">int</span>[] counts = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] offset = &#123;</span><br><span class="line">        <span class="number">0x21BEC</span>,</span><br><span class="line">        <span class="number">0x223E0</span>,</span><br><span class="line">        <span class="number">0x22810</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">    <span class="type">int</span> <span class="variable">finalI1</span> <span class="operator">=</span> i;</span><br><span class="line">    <span class="type">int</span> <span class="variable">finalI2</span> <span class="operator">=</span> i;</span><br><span class="line">    attach.addBreakPoint(cryptoDDmodule.base + offset[i], <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">            <span class="type">RegisterContext</span> <span class="variable">context</span> <span class="operator">=</span> emulator.getContext();</span><br><span class="line">            <span class="type">UnidbgPointer</span> <span class="variable">lr</span> <span class="operator">=</span> context.getLRPointer();</span><br><span class="line">            <span class="type">UnidbgPointer</span> <span class="variable">pointerArg</span> <span class="operator">=</span> context.getPointerArg(<span class="number">0</span>);</span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">16</span>];</span><br><span class="line">            pointerArg.read(<span class="number">0</span>, buf, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            counts[finalI]++;</span><br><span class="line">            System.out.println(Hex.encodeHex(buf));</span><br><span class="line">            attach.addBreakPoint(lr.peer, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">                    <span class="type">UnidbgPointer</span> <span class="variable">pointerArg</span> <span class="operator">=</span> context.getPointerArg(<span class="number">0</span>);</span><br><span class="line">                    pointerArg.read(<span class="number">0</span>, buf, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                    System.out.println(Hex.encodeHex(buf));</span><br><span class="line">                    System.out.printf(<span class="string">&quot;====0x%x====%d====\n&quot;</span>,offset[finalI2],counts[finalI1]);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0x219CC</span></span><br><span class="line">attach.addBreakPoint(cryptoDDmodule.base + <span class="number">0x219CC</span>, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">        <span class="type">RegisterContext</span> <span class="variable">context</span> <span class="operator">=</span> emulator.getContext();</span><br><span class="line">        <span class="type">UnidbgPointer</span> <span class="variable">lr</span> <span class="operator">=</span> context.getLRPointer();</span><br><span class="line">        <span class="type">UnidbgPointer</span> <span class="variable">pointerArg</span> <span class="operator">=</span> context.getPointerArg(<span class="number">0</span>);</span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">16</span>];</span><br><span class="line">        pointerArg.read(<span class="number">0</span>, buf, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">        counts[<span class="number">3</span>]++;</span><br><span class="line">        System.out.printf(<span class="string">&quot;[0x219CC] x0=&quot;</span>+ <span class="keyword">new</span> <span class="title class_">String</span>(Hex.encodeHex(buf)) +<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        pointerArg = context.getPointerArg(<span class="number">1</span>);</span><br><span class="line">        pointerArg.read(<span class="number">0</span>, buf, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;[0x219CC] x1=&quot;</span>+ <span class="keyword">new</span> <span class="title class_">String</span>(Hex.encodeHex(buf))+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        attach.addBreakPoint(lr.peer, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">                <span class="type">UnidbgPointer</span> <span class="variable">pointerArg</span> <span class="operator">=</span> context.getPointerArg(<span class="number">0</span>);</span><br><span class="line">                pointerArg.read(<span class="number">0</span>, buf, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                System.out.println(Hex.encodeHex(buf));</span><br><span class="line">                System.out.printf(<span class="string">&quot;====0x%x====%d====\n&quot;</span>,<span class="number">0x219CC</span>,counts[<span class="number">3</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>找到如下输出位置，从这里开始加密</p>
<p><img src="/2025/03/15/%E6%9F%90%E5%B9%B8%E7%99%BD%E7%9B%92AES/15.jpg"></p>
<p>再次修改hook</p>
<p>限制0x219CC函数的输出条件，从加密的时候开始</p>
<p>如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0x219CC</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span>[] is_ok = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">attach.addBreakPoint(cryptoDDmodule.base + <span class="number">0x219CC</span>, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">        <span class="type">RegisterContext</span> <span class="variable">context</span> <span class="operator">=</span> emulator.getContext();</span><br><span class="line">        <span class="type">UnidbgPointer</span> <span class="variable">lr</span> <span class="operator">=</span> context.getLRPointer();</span><br><span class="line">        <span class="type">UnidbgPointer</span> <span class="variable">pointerArg</span> <span class="operator">=</span> context.getPointerArg(<span class="number">0</span>);</span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">16</span>];</span><br><span class="line">        pointerArg.read(<span class="number">0</span>, buf, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">new</span> <span class="title class_">String</span>(Hex.encodeHex(buf)).equals(<span class="string">&quot;786a080869690808616108086f610808&quot;</span>))&#123;</span><br><span class="line">            is_ok[<span class="number">0</span>] =<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_ok[<span class="number">0</span>])&#123;</span><br><span class="line">            counts[<span class="number">3</span>]++;</span><br><span class="line">            System.out.printf(<span class="string">&quot;[0x219CC] x0=&quot;</span>+ <span class="keyword">new</span> <span class="title class_">String</span>(Hex.encodeHex(buf)) +<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            pointerArg = context.getPointerArg(<span class="number">1</span>);</span><br><span class="line">            pointerArg.read(<span class="number">0</span>, buf, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">            System.out.printf(<span class="string">&quot;[0x219CC] x1=&quot;</span>+ <span class="keyword">new</span> <span class="title class_">String</span>(Hex.encodeHex(buf))+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            attach.addBreakPoint(lr.peer, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">                    <span class="type">UnidbgPointer</span> <span class="variable">pointerArg</span> <span class="operator">=</span> context.getPointerArg(<span class="number">0</span>);</span><br><span class="line">                    pointerArg.read(<span class="number">0</span>, buf, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">                    System.out.println(Hex.encodeHex(buf));</span><br><span class="line">                    System.out.printf(<span class="string">&quot;====0x%x====%d====\n&quot;</span>,<span class="number">0x219CC</span>,counts[<span class="number">3</span>]);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后就有完美的输出展示了</p>
<p>把这部分的代码封装成一个函数，方便后续调用</p>
<h2 id="Dfa攻击"><a href="#Dfa攻击" class="headerlink" title="Dfa攻击"></a>Dfa攻击</h2><p>我们知道dfa攻击是从第九轮的列混淆开始的</p>
<p>首先保存正确的加密结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c9cbd740c87749c660690b89498d077d</span><br></pre></td></tr></table></figure>

<p>找到第九轮列混淆进行攻击</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Debugger</span> <span class="variable">attach</span> <span class="operator">=</span> emulator.attach();</span><br><span class="line"><span class="type">int</span>[] counts = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">attach.addBreakPoint(cryptoDDmodule.base + <span class="number">0x22810</span>, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">        counts[<span class="number">0</span>]++;</span><br><span class="line">        <span class="keyword">if</span> (counts[<span class="number">0</span>]==<span class="number">9</span>)&#123;</span><br><span class="line">            <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            <span class="type">UnidbgPointer</span> <span class="variable">pointerArg</span> <span class="operator">=</span> emulator.getContext().getPointerArg(<span class="number">0</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;攻击成功！&quot;</span>);</span><br><span class="line">            pointerArg.setByte(<span class="number">0</span>,(<span class="type">byte</span>) random.nextInt(<span class="number">255</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>攻击成功之后</p>
<p>写个循环，从第1个字节到第16个字节依次进行攻击</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">    <span class="type">Debugger</span> <span class="variable">attach</span> <span class="operator">=</span> emulator.attach();</span><br><span class="line">    <span class="type">int</span>[] counts = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">finalI</span> <span class="operator">=</span> i;</span><br><span class="line">    attach.addBreakPoint(cryptoDDmodule.base + <span class="number">0x22810</span>, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">            counts[<span class="number">0</span>]++;</span><br><span class="line">            <span class="keyword">if</span> (counts[<span class="number">0</span>]==<span class="number">9</span>)&#123;</span><br><span class="line">                <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">                <span class="type">UnidbgPointer</span> <span class="variable">pointerArg</span> <span class="operator">=</span> emulator.getContext().getPointerArg(<span class="number">0</span>);</span><br><span class="line">                pointerArg.setByte(finalI,(<span class="type">byte</span>) random.nextInt(<span class="number">255</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">ByteArray</span> <span class="variable">byteValues</span> <span class="operator">=</span> CryptoHelperClass.callStaticJniMethodObject(emulator, <span class="string">&quot;localAESWork([BI[B)[B&quot;</span>,</span><br><span class="line">            <span class="string">&quot;xiaojiaa&quot;</span>.getBytes(),</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            decode_a10);</span><br><span class="line">    System.out.println(Hex.encodeHex(byteValues.getValue()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关掉日志打印，输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0ccbd740c87749fc60698689497f077d</span><br><span class="line">c9d3d7400a7749c660690b98498d527d</span><br><span class="line">c9cbe040c82649c667690b89498d071c</span><br><span class="line">c9cbd737c877ddc660390b89d48d077d</span><br><span class="line">93cbd740c87749c860698b8949ec077d</span><br><span class="line">c970d740737749c660690b26498df27d</span><br><span class="line">c9cbfc40c86949c629690b89498d0741</span><br><span class="line">c9cbd7a4c877a3c660460b89e68d077d</span><br><span class="line">9fcbd740c87749b66069e8894930077d</span><br><span class="line">c927d7401d7749c660690b0f498d787d</span><br><span class="line">c9cb5240c8c249c6f6690b89498d0718</span><br><span class="line">c9cbd781c87753c660d20b891c8d077d</span><br><span class="line">c4cbd740c877493e606905894918077d</span><br><span class="line">c9aed740067749c660690b40498dd47d</span><br><span class="line">c9cbe640c8a349c65a690b89498d0772</span><br><span class="line">c9cbd740c87749c660690b89498d077d</span><br></pre></td></tr></table></figure>

<h2 id="还原第9轮的子密钥"><a href="#还原第9轮的子密钥" class="headerlink" title="还原第9轮的子密钥"></a>还原第9轮的子密钥</h2><p>使用phoenixAES库还原</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> phoenixAES</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;tracefile&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> t: <span class="comment"># 第一行放正确的加密结果</span></span><br><span class="line">    t.write(<span class="string">&quot;&quot;&quot;c9cbd740c87749c660690b89498d077d</span></span><br><span class="line"><span class="string">0ccbd740c87749fc60698689497f077d</span></span><br><span class="line"><span class="string">c9d3d7400a7749c660690b98498d527d</span></span><br><span class="line"><span class="string">c9cbe040c82649c667690b89498d071c</span></span><br><span class="line"><span class="string">c9cbd737c877ddc660390b89d48d077d</span></span><br><span class="line"><span class="string">93cbd740c87749c860698b8949ec077d</span></span><br><span class="line"><span class="string">c970d740737749c660690b26498df27d</span></span><br><span class="line"><span class="string">c9cbfc40c86949c629690b89498d0741</span></span><br><span class="line"><span class="string">c9cbd7a4c877a3c660460b89e68d077d</span></span><br><span class="line"><span class="string">9fcbd740c87749b66069e8894930077d</span></span><br><span class="line"><span class="string">c927d7401d7749c660690b0f498d787d</span></span><br><span class="line"><span class="string">c9cb5240c8c249c6f6690b89498d0718</span></span><br><span class="line"><span class="string">c9cbd781c87753c660d20b891c8d077d</span></span><br><span class="line"><span class="string">c4cbd740c877493e606905894918077d</span></span><br><span class="line"><span class="string">c9aed740067749c660690b40498dd47d</span></span><br><span class="line"><span class="string">c9cbe640c8a349c65a690b89498d0772</span></span><br><span class="line"><span class="string">c9cbd740c87749c660690b89498d077d</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">phoenixAES.crack_file(<span class="string">&#x27;tracefile&#x27;</span>, [], <span class="literal">True</span>, <span class="literal">False</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Round key bytes recovered:</span><br><span class="line">0E10F6D230677EBDF0D7D12C8DBD21CF</span><br><span class="line">Last round key #N found:</span><br><span class="line">0E10F6D230677EBDF0D7D12C8DBD21CF</span><br></pre></td></tr></table></figure>

<h2 id="根据第九轮子密钥推出初始密钥"><a href="#根据第九轮子密钥推出初始密钥" class="headerlink" title="根据第九轮子密钥推出初始密钥"></a>根据第九轮子密钥推出初始密钥</h2><p><img src="/2025/03/15/%E6%9F%90%E5%B9%B8%E7%99%BD%E7%9B%92AES/17.jpg"></p>
<p>密钥为<code>655534527846474A7372787545766C74</code></p>
<h1 id="用密钥对响应体解密"><a href="#用密钥对响应体解密" class="headerlink" title="用密钥对响应体解密"></a>用密钥对响应体解密</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">toStandardB64</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> data.replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;+&quot;</span>).replace(<span class="string">&quot;_&quot;</span>,<span class="string">&quot;/&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypted_ecb</span>(<span class="params">encrypted_data,key</span>):</span><br><span class="line">    cipher = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    decrypted_data = cipher.decrypt(encrypted_data)</span><br><span class="line">    unpadded_data = unpad(decrypted_data,AES.block_size)</span><br><span class="line">    <span class="keyword">return</span> unpadded_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_response</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    standardb64 = toStandardB64(ciphertext).encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    plaintext = aes_decrypted_ecb(base64.b64decode(standardb64),<span class="built_in">bytes</span>.fromhex(<span class="string">&quot;655534527846474A7372787545766C74&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> plaintext.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">&quot;57l6aGIjM8ySP5qUW5cmXG_swqXZ3-CDvlz4K-CW5JHHIAiIXoiAtXFef1i898pFnXG2UaYYFPgo4B-QISWmwxGVgzf63I98g8s1TCjJ2qHAI2q4UI-IP1nRHfLevhZ8Kgx6gyMYgsoibWQJ_IU1cONmes8MQqWG3BlsfA7TAVesjF0N3KaEEfHH0RONmDSU3hSp9D9T3nl-xsHSpLBlPQPQRsLBEHzAgEeKO5EueBVpw8cCq3WnWYGT_Ai2TxBpFIImOPBAMnR-T3lHx0D4Pp-iF9p7c_xa8Ek3IhwVx5m8lpQCuAta8PG1ffVGX7Pgr82woPcekBWvF9qFV4kiabebYKsMQHmAbnNfKxLsSEs=&quot;</span></span><br><span class="line"><span class="built_in">print</span>(decrypt_response(ciphertext=ciphertext))</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;bizId&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;busiCode&quot;</span>:<span class="string">&quot;BASE001&quot;</span>,<span class="string">&quot;code&quot;</span>:<span class="number">7</span>,<span class="string">&quot;content&quot;</span>:null,<span class="string">&quot;handler&quot;</span>:<span class="string">&quot;USER&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;验证码不正确&quot;</span>,<span class="string">&quot;shardingId&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;status&quot;</span>:<span class="string">&quot;BASE_ERROR&quot;</span>,<span class="string">&quot;uid&quot;</span>:<span class="string">&quot;b4e31b9d-d7ab-40a9-9b64-14e52f633b911741972183784&quot;</span>,<span class="string">&quot;version&quot;</span>:<span class="string">&quot;101&quot;</span>,<span class="string">&quot;zeusId&quot;</span>:<span class="string">&quot;luckycapiproxy-0ade0947-483881-21580&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>瑞幸白盒AES</tag>
      </tags>
  </entry>
  <entry>
    <title>某汽丰田梆企壳frida检测绕过</title>
    <url>/2025/03/10/%E6%9F%90%E6%B1%BD%E4%B8%B0%E7%94%B0%E6%A2%86%E4%BC%81%E5%A3%B3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.toyota.ftmsApp</p>
<p><img src="/2025/03/10/%E6%9F%90%E6%B1%BD%E4%B8%B0%E7%94%B0%E6%A2%86%E4%BC%81%E5%A3%B3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/1.jpg"></p>
<h1 id="hook-dlopen"><a href="#hook-dlopen" class="headerlink" title="hook_dlopen()"></a>hook_dlopen()</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Android8.0之后加载so通过android_dlopen_ext函数</span></span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;leave!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_dlopen</span>()</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Spawning `com.toyota.ftmsApp`...</span><br><span class="line">addr_android_dlopen_ext 0x7e362e50ac</span><br><span class="line">Spawned `com.toyota.ftmsApp`. Resuming main thread!</span><br><span class="line">[Remote::com.toyota.ftmsApp ]-&gt; android_dlopen_ext: /system/framework/oat/arm64/org.apache.http.legacy.odex</span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /data/app/com.toyota.ftmsApp-Hz8olRrK9-kq0uBKLar_0g==/oat/arm64/base.odex</span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /data/app/com.toyota.ftmsApp-Hz8olRrK9-kq0uBKLar_0g==/lib/arm64/libDexHelper.so</span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /data/app/com.toyota.ftmsApp-Hz8olRrK9-kq0uBKLar_0g==/lib/arm64/libdexjni.so</span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /data/app/com.toyota.ftmsApp-Hz8olRrK9-kq0uBKLar_0g==/lib/arm64/libmpaascpu.so</span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /data/app/com.toyota.ftmsApp-Hz8olRrK9-kq0uBKLar_0g==/lib/arm64/libcrashsdk.so       </span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /data/app/com.toyota.ftmsApp-Hz8olRrK9-kq0uBKLar_0g==/lib/arm64/libAPSE_8.0.0.so</span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /data/app/com.toyota.ftmsApp-Hz8olRrK9-kq0uBKLar_0g==/lib/arm64/libAPSE_J.so</span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /data/app/com.toyota.ftmsApp-Hz8olRrK9-kq0uBKLar_0g==/lib/arm64/libmmkv.so</span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /data/app/com.toyota.ftmsApp-Hz8olRrK9-kq0uBKLar_0g==/lib/arm64/libBaiduMapSDK_base_v7_6_0.so</span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /data/app/com.toyota.ftmsApp-Hz8olRrK9-kq0uBKLar_0g==/lib/arm64/libdatabase_sqlcrypto.so</span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /data/app/com.toyota.ftmsApp-Hz8olRrK9-kq0uBKLar_0g==/lib/arm64/libtiny_magic.so     </span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /data/app/com.toyota.ftmsApp-Hz8olRrK9-kq0uBKLar_0g==/lib/arm64/libAPMUOCPLIB.so</span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /data/app/com.google.android.webview-43dhvf0Cls2Vv-7QVhk2EA==/oat/arm64/base.odex</span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /data/user/0/com.toyota.ftmsApp/app_u4sdk/dlibs/71973616/lib/arm64-v8a/libwebviewuc.so</span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: libmonochrome_64.so</span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /data/app/com.google.android.trichromelibrary_694313733-7b8EruQksFO0yRYXLSorCg==/base.apk!/lib/arm64-v8a/libmonochrome_64.so</span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /system/lib64/libwebviewchromium_plat_support.so</span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /vendor/lib64/hw/gralloc.sdm845.so</span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /vendor/lib64/hw/android.hardware.graphics.mapper@2.0-impl-qti-display.so</span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /data/app/com.toyota.ftmsApp-Hz8olRrK9-kq0uBKLar_0g==/lib/arm64/libumeng-spy.so</span><br><span class="line">leave!</span><br><span class="line">android_dlopen_ext: /data/app/com.toyota.ftmsApp-Hz8olRrK9-kq0uBKLar_0g==/lib/arm64/libBugly_Native.so</span><br><span class="line">leave!</span><br><span class="line">Process terminated</span><br><span class="line">[Remote::com.toyota.ftmsApp ]-&gt;</span><br><span class="line"></span><br><span class="line">Thank you for using Frida!</span><br><span class="line">PS D:\fridajs&gt;</span><br></pre></td></tr></table></figure>

<p>这里面的<code>libDexHelper.so</code>就是梆梆的特征</p>
<p>打印它的线程</p>
<h1 id="hook-pthread"><a href="#hook-pthread" class="headerlink" title="hook_pthread()"></a>hook_pthread()</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;libDexHelper.so&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                    <span class="title function_">hook_pthread</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_pthread</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pth_create = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[pth_create]&quot;</span>, pth_create);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pth_create, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(args[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address&quot;</span>, <span class="variable language_">module</span>.<span class="property">name</span>, args[<span class="number">2</span>].<span class="title function_">sub</span>(<span class="variable language_">module</span>.<span class="property">base</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hook_dlopen</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Spawning `com.toyota.ftmsApp`...</span><br><span class="line">addr_android_dlopen_ext 0x7e362e50ac</span><br><span class="line">Spawned `com.toyota.ftmsApp`. Resuming main thread!</span><br><span class="line">[Remote::com.toyota.ftmsApp ]-&gt; android_dlopen_ext: /data/app/com.toyota.ftmsApp-Hz8olRrK9-kq0uBKLar_0g==/lib/arm64/libDexHelper.so</span><br><span class="line">[pth_create] 0x7e34a8eb64</span><br><span class="line">Process terminated</span><br><span class="line">[Remote::com.toyota.ftmsApp ]-&gt;</span><br><span class="line"></span><br><span class="line">Thank you for using Frida!</span><br><span class="line">PS D:\fridajs&gt; </span><br></pre></td></tr></table></figure>

<p>相关线程信息还没打印出来就挂了</p>
<h1 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h1><p>了解到pthread_create里会调用一个clone()这个更底层的函数，对这个函数进行hook</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_clone</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> clone = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>,<span class="string">&quot;clone&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(clone,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;func address:&quot;</span>,args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;func in module:&quot;</span>,<span class="variable language_">module</span>.<span class="property">name</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;not find!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retcal</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_clone</span>()</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Spawned `com.toyota.ftmsApp`. Resuming main thread!</span><br><span class="line">[Remote::com.toyota.ftmsApp ]-&gt; func address: 0x7e34a8f07c</span><br><span class="line">func in module: libc.so</span><br><span class="line">func address: 0x7e34a8f07c</span><br><span class="line">func in module: libc.so</span><br><span class="line">func address: 0x7e34a8f07c</span><br><span class="line">func in module: libc.so</span><br></pre></td></tr></table></figure>

<h2 id="打印调用栈"><a href="#打印调用栈" class="headerlink" title="打印调用栈"></a>打印调用栈</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_clone</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> clone = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>,<span class="string">&quot;clone&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(clone,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;func address:&quot;</span>,args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;func in module:&quot;</span>,<span class="variable language_">module</span>.<span class="property">name</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`native stack:&#125;`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>) + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;not find!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retcal</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_clone</span>()</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Spawned `com.toyota.ftmsApp`. Resuming main thread!</span><br><span class="line">[Remote::com.toyota.ftmsApp ]-&gt; func address: 0x7e34a8f07c</span><br><span class="line">func in module: libc.so</span><br><span class="line">native stack:</span><br><span class="line">0x7e34a8ede0 libc.so!pthread_create+0x27c</span><br><span class="line"></span><br><span class="line">func address: 0x7e34a8f07c</span><br><span class="line">func in module: libc.so</span><br><span class="line">native stack:</span><br><span class="line">0x7e34a8ede0 libc.so!pthread_create+0x27c</span><br></pre></td></tr></table></figure>

<p>用IDA打开<code>libc.so</code>跳转到<code>pthread_create+0x27c</code>这个地方看看</p>
<p>先找到<code>pthread_create</code>的地址<code>0xE0B64</code></p>
<p><img src="/2025/03/10/%E6%9F%90%E6%B1%BD%E4%B8%B0%E7%94%B0%E6%A2%86%E4%BC%81%E5%A3%B3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/2.jpg"></p>
<p><code>0xE0B64+0x27C=0xE0DE0</code></p>
<p><img src="/2025/03/10/%E6%9F%90%E6%B1%BD%E4%B8%B0%E7%94%B0%E6%A2%86%E4%BC%81%E5%A3%B3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/3.jpg"></p>
<p>反汇编后如下</p>
<p><img src="/2025/03/10/%E6%9F%90%E6%B1%BD%E4%B8%B0%E7%94%B0%E6%A2%86%E4%BC%81%E5%A3%B3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/4.jpg"></p>
<p>这里调用的是<code>clone</code>函数</p>
<p>我们知道pthread_create()函数的第3个参数是线程函数指针，在这里我们跟一下这个参数是怎么走的</p>
<p>参数重命名为<code>func_addr</code></p>
<p><img src="/2025/03/10/%E6%9F%90%E6%B1%BD%E4%B8%B0%E7%94%B0%E6%A2%86%E4%BC%81%E5%A3%B3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/5.jpg"></p>
<p>先是赋值给了<code>v50</code>，如下</p>
<p><img src="/2025/03/10/%E6%9F%90%E6%B1%BD%E4%B8%B0%E7%94%B0%E6%A2%86%E4%BC%81%E5%A3%B3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/6.jpg"></p>
<p>然后<code>v50</code>赋值给了<code>v27+96</code></p>
<p><img src="/2025/03/10/%E6%9F%90%E6%B1%BD%E4%B8%B0%E7%94%B0%E6%A2%86%E4%BC%81%E5%A3%B3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/7.jpg"></p>
<p>这里clone函数的第四个参数就是<code>v27</code>，我们把它<code>+96</code>，就可以拿到线程函数的地址了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_clone</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> clone = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>,<span class="string">&quot;clone&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(clone,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(args[<span class="number">3</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> addr = args[<span class="number">3</span>].<span class="title function_">add</span>(<span class="number">96</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">                <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(addr);</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">module</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;func in module:&quot;</span>,<span class="variable language_">module</span>.<span class="property">name</span>,<span class="string">&quot;offset:&quot;</span>,addr.<span class="title function_">sub</span>(<span class="variable language_">module</span>.<span class="property">base</span>));</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;not find!&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_clone</span>()</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func in module: libDexHelper.so offset: 0x4e9d8</span><br><span class="line">func in module: libDexHelper.so offset: 0x4b614</span><br><span class="line">func in module: libDexHelper.so offset: 0x51558</span><br><span class="line">func in module: libDexHelper.so offset: 0x557f4</span><br><span class="line">func in module: libDexHelper.so offset: 0x5afa8</span><br></pre></td></tr></table></figure>

<h1 id="nop"><a href="#nop" class="headerlink" title="nop"></a>nop</h1><p>然后把这些地址nop一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">nop_addr</span>(<span class="params">addr</span>) &#123;</span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">protect</span>(addr, <span class="number">4</span> , <span class="string">&#x27;rwx&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> w = <span class="keyword">new</span> <span class="title class_">Arm64Writer</span>(addr);</span><br><span class="line">    w.<span class="title function_">putRet</span>();</span><br><span class="line">    w.<span class="title function_">flush</span>();</span><br><span class="line">    w.<span class="title function_">dispose</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//Android8.0之后加载so通过android_dlopen_ext函数</span></span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="keyword">let</span> match = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> listener = <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;libDexHelper.so&quot;</span>))&#123;</span><br><span class="line">                    match = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(match)&#123;</span><br><span class="line">                <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libDexHelper.so&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable language_">module</span>!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="title function_">nop_addr</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x4e9d8</span>))</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced 0x4e9d8&quot;</span>)</span><br><span class="line">                    <span class="title function_">nop_addr</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x4b614</span>))</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced 0x4b614&quot;</span>)</span><br><span class="line">                    <span class="title function_">nop_addr</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x51558</span>))</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced 0x51558&quot;</span>)</span><br><span class="line">                    <span class="title function_">nop_addr</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x557f4</span>))</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced 0x557f4&quot;</span>)</span><br><span class="line">                    <span class="title function_">nop_addr</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x5afa8</span>))</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced 0x5afa8&quot;</span>)</span><br><span class="line">                    match = <span class="literal">false</span>;</span><br><span class="line">                    listener.<span class="title function_">detach</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_dlopen</span>()</span><br></pre></td></tr></table></figure>

<p>ok了如下</p>
<p><img src="/2025/03/10/%E6%9F%90%E6%B1%BD%E4%B8%B0%E7%94%B0%E6%A2%86%E4%BC%81%E5%A3%B3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87/8.jpg"></p>
]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>某汽丰田</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论与数理统计</title>
    <url>/2025/01/29/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>海南航空app绕过强制更新及hnairSign参数逆向</title>
    <url>/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.rytong.hnair</p>
<p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/1.jpg"></p>
<h1 id="绕过强制更新"><a href="#绕过强制更新" class="headerlink" title="绕过强制更新"></a>绕过强制更新</h1><p>启动app，出现如下弹窗，强制更新</p>
<p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/8.jpg"></p>
<h2 id="jadx反编译找到更新弹窗位置"><a href="#jadx反编译找到更新弹窗位置" class="headerlink" title="jadx反编译找到更新弹窗位置"></a>jadx反编译找到更新弹窗位置</h2><p>搜索字符串<code>立刻更新</code></p>
<p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/9.jpg"></p>
<p>双击跳转</p>
<p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/10.jpg"></p>
<p>这个字符串对应的资源名字是<code>version_update__dialog_btn_confirm_text</code>，搜索它，找到它被调用的位置</p>
<p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/11.jpg"></p>
<p>双击跳转</p>
<p>如下，在这里设置文本内容</p>
<p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/12.jpg"></p>
<p>通过查找用例跳转到上层方法</p>
<p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/13.jpg"></p>
<p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/14.jpg"></p>
<p>这里面的<code>show()</code>方法就是显示弹窗的，把它hook掉，弹窗就不会显示了</p>
<h2 id="hook-show"><a href="#hook-show" class="headerlink" title="hook show()"></a>hook show()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> k = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;f6.k&quot;</span>);</span><br><span class="line">        k[<span class="string">&quot;show&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`k.show is called`</span>);</span><br><span class="line">            <span class="comment">// this[&quot;show&quot;]();</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_show</span>();</span><br></pre></td></tr></table></figure>

<p>如下，弹窗就被hook掉了</p>
<p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/15.jpg"></p>
<h1 id="抓包分析数据"><a href="#抓包分析数据" class="headerlink" title="抓包分析数据"></a>抓包分析数据</h1><p>点击登录，在通过了验证码校验之后会发送请求，及获取响应，抓取数据包</p>
<p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/2.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url=https://app.hnair.com/appum/common/auth/login?hnairSign=0564996701D210B22DBB6F7AAC619C260CA0A114</span><br><span class="line"></span><br><span class="line">params=&#123;</span><br><span class="line">  &quot;hnairSign&quot;: &quot;0564996701D210B22DBB6F7AAC619C260CA0A114&quot;</span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">  &quot;appver&quot;: &quot;9.0.0&quot;,</span><br><span class="line">  &quot;content-type&quot;: &quot;application/json; charset=UTF-8&quot;,</span><br><span class="line">  &quot;content-length&quot;: &quot;978&quot;,</span><br><span class="line">  &quot;accept-encoding&quot;: &quot;gzip&quot;,</span><br><span class="line">  &quot;user-agent&quot;: &quot;okhttp/4.9.1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">json = &#123;</span><br><span class="line">  &quot;common&quot;: &#123;</span><br><span class="line">    &quot;akey&quot;: &quot;184C5F04D8BE43DCBD2EE3ABC928F616&quot;,</span><br><span class="line">    &quot;aname&quot;: &quot;com.rytong.hnair&quot;,</span><br><span class="line">    &quot;atarget&quot;: &quot;standard&quot;,</span><br><span class="line">    &quot;aver&quot;: &quot;9.0.0&quot;,</span><br><span class="line">    &quot;did&quot;: &quot;e574bb78db98d8ea&quot;,</span><br><span class="line">    &quot;dname&quot;: &quot;Google_Pixel 3&quot;,</span><br><span class="line">    &quot;gtcid&quot;: &quot;514490d4a99745bba1ee3c67a21e5db6&quot;,</span><br><span class="line">    &quot;mchannel&quot;: &quot;huawei&quot;,</span><br><span class="line">    &quot;schannel&quot;: &quot;AD&quot;,</span><br><span class="line">    &quot;slang&quot;: &quot;zh-CN&quot;,</span><br><span class="line">    &quot;sname&quot;: &quot;google/blueline/blueline:10/QQ3A.200705.002/6506677:user/release-keys&quot;,</span><br><span class="line">    &quot;stime&quot;: &quot;1740304439444&quot;,</span><br><span class="line">    &quot;sver&quot;: &quot;10&quot;,</span><br><span class="line">    &quot;system&quot;: &quot;AD&quot;,</span><br><span class="line">    &quot;szone&quot;: &quot;+0800&quot;,</span><br><span class="line">    &quot;abuild&quot;: &quot;64249&quot;,</span><br><span class="line">    &quot;riskToken&quot;: &quot;67baf03fNy5MXBFAoCK6UHULA4nAOmGMshN11oP3&quot;,</span><br><span class="line">    &quot;captchaToken&quot;: &quot;3037239175221CB99962A4E18B9A763B241E38AEC7657CDE570574B886AB788BAD219143A251B3B95BBEB9D693FDDAEED872D366E0D38095458726DDE75C845A49F1A6FEB95AE56461B44FC60507BA52:67baf0340PiDJ4ft549lxVciFEip4Qz9R8ox1Ra3&quot;,</span><br><span class="line">    &quot;hver&quot;: &quot;9.0.0.35417.7ac793f2e.standard&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;number&quot;: &quot;18888888888&quot;,</span><br><span class="line">    &quot;pin&quot;: &quot;dNKwvxEU5MhDIHvDxC9W3GkIe9Y9Qgn1GFIL2Rnl3lpIYOAUAHyAfcX7SuEvKD3fZUNb8oHkG2fh\njMktd9dIib489LGK65FO41So6mzRK+mn/5wqHzqSj0oFiBTJOkQ8aPpUNLoNKCLClYrS5q4aWhB6\n7ncdYn8dobgaz7TyjVk=\n&quot;,</span><br><span class="line">    &quot;toSave&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要逆向分析的是<code>hnairSign</code></p>
<h1 id="参数分析"><a href="#参数分析" class="headerlink" title="参数分析"></a>参数分析</h1><h2 id="jadx反编译"><a href="#jadx反编译" class="headerlink" title="jadx反编译"></a>jadx反编译</h2><p>搜索<code>hnairSign</code></p>
<p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/3.jpg"></p>
<h3 id="hnairSign"><a href="#hnairSign" class="headerlink" title="hnairSign"></a>hnairSign</h3><p>在如下位置出现</p>
<p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/4.jpg"></p>
<p><code>hnairSign</code>它的值是从<code>signRequest()</code>方法返回的</p>
<h3 id="signRequest"><a href="#signRequest" class="headerlink" title="signRequest()"></a>signRequest()</h3><p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/5.jpg"></p>
<p>这里面从参数<code>aVar</code>里面获取<code>headersForSign</code>、<code>queryForSign</code>、<code>requestBodyForSign</code>及生成参数<code>str</code>和<code>a10</code>，然后把这些参数传递个<code>getHNASignature()</code>方法，其返回值再传递给<code>i.p()</code>方法，<code>i.p()</code>的返回值应该是一个数组类型，然后获取第一个元素。</p>
<h3 id="getHNASignature"><a href="#getHNASignature" class="headerlink" title="getHNASignature()"></a>getHNASignature()</h3><p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/7.jpg"></p>
<p>这是一个native方法，返回值是一个字符串</p>
<h3 id="i-p"><a href="#i-p" class="headerlink" title="i.p()"></a>i.p()</h3><p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/6.jpg"></p>
<p>这里面是根据字节数组<code>strArr</code>对<code>charSequence</code>返回一个<code>List</code>，最后通过<code>get(0)</code>获取第0个元素作为<code>signRequest()</code>方法的返回值。</p>
<h3 id="hook-getHNASignature"><a href="#hook-getHNASignature" class="headerlink" title="hook getHNASignature()"></a>hook getHNASignature()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getHNASignature</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">HNASignature</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.rytong.hnair.HNASignature&quot;</span>);</span><br><span class="line">        <span class="title class_">HNASignature</span>[<span class="string">&quot;getHNASignature&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">str, str2, str3, str4, str5</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`HNASignature.getHNASignature is called: str=<span class="subst">$&#123;str&#125;</span>, str2=<span class="subst">$&#123;str2&#125;</span>, str3=<span class="subst">$&#123;str3&#125;</span>, str4=<span class="subst">$&#123;str4&#125;</span>, str5=<span class="subst">$&#123;str5&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;getHNASignature&quot;</span>](str, str2, str3, str4, str5);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`HNASignature.getHNASignature result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getHNASignature</span>();</span><br></pre></td></tr></table></figure>

<p>hook结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HNASignature.getHNASignature is called: str=&#123;&#125;, str2=&#123;&#125;, str3=&#123;&quot;akey&quot;:&quot;184C5F04D8BE43DCBD2EE3ABC928F616&quot;,&quot;aname&quot;:&quot;com.rytong.hnair&quot;,&quot;atarget&quot;:&quot;standard&quot;,&quot;aver&quot;:&quot;9.0.0&quot;,&quot;did&quot;:&quot;e574bb78db98d8ea&quot;,&quot;dname&quot;:&quot;Google_Pixel 3&quot;,&quot;gtcid&quot;:&quot;f442b091aa961a407165841e3a084147&quot;,&quot;mchannel&quot;:&quot;huawei&quot;,&quot;schannel&quot;:&quot;AD&quot;,&quot;slang&quot;:&quot;zh-CN&quot;,&quot;sname&quot;:&quot;google\/blueline\/blueline:10\/QQ3A.200705.002\/6506677:user\/release-keys&quot;,&quot;stime&quot;:&quot;1740317961228&quot;,&quot;sver&quot;:&quot;10&quot;,&quot;system&quot;:&quot;AD&quot;,&quot;szone&quot;:&quot;+0800&quot;,&quot;abuild&quot;:&quot;64249&quot;,&quot;riskToken&quot;:&quot;67bb2505kRG0Hwidai2tEm3hYFUX1xCXvH8fuOk3&quot;,&quot;hver&quot;:&quot;9.0.0.35417.7ac793f2e.standard&quot;,&quot;number&quot;:&quot;18888888888&quot;,&quot;pin&quot;:&quot;awBta70HBNvOLA+L5Vlaas59trF+M0EI6lOgVDjQhG1QdoY\/6ck1GTaeZOeSXiwFpG3e8vgj6xuq\n1weM+DFKhl8aSi1Lhn7p1s51bdcPmvZ5DW3kYSV\/8DvpnYGjPKgQ79aKEBDo3AvuGZpZ+pg2rHBm\nWAgoyrVfSsBI6KLOsZg=\n&quot;,&quot;toSave&quot;:true&#125;, str4=21047C596EAD45209346AE29F0350491, str5=F6B15ABD66F91951036C955CB25B069F</span><br><span class="line">HNASignature.getHNASignature </span><br><span class="line"></span><br><span class="line">result=E184DAEE44DFA522CE974EAB75EBC60DAAEC321D&gt;&gt;</span><br><span class="line">64249184C5F04D8BE43DCBD2EE3ABC928F616com.rytong.hnairstandard9.0.0e574bb78db98d8eaGoogle_Pixel 3f442b091aa961a407165841e3a0841479.0.0.35417.7ac793f2e.standardhuawei18888888888awBta70HBNvOLA+L5Vlaas59trF+M0EI6lOgVDjQhG1QdoY/6ck1GTaeZOeSXiwFpG3e8vgj6xuq</span><br><span class="line">1weM+DFKhl8aSi1Lhn7p1s51bdcPmvZ5DW3kYSV/8DvpnYGjPKgQ79aKEBDo3AvuGZpZ+pg2rHBm</span><br><span class="line">WAgoyrVfSsBI6KLOsZg=</span><br><span class="line">67bb2505kRG0Hwidai2tEm3hYFUX1xCXvH8fuOk3ADzh-CNgoogle/blueline/blueline:10/QQ3A.200705.002/6506677:user/release-keys174031796122810AD+0800true&gt;&gt;F6B15ABD66F91951036C955CB25B069F</span><br><span class="line"></span><br><span class="line">result=515FCBCF21BD505882222C4898DCA5A13014C134&gt;&gt;</span><br><span class="line">64249184C5F04D8BE43DCBD2EE3ABC928F616com.rytong.hnairstandard9.0.0e574bb78db98d8eaGoogle_Pixel 3f442b091aa961a407165841e3a0841479.0.0.35417.7ac793f2e.standardhuawei18888888888awBta70HBNvOLA+L5Vlaas59trF+M0EI6lOgVDjQhG1QdoY/6ck1GTaeZOeSXiwFpG3e8vgj6xuq</span><br><span class="line">1weM+DFKhl8aSi1Lhn7p1s51bdcPmvZ5DW3kYSV/8DvpnYGjPKgQ79aKEBDo3AvuGZpZ+pg2rHBm</span><br><span class="line">WAgoyrVfSsBI6KLOsZg=</span><br><span class="line">67bb2505kRG0Hwidai2tEm3hYFUX1xCXvH8fuOk3ADzh-CNgoogle/blueline/blueline:10/QQ3A.200705.002/6506677:user/release-keys174031796122810AD+0800true&gt;&gt;F6B15ABD66F91951036C955CB25B069F</span><br></pre></td></tr></table></figure>

<h3 id="hook-signRequest"><a href="#hook-signRequest" class="headerlink" title="hook signRequest()"></a>hook signRequest()</h3><p>两个方法一起hook</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getHNASignature</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">HNASignature</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.rytong.hnair.HNASignature&quot;</span>);</span><br><span class="line">        <span class="title class_">HNASignature</span>[<span class="string">&quot;getHNASignature&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">str, str2, str3, str4, str5</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`HNASignature.getHNASignature is called: str=<span class="subst">$&#123;str&#125;</span>, str2=<span class="subst">$&#123;str2&#125;</span>, str3=<span class="subst">$&#123;str3&#125;</span>, str4=<span class="subst">$&#123;str4&#125;</span>, str5=<span class="subst">$&#123;str5&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;getHNASignature&quot;</span>](str, str2, str3, str4, str5);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`HNASignature.getHNASignature result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getHNASignature</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_signRequest</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">ApiSignInterceptor</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.hnair.airlines.repo.common.ApiSignInterceptor&quot;</span>);</span><br><span class="line">        <span class="title class_">ApiSignInterceptor</span>[<span class="string">&quot;signRequest&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">aVar</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`ApiSignInterceptor.signRequest is called: aVar=<span class="subst">$&#123;aVar&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;signRequest&quot;</span>](aVar);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`ApiSignInterceptor.signRequest result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_signRequest</span>();</span><br></pre></td></tr></table></figure>

<p>hook结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ApiSignInterceptor.signRequest is called: aVar=[object Object]</span><br><span class="line">HNASignature.getHNASignature is called: str=&#123;&#125;, str2=&#123;&#125;, str3=&#123;&quot;akey&quot;:&quot;184C5F04D8BE43DCBD2EE3ABC928F616&quot;,&quot;aname&quot;:&quot;com.rytong.hnair&quot;,&quot;atarget&quot;:&quot;standard&quot;,&quot;aver&quot;:&quot;9.0.0&quot;,&quot;did&quot;:&quot;e574bb78db98d8ea&quot;,&quot;dname&quot;:&quot;Google_Pixel 3&quot;,&quot;gtcid&quot;:&quot;f442b091aa961a407165841e3a084147&quot;,&quot;mchannel&quot;:&quot;huawei&quot;,&quot;schannel&quot;:&quot;AD&quot;,&quot;slang&quot;:&quot;zh-CN&quot;,&quot;sname&quot;:&quot;google\/blueline\/blueline:10\/QQ3A.200705.002\/6506677:user\/release-keys&quot;,&quot;stime&quot;:&quot;1740318611305&quot;,&quot;sver&quot;:&quot;10&quot;,&quot;system&quot;:&quot;AD&quot;,&quot;szone&quot;:&quot;+0800&quot;,&quot;abuild&quot;:&quot;64249&quot;,&quot;riskToken&quot;:&quot;67bb278f3kk3a3WeYbgRPyoBNPlIAdRaYordBAp3&quot;,&quot;hver&quot;:&quot;9.0.0.35417.7ac793f2e.standard&quot;,&quot;number&quot;:&quot;18888888888&quot;,&quot;pin&quot;:&quot;YtirjBXqjfmcYkrHpTOw46uZtkKiQTt8RvSVGkZKby025\/m2Yrv1zMUHehUz+sEDkHENCIPyJGuR\nbqKOxirFsWuMr0W4vGizxLnHOOLh9BTxzMpjpPsihKYvEMS0DlRlxp86LsEXmjviAt55e4ByhkEu\nVq5ckk5NVufdx\/u7CFI=\n&quot;,&quot;toSave&quot;:true&#125;, str4=21047C596EAD45209346AE29F0350491, str5=F6B15ABD66F91951036C955CB25B069F</span><br><span class="line">HNASignature.getHNASignature result=E2096151703457F87514E0067262519B8E6F6774&gt;&gt;64249184C5F04D8BE43DCBD2EE3ABC928F616com.rytong.hnairstandard9.0.0e574bb78db98d8eaGoogle_Pixel 3f442b091aa961a407165841e3a0841479.0.0.35417.7ac793f2e.standardhuawei18888888888YtirjBXqjfmcYkrHpTOw46uZtkKiQTt8RvSVGkZKby025/m2Yrv1zMUHehUz+sEDkHENCIPyJGuR</span><br><span class="line">bqKOxirFsWuMr0W4vGizxLnHOOLh9BTxzMpjpPsihKYvEMS0DlRlxp86LsEXmjviAt55e4ByhkEu</span><br><span class="line">Vq5ckk5NVufdx/u7CFI=</span><br><span class="line">67bb278f3kk3a3WeYbgRPyoBNPlIAdRaYordBAp3ADzh-CNgoogle/blueline/blueline:10/QQ3A.200705.002/6506677:user/release-keys174031861130510AD+0800true&gt;&gt;F6B15ABD66F91951036C955CB25B069F</span><br><span class="line">ApiSignInterceptor.signRequest result=E2096151703457F87514E0067262519B8E6F6774</span><br></pre></td></tr></table></figure>

<p>可以看到<code>signRequest</code>最终的返回结果就是<code>&gt;&gt;</code>符号分隔前的内容</p>
<h2 id="so分析"><a href="#so分析" class="headerlink" title="so分析"></a>so分析</h2><p>在反编译代码里并没有显式的支出加载的so，需要自行定位</p>
<h3 id="定位so"><a href="#定位so" class="headerlink" title="定位so"></a>定位so</h3><h4 id="动态注册hook-RegisterNatives"><a href="#动态注册hook-RegisterNatives" class="headerlink" title="动态注册hook RegisterNatives()"></a>动态注册hook RegisterNatives()</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_RegisterNatives</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">RegisterNatives</span>_addr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libart.so&quot;</span>).<span class="title function_">enumerateSymbols</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i].<span class="property">name</span>;</span><br><span class="line">        <span class="keyword">if</span> ((symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) == -<span class="number">1</span>) &amp;&amp; (symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;RegisterNatives&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="title class_">RegisterNatives</span>_addr = symbols[i].<span class="property">address</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RegisterNatives_addr: &quot;</span>, <span class="title class_">RegisterNatives</span>_addr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">RegisterNatives</span>_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> env = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> jclass = args[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> class_name = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>().<span class="title function_">getClassName</span>(jclass);</span><br><span class="line">            <span class="keyword">var</span> methods_ptr = <span class="title function_">ptr</span>(args[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">var</span> method_count = args[<span class="number">3</span>].<span class="title function_">toInt32</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RegisterNatives method counts: &quot;</span>, method_count);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; method_count; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> name = methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span>).<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">var</span> sig = methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span>).<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">var</span> fnPtr_ptr = methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">2</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">                <span class="keyword">var</span> find_module = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(fnPtr_ptr);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ClasssName: &quot;</span>, class_name, <span class="string">&quot;MethodName: &quot;</span>, name, <span class="string">&quot;Sig: &quot;</span>, sig, <span class="string">&quot;Function_addr: &quot;</span>, fnPtr_ptr, <span class="string">&quot;ModuleName: &quot;</span>, find_module.<span class="property">name</span>, <span class="string">&quot;Fun_Offset: &quot;</span>, <span class="title function_">ptr</span>(fnPtr_ptr).<span class="title function_">sub</span>(find_module.<span class="property">base</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_RegisterNatives</span>()</span><br></pre></td></tr></table></figure>

<p>在输出的结果中并没有找到，说明不是动态注册的</p>
<h4 id="静态注册hook-dlsym"><a href="#静态注册hook-dlsym" class="headerlink" title="静态注册hook dlsym()"></a>静态注册hook dlsym()</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlsym</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 获取dlsym函数的地址</span></span><br><span class="line">    <span class="keyword">let</span> dlsymAddr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libdl.so&quot;</span>,<span class="string">&quot;dlsym&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dlsymAddr);</span><br><span class="line">    <span class="comment">// hook dlsym</span></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(dlsymAddr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">args1</span> = args[<span class="number">1</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> md= <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(retval);</span><br><span class="line">            <span class="keyword">if</span>(md==<span class="literal">null</span>)<span class="keyword">return</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;function:&quot;</span>+<span class="variable language_">this</span>.<span class="property">args1</span>.<span class="title function_">readCString</span>(),<span class="string">&quot;module:&quot;</span>+md.<span class="property">name</span>,<span class="string">&quot;address:&quot;</span>+retval,<span class="string">&quot;offset:&quot;</span>+retval.<span class="title function_">sub</span>(md.<span class="property">base</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_dlsym</span>()</span><br></pre></td></tr></table></figure>

<p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/16.jpg"></p>
<p>找到so为<code>libsignature.so</code></p>
<h2 id="IDA反编译so"><a href="#IDA反编译so" class="headerlink" title="IDA反编译so"></a>IDA反编译so</h2><p>在静态函数中查找</p>
<p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/17.jpg"></p>
<p>双击跳转到函数位置，转换为伪代码</p>
<p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/18.jpg"></p>
<p>显示调用了<code>HNASignature()</code>然后调用了<code>toString()</code></p>
<h3 id="HNASignature"><a href="#HNASignature" class="headerlink" title="HNASignature()"></a>HNASignature()</h3><p>查看其符号名，先对它进行hook</p>
<p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/19.jpg"></p>
<h3 id="hook-HNASignature"><a href="#hook-HNASignature" class="headerlink" title="hook HNASignature()"></a>hook HNASignature()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_HNASignature</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">HNASignatureAddr</span> = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libsignature.so&quot;</span>, <span class="string">&quot;_ZN12HNASignatureC2ERKSsS1_S1_S1_S1_&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">HNASignatureAddr</span>,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HNASignature is called&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HNASignature args[0]:&quot;</span>+args[<span class="number">0</span>]);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HNASignature args[1]:&quot;</span>+args[<span class="number">1</span>].<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HNASignature args[2]:&quot;</span>+args[<span class="number">2</span>].<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HNASignature args[3]:&quot;</span>+args[<span class="number">3</span>].<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HNASignature args[4]:&quot;</span>+args[<span class="number">4</span>].<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HNASignature args[5]:&quot;</span>+args[<span class="number">5</span>].<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HNASignature args[6]:&quot;</span>+args[<span class="number">6</span>]);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">args0</span> = args[<span class="number">0</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`HNASignature ret this.args0:<span class="subst">$&#123;<span class="variable language_">this</span>.args0.readPointer().readCString()&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HNASignature is called</span><br><span class="line">HNASignature args[0]:0x75d9c78328</span><br><span class="line">HNASignature args[1]:&#123;&#125;</span><br><span class="line">HNASignature args[2]:&#123;&#125;</span><br><span class="line">HNASignature args[3]:&#123;&quot;akey&quot;:&quot;184C5F04D8BE43DCBD2EE3ABC928F616&quot;,&quot;aname&quot;:&quot;com.rytong.hnair&quot;,&quot;atarget&quot;:&quot;standard&quot;,&quot;aver&quot;:&quot;9.0.0&quot;,&quot;did&quot;:&quot;e574bb78db98d8ea&quot;,&quot;dname&quot;:&quot;Google_Pixel 3&quot;,&quot;gtcid&quot;:&quot;f442b091aa961a407165841e3a084147&quot;,&quot;mchannel&quot;:&quot;huawei&quot;,&quot;schannel&quot;:&quot;AD&quot;,&quot;slang&quot;:&quot;zh-CN&quot;,&quot;sname&quot;:&quot;google\/blueline\/blueline:10\/QQ3A.200705.002\/6506677:user\/release-keys&quot;,&quot;stime&quot;:&quot;1740326030547&quot;,&quot;sver&quot;:&quot;10&quot;,&quot;system&quot;:&quot;AD&quot;,&quot;szone&quot;:&quot;+0800&quot;,&quot;abuild&quot;:&quot;64249&quot;,&quot;riskToken&quot;:&quot;67bb4453hhA1OpIQxuFTcxvxY25l6alW4VgMhK73&quot;,&quot;hver&quot;:&quot;9.0.0.35417.7ac793f2e.standard&quot;,&quot;number&quot;:&quot;18888888888&quot;,&quot;pin&quot;:&quot;qWIFqA0ywqaZqFsywFiTmniXYBKU8WpXlGexYUIhmKAXxOwf7\/z6NRN+sBj5d36igmPekmcESPWS\n4EbGmGLkCDM3al7NzoWqhucFcxl6n8gE6wfN83kqoS\/mJjQXis5WwixL\/wUpmYH8UzRaFunSsKsg\nW5WUx1CgTWdBpYUH3d0=\n&quot;,&quot;toSave&quot;:true&#125;</span><br><span class="line">HNASignature args[4]:21047C596EAD45209346AE29F0350491</span><br><span class="line">HNASignature args[5]:F6B15ABD66F91951036C955CB25B069F</span><br><span class="line">HNASignature args[6]:0xfefefefefefefeff</span><br><span class="line">HNASignature ret this.args0:2FD7C67C2ED04DE229D9D5C6B41534975DED3324&gt;&gt;64249184C5F04D8BE43DCBD2EE3ABC928F616com.rytong.hnairstandard9.0.0e574bb78db98d8eaGoogle_Pixel 3f442b091aa961a407165841e3a0841479.0.0.35417.7ac793f2e.standardhuawei18888888888qWIFqA0ywqaZqFsywFiTmniXYBKU8WpXlGexYUIhmKAXxOwf7/z6NRN+sBj5d36igmPekmcESPWS</span><br><span class="line">4EbGmGLkCDM3al7NzoWqhucFcxl6n8gE6wfN83kqoS/mJjQXis5WwixL/wUpmYH8UzRaFunSsKsg</span><br><span class="line">W5WUx1CgTWdBpYUH3d0=</span><br><span class="line">67bb4453hhA1OpIQxuFTcxvxY25l6alW4VgMhK73ADzh-CNgoogle/blueline/blueline:10/QQ3A.200705.002/6506677:user/release-keys174032603054710AD+0800true&gt;&gt;F6B15ABD66F91951036C955CB25B069F</span><br></pre></td></tr></table></figure>

<p>在<code>HNASignature()</code>函数里出现了一堆函数</p>
<p><img src="/2025/02/24/%E6%B5%B7%E5%8D%97%E8%88%AA%E7%A9%BAapp%E7%BB%95%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8AhnairSign%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/20.jpg"></p>
<p>有尝试hook这些函数，信息量较大，后面有时间了分析，这里直接unidbg模拟执行了 </p>
<h2 id="unidbg模拟执行"><a href="#unidbg模拟执行" class="headerlink" title="unidbg模拟执行"></a>unidbg模拟执行</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HNASignature</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HNASignature</span><span class="params">()</span> &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder</span><br><span class="line">                .for64Bit() <span class="comment">// for32Bit()</span></span><br><span class="line">                .build();</span><br><span class="line">        memory = emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/java/com/rytong/hnair/Hainan Airlines_9.0.0.apk&quot;</span>));</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);</span><br><span class="line">        vm.loadLibrary(<span class="string">&quot;signature&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHNASignature</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DvmClass</span> <span class="variable">HNASignatureClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.rytong.hnair.HNASignature&quot;</span>);</span><br><span class="line">        <span class="type">DvmClass</span> <span class="variable">stringClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">stringObject</span> <span class="operator">=</span> HNASignatureClass.callStaticJniMethodObject(emulator,</span><br><span class="line">                <span class="string">&quot;getHNASignature(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;&quot;</span>,</span><br><span class="line">                stringClass.newObject(<span class="string">&quot;&#123;&#125;&quot;</span>).getValue(),</span><br><span class="line">                stringClass.newObject(<span class="string">&quot;&#123;&#125;&quot;</span>).getValue(),</span><br><span class="line">                stringClass.newObject(<span class="string">&quot;&#123;\&quot;akey\&quot;:\&quot;184C5F04D8BE43DCBD2EE3ABC928F616\&quot;,\&quot;aname\&quot;:\&quot;com.rytong.hnair\&quot;,\&quot;atarget\&quot;:\&quot;standard\&quot;,\&quot;aver\&quot;:\&quot;9.0.0\&quot;,\&quot;did\&quot;:\&quot;e574bb78db98d8ea\&quot;,\&quot;dname\&quot;:\&quot;Google_Pixel 3\&quot;,\&quot;gtcid\&quot;:\&quot;f442b091aa961a407165841e3a084147\&quot;,\&quot;mchannel\&quot;:\&quot;huawei\&quot;,\&quot;schannel\&quot;:\&quot;AD\&quot;,\&quot;slang\&quot;:\&quot;zh-CN\&quot;,\&quot;sname\&quot;:\&quot;google\\/blueline\\/blueline:10\\/QQ3A.200705.002\\/6506677:user\\/release-keys\&quot;,\&quot;stime\&quot;:\&quot;1740317961228\&quot;,\&quot;sver\&quot;:\&quot;10\&quot;,\&quot;system\&quot;:\&quot;AD\&quot;,\&quot;szone\&quot;:\&quot;+0800\&quot;,\&quot;abuild\&quot;:\&quot;64249\&quot;,\&quot;riskToken\&quot;:\&quot;67bb2505kRG0Hwidai2tEm3hYFUX1xCXvH8fuOk3\&quot;,\&quot;hver\&quot;:\&quot;9.0.0.35417.7ac793f2e.standard\&quot;,\&quot;number\&quot;:\&quot;18888888888\&quot;,\&quot;pin\&quot;:\&quot;awBta70HBNvOLA+L5Vlaas59trF+M0EI6lOgVDjQhG1QdoY\\/6ck1GTaeZOeSXiwFpG3e8vgj6xuq\\n1weM+DFKhl8aSi1Lhn7p1s51bdcPmvZ5DW3kYSV\\/8DvpnYGjPKgQ79aKEBDo3AvuGZpZ+pg2rHBm\\nWAgoyrVfSsBI6KLOsZg=\\n\&quot;,\&quot;toSave\&quot;:true&#125;&quot;</span>).getValue(),</span><br><span class="line">                stringClass.newObject(<span class="string">&quot;21047C596EAD45209346AE29F0350491&quot;</span>).getValue(),</span><br><span class="line">                stringClass.newObject(<span class="string">&quot;F6B15ABD66F91951036C955CB25B069F&quot;</span>).getValue());</span><br><span class="line">        <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> stringObject.getValue();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HNASignature</span> <span class="variable">hnaSignature</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HNASignature</span>();</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(hnaSignature.getHNASignature().split(<span class="string">&quot;&gt;&gt;&quot;</span>)));</span><br><span class="line">        System.out.println(<span class="string">&quot;getHNASignature(): &quot;</span>+hnaSignature.getHNASignature());</span><br><span class="line">        System.out.println(<span class="string">&quot;get(0): &quot;</span>+list.get(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getHNASignature(): E184DAEE44DFA522CE974EAB75EBC60DAAEC321D&gt;&gt;64249184C5F04D8BE43DCBD2EE3ABC928F616com.rytong.hnairstandard9.0.0e574bb78db98d8eaGoogle_Pixel 3f442b091aa961a407165841e3a0841479.0.0.35417.7ac793f2e.standardhuawei18888888888awBta70HBNvOLA+L5Vlaas59trF+M0EI6lOgVDjQhG1QdoY/6ck1GTaeZOeSXiwFpG3e8vgj6xuq</span><br><span class="line">1weM+DFKhl8aSi1Lhn7p1s51bdcPmvZ5DW3kYSV/8DvpnYGjPKgQ79aKEBDo3AvuGZpZ+pg2rHBm</span><br><span class="line">WAgoyrVfSsBI6KLOsZg=</span><br><span class="line">67bb2505kRG0Hwidai2tEm3hYFUX1xCXvH8fuOk3ADzh-CNgoogle/blueline/blueline:10/QQ3A.200705.002/6506677:user/release-keys174031796122810AD+0800true&gt;&gt;F6B15ABD66F91951036C955CB25B069F</span><br><span class="line"></span><br><span class="line">get(0): E184DAEE44DFA522CE974EAB75EBC60DAAEC321D</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>海南航空</tag>
      </tags>
  </entry>
  <entry>
    <title>混淆</title>
    <url>/2025/03/03/%E6%B7%B7%E6%B7%86/</url>
    <content><![CDATA[<h1 id="LLVM"><a href="#LLVM" class="headerlink" title="LLVM"></a>LLVM</h1><h2 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h2><p>简单来说，可以将 LLVM 理解为一个现代化、可拓展的编译器。</p>
<p>so混淆有代表性的就是ollvm，它是基于LLVM诞生的一款工具。</p>
<p>LLVM广义上是包含了很多模块的编译器框架。</p>
<p>在这里狭义上指的是llvm项目中的llvm core和clang子模块。</p>
<h2 id="GCC与LLVM编译流程对比"><a href="#GCC与LLVM编译流程对比" class="headerlink" title="GCC与LLVM编译流程对比"></a>GCC与LLVM编译流程对比</h2><p>GCC分为三个模块：前端、优化器和后端</p>
<p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/18.jpg"></p>
<p>LLVM 本质上也是三段式：</p>
<p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/19.jpg"></p>
<p>示例</p>
<p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/20.jpg"></p>
<p>相对于 GCC ，LLVM 有如下优势：</p>
<ul>
<li>模块化：LLVM 是高度模块化设计的，每一个模块都可以从 LLVM 项目中抽离出来单独使用。而 GCC 虽然也是三段式编译，但各个模块之间是难以抽离出来单独使用的。</li>
<li>可拓展：LLVM 为开发者提供了丰富的 API ，例如开发者可以通过 LLVM Pass 框架干预中间代码优化过程，并且配备了完善的文档。虽然 GCC 是开源的，但要在 GCC 的基础上进行拓展门槛很高、难度很大。</li>
</ul>
<h1 id="OLLVM"><a href="#OLLVM" class="headerlink" title="OLLVM"></a>OLLVM</h1><p>OLLVM（Obfuscator-LLVM）是一个基于LLVM框架的开源代码混淆工具，旨在通过修改程序的中间表示（IR）增加代码的复杂性，从而提升逆向工程的难度。</p>
<p>OLLVM是LLVM编译器框架的一个分支，通过插入混淆逻辑到编译过程中，生成难以理解和分析的二进制代码。</p>
<p>原理：在LLVM的中间表示（IR）层面进行代码转换，保留程序功能但改变代码结构，适用于C&#x2F;C++等LLVM支持的语言。</p>
<h2 id="代码混淆"><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h2><p>代码混淆的主要目的是防止或至少是阻碍对代码的未授权分析和修改。</p>
<p>代码混淆可以提高代码的安全性，但它不能提供绝对的保护。</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数是代码混淆的基本单位。一个函数由若干基本块组成，有且仅有一个入口块，可能有多个出口块。</p>
<p>一个函数可以用一个控制流程图（Control Flow Graph）表示。</p>
<h3 id="基本块"><a href="#基本块" class="headerlink" title="基本块"></a>基本块</h3><p>基本块由一组线性指令组成，每一个基本块都有一个入口点（第一条执行的指令）和一个出口点（最后一条执行的指令，即终结指令）。</p>
<p>终结指令要么跳转到下一个基本块，要么从函数返回。</p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>指令（Instruction）是LLVM中间表示（IR）的最小执行单元，对应程序中的原子操作（如算术运算、内存访问、控制流跳转等）。每条指令属于某个基本块，并严格按顺序执行（除非被终结指令中断）。</p>
<h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><p>控制流代表了一个程序执行过程中可能遍历到的所有路径。</p>
<p>通常情况下，程序的控制流很清晰地反映了程序的逻辑，但经过混淆的控制流会使得人们难以分辨正常逻辑。</p>
<h2 id="常见混淆"><a href="#常见混淆" class="headerlink" title="常见混淆"></a>常见混淆</h2><h3 id="不透明谓词"><a href="#不透明谓词" class="headerlink" title="不透明谓词"></a>不透明谓词</h3><p>不透明谓词是一种在编译时即可确定结果（真或假）的条件表达式，但其逻辑对逆向分析者而言是“不透明”的（难以静态推断）。它被插入到代码中，用于生成虚假控制流分支，干扰逆向工程。</p>
<p><strong>特点</strong></p>
<p>静态确定性：编译时即可计算结果（如 <code>1 &gt; 0</code> 永真，<code>2 + 2 = 5</code> 永假）。</p>
<p>动态隐蔽性：通过复杂计算或依赖上下文数据，伪装成动态条件。</p>
<p>不可达路径：插入与程序逻辑无关的分支，增加分析复杂度。</p>
<h3 id="控制流平坦化"><a href="#控制流平坦化" class="headerlink" title="控制流平坦化"></a>控制流平坦化</h3><p>通过破坏代码的原始控制流结构，将其转换为“平坦化”的状态机形式。</p>
<p>其核心目标是隐藏程序逻辑的跳转关系，使逆向工程难以恢复原始执行流程。</p>
<p><strong>特点</strong></p>
<p>统一入口&#x2F;出口：所有基本块通过一个“分发块”（Dispatcher）调度。</p>
<p>状态驱动：通过变量（状态值）决定下一个执行的基本块。</p>
<p>消除结构化特征：原始分支（如<code>if-else</code>、循环）被替换为跳转表或状态切换。</p>
<p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/21.jpg"></p>
<h3 id="虚假控制流"><a href="#虚假控制流" class="headerlink" title="虚假控制流"></a>虚假控制流</h3><p>虚假控制流是一种通过插入永真永假条件分支或冗余跳转来干扰控制流分析的代码混淆技术。其核心目标是增加控制流图（CFG）的复杂度，使得逆向工程难以区分真实逻辑与无效代码。</p>
<p>以基本块为单位，通过一个主分发器来控制程序的执行流程。</p>
<p><strong>特点</strong></p>
<p>无效分支：插入的条件分支在运行时永远不会被执行（如 <code>if (1 &gt; 0)</code> 永真分支）。</p>
<p>逻辑干扰：破坏基本块之间的直接跳转关系，生成“蜘蛛网”式CFG。</p>
<p>低开销：相比控制流平坦化，性能影响较小。</p>
<h3 id="指令替换"><a href="#指令替换" class="headerlink" title="指令替换"></a>指令替换</h3><p>指令替换是一种通过将简单指令替换为等效但更复杂的指令序列的代码混淆技术。其核心目标是增加代码的语义复杂度，使得逆向工程难以理解程序逻辑，同时保持功能不变。</p>
<h1 id="花指令去除"><a href="#花指令去除" class="headerlink" title="花指令去除"></a>花指令去除</h1><h2 id="无法解析的跳转地址1"><a href="#无法解析的跳转地址1" class="headerlink" title="无法解析的跳转地址1"></a>无法解析的跳转地址1</h2><p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/1.jpg"></p>
<p>转换为汇编代码如下</p>
<p>通过BR指令跳转到X5存储的地址处</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LOAD:0000000000028C48 FF 83 01 D1                 SUB             SP, SP, #0x60</span><br><span class="line">LOAD:0000000000028C4C FB 1B 00 F9                 STR             X27, [SP,#0x50+var_20]</span><br><span class="line">LOAD:0000000000028C50 F4 4F 04 A9                 STP             X20, X19, [SP,#0x50+var_10]</span><br><span class="line">LOAD:0000000000028C54 FD 7B 05 A9                 STP             X29, X30, [SP,#0x50+var_s0]</span><br><span class="line">LOAD:0000000000028C58 FD 43 01 91                 ADD             X29, SP, #0x50</span><br><span class="line">LOAD:0000000000028C5C 54 D0 3B D5                 MRS             X20, TPIDR_EL0</span><br><span class="line">LOAD:0000000000028C60 88 16 40 F9                 LDR             X8, [X20,#0x28]</span><br><span class="line">LOAD:0000000000028C64 69 05 80 52                 MOV             W9, #0x2B ; &#x27;+&#x27;</span><br><span class="line">LOAD:0000000000028C68 EA 93 00 91                 ADD             X10, SP, #0x50+var_2C</span><br><span class="line">LOAD:0000000000028C6C F3 03 00 AA                 MOV             X19, X0</span><br><span class="line">LOAD:0000000000028C70 E8 17 00 F9                 STR             X8, [SP,#0x50+var_28]</span><br><span class="line">LOAD:0000000000028C74 E9 27 00 B9                 STR             W9, [SP,#0x50+var_2C]</span><br><span class="line">LOAD:0000000000028C78 25 00 00 10                 ADR             X5, loc_28C7C</span><br><span class="line">LOAD:0000000000028C7C</span><br><span class="line">LOAD:0000000000028C7C             loc_28C7C                               ; DATA XREF: JNI_OnLoad+30↑o</span><br><span class="line">LOAD:0000000000028C7C FB 00 00 98                 LDRSW           X27, =0xFFFFFFFA</span><br><span class="line">LOAD:0000000000028C80 FB 03 3B AA                 MVN             X27, X27</span><br><span class="line">LOAD:0000000000028C84 46 01 80 B9                 LDRSW           X6, [X10]</span><br><span class="line">LOAD:0000000000028C88 7B 03 06 8B                 ADD             X27, X27, X6</span><br><span class="line">LOAD:0000000000028C8C A5 00 1B 8B                 ADD             X5, X5, X27</span><br><span class="line">LOAD:0000000000028C90 08 0C 80 D2                 MOV             X8, #0x60 ; &#x27;`&#x27;</span><br><span class="line">LOAD:0000000000028C94 A0 00 1F D6                 BR              X5</span><br><span class="line">LOAD:0000000000028C94             ; End of function JNI_OnLoad</span><br></pre></td></tr></table></figure>

<p>经计算X5的值为<code>0x28CAC</code></p>
<p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/2.jpg"></p>
<p><code>0x28CAC</code>地址处是一堆数据，是IDA未能正确分析所致</p>
<p>使用<code>U</code>取消定义，光标移动到<code>0x28CAC</code>地址处，使用<code>C</code>重新识别为代码</p>
<p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/3.jpg"></p>
<p>回到BR指令处进行patch</p>
<p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/4.jpg"></p>
<p>patch完成之后重新反编译，如下还是出现了无法识别的指令</p>
<p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/5.jpg"></p>
<p>这里把<code>BR</code>指令改为<code>B</code>指令后面跟上跳转的地址</p>
<p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/6.jpg"></p>
<p>后面出现很多<code>BR 寄存器</code>的指令，重复同样的操作进行修正，就可以看到正常的函数逻辑。</p>
<h2 id="无法解析的跳转地址2"><a href="#无法解析的跳转地址2" class="headerlink" title="无法解析的跳转地址2"></a>无法解析的跳转地址2</h2><p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/7.jpg"></p>
<p>这里的<code>JUMPOUT</code>是在patch修正之后出现的，这时候可以通过重新分析程序或者保存patch文件重新用IDA打开。</p>
<h2 id="无法解析的跳转地址3"><a href="#无法解析的跳转地址3" class="headerlink" title="无法解析的跳转地址3"></a>无法解析的跳转地址3</h2><p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/8.jpg"></p>
<p>这里的<code>JUMPOUT</code>是重新分析程序后出现的，转换为汇编代码之后，取消定义，重新生成代码失败了</p>
<p>那么可能是这里本身就是数据，IDA出错了</p>
<p>这里看到数据上方有一个<code>CBZ</code>指令</p>
<p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/9.jpg"></p>
<p>这里的<code>CBZ</code>指令从逻辑上来看是会跳转到<code>loc_3640C</code>的，程序是不会执行到这一块存放数据的内存的，却能影响到IDA的分析。</p>
<p>把<code>CBZ</code>指令改为<code>B</code>指令</p>
<h2 id="堆栈不平衡"><a href="#堆栈不平衡" class="headerlink" title="堆栈不平衡"></a>堆栈不平衡</h2><p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/10.jpg"></p>
<p>在汇编代码中观察SP</p>
<p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/11.jpg"></p>
<p>这里栈出错了，在函数内部出现栈增加，而且这里增加的长度要大于栈本身的长度，导致出错了。</p>
<p>把这行汇编指令nop掉，后面还会有很多这样的影响栈的指令，全都要手动nop掉，nop完了之后重新分析程序，函数就恢复正常了。</p>
<h1 id="反虚假控制流"><a href="#反虚假控制流" class="headerlink" title="反虚假控制流"></a>反虚假控制流</h1><p>分析如下方法<code>jiance_xp_frida()</code></p>
<p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/12.jpg"></p>
<p>在IDA中是如下样子</p>
<p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/13.jpg"></p>
<h2 id="unidbg模拟执行函数"><a href="#unidbg模拟执行函数" class="headerlink" title="unidbg模拟执行函数"></a>unidbg模拟执行函数</h2><p>根据函数的地址范围，打印指令的偏移地址并存入文件中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">emulator.getBackend().hook_add_new(<span class="keyword">new</span> <span class="title class_">CodeHook</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hook</span><span class="params">(Backend backend, <span class="type">long</span> address, <span class="type">int</span> size, Object user)</span> &#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;0x%x&quot;</span>,address-<span class="number">0x12000000</span>));</span><br><span class="line">        content+=String.format(<span class="string">&quot;0x%x&quot;</span>,address-<span class="number">0x12000000</span>)+<span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAttach</span><span class="params">(UnHook unHook)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">0x12015608</span>,<span class="number">0x12015608</span>+<span class="number">0xAC0</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;ollvm_bcf_new.log&quot;</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file);</span><br><span class="line">    writer.write(content);</span><br><span class="line">    writer.close();</span><br><span class="line">    System.out.println(<span class="string">&quot;File saved to &quot;</span> + file.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后可以使用IDAPython脚本把这些地址添加高亮。</p>
<h1 id="手动还原控制流平坦化"><a href="#手动还原控制流平坦化" class="headerlink" title="手动还原控制流平坦化"></a>手动还原控制流平坦化</h1><p>demo中的目标函数</p>
<p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/14.jpg"></p>
<p>转换为汇编代码，找出所有真实块以及对应的汇编地址，标准的ollvm虚假块中一般只有简单的修改v6的值，其他的基本都是真实块，</p>
<p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/15.jpg"></p>
<p>通过汇编代码查看每个真实块的label标签，在每个真实块后面进行注释，如下</p>
<p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/16.jpg"></p>
<p>找出所有真实块的地址后，接着就是顺着逻辑将他们全部串联起来。</p>
<p>从函数开始的地方往下分析，通过patch修改函数流程</p>
<p>如下是修正之后的流程图</p>
<p><img src="/2025/03/03/%E6%B7%B7%E6%B7%86/17.jpg"></p>
]]></content>
      <categories>
        <category>混淆</category>
      </categories>
      <tags>
        <tag>混淆</tag>
      </tags>
  </entry>
  <entry>
    <title>淘小说app参数sign值逆向及vip逻辑分析</title>
    <url>/2025/01/19/%E6%B7%98%E5%B0%8F%E8%AF%B4app%E5%8F%82%E6%95%B0sign%E5%80%BC%E9%80%86%E5%90%91%E5%8F%8Avip%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.martian.ttbook</p>
<p><img src="/2025/01/19/%E6%B7%98%E5%B0%8F%E8%AF%B4app%E5%8F%82%E6%95%B0sign%E5%80%BC%E9%80%86%E5%90%91%E5%8F%8Avip%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90/1.jpg"></p>
<h1 id="抓包分析数据"><a href="#抓包分析数据" class="headerlink" title="抓包分析数据"></a>抓包分析数据</h1><p>发送登录请求，找到登录相关数据包，分析<code>sign</code>参数</p>
<p><img src="/2025/01/19/%E6%B7%98%E5%B0%8F%E8%AF%B4app%E5%8F%82%E6%95%B0sign%E5%80%BC%E9%80%86%E5%90%91%E5%8F%8Avip%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90/2.jpg"></p>
<h1 id="Jadx反编译apk"><a href="#Jadx反编译apk" class="headerlink" title="Jadx反编译apk"></a>Jadx反编译apk</h1><p>搜索<code>sign</code></p>
<p><img src="/2025/01/19/%E6%B7%98%E5%B0%8F%E8%AF%B4app%E5%8F%82%E6%95%B0sign%E5%80%BC%E9%80%86%E5%90%91%E5%8F%8Avip%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90/3.jpg"></p>
<h2 id="intercept"><a href="#intercept" class="headerlink" title="intercept"></a>intercept</h2><p>双击跳转到sign出现的位置</p>
<p><img src="/2025/01/19/%E6%B7%98%E5%B0%8F%E8%AF%B4app%E5%8F%82%E6%95%B0sign%E5%80%BC%E9%80%86%E5%90%91%E5%8F%8Avip%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90/4.jpg"></p>
<p>通过分析上下文可以确定这就是我们要的参数，接下来分析这个参数是怎么生成的</p>
<h2 id="d-d"><a href="#d-d" class="headerlink" title="d.d"></a>d.d</h2><p>它从<code>d.d(treeMap, ConfigSingleton.D().l().f26381b);</code>这个地方过来，我们进入到<code>d</code>方法里看看</p>
<p><img src="/2025/01/19/%E6%B7%98%E5%B0%8F%E8%AF%B4app%E5%8F%82%E6%95%B0sign%E5%80%BC%E9%80%86%E5%90%91%E5%8F%8Avip%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90/5.jpg"></p>
<p>利用frida hook d方法查看它的参数和返回值</p>
<h2 id="hook-d"><a href="#hook-d" class="headerlink" title="hook d"></a>hook d</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">function <span class="title function_">hook_d</span><span class="params">()</span>&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        <span class="type">let</span> <span class="variable">d</span> <span class="operator">=</span> Java.use(<span class="string">&quot;ba.d&quot;</span>);</span><br><span class="line">        d[<span class="string">&quot;d&quot;</span>].implementation = function (treeMap, str) &#123;</span><br><span class="line">            console.log(`d.d is called: treeMap=$&#123;treeMap&#125;, str=$&#123;str&#125;`);</span><br><span class="line">            <span class="type">let</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>[<span class="string">&quot;d&quot;</span>](treeMap, str);</span><br><span class="line">            console.log(`d.d result=$&#123;result&#125;`);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>hook结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d.d is called: </span><br><span class="line">treeMap=&#123;appid=mibook, brand=google, channel=Vivo, code=1111, device_id=b5ffdb56a1f546bc978c7237a06e55e4, model=Pixel 3, optype=0, ostype=0, osversion=9, package_name=com.martian.ttbook, phone=17550373741, t=1737260784077, token=dd1c0464-7a19-460f-b149-8ca0231380e2, uid=83742270, version_code=488, version_name=10.3.6&#125;, </span><br><span class="line">str=mibook_123456</span><br><span class="line">d.d result=24DFDE384CECB241FF0C667046DCD1CF</span><br></pre></td></tr></table></figure>

<h2 id="e"><a href="#e" class="headerlink" title="e"></a>e</h2><p>d方法的返回值调用了e方法，进入e方法查看一下</p>
<p><img src="/2025/01/19/%E6%B7%98%E5%B0%8F%E8%AF%B4app%E5%8F%82%E6%95%B0sign%E5%80%BC%E9%80%86%E5%90%91%E5%8F%8Avip%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90/6.jpg"></p>
<p>这里使用了md5算法，然后对结果又进行了变换，最终转换为字符串返回。</p>
<h2 id="hook-e"><a href="#hook-e" class="headerlink" title="hook e"></a>hook e</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_e</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> d = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;ba.d&quot;</span>);</span><br><span class="line">        d[<span class="string">&quot;e&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">bArr</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`d.e is called: bArr=<span class="subst">$&#123;Java.use(<span class="string">&quot;java.lang.String&quot;</span>).$new(bArr)&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;e&quot;</span>](bArr);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`d.e result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d.e is called: bArr=appid=mibook&amp;brand=google&amp;channel=Vivo&amp;code=1111&amp;device_id=b5ffdb56a1f546bc978c7237a06e55e4&amp;model=Pixel 3&amp;optype=0&amp;ostype=0&amp;osversion=9&amp;package_name=com.martian.ttbook&amp;phone=17550373739&amp;t=1737268010279&amp;token=dd1c0464-7a19-460f-b149-8ca0231380e2&amp;uid=83742270&amp;version_code=488&amp;version_name=10.3.6&amp;key=mibook_123456</span><br><span class="line">d.e result=1c6a4ca1d667b3f3878b7d25d59dfce8</span><br></pre></td></tr></table></figure>

<h1 id="Python还原"><a href="#Python还原" class="headerlink" title="Python还原"></a>Python还原</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_call</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 创建md5对象</span></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    <span class="comment"># 更新要加密的数据，参数要是字节类型</span></span><br><span class="line">    md5.update(data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">	<span class="comment"># 获取加密后的数据，以字节码表示</span></span><br><span class="line">    md5_byte = md5.digest()</span><br><span class="line">    <span class="keyword">return</span> md5_byte</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义URL和请求头</span></span><br><span class="line">url = <span class="string">&quot;http://tybook.taoyuewenhua.net/phone_login.do&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN-#Hans&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;okhttp/4.11.0&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义查询参数</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;appid&quot;</span>: <span class="string">&quot;mibook&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brand&quot;</span>: <span class="string">&quot;google&quot;</span>,</span><br><span class="line">    <span class="string">&quot;channel&quot;</span>: <span class="string">&quot;Vivo&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="string">&quot;1111&quot;</span>,</span><br><span class="line">    <span class="string">&quot;device_id&quot;</span>: <span class="string">&quot;b5ffdb56a1f546bc978c7237a06e55e4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;model&quot;</span>: <span class="string">&quot;Pixel 3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;optype&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ostype&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;osversion&quot;</span>: <span class="string">&quot;9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;package_name&quot;</span>: <span class="string">&quot;com.martian.ttbook&quot;</span>,</span><br><span class="line">    <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;17550373739&quot;</span>,</span><br><span class="line">    <span class="string">&quot;t&quot;</span>:  <span class="string">&quot;1737268010279&quot;</span>, <span class="comment"># str(int(time.time())),</span></span><br><span class="line">    <span class="string">&quot;token&quot;</span> : <span class="string">&quot;dd1c0464-7a19-460f-b149-8ca0231380e2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;uid&quot;</span>: <span class="string">&quot;83742270&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version_code&quot;</span>: <span class="string">&quot;488&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version_name&quot;</span>: <span class="string">&quot;10.3.6&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成sign</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_dign</span>(<span class="params">params</span>):</span><br><span class="line">    treemap_str = <span class="string">&quot;&amp;&quot;</span>.join([key+<span class="string">&quot;=&quot;</span>+value <span class="keyword">for</span> key,value <span class="keyword">in</span> params.items()])</span><br><span class="line">    treemap_str+=<span class="string">&quot;&amp;key=mibook_123456&quot;</span></span><br><span class="line">    <span class="comment"># print(treemap_str)</span></span><br><span class="line">    md5_bytes = <span class="built_in">list</span>(md5_call(treemap_str))</span><br><span class="line">    cArr = [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br><span class="line">    sign_str = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> md5_bytes:</span><br><span class="line">        sign_str+=cArr[(b&gt;&gt;<span class="number">4</span>)&amp;<span class="number">15</span>]</span><br><span class="line">        sign_str+=cArr[b&amp;<span class="number">15</span>]</span><br><span class="line">    <span class="comment"># print(sign_str)</span></span><br><span class="line">    <span class="keyword">return</span> sign_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">generate_dign(params)</span><br><span class="line"></span><br><span class="line">params[<span class="string">&quot;sign&quot;</span>]=generate_dign(params)</span><br><span class="line"><span class="built_in">print</span>(params)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送GET请求</span></span><br><span class="line">response = requests.get(url, headers=headers, params=params)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查响应并输出结果</span></span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Response:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(response.text)  <span class="comment"># 打印响应内容</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Failed to fetch data. HTTP Status Code: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Response:</span><br><span class="line">&#123;&quot;errcode&quot;:-1,&quot;errmsg&quot;:&quot;图形验证码，请填入弹框里&quot;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="vip逻辑分析"><a href="#vip逻辑分析" class="headerlink" title="vip逻辑分析"></a>vip逻辑分析</h1><p>jadx里搜索<code>getIsVip</code></p>
<p><img src="/2025/01/19/%E6%B7%98%E5%B0%8F%E8%AF%B4app%E5%8F%82%E6%95%B0sign%E5%80%BC%E9%80%86%E5%90%91%E5%8F%8Avip%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90/7.jpg"></p>
<h2 id="getIsVip"><a href="#getIsVip" class="headerlink" title="getIsVip"></a>getIsVip</h2><p><img src="/2025/01/19/%E6%B7%98%E5%B0%8F%E8%AF%B4app%E5%8F%82%E6%95%B0sign%E5%80%BC%E9%80%86%E5%90%91%E5%8F%8Avip%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90/8.jpg"></p>
<h2 id="利用frida进行hook"><a href="#利用frida进行hook" class="headerlink" title="利用frida进行hook"></a>利用frida进行hook</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_vip</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.martian.rpauth.response.MartianRPAccount&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">isVip</span>.<span class="property">value</span>);</span><br><span class="line">                obj.<span class="property">isVip</span>.<span class="property">value</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Boolean&quot;</span>).$new(<span class="literal">true</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced isvip:&quot;</span>,obj.<span class="property">isVip</span>.<span class="property">value</span>);</span><br><span class="line">            &#125;,<span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onComplete!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">MartianRPAccount</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.martian.rpauth.response.MartianRPAccount&quot;</span>);</span><br><span class="line">        <span class="title class_">MartianRPAccount</span>[<span class="string">&quot;getIsVip&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`MartianRPAccount.getIsVip is called`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;getIsVip&quot;</span>]();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`MartianRPAccount.getIsVip result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<p><img src="/2025/01/19/%E6%B7%98%E5%B0%8F%E8%AF%B4app%E5%8F%82%E6%95%B0sign%E5%80%BC%E9%80%86%E5%90%91%E5%8F%8Avip%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90/9.jpg"></p>
<p><img src="/2025/01/19/%E6%B7%98%E5%B0%8F%E8%AF%B4app%E5%8F%82%E6%95%B0sign%E5%80%BC%E9%80%86%E5%90%91%E5%8F%8Avip%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90/10.jpg"></p>
]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>淘小说</tag>
      </tags>
  </entry>
  <entry>
    <title>爱库存app参数sign还原</title>
    <url>/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.aikucun.akapp</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/1.jpg"></p>
<h1 id="关于frida反调试"><a href="#关于frida反调试" class="headerlink" title="关于frida反调试"></a>关于frida反调试</h1><p>这个app的反调试我是通过杀线程绕过的，具体过程不再详写，其他文章里有相同的绕过思路。</p>
<h1 id="抓包分析数据"><a href="#抓包分析数据" class="headerlink" title="抓包分析数据"></a>抓包分析数据</h1><p>寻找<code>sign</code>参数</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/2.jpg"></p>
<h1 id="jadx反编译apk"><a href="#jadx反编译apk" class="headerlink" title="jadx反编译apk"></a>jadx反编译apk</h1><p>搜索<code>&quot;sign&quot;</code>，经过一番搜索，并没有找到相关的代码实现位置，换一种思路搜素<code>&quot;svs&quot;</code>，定位到了参数的位置。</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/3.jpg"></p>
<p>双击查看</p>
<h2 id="onAttachQueryParameters"><a href="#onAttachQueryParameters" class="headerlink" title="onAttachQueryParameters"></a>onAttachQueryParameters</h2><p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/4.jpg"></p>
<p>这里我们可以双击<code>b.u</code>，查看其内容即<code>svs</code>的值，发现它是一个定值<code>v3</code></p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/5.jpg"></p>
<p>接着向下浏览找到了<code>&quot;&amp;sign=&quot;</code>，结合上下文发现就是我们要找的<code>sign</code></p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/6.jpg"></p>
<p>很清晰的看出来了<code>sign</code>的值为<code>signV3</code>，是经过<code>signV3</code>函数签名得到的结果。</p>
<h2 id="signV3"><a href="#signV3" class="headerlink" title="signV3"></a>signV3</h2><p>查看signV3的内容，它是一个native函数</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/7.jpg"></p>
<h3 id="hook-signV3"><a href="#hook-signV3" class="headerlink" title="hook signV3"></a>hook signV3</h3><p>我们可以hook signV3函数查看其参数和返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_signV3</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">MXSecurity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.mengxiang.arch.security.MXSecurity&quot;</span>);</span><br><span class="line">        <span class="title class_">MXSecurity</span>[<span class="string">&quot;signV3&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">url, nonceStr, timestamp, body</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`MXSecurity.signV3 is called: url=<span class="subst">$&#123;url&#125;</span>, nonceStr=<span class="subst">$&#123;nonceStr&#125;</span>, timestamp=<span class="subst">$&#123;timestamp&#125;</span>, body=<span class="subst">$&#123;body&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;signV3&quot;</span>](url, nonceStr, timestamp, body);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`MXSecurity.signV3 result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_signV3</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MXSecurity.signV3 is called: url=https://zuul.aikucun.com/akucun-base-data-new/base/address/selectAddrVersion?appid=38741001&amp;did=d545ae984083237bae9a6358ca29910f&amp;noncestr=3f60cc&amp;svs=v3&amp;timestamp=1736605877, nonceStr=3f60cc, timestamp=1736605877, body=</span><br><span class="line">MXSecurity.signV3 is called: url=https://m.xiangdian.com/api/mshop/mshop-aggr-prod/outer/common/bwl/isHitByBatch?appid=38741001&amp;did=d545ae984083237bae9a6358ca29910f&amp;noncestr=bf6c60&amp;svs=v3&amp;timestamp=1736605877, nonceStr=bf6c60, timestamp=1736605877, body=398a40be5a2a6a5a742f35b1b606277a</span><br><span class="line">MXSecurity.signV3 result=508858db8f332eb10fcf604c617229e5ef180f8698e10bd8626d3b9ec67416a4</span><br><span class="line">MXSecurity.signV3 result=a89e326bb0d2fcb6029e3991366ba812ee1deafd6bd0ba81f00850b794fd4a49</span><br><span class="line">MXSecurity.signV3 is called: url=https://m.xiangdian.com/api/mshop/mshop-aggr-prod/outer/v1/material/create/createAuth?appid=38741001&amp;did=d545ae984083237bae9a6358ca29910f&amp;noncestr=2cd903&amp;svs=v3&amp;timestamp=1736605877, nonceStr=2cd903, timestamp=1736605877, body=37a6259cc0c1dae299a7866489dff0bd</span><br><span class="line">MXSecurity.signV3 result=7df7962bdd9a2e5182cbacb123e0f95aba154da8f4499c9dab69b45e90003f17</span><br><span class="line">MXSecurity.signV3 is called: url=https://zuul.aikucun.com/appconfigmgt/api/v1/download/config?appid=38741001&amp;did=d545ae984083237bae9a6358ca29910f&amp;noncestr=63ba42&amp;svs=v3&amp;timestamp=1736605879, nonceStr=63ba42, timestamp=1736605879, body=ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line">MXSecurity.signV3 result=70b90270cefb862185029b36663c9643201f13f790a9b20fd7a31082e30d0fbe</span><br></pre></td></tr></table></figure>

<h2 id="url"><a href="#url" class="headerlink" title="url"></a>url</h2><p>url是signV3的第一个参数，</p>
<p>分析url里的参数，url的第一个参数是<code>appid</code></p>
<p>如下，<code>appid</code>是在so里面获取的，等分析so的时候再去分析它</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/26.jpg"></p>
<p>url的第二个参数是did</p>
<p>如下，调用getDid方法</p>
<h3 id="getDId"><a href="#getDId" class="headerlink" title="getDId"></a>getDId</h3><p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/27.jpg"></p>
<p>在getDid方法里调用了md5String方法，其参数是<code>&quot;micker.cn&quot;</code>拼接<code>getUdid()</code>的返回值，对参数进行md5加密，得到did</p>
<h3 id="getUdid"><a href="#getUdid" class="headerlink" title="getUdid"></a>getUdid</h3><p>获取udid的值</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/28.jpg"></p>
<p>如果udid为空，会重新随机一个uuid，设置为udid</p>
<h2 id="nonceStr"><a href="#nonceStr" class="headerlink" title="nonceStr"></a>nonceStr</h2><p>nonceStr是signV3的第二个参数</p>
<p><strong>substring</strong></p>
<p>传入signV3方法的第二个参数是<code>substring</code>，查找这个参数是怎么生成的</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/8.jpg"></p>
<p>可以看出来，这个参数是<code>replace$default</code>的子字符串，也就是其前六个字符。</p>
<p><strong>replace$default</strong></p>
<p>如下</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/9.jpg"></p>
<p>StringsJVM调用的<code>replace$default</code>方法，里面传入了一个参数uuid，它是随机生成的  </p>
<p>看一下这个方法是怎么实现的，如下</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/10.jpg"></p>
<p>又调用了replace方法，查看其实现</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/11.jpg"></p>
<p>好长一串啊，这里我选择直接hook <code>replace</code>方法分析其参数和返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_replace</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">StringsJVM</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;kotlin.text.StringsKt__StringsJVMKt&quot;</span>);</span><br><span class="line">        <span class="title class_">StringsJVM</span>[<span class="string">&quot;replace&quot;</span>].<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;boolean&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">str, oldValue, newValue, z</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`StringsJVM.replace is called: str=<span class="subst">$&#123;str&#125;</span>, oldValue=<span class="subst">$&#123;oldValue&#125;</span>, newValue=<span class="subst">$&#123;newValue&#125;</span>, z=<span class="subst">$&#123;z&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;replace&quot;</span>](str, oldValue, newValue, z);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`StringsJVM.replace result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_replace</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">StringsJVM.replace is called: str=14d557b1-496b-4daa-ba2f-d7cffe054397, oldValue=-, newValue=, z=false</span><br><span class="line">StringsJVM.replace result=14d557b1496b4daaba2fd7cffe054397</span><br></pre></td></tr></table></figure>

<p>它是把<code>uuid</code>中的<code>-</code>符号给去除了</p>
<p>到这里就知道nonceStr的值就是uuid的前六个字符</p>
<h2 id="timestamp"><a href="#timestamp" class="headerlink" title="timestamp"></a>timestamp</h2><p><code>signV3</code>的第三个参数是timestamp没什么好分析的，是一个时间戳。</p>
<h2 id="body"><a href="#body" class="headerlink" title="body"></a>body</h2><p>接下来分析<code>signV3</code>的第四个参数，<code>body</code></p>
<p>传入<code>signV3</code>的参数是<code>bodyMD5</code>，看名字就与<code>bodyMD5</code>有关系</p>
<p>看这个参数是怎么生成的</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/12.jpg"></p>
<p>调用了bodyMD5()方法，里面传入了一个request参数</p>
<h3 id="bodyMD5"><a href="#bodyMD5" class="headerlink" title="bodyMD5"></a>bodyMD5</h3><p>查看这个方法的具体实现</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/13.jpg"></p>
<p>把请求体进行了一个MD5运算</p>
<h3 id="hook-bodyMD5"><a href="#hook-bodyMD5" class="headerlink" title="hook bodyMD5"></a>hook bodyMD5</h3><p>这里可以把bodyMD5方法和md5标准加密算法同时hook，更清晰</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_md5</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">MD5Utils</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.mengxiang.arch.utils.MD5Utils&quot;</span>);</span><br><span class="line">        <span class="title class_">MD5Utils</span>[<span class="string">&quot;md5&quot;</span>].<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`MD5Utils.md5 is called: value=<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;md5&quot;</span>](value);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`MD5Utils.md5 result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_bodymd5</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">MXV1Sign</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.mengxiang.arch.net.sign.MXV1Sign&quot;</span>);</span><br><span class="line">        <span class="title class_">MXV1Sign</span>[<span class="string">&quot;bodyMD5&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">request</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`MXV1Sign.bodyMD5 is called: request=<span class="subst">$&#123;request&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;bodyMD5&quot;</span>](request);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`MXV1Sign.bodyMD5 result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_bodymd5</span>()</span><br><span class="line"><span class="title function_">hook_md5</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MXV1Sign.bodyMD5 is called: request=Request&#123;method=GET, url=https://zuul.aikucun.com/akucun-base-data-new/base/address/selectAddrVersion, tags=&#123;class retrofit2.Invocation=com.aikucun.akapp.business.address.service.AddressService.selectAddressVersion() []&#125;&#125;</span><br><span class="line">MXV1Sign.bodyMD5 result=</span><br><span class="line"></span><br><span class="line">MXV1Sign.bodyMD5 is called: request=Request&#123;method=POST, url=https://m.xiangdian.com/api/mshop/mshop-aggr-prod/outer/common/bwl/isHitByBatch, tags=&#123;class retrofit2.Invocation=com.aikucun.akapp.common.gray.GrayService$GrayServiceApi.grayControl() [&#123;bwlCodes=[B-MATERIAL-CREATE-V2, B-MATERIAL-CREATE-V3, B-MATERIAL-INCOME]&#125;]&#125;&#125;</span><br><span class="line"></span><br><span class="line">MD5Utils.md5 is called: value=&#123;&quot;bwlCodes&quot;:[&quot;B-MATERIAL-CREATE-V2&quot;,&quot;B-MATERIAL-CREATE-V3&quot;,&quot;B-MATERIAL-INCOME&quot;]&#125;</span><br><span class="line">MD5Utils.md5 result=398a40be5a2a6a5a742f35b1b606277a</span><br><span class="line">MXV1Sign.bodyMD5 result=398a40be5a2a6a5a742f35b1b606277a</span><br><span class="line"></span><br><span class="line">MXV1Sign.bodyMD5 is called: request=Request&#123;method=POST, url=https://m.xiangdian.com/api/mshop/mshop-aggr-prod/outer/v1/material/create/createAuth, headers=[app-cache-strategy:1], tags=&#123;class retrofit2.Invocation=com.mengxiang.arch.channel.impl.network.NetChannel$APIService.postRequest() [/api/mshop/mshop-aggr-prod/outer/v1/material/create/createAuth, &#123;app-cache-strategy=1&#125;, null]&#125;&#125;</span><br><span class="line">MD5Utils.md5 is called: value=null</span><br><span class="line">MD5Utils.md5 result=37a6259cc0c1dae299a7866489dff0bd</span><br><span class="line">MXV1Sign.bodyMD5 result=37a6259cc0c1dae299a7866489dff0bd</span><br><span class="line"></span><br><span class="line">MXV1Sign.bodyMD5 is called: request=Request&#123;method=POST, url=https://zuul.aikucun.com/appconfigmgt/api/v1/download/config, tags=&#123;class retrofit2.Invocation=com.aikucun.akapp.business.update.service.UpdateService.checkAppUpgrade() [&#123;configKey=[Ljava.lang.String;@61048d9, system=1, isShowUpdate=false, appId=com.aikucun.akapp, channel=2010, deviceModel=google-Pixel 3, buildCode=76302, version=7.63.2, userCode=, deviceBrand=Google&#125;]&#125;&#125;</span><br><span class="line">MD5Utils.md5 is called: value=&#123;&quot;configKey&quot;:[&quot;versionUpdate&quot;],&quot;system&quot;:1,&quot;isShowUpdate&quot;:false,&quot;appId&quot;:&quot;com.aikucun.akapp&quot;,&quot;channel&quot;:&quot;2010&quot;,&quot;deviceModel&quot;:&quot;google-Pixel 3&quot;,&quot;buildCode&quot;:76302,&quot;version&quot;:&quot;7.63.2&quot;,&quot;userCode&quot;:&quot;&quot;,&quot;deviceBrand&quot;:&quot;Google&quot;&#125;</span><br><span class="line">MD5Utils.md5 result=ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line">MXV1Sign.bodyMD5 result=ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line"></span><br><span class="line">MXV1Sign.bodyMD5 is called: request=Request&#123;method=POST, url=https://zuul.aikucun.com/appconfigmgt/api/v1/download/config, tags=&#123;class retrofit2.Invocation=com.aikucun.akapp.business.update.service.UpdateService.checkAppUpgrade() [&#123;configKey=[Ljava.lang.String;@f07dfd1, system=1, isShowUpdate=false, appId=com.aikucun.akapp, channel=2010, deviceModel=google-Pixel 3, buildCode=76302, version=7.63.2, userCode=, deviceBrand=Google&#125;]&#125;&#125;</span><br><span class="line">MD5Utils.md5 is called: value=&#123;&quot;configKey&quot;:[&quot;versionUpdate&quot;],&quot;system&quot;:1,&quot;isShowUpdate&quot;:false,&quot;appId&quot;:&quot;com.aikucun.akapp&quot;,&quot;channel&quot;:&quot;2010&quot;,&quot;deviceModel&quot;:&quot;google-Pixel 3&quot;,&quot;buildCode&quot;:76302,&quot;version&quot;:&quot;7.63.2&quot;,&quot;userCode&quot;:&quot;&quot;,&quot;deviceBrand&quot;:&quot;Google&quot;&#125;</span><br><span class="line">MD5Utils.md5 result=ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line">MXV1Sign.bodyMD5 result=ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line">MXV1Sign.bodyMD5 is called: request=Request&#123;method=POST, url=https://zuul.aikucun.com/appconfigmgt/api/v1/download/config, tags=&#123;class retrofit2.Invocation=com.aikucun.akapp.business.update.service.UpdateService.checkAppUpgrade() [&#123;configKey=[Ljava.lang.String;@cf2f91a, system=1, isShowUpdate=false, appId=com.aikucun.akapp, channel=2010, deviceModel=google-Pixel 3, buildCode=76302, version=7.63.2, userCode=, deviceBrand=Google&#125;]&#125;&#125;</span><br><span class="line">MD5Utils.md5 is called: value=&#123;&quot;configKey&quot;:[&quot;versionUpdate&quot;],&quot;system&quot;:1,&quot;isShowUpdate&quot;:false,&quot;appId&quot;:&quot;com.aikucun.akapp&quot;,&quot;channel&quot;:&quot;2010&quot;,&quot;deviceModel&quot;:&quot;google-Pixel 3&quot;,&quot;buildCode&quot;:76302,&quot;version&quot;:&quot;7.63.2&quot;,&quot;userCode&quot;:&quot;&quot;,&quot;deviceBrand&quot;:&quot;Google&quot;&#125;</span><br><span class="line">MD5Utils.md5 result=ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line">MXV1Sign.bodyMD5 result=ce10a5623f4ce537c8cbd4e306504860</span><br></pre></td></tr></table></figure>



<p>好了，这里就把<code>signV3</code>方法的参数和返回值分析完成了，接下来就到so里面具体分析这个函数的实现过程了。</p>
<h1 id="so分析"><a href="#so分析" class="headerlink" title="so分析"></a>so分析</h1><p>signV3的实现在<code>mx</code>里</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/14.jpg"></p>
<h2 id="定位signV3"><a href="#定位signV3" class="headerlink" title="定位signV3"></a>定位signV3</h2><p>IDA打开so文件，在导出函数表里搜索<code>Java</code>，直接就定位到了，双击跳转到函数地址</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/15.jpg"></p>
<p>对反汇编的内容稍作处理，得到如下内容</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">Java_com_mengxiang_arch_security_MXSecurity_signV3</span><span class="params">(</span></span><br><span class="line"><span class="params">        JNIEnv *env,</span></span><br><span class="line"><span class="params">        jobject obj,</span></span><br><span class="line"><span class="params">        <span class="type">char</span> *url,</span></span><br><span class="line"><span class="params">        <span class="type">char</span> *noncestr,</span></span><br><span class="line"><span class="params">        <span class="type">char</span> *timestamp,</span></span><br><span class="line"><span class="params">        <span class="type">char</span> *body)</span></span><br><span class="line">&#123;</span><br><span class="line">  JNIEnv v6; <span class="comment">// x8</span></span><br><span class="line">  <span class="type">size_t</span> v11; <span class="comment">// x28</span></span><br><span class="line">  <span class="type">size_t</span> v12; <span class="comment">// x25</span></span><br><span class="line">  <span class="type">size_t</span> v13; <span class="comment">// x26</span></span><br><span class="line">  <span class="type">size_t</span> v14; <span class="comment">// x27</span></span><br><span class="line">  <span class="type">size_t</span> v15; <span class="comment">// x20</span></span><br><span class="line">  <span class="type">size_t</span> v16; <span class="comment">// x21</span></span><br><span class="line">  <span class="type">size_t</span> v17; <span class="comment">// x22</span></span><br><span class="line">  <span class="type">size_t</span> v18; <span class="comment">// x23</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v19; <span class="comment">// x20</span></span><br><span class="line">  _QWORD *v20; <span class="comment">// x24</span></span><br><span class="line">  __int64 v21; <span class="comment">// x8</span></span><br><span class="line">  <span class="type">char</span> *v22; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">char</span> *v23; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">char</span> *v24; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">char</span> *v25; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">char</span> *v26; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">char</span> *v27; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">char</span> *v28; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">char</span> *v29; <span class="comment">// x0</span></span><br><span class="line">  __int64 v30; <span class="comment">// x8</span></span><br><span class="line">  <span class="type">char</span> *v31; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">char</span> *v32; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">char</span> *v33; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v34; <span class="comment">// w20</span></span><br><span class="line">  jbyteArray sha256_data; <span class="comment">// x21</span></span><br><span class="line">  <span class="type">char</span> *v36; <span class="comment">// x1</span></span><br><span class="line">  jstring (*NewStringUTF)(JNIEnv *, <span class="type">const</span> <span class="type">char</span> *); <span class="comment">// x2</span></span><br><span class="line">  <span class="type">size_t</span> v39; <span class="comment">// [xsp+8h] [xbp-78h]</span></span><br><span class="line">  <span class="type">char</span> *timestamp_char; <span class="comment">// [xsp+10h] [xbp-70h]</span></span><br><span class="line">  <span class="type">char</span> *noncestr_char; <span class="comment">// [xsp+18h] [xbp-68h]</span></span><br><span class="line">  <span class="type">char</span> *url_char; <span class="comment">// [xsp+20h] [xbp-60h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *body_char; <span class="comment">// [xsp+28h] [xbp-58h]</span></span><br><span class="line"></span><br><span class="line">  v6 = *env;</span><br><span class="line">  <span class="keyword">if</span> ( (byte_32051 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    noncestr_char = v6-&gt;GetStringUTFChars(env, noncestr, <span class="number">0LL</span>);</span><br><span class="line">    timestamp_char = (*env)-&gt;GetStringUTFChars(env, timestamp, <span class="number">0LL</span>);</span><br><span class="line">    url_char = (*env)-&gt;GetStringUTFChars(env, url, <span class="number">0LL</span>);</span><br><span class="line">    body_char = (*env)-&gt;GetStringUTFChars(env, body, <span class="number">0LL</span>);</span><br><span class="line">    v39 = __strlen_chk(<span class="string">&quot;appid=&quot;</span>, <span class="number">7uLL</span>);</span><br><span class="line">    v11 = __strlen_chk(<span class="string">&quot;&amp;svs=&quot;</span>, <span class="number">6uLL</span>);</span><br><span class="line">    v12 = __strlen_chk(<span class="string">&quot;v3&quot;</span>, <span class="number">3uLL</span>);</span><br><span class="line">    v13 = __strlen_chk(<span class="string">&quot;&amp;noncestr=&quot;</span>, <span class="number">0xB</span>uLL);</span><br><span class="line">    v14 = <span class="built_in">strlen</span>(noncestr_char);</span><br><span class="line">    v15 = __strlen_chk(<span class="string">&quot;&amp;timestamp=&quot;</span>, <span class="number">0xC</span>uLL);</span><br><span class="line">    v16 = <span class="built_in">strlen</span>(timestamp_char);</span><br><span class="line">    v17 = __strlen_chk(<span class="string">&quot;&amp;secret=&quot;</span>, <span class="number">9uLL</span>);</span><br><span class="line">    v18 = __strlen_chk(<span class="string">&quot;&amp;url=&quot;</span>, <span class="number">6uLL</span>);</span><br><span class="line">    v19 = v39 + v11 + v12 + v13 + v14 + v15 + v16 + v17 + v18 + <span class="built_in">strlen</span>(url_char) + <span class="number">74</span>;</span><br><span class="line">    v20 = operator new[](v19);</span><br><span class="line">    <span class="built_in">memset</span>(v20, <span class="number">0</span>, v19);</span><br><span class="line">    *v20 = <span class="number">0LL</span>;</span><br><span class="line">    <span class="built_in">strcat</span>(v20, <span class="string">&quot;appid=&quot;</span>);</span><br><span class="line">    v21 = <span class="number">32LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( isDebug )</span><br><span class="line">      v21 = <span class="number">16LL</span>;</span><br><span class="line">    v22 = <span class="built_in">strcat</span>(v20, *(lpAppInfo + v21));</span><br><span class="line">    v23 = <span class="built_in">strcat</span>(v22, <span class="string">&quot;&amp;svs=&quot;</span>);</span><br><span class="line">    v24 = <span class="built_in">strcat</span>(v23, <span class="string">&quot;v3&quot;</span>);</span><br><span class="line">    v25 = <span class="built_in">strcat</span>(v24, <span class="string">&quot;&amp;noncestr=&quot;</span>);</span><br><span class="line">    v26 = <span class="built_in">strcat</span>(v25, noncestr_char);</span><br><span class="line">    v27 = <span class="built_in">strcat</span>(v26, <span class="string">&quot;&amp;timestamp=&quot;</span>);</span><br><span class="line">    v28 = <span class="built_in">strcat</span>(v27, timestamp_char);</span><br><span class="line">    v29 = <span class="built_in">strcat</span>(v28, <span class="string">&quot;&amp;secret=&quot;</span>);</span><br><span class="line">    v30 = <span class="number">40LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( isDebug )</span><br><span class="line">      v30 = <span class="number">24LL</span>;</span><br><span class="line">    v31 = <span class="built_in">strcat</span>(v29, *(lpAppInfo + v30));</span><br><span class="line">    v32 = <span class="built_in">strcat</span>(v31, <span class="string">&quot;&amp;url=&quot;</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(v32, url_char);</span><br><span class="line">    <span class="keyword">if</span> ( body_char &amp;&amp; <span class="built_in">strlen</span>(body_char) )</span><br><span class="line">    &#123;</span><br><span class="line">      v33 = <span class="built_in">strcat</span>(v20, <span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">      <span class="built_in">strcat</span>(v33, body_char);</span><br><span class="line">    &#125;</span><br><span class="line">    v34 = <span class="built_in">strlen</span>(v20);</span><br><span class="line">    sha256_data = (*env)-&gt;NewByteArray(env, v34);</span><br><span class="line">    (*env)-&gt;SetByteArrayRegion(env, sha256_data, <span class="number">0LL</span>, v34, v20);</span><br><span class="line">    v36 = digest(env, ALGORITHM_SHA256, sha256_data);</span><br><span class="line">    NewStringUTF = (*env)-&gt;NewStringUTF;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    NewStringUTF = v6-&gt;NewStringUTF;</span><br><span class="line">    v36 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> NewStringUTF(env, v36);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用了digest方法，是SHA256签名算法，参数是<code>sha256_data</code>，分析这个参数是怎么生成的</p>
<p>它是由<code>appid</code>，<code>svs</code>、<code>noncestr</code>、<code>timestamp</code>、<code>secret</code>、<code>url</code>、<code>body</code>这些内容拼接而成的</p>
<p>目前还有两个未知参数<code>appid</code>和<code>secret</code></p>
<h3 id="appid"><a href="#appid" class="headerlink" title="appid"></a>appid</h3><p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/16.jpg"></p>
<p>这里看到appid的值是<code>lpAppInfo</code>加上一个偏移，偏移与<code>isDebug</code>有关</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/18.jpg"></p>
<p>可以直接用frida直接打印内存中的数据</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/17.jpg"></p>
<p><code>isDebug</code>的值为0，所以<code>v21</code>的值为32</p>
<p>接下来打印<code>lpAppInfo</code>的值</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/19.jpg"></p>
<p><code>lpAppInfo</code>的值为<code>773f4e8b70</code>，<code>lpAppInfo</code>是个二级指针，加上偏移，打印它在内存中的数据</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/20.jpg"></p>
<p>还是指向一个地址，继续打印</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/21.jpg"></p>
<p>这里就得到appid的值为<code>38741001</code></p>
<h3 id="secret"><a href="#secret" class="headerlink" title="secret"></a>secret</h3><p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/22.jpg"></p>
<p>这里和<code>appid</code>参数一样，只需要修改偏移就可以打印<code>secret</code>的值</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/23.jpg"></p>
<p>继续打印</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/24.jpg"></p>
<p>这里得到<code>secret</code>的值为<code>04fdc5e4d9c7420e896ee92b17c68e9f</code></p>
<h3 id="hook-digest"><a href="#hook-digest" class="headerlink" title="hook digest"></a>hook digest</h3><p>参数分析完成了，接下来hook digest函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//Android8.0之后加载so通过android_dlopen_ext函数</span></span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="keyword">var</span> islibmx = <span class="literal">false</span>;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;libmx.so&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    islibmx = <span class="literal">true</span>;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="comment">//console.log(&quot;leave!&quot;);</span></span><br><span class="line">            <span class="keyword">if</span>(islibmx)&#123;</span><br><span class="line">                islibmx=<span class="literal">false</span>;</span><br><span class="line">                <span class="title function_">hook_digest</span>()</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_digest</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> digest_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libmx.so&quot;</span>,<span class="string">&quot;_Z6digestP7_JNIEnvPKcP11_jbyteArray&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr:&quot;</span>,digest_addr);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(digest_addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hooked&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args[1]:&quot;</span>,args[<span class="number">1</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args[2]:&quot;</span>,args[<span class="number">2</span>]);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval:&quot;</span>,retval.<span class="title function_">readCString</span>())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">hook_dlopen</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hooked</span><br><span class="line">args[1]: SHA256</span><br><span class="line">args[2]: 0x15</span><br><span class="line">retval: 580ef777f37fbb91dc13afa7cf6c2cd40db25286898f79af7ee4d707a2776a5b</span><br><span class="line">hooked</span><br><span class="line">args[1]: SHA256</span><br><span class="line">args[2]: 0x19</span><br><span class="line">retval: 06c3972159e698bec75632ecf9dd3e03ef47414f4cb22ec963effa10764a526e</span><br><span class="line">hooked</span><br><span class="line">args[1]: SHA256</span><br><span class="line">args[2]: 0x15</span><br><span class="line">retval: de46725478edde6cc051dcdab7d0cd762678999038fa010d7188e7340c530932</span><br><span class="line">hooked</span><br><span class="line">args[1]: SHA256</span><br><span class="line">args[2]: 0x15</span><br><span class="line">retval: b1eabf65340dd48a7e3d2855ffe38c4b21461f2a5688a7abbdfe970c30799ae2</span><br></pre></td></tr></table></figure>

<p>这里有些小疑惑，<code>args[2]</code>是加密的数据，应该是一个指针，指向一个字符串，而这里是一个数值</p>
<p>找到这个变量定义的地方，原来它的类型是<code>jbyteArray</code>类型，打印出来的值实际上是<code>jbyteArray</code>的句柄值。</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/25.jpg"></p>
<p>打印<code>jbyteArray</code>，我们可以调用如下方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jbyteArray2Array</span>(<span class="params">jbyteArray</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ret;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;[B&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> buffer = <span class="title class_">Java</span>.<span class="title function_">cast</span>(jbyteArray, b);</span><br><span class="line">        ret = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;byte&#x27;</span>, buffer);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加入到hook代码中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//Android8.0之后加载so通过android_dlopen_ext函数</span></span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="keyword">var</span> islibmx = <span class="literal">false</span>;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;libmx.so&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    islibmx = <span class="literal">true</span>;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="comment">//console.log(&quot;leave!&quot;);</span></span><br><span class="line">            <span class="keyword">if</span>(islibmx)&#123;</span><br><span class="line">                islibmx=<span class="literal">false</span>;</span><br><span class="line">                <span class="title function_">hook_digest</span>()</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_digest</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> digest_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libmx.so&quot;</span>,<span class="string">&quot;_Z6digestP7_JNIEnvPKcP11_jbyteArray&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr:&quot;</span>,digest_addr);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(digest_addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hooked&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args[1]:&quot;</span>,args[<span class="number">1</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="keyword">let</span> arrayStr = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="title function_">jbyteArray2Array</span>(args[<span class="number">2</span>]))</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args[2]&quot;</span>,arrayStr);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval:&quot;</span>,retval.<span class="title function_">readCString</span>())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">jbyteArray2Array</span>(<span class="params">jbyteArray</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ret;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;[B&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> buffer = <span class="title class_">Java</span>.<span class="title function_">cast</span>(jbyteArray, b);</span><br><span class="line">        ret = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;byte&#x27;</span>, buffer);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">hook_dlopen</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果如下</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hooked</span><br><span class="line">args[1]: SHA256</span><br><span class="line">args[2] appid=38741001&amp;svs=v3&amp;noncestr=52d7e0&amp;timestamp=1736841686&amp;secret=04fdc5e4d9c7420e896ee92b17c68e9f&amp;url=https://m.xiangdian.com/api/mshop/mshop-aggr-prod/outer/v1/material/create/createAuth?appid=38741001&amp;did=cf05095e7e5c4492023833c88e4701bd&amp;noncestr=52d7e0&amp;svs=v3&amp;timestamp=1736841686&amp;37a6259cc0c1dae299a7866489dff0bd</span><br><span class="line">retval: c8a8920fdb192fbff509a3fcc02a574387bba8387b3699c3b523f6b9a5f1a9bb</span><br><span class="line">hooked</span><br><span class="line">args[1]: SHA256</span><br><span class="line">args[2] appid=38741001&amp;svs=v3&amp;noncestr=dc5f62&amp;timestamp=1736841687&amp;secret=04fdc5e4d9c7420e896ee92b17c68e9f&amp;url=https://zuul.aikucun.com/appconfigmgt/api/v1/download/config?appid=38741001&amp;did=cf05095e7e5c4492023833c88e4701bd&amp;noncestr=dc5f62&amp;svs=v3&amp;timestamp=1736841687&amp;ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line">retval: 374c820993d895d427540bc5a0416a20c0813b0050f9f2d547b6557531b587e3</span><br><span class="line">hooked</span><br><span class="line">args[1]: SHA256</span><br><span class="line">args[2] appid=38741001&amp;svs=v3&amp;noncestr=0446f5&amp;timestamp=1736841688&amp;secret=04fdc5e4d9c7420e896ee92b17c68e9f&amp;url=https://zuul.aikucun.com/appconfigmgt/api/v1/download/config?appid=38741001&amp;did=cf05095e7e5c4492023833c88e4701bd&amp;noncestr=0446f5&amp;svs=v3&amp;timestamp=1736841688&amp;ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line">retval: cf733458b1142b469afbee61529ca5e37730c551ada13e8839cc390660c773db</span><br><span class="line">hooked</span><br><span class="line">args[1]: SHA256</span><br><span class="line">args[2] appid=38741001&amp;svs=v3&amp;noncestr=e8e90a&amp;timestamp=1736841688&amp;secret=04fdc5e4d9c7420e896ee92b17c68e9f&amp;url=https://zuul.aikucun.com/appconfigmgt/api/v1/download/config?appid=38741001&amp;did=cf05095e7e5c4492023833c88e4701bd&amp;noncestr=e8e90a&amp;svs=v3&amp;timestamp=1736841688&amp;ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line">retval: 8af4d51e17d8d8c1d9b3a0da22796ea52871bbeb27a630e74db97befce039814</span><br></pre></td></tr></table></figure>

<h1 id="参数还原"><a href="#参数还原" class="headerlink" title="参数还原"></a>参数还原</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_digest</span>(<span class="params">data</span>):</span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    result = md5.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://zuul.aikucun.com/appconfigmgt/api/v1/download/config&quot;</span></span><br><span class="line"></span><br><span class="line">body = <span class="string">&#x27;&#123;&quot;configKey&quot;:[&quot;versionUpdate&quot;],&quot;system&quot;:1,&quot;isShowUpdate&quot;:false,&quot;appId&quot;:&quot;com.aikucun.akapp&quot;,&quot;channel&quot;:&quot;2010&quot;,&quot;deviceModel&quot;:&quot;google-Pixel 3&quot;,&quot;buildCode&quot;:76302,&quot;version&quot;:&quot;7.63.2&quot;,&quot;userCode&quot;:&quot;&quot;,&quot;deviceBrand&quot;:&quot;Google&quot;&#125;&#x27;</span></span><br><span class="line">bodymd5 = md5_digest(body)</span><br><span class="line"></span><br><span class="line">uuid = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line">appid = <span class="string">&quot;38741001&quot;</span></span><br><span class="line">svs = <span class="string">&quot;v3&quot;</span></span><br><span class="line">noncestr = uuid[<span class="number">0</span>:<span class="number">6</span>]</span><br><span class="line">timestamp = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time()))</span><br><span class="line">secret = <span class="string">&quot;04fdc5e4d9c7420e896ee92b17c68e9f&quot;</span></span><br><span class="line">did = md5_digest(<span class="string">&quot;micker.cn&quot;</span>+uuid)</span><br><span class="line">cat_url = url+<span class="string">&quot;?&quot;</span>+<span class="string">&quot;appid=&quot;</span>+appid+<span class="string">&quot;&amp;did=&quot;</span>+did+<span class="string">&quot;&amp;noncestr=&quot;</span>+noncestr+<span class="string">&quot;&amp;svs=v3&quot;</span>+<span class="string">&quot;&amp;timestamp=&quot;</span>+timestamp+<span class="string">&quot;&amp;&quot;</span>+bodymd5</span><br><span class="line">sha256_str = <span class="string">&quot;appid=&quot;</span>+appid+<span class="string">&quot;&amp;svs=&quot;</span>+svs+<span class="string">&quot;&amp;noncestr=&quot;</span>+noncestr+<span class="string">&quot;&amp;timestamp=&quot;</span>+timestamp+<span class="string">&quot;&amp;secret=&quot;</span>+secret+<span class="string">&quot;&amp;url=&quot;</span>+cat_url</span><br><span class="line">sha256 = hashlib.sha256()</span><br><span class="line">sha256.update(sha256_str.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">sign = sha256.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(sha256_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">&quot;Auth-Token&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Pixel3 android 9 7.63.2 2.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;token&quot;</span>: <span class="string">&quot;477c33c6-2f38-4363-a670-314393b47c1b&quot;</span>,</span><br><span class="line">  <span class="string">&quot;AKC-MODEL&quot;</span>: <span class="string">&quot;Pixel3&quot;</span>,</span><br><span class="line">  <span class="string">&quot;AKC-OS&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">  <span class="string">&quot;AKC-OS-VERSION&quot;</span>: <span class="string">&quot;9&quot;</span>,</span><br><span class="line">  <span class="string">&quot;AKC-APP-VERSION&quot;</span>: <span class="string">&quot;7.63.2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;AKC-APP-API-VERSION&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;AKC-APP-BUILD-VERSION&quot;</span>: <span class="string">&quot;76302&quot;</span>,</span><br><span class="line">  <span class="string">&quot;AKC-DID&quot;</span>: <span class="string">&quot;bedf28c355443e1f695fad8bed68fb62&quot;</span>,</span><br><span class="line">  <span class="string">&quot;AKC-APP-CHANNEL&quot;</span>: <span class="string">&quot;2010&quot;</span>,</span><br><span class="line">  <span class="string">&quot;applicationId&quot;</span>: <span class="string">&quot;com.aikucun.akapp&quot;</span>,</span><br><span class="line">  <span class="string">&quot;x-auth-token&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;live-channel&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dtdToken&quot;</span>: <span class="string">&quot;6784f1da9Lvio98PqHQ7NhCTS4TB4ruXU4mwxoe3&quot;</span>,</span><br><span class="line">  <span class="string">&quot;app2H5Token&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;uid&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;subUid&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;APP-LOGIN-CHANNEL&quot;</span>: <span class="string">&quot;akcApp&quot;</span>,</span><br><span class="line">  <span class="string">&quot;app-request-id&quot;</span>: <span class="string">&quot;120883481161481b9ab275208092d108&quot;</span>,</span><br><span class="line">  <span class="string">&quot;PAGE-NAME&quot;</span>: <span class="string">&quot;%E7%99%BB%E5%BD%95&quot;</span>,</span><br><span class="line">  <span class="string">&quot;TRACKER-SESSION-ID&quot;</span>: <span class="string">&quot;0be8b952d15b980a&quot;</span>,</span><br><span class="line">  <span class="string">&quot;APP-USER-TYPE&quot;</span>: <span class="string">&quot;6&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json; charset=UTF-8&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;213&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;zuul.aikucun.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;Keep-Alive&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">  <span class="string">&quot;appid&quot;</span>: appid,</span><br><span class="line">  <span class="string">&quot;did&quot;</span>: did,</span><br><span class="line">  <span class="string">&quot;noncestr&quot;</span>: noncestr,</span><br><span class="line">  <span class="string">&quot;svs&quot;</span>: svs,</span><br><span class="line">  <span class="string">&quot;timestamp&quot;</span>: timestamp,</span><br><span class="line">  <span class="string">&quot;sign&quot;</span>: sign</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;configKey&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;versionUpdate&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;system&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;isShowUpdate&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">  <span class="string">&quot;appId&quot;</span>: <span class="string">&quot;com.aikucun.akapp&quot;</span>,</span><br><span class="line">  <span class="string">&quot;channel&quot;</span>: <span class="string">&quot;2010&quot;</span>,</span><br><span class="line">  <span class="string">&quot;deviceModel&quot;</span>: <span class="string">&quot;google-Pixel 3&quot;</span>,</span><br><span class="line">  <span class="string">&quot;buildCode&quot;</span>: <span class="number">76302</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;7.63.2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;userCode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;deviceBrand&quot;</span>: <span class="string">&quot;Google&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url=url,headers=headers,params=params,json=data)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">appid=<span class="number">38741001</span>&amp;svs=v3&amp;noncestr=ade8eb&amp;timestamp=<span class="number">1736844173</span>&amp;secret=04fdc5e4d9c7420e896ee92b17c68e9f&amp;url=https://zuul.aikucun.com/appconfigmgt/api/v1/download/config?appid=<span class="number">38741001</span>&amp;did=eb3be18635dec1ae73f3a0b86e81c982&amp;noncestr=ade8eb&amp;svs=v3&amp;timestamp=<span class="number">1736844173</span>&amp;ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line"><span class="number">200</span></span><br><span class="line">&#123;<span class="string">&quot;code&quot;</span>:<span class="number">200</span>,<span class="string">&quot;data&quot;</span>:&#123;&#125;,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;success&quot;</span>,<span class="string">&quot;status&quot;</span>:<span class="string">&quot;success&quot;</span>,<span class="string">&quot;success&quot;</span>:true&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>爱库存</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转Python</title>
    <url>/2024/12/05/%E7%8E%A9%E8%BD%ACPython/</url>
    <content><![CDATA[<h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p>需要配置的环境变量是python的安装路径和它的Scripts目录。<br><img src="/2024/12/05/%E7%8E%A9%E8%BD%ACPython/1.jpg"><br>python的安装路径下有python.exe。<br>Scripts目录下有pip.exe和我们安装的第三方库。</p>
<h1 id="python-exe"><a href="#python-exe" class="headerlink" title="python.exe"></a>python.exe</h1><h2 id="HTTP服务器"><a href="#HTTP服务器" class="headerlink" title="HTTP服务器"></a>HTTP服务器</h2><p>命令行运行<code>python -m http.server [port]</code>，创建http服务器，默认端口是8000。</p>
<h1 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h1><p>使用<code>virtualenv</code>来创建虚拟环境。  </p>
<h2 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure>
<h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">virtualenv &lt;envName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;envName&gt;是我们给虚拟环境起的名字</span></span><br></pre></td></tr></table></figure>
<p>会在当前目录下创建一个文件夹，里面包含了Python解释器的副本和一套标准库。  </p>
<h2 id="激活虚拟机环境"><a href="#激活虚拟机环境" class="headerlink" title="激活虚拟机环境"></a>激活虚拟机环境</h2><p>在虚拟环境目录下的Scripts目录里，有一个activate.exe，运行它，虚拟环境就生效了。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">activate</span><br></pre></td></tr></table></figure>
<p>激活虚拟环境后，你会看到命令行提示符前出现环境名称，表明当前是在该虚拟环境中操作。</p>
<h2 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h2><p>执行<code>deactivate</code>退出虚拟环境。</p>
<h1 id="pip-exe"><a href="#pip-exe" class="headerlink" title="pip.exe"></a>pip.exe</h1><h2 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install xxx</span><br></pre></td></tr></table></figure>

<h2 id="卸载第三方库"><a href="#卸载第三方库" class="headerlink" title="卸载第三方库"></a>卸载第三方库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip uninstall xxx</span><br></pre></td></tr></table></figure>

<h2 id="更新pip"><a href="#更新pip" class="headerlink" title="更新pip"></a>更新pip</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<h2 id="freeze"><a href="#freeze" class="headerlink" title="freeze"></a>freeze</h2><p>列出当前Python环境中已经安装的所有包及其版本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip freeze</span><br></pre></td></tr></table></figure>

<p><strong>生成依赖文件</strong></p>
<p>将信息输出保存到一个文件里。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>

<p><strong>安装依赖</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>玩转Python</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转Windows</title>
    <url>/2024/12/01/%E7%8E%A9%E8%BD%ACWindows/</url>
    <content><![CDATA[<h1 id="新机跳过联网"><a href="#新机跳过联网" class="headerlink" title="新机跳过联网"></a>新机跳过联网</h1><p>在连接网络的界面输入<code>Shift+F10</code>打开命令行，然后输入<code>oobe\bypassnro</code>然后会重启，重启后，在联网的界面会出现跳过的选项。</p>
<h1 id="关于编码"><a href="#关于编码" class="headerlink" title="关于编码"></a>关于编码</h1><p>在中国大陆Windows使用的编码是GBK编码。</p>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><h2 id="Win-R"><a href="#Win-R" class="headerlink" title="Win+R"></a>Win+R</h2><p>打开”运行”对话框</p>
<h2 id="Win-I"><a href="#Win-I" class="headerlink" title="Win+I"></a>Win+I</h2><p>打开设置</p>
<h2 id="Win-D"><a href="#Win-D" class="headerlink" title="Win+D"></a>Win+D</h2><p>最小化所有的打开的窗口，显示桌面。</p>
<p>再次按下可恢复之前最小化的所有窗口。</p>
<h2 id="Win-E"><a href="#Win-E" class="headerlink" title="Win+E"></a>Win+E</h2><p>打开文件资源管理器。</p>
<h2 id="Win-Tab"><a href="#Win-Tab" class="headerlink" title="Win+Tab"></a>Win+Tab</h2><p>打开任务视图</p>
<h2 id="Win-X"><a href="#Win-X" class="headerlink" title="Win+X"></a>Win+X</h2><p>打开高级用户菜单</p>
<h2 id="WIn-V"><a href="#WIn-V" class="headerlink" title="WIn+V"></a>WIn+V</h2><p>打开剪贴板</p>
<h1 id="Ctrl-Shift-Esc或Ctrl-Alt-Delete"><a href="#Ctrl-Shift-Esc或Ctrl-Alt-Delete" class="headerlink" title="Ctrl+Shift+Esc或Ctrl+Alt+Delete"></a>Ctrl+Shift+Esc或Ctrl+Alt+Delete</h1><p>打开任务管理器</p>
<h1 id="“运行”对话框"><a href="#“运行”对话框" class="headerlink" title="“运行”对话框"></a>“运行”对话框</h1><p>通过按下Win（Windows徽标键）和R键的组合来快速打开运行对话框，然后输入特定的命令或程序路径来运行程序或打开文件。</p>
<ul>
<li><p><code>cmd</code><br>终端</p>
</li>
<li><p><code>winver</code><br>查看系统版本</p>
</li>
<li><p><code>control</code><br>控制面板</p>
</li>
<li><p><code>calc</code><br>计算器</p>
</li>
<li><p><code>mspaint</code></p>
<p>画图工具</p>
</li>
<li><p><code>devmgmt.msc</code></p>
<p>设备管理器</p>
</li>
</ul>
<h1 id="Terminal（终端）"><a href="#Terminal（终端）" class="headerlink" title="Terminal（终端）"></a>Terminal（终端）</h1><h2 id="关机命令"><a href="#关机命令" class="headerlink" title="关机命令"></a>关机命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown /s 		#关机</span><br><span class="line"></span><br><span class="line">shutdown /r			#重启</span><br><span class="line"></span><br><span class="line">shutdown /s /t &lt;second&gt;	# 延迟关机</span><br><span class="line"></span><br><span class="line">shutdown /a 		#取消关机</span><br><span class="line"></span><br><span class="line">shutdown /s /f		#强制关机</span><br><span class="line"></span><br><span class="line">shutdown /l			#注销</span><br></pre></td></tr></table></figure>

<h2 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvidia-smi</span><br><span class="line">// 查看 GPU 的详细信息，包括利用率、温度、显存占用、运行中的进程等。</span><br></pre></td></tr></table></figure>



<h1 id="控制面板"><a href="#控制面板" class="headerlink" title="控制面板"></a>控制面板</h1><h2 id="默认程序"><a href="#默认程序" class="headerlink" title="默认程序"></a>默认程序</h2><p>可在这里更改默认程序。</p>
<h2 id="程序和功能"><a href="#程序和功能" class="headerlink" title="程序和功能"></a>程序和功能</h2><p>查看、修改或卸载已安装的程序。</p>
<h2 id="设备管理器"><a href="#设备管理器" class="headerlink" title="设备管理器"></a>设备管理器</h2><p>管理计算机硬件设备。</p>
<h1 id="Windows原生个性化"><a href="#Windows原生个性化" class="headerlink" title="Windows原生个性化"></a>Windows原生个性化</h1><p>右键桌面选择个性化或者在设置里找到个性化</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>这个地方可以设置图片的适应模式</p>
<h3 id="纯色"><a href="#纯色" class="headerlink" title="纯色"></a>纯色</h3><p>可以选择纯色背景，自定义颜色</p>
<h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><ul>
<li>可以选择Windows和应用中显示的颜色模式，深色和浅色。</li>
<li>设置透明效果。</li>
<li>设置主题颜色。</li>
</ul>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>选择主题以及获取下载主题。</p>
<h2 id="文本输入"><a href="#文本输入" class="headerlink" title="文本输入"></a>文本输入</h2><p>可以为输入法编辑器选择主题。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>可以设置开始菜单的布局以及其他相关设置。</p>
<h2 id="任务栏"><a href="#任务栏" class="headerlink" title="任务栏"></a>任务栏</h2><ul>
<li>设置搜索框样式。</li>
<li>可以隐藏任务栏不常用的按钮。</li>
<li>可以设置任务栏的行为</li>
</ul>
<h2 id="桌面操作"><a href="#桌面操作" class="headerlink" title="桌面操作"></a>桌面操作</h2><p>右键桌面选择查看可以设置桌面图标样式。</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>玩转Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>瑞幸白盒AES</title>
    <url>/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.lucky.luckyclient</p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/1.jpg"></p>
<h1 id="过检测"><a href="#过检测" class="headerlink" title="过检测"></a>过检测</h1><h2 id="root检测"><a href="#root检测" class="headerlink" title="root检测"></a>root检测</h2><p>使用狐妖面具隐藏</p>
<h2 id="frida检测"><a href="#frida检测" class="headerlink" title="frida检测"></a>frida检测</h2><p>使用小工具绕过</p>
<h2 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h2><p>使用脱壳网站进行脱壳</p>
<p><a href="https://56.al/">56.al</a></p>
<h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/2.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url:</span><br><span class="line">https://capi.lkcoffee.com/resource/m/sys/base/validcode</span><br><span class="line"></span><br><span class="line">headers:</span><br><span class="line">x-lk-akv	5260</span><br><span class="line">x-lk-mid	</span><br><span class="line">x-lk-sid	</span><br><span class="line">event_id	1741678678079</span><br><span class="line">x-lk-csid	08065795-7d98-4363-9c02-30d73c9f252e</span><br><span class="line">sentry-trace	2ea1d59760394ecd9ea18fab48820ffb-a39c080332b849f9-1</span><br><span class="line">baggage	sentry-environment=release,sentry-public_key=d4365939f7c346a4b0c6ee50a412c050,sentry-release=com.lucky.luckyclient%405.2.60%2B200,sentry-sample_rate=1,sentry-trace_id=2ea1d59760394ecd9ea18fab48820ffb,sentry-transaction=LoginActivity.tvReqAuthCode</span><br><span class="line">content-type	application/x-www-form-urlencoded</span><br><span class="line">content-length	228</span><br><span class="line">accept-encoding	gzip</span><br><span class="line">cookie	uid=</span><br><span class="line">user-agent	okhttp/4.9.3</span><br><span class="line"></span><br><span class="line">form:</span><br><span class="line">sign	7979560225808340751212263377520956346</span><br><span class="line">q	DURM6YZm8EJjngxNSvqLuaCpyTbBaQ1RNCfPIJl6_JATi85kT_JO5bo-nYuFGfCYknf1KQDtj0IXDItKNgs2ehphXU_Y0FeSA9JBPnZAggLlJK1fwwruC4J8vDz17ovkHjqEZp7bh3iAQYZY22P_NQ==</span><br><span class="line">t	1741680800108</span><br><span class="line">cid	210101</span><br></pre></td></tr></table></figure>

<p><strong>又抓了个登录包</strong></p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/3.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url:</span><br><span class="line">https://capi.lkcoffee.com/resource/m/user/login</span><br><span class="line"></span><br><span class="line">headers:</span><br><span class="line">x-lk-akv	5260</span><br><span class="line">x-lk-mid	</span><br><span class="line">x-lk-sid	</span><br><span class="line">event_id	1741678678079</span><br><span class="line">x-lk-csid	08065795-7d98-4363-9c02-30d73c9f252e</span><br><span class="line">sentry-trace	7a99181659144d6fb9c42a30c0da15af-c53cfa10e78b4b98-1</span><br><span class="line">baggage	sentry-environment=release,sentry-public_key=d4365939f7c346a4b0c6ee50a412c050,sentry-release=com.lucky.luckyclient%405.2.60%2B200,sentry-sample_rate=1,sentry-trace_id=7a99181659144d6fb9c42a30c0da15af,sentry-transaction=LoginActivity.btnConfirm</span><br><span class="line">content-type	application/x-www-form-urlencoded</span><br><span class="line">content-length	685</span><br><span class="line">accept-encoding	gzip</span><br><span class="line">cookie	uid=e208b39d-8f40-4e93-ab22-430698abc6821741681516422</span><br><span class="line">user-agent	okhttp/4.9.3</span><br><span class="line"></span><br><span class="line">form:</span><br><span class="line">sign	5893325431374183456150891639716307865</span><br><span class="line">q	mOD2mwoFGDWinNSdsn9lI0tvoAQhA0e3_boidwfb61WKbU4LjgnSja-3Ynxdslq_rNFXWN49AcmYjkCEqBG7TCjDzT556tyHhu6wVtv1Kr-QAaK-RRvpSO0nqled_vXMwxgpjUWE2FvF-FfUZNfY8dVfEt7SpOlNsfiKHCWxwPOII5xpWmt4WZawpkq3dPnS5AP3ncMj8MctnB6Z2o2Wu9_s2BEfhweLyBoV8eYgVet8hvp2m_UfiZifKR3_FwD3q6x-iVVECbSjGYXyk-1JaYpcQUQZv8PMLtHfQ7CsfKCtkMlFETWuGNTNDy4kmiAjrFFDGen8D8yJ4-2rJAzsTzRsQI2hI1nvLcPKdoeObzl-C9-kLugMoKrecLKjIKtM0cwbqeGaSuo6F87GTbhmgh2lY85Jbc521efoup-KhMeHzApRp0TaofSDkO_ykmYiN_GsIr77RpT7tTu3a84FV-GfkjX_LgWbZhnPwFyx5boJ41xq7gZLF92ejvlFou4I6vKIfxxYn4-4e96gbbgW9eUepOub_ThVPyIGgrx_KVc=</span><br><span class="line">uid	e208b39d-8f40-4e93-ab22-430698abc6821741681516422</span><br><span class="line">t	1741681608374</span><br><span class="line">cid	210101</span><br><span class="line"></span><br><span class="line">response:</span><br><span class="line">vaTaFF5L8jW_LFnfCuwtZGulP6wG3s-O__HUjYaf8swfjrR3WG3qoYY5X8Gk_nN52wNx5lYRD4GsXuZWopXQ-SxeK58cf_zVpelAhEpcD_zuavE12lvsriUjHspxgNszHjcK9XTN3jT3S6xNKM8nqbadCDGMS1RQJAc5GTiNyBAqgx6y-P0CNYjDfc5iGXVuwIUBR3WoxJM1Yyfdvk8pvALlMMkF-ja2j63TioNTyKaBrCFJtDbYhQROjKSF7tjk6MQVbFyhHocTm7wBl54h4JzbhdatBO2wRaaym9fYUygUqaZTvhMxF11CWw1sPk5a</span><br></pre></td></tr></table></figure>

<p>请求参数<code>sign</code>，<code>q</code>，响应体都是加密的</p>
<p>又抓了个包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">utl:</span><br><span class="line">https://capi.lkcoffee.com/resource/m/user/login</span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line">  &quot;:authority&quot;: &quot;capi.lkcoffee.com&quot;,</span><br><span class="line">  &quot;:method&quot;: &quot;POST&quot;,</span><br><span class="line">  &quot;:path&quot;: &quot;/resource/m/user/login&quot;,</span><br><span class="line">  &quot;:scheme&quot;: &quot;https&quot;,</span><br><span class="line">  &quot;x-lk-akv&quot;: &quot;5265&quot;,</span><br><span class="line">  &quot;x-lk-mid&quot;: &quot;&quot;,</span><br><span class="line">  &quot;x-lk-sid&quot;: &quot;&quot;,</span><br><span class="line">  &quot;event_id&quot;: &quot;1741773373890&quot;,</span><br><span class="line">  &quot;x-lk-csid&quot;: &quot;b23ee6cb-c0f2-4e43-9580-727ce47f7b73&quot;,</span><br><span class="line">  &quot;sentry-trace&quot;: &quot;5d4028a1977c401da7dc5299c9fe942f-11ad2f67d12f4343-0&quot;,</span><br><span class="line">  &quot;baggage&quot;: &quot;sentry-environment=release,sentry-public_key=d4365939f7c346a4b0c6ee50a412c050,sentry-release=com.lucky.luckyclient%405.2.65%2B201,sentry-sample_rate=0,sentry-trace_id=5d4028a1977c401da7dc5299c9fe942f,sentry-transaction=LoginActivity.btnConfirm&quot;,</span><br><span class="line">  &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;,</span><br><span class="line">  &quot;content-length&quot;: &quot;684&quot;,</span><br><span class="line">  &quot;accept-encoding&quot;: &quot;gzip&quot;,</span><br><span class="line">  &quot;cookie&quot;: &quot;uid=ede6c26f-85eb-4f41-b103-051605ae1c821741773364713&quot;,</span><br><span class="line">  &quot;user-agent&quot;: &quot;okhttp/4.9.3&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body=&#123;</span><br><span class="line">  &quot;sign&quot;: &quot;7964953862091852252935269275418960748&quot;,</span><br><span class="line">  &quot;q&quot;: &quot;-YqmJeyS17YrIsczlOeETZzPH0DbB-Hyhw09ZJUl9kZ4SZ_KkVh07uBqj8ejykTw1bl02vu1dt67BbIKA-1FqlTuFGh8VoJemyEkmhqnf6w9u98dKvCdpFPDiRktU-PGDtnD9Y8rBYgBHuPyfnMR15jTMaF0HV4SMw6qU_S_3p771jHSE9Kl8Yx6zKgkBv71qLhQP68VNsifnmQFbtEBdQt5hK1-9WLGzrhB1jLiL1EJTtmqGymT21ymquQHXcDudPQ7clgzz0Xzjt_NO-L5mbbklzohRwsDO0eQtHxD58zL6QlQoWsRTqvlVMkUz2wSNPsApVb2hq30D4x9RSvDE3sKJBGAzFqDG_XwE6yoojDNPn2wH0H0o3-wtCso0hRJXlvPTHz_zMYdTcMNKTwccWgu0mmbH5NKcVCxrZ6R2MeCfUb8ACp7PKjZeAecaHq_REu3Kkoi3xXPPK_MU_eLl5A1MFw_d7azTSHHUFmL3RdiC15vvA1bajH1NDbLEAxMV8nUOJVfuWxXDGS0Diknyj0V95At_KBG4y7Ylo-4fv4=&quot;,</span><br><span class="line">  &quot;uid&quot;: &quot;ede6c26f-85eb-4f41-b103-051605ae1c821741773364713&quot;,</span><br><span class="line">  &quot;t&quot;: &quot;1741773407429&quot;,</span><br><span class="line">  &quot;cid&quot;: &quot;210101&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><p>jadx打开脱壳后的dex</p>
<p>Java通过System.load()和System.loadLibrary()来加载动态库，直接搜索<code>System.loadLibrary</code></p>
<p>发现一个可疑类</p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/4.jpg"></p>
<p>双击进去看到so的名字是加密的，还有四个native方法和三个用于加解密的方法</p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/5.jpg"></p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/6.jpg"></p>
<p>主动调用getString2()方法来解密so名字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">call_getString2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">StubApp</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.stub.StubApp&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> soName = <span class="title class_">StubApp</span>.<span class="title function_">getString2</span>(<span class="string">&quot;32264&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;so:&quot;</span>,soName);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用了，但是输出结果是乱码</p>
<p>用hook_RegisterNatives打印动态注册函数及其所在的so</p>
<p>然后找到了<code>libcryptoDD.so</code></p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/7.jpg"></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>看了源码这几个native方法中只有<code>localAESWork</code>和<code>md5_crypt</code>被调用了</p>
<p>猜测sign是由<code>md5_crypt</code>生成的</p>
<p><code>q</code>和响应体是由<code>localAESWork</code>生成的</p>
<p>接下来对<code>localAESWork</code>、<code>md5_crypt</code>、<code>a</code>、<code>b</code>、<code>c</code>进行hook</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bArrToString</span>(<span class="params">bArr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(bArr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_localAESWork</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">CryptoHelper</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.luckincoffee.safeboxlib.CryptoHelper&quot;</span>);</span><br><span class="line">        <span class="title class_">CryptoHelper</span>[<span class="string">&quot;localAESWork&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">bArr, i10, bArr2</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CryptoHelper.localAESWork is called!`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bArr=<span class="subst">$&#123;bArr&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bArr=<span class="subst">$&#123;bArrToString(bArr)&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`i10=<span class="subst">$&#123;i10&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bArr2=<span class="subst">$&#123;bArr2&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bArr2=<span class="subst">$&#123;bArrToString(bArr2)&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;localAESWork&quot;</span>](bArr, i10, bArr2);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CryptoHelper.localAESWork result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CryptoHelper.localAESWork result=<span class="subst">$&#123;bArrToString(result)&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_localAESWork</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_md5_crypt</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">CryptoHelper</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.luckincoffee.safeboxlib.CryptoHelper&quot;</span>);</span><br><span class="line">        <span class="title class_">CryptoHelper</span>[<span class="string">&quot;md5_crypt&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">bArr, i10, bArr2</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CryptoHelper.md5_crypt is called!`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bArr=<span class="subst">$&#123;bArr&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bArr=<span class="subst">$&#123;bArrToString(bArr)&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`i10=<span class="subst">$&#123;i10&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bArr2=<span class="subst">$&#123;bArr2&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bArr2=<span class="subst">$&#123;bArrToString(bArr2)&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;md5_crypt&quot;</span>](bArr, i10, bArr2);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CryptoHelper.md5_crypt result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CryptoHelper.md5_crypt result=<span class="subst">$&#123;bArrToString(result)&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_md5_crypt</span>()</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CryptoHelper.md5_crypt is called!</span><br><span class="line">bArr=99,105,100,61,50,49,48,49,48,49,59,113,61,88,122,48,82,56,50,102,83,52,56,53,98,50,51,98,97,56,49,55,101,52,74,122,80,72,48,68,98,66,45,72,121,104,119,48,57,90,74,85,108,57,107,90,52,83,90,95,75,107,86,104,48,55,117,66,113,106,56,101,106,121,107,84,119,49,98,108,48,50,118,117,49,100,116,54,55,66,98,73,75,65,45,49,70,113,108,84,117,70,71,104,56,86,111,74,101,109,121,69,107,109,104,113,110,102,54,119,57,117,57,56,100,75,118,67,100,112,70,80,68,105,82,107,116,85,45,80,71,68,116,110,68,57,89,56,114,66,89,103,66,72,117,80,121,102,110,77,82,49,53,106,84,77,97,70,48,72,86,52,83,77,119,54,113,85,95,83,95,51,112,55,55,49,106,72,83,69,57,75,108,56,89,120,54,122,75,103,107,66,118,55,49,113,76,104,81,80,54,56,86,78,115,105,102,110,109,81,70,98,116,69,66,100,81,116,53,104,75,49,45,57,87,76,71,122,114,104,66,49,106,76,105,76,49,69,74,84,116,109,113,71,121,109,84,50,49,121,109,113,117,81,72,88,99,68,117,107,45,121,81,81,79,69,86,81,104,77,118,78,56,112,95,100,69,107,68,50,51,88,54,110,68,86,110,116,84,51,70,84,67,57,48,100,109,77,73,116,80,68,76,54,81,108,81,111,87,115,82,84,113,118,108,86,77,107,85,122,50,119,83,78,80,115,65,112,86,98,50,104,113,51,48,68,52,120,57,82,83,118,68,69,51,115,75,74,66,71,65,122,70,113,68,71,95,88,119,69,54,121,111,111,106,68,78,80,110,50,119,72,48,72,48,111,51,45,119,116,67,115,111,48,104,82,74,88,108,118,80,84,72,122,95,122,77,89,100,84,99,77,78,75,84,119,99,99,87,103,117,48,109,109,98,72,53,78,75,99,86,67,120,114,90,54,82,50,77,101,67,102,85,98,56,65,67,112,55,80,75,106,90,101,65,101,99,97,72,113,95,82,69,117,51,75,107,111,105,51,120,88,80,80,75,95,77,85,95,101,76,108,53,65,49,77,70,119,95,100,55,97,122,84,83,72,72,85,70,109,76,51,82,100,105,67,49,53,118,118,65,49,98,97,106,72,49,78,68,98,76,69,65,120,77,86,56,110,85,79,74,86,102,117,87,120,88,68,71,83,48,68,105,107,110,121,106,48,86,57,53,65,116,95,75,66,71,52,121,55,89,108,111,45,52,102,118,52,61,59,116,61,49,55,52,49,54,57,57,53,50,52,55,56,57,59,117,105,100,61,49,102,48,48,56,48,102,56,45,50,51,56,102,45,52,56,51,97,45,98,101,48,52,45,57,97,55,101,50,99,97,52,99,48,101,54,49,55,52,49,54,56,56,52,49,51,55,57,49</span><br><span class="line">bArr=cid=210101;q=Xz0R82fS485b23ba817e4JzPH0DbB-Hyhw09ZJUl9kZ4SZ_KkVh07uBqj8ejykTw1bl02vu1dt67BbIKA-1FqlTuFGh8VoJemyEkmhqnf6w9u98dKvCdpFPDiRktU-PGDtnD9Y8rBYgBHuPyfnMR15jTMaF0HV4SMw6qU_S_3p771jHSE9Kl8Yx6zKgkBv71qLhQP68VNsifnmQFbtEBdQt5hK1-9WLGzrhB1jLiL1EJTtmqGymT21ymquQHXcDuk-yQQOEVQhMvN8p_dEkD23X6nDVntT3FTC90dmMItPDL6QlQoWsRTqvlVMkUz2wSNPsApVb2hq30D4x9RSvDE3sKJBGAzFqDG_XwE6yoojDNPn2wH0H0o3-wtCso0hRJXlvPTHz_zMYdTcMNKTwccWgu0mmbH5NKcVCxrZ6R2MeCfUb8ACp7PKjZeAecaHq_REu3Kkoi3xXPPK_MU_eLl5A1MFw_d7azTSHHUFmL3RdiC15vvA1bajH1NDbLEAxMV8nUOJVfuWxXDGS0Diknyj0V95At_KBG4y7Ylo-4fv4=;t=1741699524789;uid=1f0080f8-238f-483a-be04-9a7e2ca4c0e61741688413791</span><br><span class="line">i10=1</span><br><span class="line">bArr2=-87,-114,-67,121,108,-104,-58,66,-48,15,40,31,112,-58,-81,116,73,9,-6,80,-38,87,98,16,114,-89,108,124,97,-82,52,59</span><br><span class="line">bArr2=���yl��B�(pƯtI   �P�Wbr�l|a�4;</span><br><span class="line">CryptoHelper.md5_crypt</span><br><span class="line">result=49,53,55,50,54,49,52,51,49,49,53,50,55,54,56,53,54,49,50,53,53,52,48,48,53,56,51,49,49,52,49,55,49,51,48,53,53,50</span><br><span class="line">CryptoHelper.md5_crypt result=15726143115276856125540058311417130552</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bArrToString</span>(<span class="params">bArr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(bArr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_localAESWork</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">CryptoHelper</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.luckincoffee.safeboxlib.CryptoHelper&quot;</span>);</span><br><span class="line">        <span class="title class_">CryptoHelper</span>[<span class="string">&quot;localAESWork&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">bArr, i10, bArr2</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CryptoHelper.localAESWork is called!`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bArr=<span class="subst">$&#123;bArr&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bArr=<span class="subst">$&#123;bArrToString(bArr)&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`i10=<span class="subst">$&#123;i10&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bArr2=<span class="subst">$&#123;bArr2&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bArr2=<span class="subst">$&#123;bArrToString(bArr2)&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;localAESWork&quot;</span>](bArr, i10, bArr2);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CryptoHelper.localAESWork result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CryptoHelper.localAESWork result=<span class="subst">$&#123;bArrToString(result)&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_localAESWork</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_md5_crypt</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">CryptoHelper</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.luckincoffee.safeboxlib.CryptoHelper&quot;</span>);</span><br><span class="line">        <span class="title class_">CryptoHelper</span>[<span class="string">&quot;md5_crypt&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">bArr, i10, bArr2</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CryptoHelper.md5_crypt is called!`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bArr=<span class="subst">$&#123;bArr&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bArr=<span class="subst">$&#123;bArrToString(bArr)&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`i10=<span class="subst">$&#123;i10&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bArr2=<span class="subst">$&#123;bArr2&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`bArr2=<span class="subst">$&#123;bArrToString(bArr2)&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;md5_crypt&quot;</span>](bArr, i10, bArr2);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CryptoHelper.md5_crypt result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CryptoHelper.md5_crypt result=<span class="subst">$&#123;bArrToString(result)&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_md5_crypt</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">CryptoHelper</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.luckincoffee.safeboxlib.CryptoHelper&quot;</span>);</span><br><span class="line">        <span class="title class_">CryptoHelper</span>[<span class="string">&quot;a&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">str, i10</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CryptoHelper.a is called: str=<span class="subst">$&#123;str&#125;</span>, i10=<span class="subst">$&#123;i10&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;a&quot;</span>](str, i10);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CryptoHelper.a result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_a</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_b</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">CryptoHelper</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.luckincoffee.safeboxlib.CryptoHelper&quot;</span>);</span><br><span class="line">        <span class="title class_">CryptoHelper</span>[<span class="string">&quot;b&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CryptoHelper.b is called: str=<span class="subst">$&#123;str&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;b&quot;</span>](str);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CryptoHelper.b result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_b</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_c</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">CryptoHelper</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.luckincoffee.safeboxlib.CryptoHelper&quot;</span>);</span><br><span class="line">        <span class="title class_">CryptoHelper</span>[<span class="string">&quot;c&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CryptoHelper.c is called: str=<span class="subst">$&#123;str&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;c&quot;</span>](str);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CryptoHelper.c result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_c</span>()</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CryptoHelper.c is called: str=&#123;&quot;mobile&quot;:&quot;17888888888&quot;,&quot;countryNo&quot;:&quot;86&quot;,&quot;validateCode&quot;:&quot;123456&quot;,&quot;appversion&quot;:&quot;5265&quot;,&quot;type&quot;:1,&quot;deviceId&quot;:&quot;android_lucky_ef5722c5-96ff-4521-8096-27530a0365b2&quot;,&quot;systemVersion&quot;:&quot;29&quot;,&quot;blackBox&quot;:&quot;oGPHE1741688414xYaSQkj72m7&quot;,&quot;uniqueCode&quot;:&quot;DUQKlOhFPQSnh57_KB6erjHdTADHhPk26j60RFVRS2xPaEZQUVNuaDU3X0tCNmVyakhkVEFESGhQazI2ajYwc2h1&quot;,&quot;regionId&quot;:&quot;CO0001&quot;,&quot;regId&quot;:&quot;&quot;,&quot;deviceBrand&quot;:&quot;google&quot;,&quot;isSecurityVerify&quot;:false&#125;</span><br><span class="line">CryptoHelper.c result=Xz0R82fS485b23ba817e4JzPH0DbB-Hyhw09ZJUl9kZ4SZ_KkVh07uBqj8ejykTw1bl02vu1dt67BbIKA-1FqlTuFGh8VoJemyEkmhqnf6w9u98dKvCdpFPDiRktU-PGDtnD9Y8rBYgBHuPyfnMR15jTMaF0HV4SMw6qU_S_3p771jHSE9Kl8Yx6zKgkBv71qLhQP68VNsifnmQFbtEBdQt5hK1-9WLGzrhB1jLiL1EJTtmqGymT21ymquQHXcDuk-yQQOEVQhMvN8p_dEkD23X6nDVntT3FTC90dmMItPDL6QlQoWsRTqvlVMkUz2wSNPsApVb2hq30D4x9RSvDE3sKJBGAzFqDG_XwE6yoojDNPn2wH0H0o3-wtCso0hRJXlvPTHz_zMYdTcMNKTwccWgu0mmbH5NKcVCxrZ6R2MeCfUb8ACp7PKjZeAecaHq_REu3Kkoi3xXPPK_MU_eLl5A1MFw_d7azTSHHUFmL3RdiC15vvA1bajH1NDbLEAxMV8nUOJVfuWxXDGS0Diknyj0V95At_KBG4y7Ylo-4fv4=</span><br><span class="line">CryptoHelper.md5_crypt is called!</span><br><span class="line">bArr=99,105,100,61,50,49,48,49,48,49,59,113,61,88,122,48,82,56,50,102,83,52,56,53,98,50,51,98,97,56,49,55,101,52,74,122,80,72,48,68,98,66,45,72,121,104,119,48,57,90,74,85,108,57,107,90,52,83,90,95,75,107,86,104,48,55,117,66,113,106,56,101,106,121,107,84,119,49,98,108,48,50,118,117,49,100,116,54,55,66,98,73,75,65,45,49,70,113,108,84,117,70,71,104,56,86,111,74,101,109,121,69,107,109,104,113,110,102,54,119,57,117,57,56,100,75,118,67,100,112,70,80,68,105,82,107,116,85,45,80,71,68,116,110,68,57,89,56,114,66,89,103,66,72,117,80,121,102,110,77,82,49,53,106,84,77,97,70,48,72,86,52,83,77,119,54,113,85,95,83,95,51,112,55,55,49,106,72,83,69,57,75,108,56,89,120,54,122,75,103,107,66,118,55,49,113,76,104,81,80,54,56,86,78,115,105,102,110,109,81,70,98,116,69,66,100,81,116,53,104,75,49,45,57,87,76,71,122,114,104,66,49,106,76,105,76,49,69,74,84,116,109,113,71,121,109,84,50,49,121,109,113,117,81,72,88,99,68,117,107,45,121,81,81,79,69,86,81,104,77,118,78,56,112,95,100,69,107,68,50,51,88,54,110,68,86,110,116,84,51,70,84,67,57,48,100,109,77,73,116,80,68,76,54,81,108,81,111,87,115,82,84,113,118,108,86,77,107,85,122,50,119,83,78,80,115,65,112,86,98,50,104,113,51,48,68,52,120,57,82,83,118,68,69,51,115,75,74,66,71,65,122,70,113,68,71,95,88,119,69,54,121,111,111,106,68,78,80,110,50,119,72,48,72,48,111,51,45,119,116,67,115,111,48,104,82,74,88,108,118,80,84,72,122,95,122,77,89,100,84,99,77,78,75,84,119,99,99,87,103,117,48,109,109,98,72,53,78,75,99,86,67,120,114,90,54,82,50,77,101,67,102,85,98,56,65,67,112,55,80,75,106,90,101,65,101,99,97,72,113,95,82,69,117,51,75,107,111,105,51,120,88,80,80,75,95,77,85,95,101,76,108,53,65,49,77,70,119,95,100,55,97,122,84,83,72,72,85,70,109,76,51,82,100,105,67,49,53,118,118,65,49,98,97,106,72,49,78,68,98,76,69,65,120,77,86,56,110,85,79,74,86,102,117,87,120,88,68,71,83,48,68,105,107,110,121,106,48,86,57,53,65,116,95,75,66,71,52,121,55,89,108,111,45,52,102,118,52,61,59,116,61,49,55,52,49,55,48,48,51,49,50,53,53,50,59,117,105,100,61,49,102,48,48,56,48,102,56,45,50,51,56,102,45,52,56,51,97,45,98,101,48,52,45,57,97,55,101,50,99,97,52,99,48,101,54,49,55,52,49,54,56,56,52,49,51,55,57,49</span><br><span class="line">bArr=cid=210101;q=Xz0R82fS485b23ba817e4JzPH0DbB-Hyhw09ZJUl9kZ4SZ_KkVh07uBqj8ejykTw1bl02vu1dt67BbIKA-1FqlTuFGh8VoJemyEkmhqnf6w9u98dKvCdpFPDiRktU-PGDtnD9Y8rBYgBHuPyfnMR15jTMaF0HV4SMw6qU_S_3p771jHSE9Kl8Yx6zKgkBv71qLhQP68VNsifnmQFbtEBdQt5hK1-9WLGzrhB1jLiL1EJTtmqGymT21ymquQHXcDuk-yQQOEVQhMvN8p_dEkD23X6nDVntT3FTC90dmMItPDL6QlQoWsRTqvlVMkUz2wSNPsApVb2hq30D4x9RSvDE3sKJBGAzFqDG_XwE6yoojDNPn2wH0H0o3-wtCso0hRJXlvPTHz_zMYdTcMNKTwccWgu0mmbH5NKcVCxrZ6R2MeCfUb8ACp7PKjZeAecaHq_REu3Kkoi3xXPPK_MU_eLl5A1MFw_d7azTSHHUFmL3RdiC15vvA1bajH1NDbLEAxMV8nUOJVfuWxXDGS0Diknyj0V95At_KBG4y7Ylo-4fv4=;t=1741700312552;uid=1f0080f8-238f-483a-be04-9a7e2ca4c0e61741688413791</span><br><span class="line">i10=1</span><br><span class="line">bArr2=-87,-114,-67,121,108,-104,-58,66,-48,15,40,31,112,-58,-81,116,73,9,-6,80,-38,87,98,16,114,-89,108,124,97,-82,52,59</span><br><span class="line">bArr2=���yl��B�(pƯtI   �P�Wbr�l|a�4;</span><br><span class="line">CryptoHelper.md5_crypt result=56,53,56,57,53,48,53,49,49,55,50,50,48,53,48,50,52,49,48,57,49,48,51,48,53,48,56,49,54,52,55,52,50,53,53,53,52</span><br><span class="line">CryptoHelper.md5_crypt result=8589505117220502410910305081647425554</span><br><span class="line">CryptoHelper.b is called: str=Xz0R82fS485b23ba817e4JzPH0DbB-Hyhw09ZJUl9kZ4SZ_KkVh07uBqj8ejykTw1bl02vu1dt67BbIKA-1FqlTuFGh8VoJemyEkmhqnf6w9u98dKvCdpFPDiRktU-PGDtnD9Y8rBYgBHuPyfnMR15jTMaF0HV4SMw6qU_S_3p771jHSE9Kl8Yx6zKgkBv71qLhQP68VNsifnmQFbtEBdQt5hK1-9WLGzrhB1jLiL1EJTtmqGymT21ymquQHXcDuk-yQQOEVQhMvN8p_dEkD23X6nDVntT3FTC90dmMItPDL6QlQoWsRTqvlVMkUz2wSNPsApVb2hq30D4x9RSvDE3sKJBGAzFqDG_XwE6yoojDNPn2wH0H0o3-wtCso0hRJXlvPTHz_zMYdTcMNKTwccWgu0mmbH5NKcVCxrZ6R2MeCfUb8ACp7PKjZeAecaHq_REu3Kkoi3xXPPK_MU_eLl5A1MFw_d7azTSHHUFmL3RdiC15vvA1bajH1NDbLEAxMV8nUOJVfuWxXDGS0Diknyj0V95At_KBG4y7Ylo-4fv4=</span><br><span class="line">CryptoHelper.b result=&#123;&quot;mobile&quot;:&quot;17888888888&quot;,&quot;countryNo&quot;:&quot;86&quot;,&quot;validateCode&quot;:&quot;123456&quot;,&quot;appversion&quot;:&quot;5265&quot;,&quot;type&quot;:1,&quot;deviceId&quot;:&quot;android_lucky_ef5722c5-96ff-4521-8096-27530a0365b2&quot;,&quot;systemVersion&quot;:&quot;29&quot;,&quot;blackBox&quot;:&quot;oGPHE1741688414xYaSQkj72m7&quot;,&quot;uniqueCode&quot;:&quot;DUQKlOhFPQSnh57_KB6erjHdTADHhPk26j60RFVRS2xPaEZQUVNuaDU3X0tCNmVyakhkVEFESGhQazI2ajYwc2h1&quot;,&quot;regionId&quot;:&quot;CO0001&quot;,&quot;regId&quot;:&quot;&quot;,&quot;deviceBrand&quot;:&quot;google&quot;,&quot;isSecurityVerify&quot;:false&#125;</span><br><span class="line">CryptoHelper.b is called: str=nMymqvoWI5UzuGSsfOyxWS9E0JQYtcev4A_O1LXSr_HosyYfsqRmenMCcYf7-mdZjZ8LUfNc6HbRD89pGuGxJhYP475VhWKSXmkD7eAkTSmxA1MpUjQQHOjueGL1F_YWGExcwjd3N-sOHxEfeB59eTF1vGH9C_S6Q5TrXqrOg1R0yv5lrZ0CUyVHr38KtyytHyv4ip5jmin3q-HoLrMNZgkywRFi2RKOdxa8F-I1PLBhIOxZmtNm7IBiSVPvc8q2fnKJLbxMfM680Zr9YwRrxe_XcuzE1YLdSXTc2cmy5cq8M0xQ12eMbJo1sZhGPGs7</span><br><span class="line">CryptoHelper.b result=&#123;&quot;busiCode&quot;:&quot;BASE001&quot;,&quot;code&quot;:7,&quot;content&quot;:null,&quot;handler&quot;:&quot;USER&quot;,&quot;msg&quot;:&quot;验证码无效&quot;,&quot;status&quot;:&quot;BASE_ERROR&quot;,&quot;uid&quot;:&quot;1f0080f8-238f-483a-be04-9a7e2ca4c0e61741688413791&quot;,&quot;version&quot;:&quot;101&quot;,&quot;zeusId&quot;:&quot;luckycapiproxy-0ade0957-483805-214303&quot;&#125;</span><br><span class="line">CryptoHelper.b is called: str=nMymqvoWI5UzuGSsfOyxWS9E0JQYtcev4A_O1LXSr_HosyYfsqRmenMCcYf7-mdZjZ8LUfNc6HbRD89pGuGxJhYP475VhWKSXmkD7eAkTSmxA1MpUjQQHOjueGL1F_YWGExcwjd3N-sOHxEfeB59eTF1vGH9C_S6Q5TrXqrOg1R0yv5lrZ0CUyVHr38KtyytHyv4ip5jmin3q-HoLrMNZgkywRFi2RKOdxa8F-I1PLBhIOxZmtNm7IBiSVPvc8q2fnKJLbxMfM680Zr9YwRrxe_XcuzE1YLdSXTc2cmy5cq8M0xQ12eMbJo1sZhGPGs7</span><br><span class="line">CryptoHelper.b result=&#123;&quot;busiCode&quot;:&quot;BASE001&quot;,&quot;code&quot;:7,&quot;content&quot;:null,&quot;handler&quot;:&quot;USER&quot;,&quot;msg&quot;:&quot;验证码无效&quot;,&quot;status&quot;:&quot;BASE_ERROR&quot;,&quot;uid&quot;:&quot;1f0080f8-238f-483a-be04-9a7e2ca4c0e61741688413791&quot;,&quot;version&quot;:&quot;101&quot;,&quot;zeusId&quot;:&quot;luckycapiproxy-0ade0957-483805-214303&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>c方法对一堆参数加密，加密结果为q值，md5_crypt对q及其他内容进行签名，b方法对响应体和q解密</p>
<h2 id="c方法"><a href="#c方法" class="headerlink" title="c方法"></a>c方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title function_">c</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="type">c</span> <span class="variable">cVar</span> <span class="operator">=</span> <span class="built_in">this</span>.f93097a;</span><br><span class="line">    <span class="keyword">if</span> (cVar == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(StubApp.getString2(<span class="string">&quot;32267&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">a10</span> <span class="operator">=</span> cVar.a();</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(a10)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        str2 = <span class="keyword">new</span> <span class="title class_">String</span>(Base64.encode(localAESWork(str.getBytes(), <span class="number">2</span>, Base64.decode(a10.replace(org.objectweb.asm.signature.b.f127225c, org.objectweb.asm.signature.b.f127224b).replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).getBytes(), <span class="number">2</span>)), <span class="number">2</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e10) &#123;</span><br><span class="line">        e10.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str2.replace(org.objectweb.asm.signature.b.f127224b, org.objectweb.asm.signature.b.f127225c).replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;_&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CryptoHelper</span><span class="params">(c cVar)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.f93097a = cVar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里面有一个字段<code>a10</code>需要找它的来源，它来源于a方法，而它是个接口方法</p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/8.jpg"></p>
<p>找它的实现类<code>com.lucky.lib.http2.b</code></p>
<p>这里面实现了<code>a</code>方法</p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/9.jpg"></p>
<p>接下来通过主动调用获取它的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">function <span class="title function_">get_a10</span><span class="params">()</span>&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        <span class="type">let</span> <span class="variable">a</span> <span class="operator">=</span> Java.use(<span class="string">&quot;com.lucky.lib.http2.b$a&quot;</span>).$<span class="keyword">new</span>();</span><br><span class="line">        <span class="type">let</span> <span class="variable">result</span> <span class="operator">=</span> a.a();</span><br><span class="line">        console.log(<span class="string">&quot;a10:&quot;</span>,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a10: qY69eWyYxkLQDygfcMavdEkJ+lDaV2IQcqdsfGGuNDs=</span><br></pre></td></tr></table></figure>

<p>接下来看这部分代码，弄清楚这里面的值和逻辑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str2 = new String(Base64.encode(localAESWork(str.getBytes(), 2, Base64.decode(a10.replace(&#x27;-&#x27;, &#x27;+&#x27;).replace(&#x27;_&#x27;, &#x27;/&#x27;).getBytes(), 2)), 2));</span><br></pre></td></tr></table></figure>

<p>看我们hook到的结果协助分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CryptoHelper.c is called: str=&#123;&quot;mobile&quot;:&quot;17888888888&quot;,&quot;countryNo&quot;:&quot;86&quot;,&quot;validateCode&quot;:&quot;123456&quot;,&quot;appversion&quot;:&quot;5265&quot;,&quot;type&quot;:1,&quot;deviceId&quot;:&quot;android_lucky_ef5722c5-96ff-4521-8096-27530a0365b2&quot;,&quot;systemVersion&quot;:&quot;29&quot;,&quot;blackBox&quot;:&quot;oGPHE1741688414xYaSQkj72m7&quot;,&quot;uniqueCode&quot;:&quot;DUQKlOhFPQSnh57_KB6erjHdTADHhPk26j60RFVRS2xPaEZQUVNuaDU3X0tCNmVyakhkVEFESGhQazI2ajYwc2h1&quot;,&quot;regionId&quot;:&quot;CO0001&quot;,&quot;regId&quot;:&quot;&quot;,&quot;deviceBrand&quot;:&quot;google&quot;,&quot;isSecurityVerify&quot;:false&#125;</span><br><span class="line">CryptoHelper.c result=Xz0R82fS485b23ba817e4JzPH0DbB-Hyhw09ZJUl9kZ4SZ_KkVh07uBqj8ejykTw1bl02vu1dt67BbIKA-1FqlTuFGh8VoJemyEkmhqnf6w9u98dKvCdpFPDiRktU-PGDtnD9Y8rBYgBHuPyfnMR15jTMaF0HV4SMw6qU_S_3p771jHSE9Kl8Yx6zKgkBv71qLhQP68VNsifnmQFbtEBdQt5hK1-9WLGzrhB1jLiL1EJTtmqGymT21ymquQHXcDuk-yQQOEVQhMvN8p_dEkD23X6nDVntT3FTC90dmMItPDL6QlQoWsRTqvlVMkUz2wSNPsApVb2hq30D4x9RSvDE3sKJBGAzFqDG_XwE6yoojDNPn2wH0H0o3-wtCso0hRJXlvPTHz_zMYdTcMNKTwccWgu0mmbH5NKcVCxrZ6R2MeCfUb8ACp7PKjZeAecaHq_REu3Kkoi3xXPPK_MU_eLl5A1MFw_d7azTSHHUFmL3RdiC15vvA1bajH1NDbLEAxMV8nUOJVfuWxXDGS0Diknyj0V95At_KBG4y7Ylo-4fv4=</span><br></pre></td></tr></table></figure>

<h1 id="unidbg调用"><a href="#unidbg调用" class="headerlink" title="unidbg调用"></a>unidbg调用</h1><h2 id="初始环境搭建"><a href="#初始环境搭建" class="headerlink" title="初始环境搭建"></a>初始环境搭建</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.luckincoffee.safeboxlib;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.backend.Unicorn2Factory;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.virtualmodule.android.AndroidModule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CryptoHelper</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">process</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> DalvikModule dm;</span><br><span class="line">    <span class="keyword">private</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CryptoHelper</span><span class="params">()</span> &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder</span><br><span class="line">                .for64Bit() <span class="comment">// for32Bit()</span></span><br><span class="line">                .setProcessName(process)</span><br><span class="line">                .setRootDir(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;target/rootfs&quot;</span>))</span><br><span class="line">                .addBackendFactory(<span class="keyword">new</span> <span class="title class_">Unicorn2Factory</span>(<span class="literal">true</span>))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 设置执行多少条指令切换一次线程</span></span><br><span class="line">        <span class="comment">// emulator.getBackend().registerEmuCountHook(10000);</span></span><br><span class="line">        <span class="comment">// 开启线程调度器</span></span><br><span class="line">        <span class="comment">// emulator.getSyscallHandler().setEnableThreadDispatcher(true);</span></span><br><span class="line">        memory = emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;apktest/ruixingcoffee_5.2.65.apk&quot;</span>));</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AndroidModule</span>(emulator,vm).register(memory);</span><br><span class="line">        dm = vm.loadLibrary(<span class="string">&quot;cryptoDD&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">localAESWork</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DvmClass</span> <span class="variable">CryptoHelperClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.luckincoffee.safeboxlib.CryptoHelper&quot;</span>);</span><br><span class="line">        <span class="type">ByteArray</span> <span class="variable">byteValues</span> <span class="operator">=</span> CryptoHelperClass.callStaticJniMethodObject(emulator, <span class="string">&quot;localAESWork([BI[B)[B&quot;</span>,</span><br><span class="line">                <span class="string">&quot;&#123;\&quot;mobile\&quot;:\&quot;17888888888\&quot;,\&quot;countryNo\&quot;:\&quot;86\&quot;,\&quot;validateCode\&quot;:\&quot;123456\&quot;,\&quot;appversion\&quot;:\&quot;5265\&quot;,\&quot;type\&quot;:1,\&quot;deviceId\&quot;:\&quot;android_lucky_ef5722c5-96ff-4521-8096-27530a0365b2\&quot;,\&quot;systemVersion\&quot;:\&quot;29\&quot;,\&quot;blackBox\&quot;:\&quot;oGPHE1741688414xYaSQkj72m7\&quot;,\&quot;uniqueCode\&quot;:\&quot;DUQKlOhFPQSnh57_KB6erjHdTADHhPk26j60RFVRS2xPaEZQUVNuaDU3X0tCNmVyakhkVEFESGhQazI2ajYwc2h1\&quot;,\&quot;regionId\&quot;:\&quot;CO0001\&quot;,\&quot;regId\&quot;:\&quot;\&quot;,\&quot;deviceBrand\&quot;:\&quot;google\&quot;,\&quot;isSecurityVerify\&quot;:false&#125;&quot;</span>.getBytes(),</span><br><span class="line">                <span class="number">2</span>,</span><br><span class="line">                Base64.getDecoder().decode(<span class="string">&quot;qY69eWyYxkLQDygfcMavdEkJ+lDaV2IQcqdsfGGuNDs=&quot;</span>.replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;+&#x27;</span>).replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).getBytes()));</span><br><span class="line">        <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> bytesTohexString(byteValues.getValue());</span><br><span class="line">        System.out.println(<span class="string">&quot;ret=&quot;</span>+ret);</span><br><span class="line">        <span class="type">String</span> <span class="variable">b64encoded</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(byteValues.getValue());</span><br><span class="line">        System.out.println(b64encoded);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CryptoHelper</span> <span class="variable">cryptoHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CryptoHelper</span>();</span><br><span class="line">        cryptoHelper.localAESWork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行一下，报错了，看打印的信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JNIEnv-&gt;NewByteArray(416) was called from RX@0x12043ae4[libcryptoDD.so]0x43ae4</span><br><span class="line">JNIEnv-&gt;SetByteArrayRegion([B@72a7c7e0, 0, 416, RW@0x123991c0) was called from RX@0x12043b08[libcryptoDD.so]0x43b08</span><br><span class="line">[10:38:44 101]  WARN [com.github.unidbg.arm.AbstractARM64Emulator] (AbstractARM64Emulator$1:66) - Write memory failed: address=0x0, size=8, value=0x12057000</span><br></pre></td></tr></table></figure>

<p>在<code>0x43b08</code>这个地方报错了，IDA分析一下</p>
<p>在下面这个地方，内存无法写入</p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/10.jpg"></p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/11.jpg"></p>
<p>用unidbg处理一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">patchFreeByConsoleDebugger</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Symbol</span> <span class="variable">free</span> <span class="operator">=</span> emulator.getMemory().findModule(<span class="string">&quot;libc.so&quot;</span>).findSymbolByName(<span class="string">&quot;free&quot;</span>);</span><br><span class="line"></span><br><span class="line">    emulator.attach().addBreakPoint(free.getAddress(), <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">            emulator.getBackend().reg_write(Arm64Const.UC_ARM64_REG_W0,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后可以输出正确结果了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ret=5f3d11f367d2e3ce5bdb76daf35edee03b1b6ce1b3c1846a175a1ec87bc6c9ddc66d65a239b38f7b7727befc6a17c44a3fa7921c901c66596ca7cedacc48a08db0cb0931efcbb9a7afbf9ab379d992ba66f84c3e529d4e2f96072db2212bc9ab4225a162ee55d4ea0e9648d49d532735fe628c175e6b81163b05bf97bd030634c09dc45f0e536b75dd1f29f8ea328eb60907c08ff1c309d7ea64257aad490fe7a50f06c86d33a6cfcd1494ec5ae0b07fc4d1dc5094a6161985ebee8bac53057e07603836b0bcc15b34dcaa4f8ff361b5df5855e5f5f9d4c8b8c5c0f9c936f697c37795ac6ef7fb66513216f2019d08fd477ef712b4cf4036441a0a56e429f3fc440bbfce851936683e74024fc1abcfeb50480f747fcaabf346eebca3d5881ecbbaf639c96a6db5f22d362223bc766e39fc0a4472b197a5be78f2bf947afe15660b97c9b496d0e39103ed77672327ab36c7920e6d763f1271bb017615c49afcb50429218b6f3d76156129095eb1082f33bbc2f732f7ba76584b04cd388aadc16e0faaf872eecb1810a6bb25ae9532a600bf2b597e2e50bb97d0df5fa4a7457f53</span><br><span class="line">Xz0R82fS485b23ba817e4DsbbOGzwYRqF1oeyHvGyd3GbWWiObOPe3cnvvxqF8RKP6eSHJAcZllsp87azEigjbDLCTHvy7mnr7+as3nZkrpm+Ew+Up1OL5YHLbIhK8mrQiWhYu5V1OoOlkjUnVMnNf5ijBdea4EWOwW/l70DBjTAncRfDlNrdd0fKfjqMo62CQfAj/HDCdfqZCV6rUkP56UPBshtM6bPzRSU7FrgsH/E0dxQlKYWGYXr7ousUwV+B2A4NrC8wVs03KpPj/Nhtd9YVeX1+dTIuMXA+ck29pfDd5Wsbvf7ZlEyFvIBnQj9R373ErTPQDZEGgpW5Cnz/EQLv86FGTZoPnQCT8Grz+tQSA90f8qr80buvKPViB7LuvY5yWpttfItNiIjvHZuOfwKRHKxl6W+ePK/lHr+FWYLl8m0ltDjkQPtd2cjJ6s2x5IObXY/EnG7AXYVxJr8tQQpIYtvPXYVYSkJXrEILzO7wvcy97p2WEsEzTiKrcFuD6r4cu7LGBCmuyWulTKmAL8rWX4uULuX0N9fpKdFf1M=</span><br></pre></td></tr></table></figure>

<h2 id="打印详细日志信息"><a href="#打印详细日志信息" class="headerlink" title="打印详细日志信息"></a>打印详细日志信息</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ARM64 JNI 详细日志</span></span><br><span class="line">        Logger.getLogger(DalvikVM64.class).setLevel(Level.DEBUG);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ARM32 JNI 详细日志</span></span><br><span class="line">        Logger.getLogger(DalvikVM.class).setLevel(Level.DEBUG);</span><br></pre></td></tr></table></figure>

<p>把<code>Logger.getLogger(DalvikVM64.class).setLevel(Level.DEBUG);</code>添加到<code>localAESWork()</code>方法里</p>
<h2 id="使用简单的明文测试"><a href="#使用简单的明文测试" class="headerlink" title="使用简单的明文测试"></a>使用简单的明文测试</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">明文用：bileton</span><br><span class="line">hex:fd2bd308e45a3d24b2c715b54b92713f</span><br><span class="line">base64:/SvTCORaPSSyxxW1S5JxPw==</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">JNIEnv-&gt;NewByteArray(16) was called from RX@0x12043ae4[libcryptoDD.so]0x43ae4</span><br><span class="line">JNIEnv-&gt;SetByteArrayRegion([B@0x00000000000000000000000000000000, 0, 16, RW@0x12399010) was called from RX@0x12043b08[libcryptoDD.so]0x43b08</span><br><span class="line"></span><br><span class="line">&gt;-----------------------------------------------------------------------------&lt;</span><br><span class="line">[11:59:10 243]SetByteArrayRegion array=[B@0x00000000000000000000000000000000, start=0, length=16, buf=RW@0x12399010, md5=f640f07e317bb73715399251206b7cdd, hex=fd2bd308e45a3d24b2c715b54b92713f</span><br><span class="line">size: 16</span><br><span class="line">0000: FD 2B D3 08 E4 5A 3D 24 B2 C7 15 B5 4B 92 71 3F    .+...Z=$....K.q?</span><br><span class="line">^-----------------------------------------------------------------------------^</span><br><span class="line">[11:59:10 243] DEBUG [com.github.unidbg.linux.android.dvm.DalvikVM64] (DalvikVM64$189:3075) - ReleaseByteArrayElements arrayPointer=unidbg@0x3e92efc3, pointer=RW@0x12056000, mode=0</span><br><span class="line">ret=fd2bd308e45a3d24b2c715b54b92713f</span><br><span class="line">/SvTCORaPSSyxxW1S5JxPw==</span><br></pre></td></tr></table></figure>

<p>根据日志看到结果是在<code>0x12399010</code>这个地方来的</p>
<h2 id="trace-0x12399010"><a href="#trace-0x12399010" class="headerlink" title="trace 0x12399010"></a>trace 0x12399010</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">emulator.traceWrite(<span class="number">0x12399010</span>,<span class="number">0x12399010</span>+<span class="number">0x10</span>);</span><br></pre></td></tr></table></figure>

<p>这是trace下俩的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[12:07:18 602] Memory WRITE at 0x12399010, data size = 8, data value = 0x0000000000000000, PC=RX@0x121bc688[libc.so]0x1c688, LR=RX@0x12043970[libcryptoDD.so]0x43970</span><br><span class="line">[12:07:18 603] Memory WRITE at 0x12399018, data size = 8, data value = 0x0000000000000000, PC=RX@0x121bc688[libc.so]0x1c688, LR=RX@0x12043970[libcryptoDD.so]0x43970</span><br><span class="line">[12:07:18 603] Memory WRITE at 0x12399010, data size = 8, data value = 0x0000000000000000, PC=RX@0x121bc694[libc.so]0x1c694, LR=RX@0x12043970[libcryptoDD.so]0x43970</span><br><span class="line">[12:07:18 603] Memory WRITE at 0x12399018, data size = 8, data value = 0x0000000000000000, PC=RX@0x121bc694[libc.so]0x1c694, LR=RX@0x12043970[libcryptoDD.so]0x43970</span><br><span class="line">[12:07:18 608] Memory WRITE at 0x12399010, data size = 8, data value = 0x243d5ae408d32bfd, PC=RX@0x12018940[libcryptoDD.so]0x18940, LR=RX@0x1201892c[libcryptoDD.so]0x1892c</span><br><span class="line">[12:07:18 608] Memory WRITE at 0x12399018, data size = 8, data value = 0x3f71924bb515c7b2, PC=RX@0x12018940[libcryptoDD.so]0x18940, LR=RX@0x1201892c[libcryptoDD.so]0x1892c</span><br></pre></td></tr></table></figure>

<p>这里看到数据写入的位置是在<code>0x18940</code>，数据是以小端存储的LR寄存器的值是<code>0x1892c</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x243d5ae408d32bfd</span><br><span class="line">0x3f71924bb515c7b2</span><br></pre></td></tr></table></figure>

<h2 id="使用IDA分析0x1892c"><a href="#使用IDA分析0x1892c" class="headerlink" title="使用IDA分析0x1892c"></a>使用IDA分析0x1892c</h2><p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/12.jpg"></p>
<p>反汇编</p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/13.jpg"></p>
<h2 id="分析sub-189C4"><a href="#分析sub-189C4" class="headerlink" title="分析sub_189C4()"></a>分析<code>sub_189C4()</code></h2><p>下断点打印参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">emulator.attach().addBreakPoint(module.base+0x189C4);</span><br></pre></td></tr></table></figure>

<p>打印X0寄存器的值</p>
<p>如下是输入的明文</p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/14.jpg"></p>
<p>打印X1寄存器的值</p>
<p>如下是一段空值</p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/15.jpg"></p>
<p>根据入参的值，看它被传进了哪个函数里找到AES加密的位置</p>
<p>找到一个函数<code>sub_21BEC()</code></p>
<p>它的内容比较可疑</p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/16.jpg"></p>
<p>对这个函数进行hook</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">emulator.attach().addBreakPoint(<span class="keyword">module</span>.base + <span class="number">0x21BEC</span>, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如下打印了10次</p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/17.jpg"></p>
<p>先保留一份正确的密文</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fd2bd308e45a3d24b2c715b54b92713f</span><br></pre></td></tr></table></figure>

<p>然后在第九轮的时候进行故障注入</p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/18.jpg"></p>
<h1 id="故障注入差分"><a href="#故障注入差分" class="headerlink" title="故障注入差分"></a>故障注入差分</h1><h2 id="故障注入1"><a href="#故障注入1" class="headerlink" title="故障注入1"></a>故障注入1</h2><p>对这几个寄存器进行故障注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">emulator.attach().addBreakPoint(<span class="keyword">module</span>.base + <span class="number">0x21E8C</span>, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">9</span>)&#123;</span><br><span class="line">            <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            emulator.getBackend().reg_write(Arm64Const.UC_ARM64_REG_W9,random.nextInt(<span class="number">255</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>循环10次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">CryptoHelper</span> <span class="variable">cryptoHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CryptoHelper</span>();</span><br><span class="line">    cryptoHelper.patchFreeByConsoleDebugger();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        cryptoHelper.localAESWork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>循环10次，输出密文</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fd2bbc08e43b3d24eec715b54b927120</span><br><span class="line">fd2b2c08e48c3d246dc715b54b9271e1</span><br><span class="line">fd2bb208e49f3d2496c715b54b927197</span><br><span class="line">fd2b7f08e4873d24b8c715b54b9271fa</span><br><span class="line">fd2b4e08e4573d24efc715b54b927118</span><br><span class="line">fd2b2608e4eb3d247ec715b54b9271d2</span><br><span class="line">fd2b6708e4963d2442c715b54b927180</span><br><span class="line">fd2b4508e4ea3d2443c715b54b927153</span><br><span class="line">fd2b1908e4c93d24e4c715b54b927166</span><br><span class="line">fd2b5408e4943d246fc715b54b92717c</span><br></pre></td></tr></table></figure>

<h2 id="差分1"><a href="#差分1" class="headerlink" title="差分1"></a>差分1</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> phoenixAES</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;tracefile&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> t:</span><br><span class="line">    t.write(<span class="string">&quot;&quot;&quot;fd2bd308e45a3d24b2c715b54b92713f</span></span><br><span class="line"><span class="string">fd2bbc08e43b3d24eec715b54b927120</span></span><br><span class="line"><span class="string">fd2b2c08e48c3d246dc715b54b9271e1</span></span><br><span class="line"><span class="string">fd2bb208e49f3d2496c715b54b927197</span></span><br><span class="line"><span class="string">fd2b7f08e4873d24b8c715b54b9271fa</span></span><br><span class="line"><span class="string">fd2b4e08e4573d24efc715b54b927118</span></span><br><span class="line"><span class="string">fd2b2608e4eb3d247ec715b54b9271d2</span></span><br><span class="line"><span class="string">fd2b6708e4963d2442c715b54b927180</span></span><br><span class="line"><span class="string">fd2b4508e4ea3d2443c715b54b927153</span></span><br><span class="line"><span class="string">fd2b1908e4c93d24e4c715b54b927166</span></span><br><span class="line"><span class="string">fd2b5408e4943d246fc715b54b92717c</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">phoenixAES.crack_file(<span class="string">&#x27;tracefile&#x27;</span>, [], <span class="literal">True</span>, <span class="literal">False</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Round key bytes recovered:</span><br><span class="line">....ED....D2....C0............C0</span><br></pre></td></tr></table></figure>

<h2 id="故障注入2"><a href="#故障注入2" class="headerlink" title="故障注入2"></a>故障注入2</h2><p>换一个寄存器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">emulator.attach().addBreakPoint(<span class="keyword">module</span>.base + <span class="number">0x21E90</span>, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">9</span>)&#123;</span><br><span class="line">            <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">            emulator.getBackend().reg_write(Arm64Const.UC_ARM64_REG_W10,random.nextInt(<span class="number">255</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fd2bd34ae45afb24b22315b5a192713f</span><br><span class="line">fd2bd375e45aae24b2b515b5b892713f</span><br><span class="line">fd2bd3aae45abe24b2af15b55a92713f</span><br><span class="line">fd2bd3bbe45ad424b24515b57b92713f</span><br><span class="line">fd2bd38be45a6e24b2a615b56192713f</span><br><span class="line">fd2bd344e45aba24b29515b5f692713f</span><br><span class="line">fd2bd306e45ac324b23a15b5dd92713f</span><br><span class="line">fd2bd3d5e45a4424b24a15b53792713f</span><br><span class="line">fd2bd3bae45a9a24b2e615b51592713f</span><br><span class="line">fd2bd33de45a4724b2a515b51692713f</span><br></pre></td></tr></table></figure>

<h2 id="差分2"><a href="#差分2" class="headerlink" title="差分2"></a>差分2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import phoenixAES</span><br><span class="line"></span><br><span class="line">with open(&quot;tracefile&quot;,&quot;wb&quot;) as t:</span><br><span class="line">    t.write(&quot;&quot;&quot;fd2bd308e45a3d24b2c715b54b92713f</span><br><span class="line">fd2bbc08e43b3d24eec715b54b927120</span><br><span class="line">fd2b2c08e48c3d246dc715b54b9271e1</span><br><span class="line">fd2bb208e49f3d2496c715b54b927197</span><br><span class="line">fd2b7f08e4873d24b8c715b54b9271fa</span><br><span class="line">fd2b4e08e4573d24efc715b54b927118</span><br><span class="line">fd2b2608e4eb3d247ec715b54b9271d2</span><br><span class="line">fd2b6708e4963d2442c715b54b927180</span><br><span class="line">fd2b4508e4ea3d2443c715b54b927153</span><br><span class="line">fd2b1908e4c93d24e4c715b54b927166</span><br><span class="line">fd2b5408e4943d246fc715b54b92717c</span><br><span class="line">fd2bd34ae45afb24b22315b5a192713f</span><br><span class="line">fd2bd375e45aae24b2b515b5b892713f</span><br><span class="line">fd2bd3aae45abe24b2af15b55a92713f</span><br><span class="line">fd2bd3bbe45ad424b24515b57b92713f</span><br><span class="line">fd2bd38be45a6e24b2a615b56192713f</span><br><span class="line">fd2bd344e45aba24b29515b5f692713f</span><br><span class="line">fd2bd306e45ac324b23a15b5dd92713f</span><br><span class="line">fd2bd3d5e45a4424b24a15b53792713f</span><br><span class="line">fd2bd3bae45a9a24b2e615b51592713f</span><br><span class="line">fd2bd33de45a4724b2a515b51692713f</span><br><span class="line">&quot;&quot;&quot;.encode(&#x27;utf8&#x27;))</span><br><span class="line">    </span><br><span class="line">phoenixAES.crack_file(&#x27;tracefile&#x27;, [], True, False, 3)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Round key bytes recovered:</span><br><span class="line">....EDFD..D27D..C0D0....4E....C0</span><br></pre></td></tr></table></figure>

<h2 id="故障注入3"><a href="#故障注入3" class="headerlink" title="故障注入3"></a>故障注入3</h2><p>修改hook地址和寄存器</p>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fa2bd308e45a3dc7b2c737b54b48713f</span><br><span class="line">132bd308e45a3d96b2c7afb54b72713f</span><br><span class="line">aa2bd308e45a3d7db2c798b54bee713f</span><br><span class="line">7d2bd308e45a3de9b2c708b54ba6713f</span><br><span class="line">252bd308e45a3dd4b2c79db54bb8713f</span><br><span class="line">f92bd308e45a3d40b2c704b54b3f713f</span><br><span class="line">c62bd308e45a3d60b2c782b54b0b713f</span><br><span class="line">022bd308e45a3d7eb2c738b54b5d713f</span><br><span class="line">5a2bd308e45a3d3db2c7b6b54bd0713f</span><br><span class="line">152bd308e45a3d0db2c7c9b54bbc713f</span><br></pre></td></tr></table></figure>

<h2 id="差分3"><a href="#差分3" class="headerlink" title="差分3"></a>差分3</h2><p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Round key bytes recovered:</span><br><span class="line">A3..EDFD..D27DD1C0D010..4EFC..C0</span><br></pre></td></tr></table></figure>

<h2 id="故障注入4"><a href="#故障注入4" class="headerlink" title="故障注入4"></a>故障注入4</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fdd7d308275a3d24b2c715bf4b929d3f</span><br><span class="line">fd41d308e75a3d24b2c715b14b92d73f</span><br><span class="line">fdb8d308f15a3d24b2c715954b92fe3f</span><br><span class="line">fd69d3089a5a3d24b2c715094b92823f</span><br><span class="line">fdd4d308b85a3d24b2c7156b4b92cd3f</span><br><span class="line">fd2dd308b45a3d24b2c715254b921c3f</span><br><span class="line">fdd8d308035a3d24b2c715934b927d3f</span><br><span class="line">fd03d308a65a3d24b2c715274b92303f</span><br><span class="line">fdc0d308d35a3d24b2c715674b927b3f</span><br><span class="line">fd98d3087a5a3d24b2c715eb4b92783f</span><br></pre></td></tr></table></figure>

<h2 id="差分4"><a href="#差分4" class="headerlink" title="差分4"></a>差分4</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Round key bytes recovered:</span><br><span class="line">A3AEEDFD2DD27DD1C0D010724EFCCBC0</span><br></pre></td></tr></table></figure>

<p>好了，这就是第10轮的轮密钥</p>
<h1 id="由第10轮的轮密钥推算初始密钥"><a href="#由第10轮的轮密钥推算初始密钥" class="headerlink" title="由第10轮的轮密钥推算初始密钥"></a>由第10轮的轮密钥推算初始密钥</h1><p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/19.jpg"></p>
<p>推出初始密钥为：32395842753445546A487830596E6643</p>
<p>验证下，如下加密结果正确</p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/20.jpg"></p>
<p>CyberChef中处理不了字符串的replace，如下</p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/21.jpg"></p>
<h1 id="Python生成q"><a href="#Python生成q" class="headerlink" title="Python生成q"></a>Python生成q</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt_ecb</span>(<span class="params">plaintext,key</span>):</span><br><span class="line">    cipher = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    padded_data = pad(plaintext,AES.block_size)</span><br><span class="line">    encrypted_data = cipher.encrypt(padded_data)</span><br><span class="line">    <span class="keyword">return</span> encrypted_data</span><br><span class="line"></span><br><span class="line">data = <span class="string">b&#x27;&#123;&quot;mobile&quot;:&quot;17888888888&quot;,&quot;countryNo&quot;:&quot;86&quot;,&quot;validateCode&quot;:&quot;123456&quot;,&quot;appversion&quot;:&quot;5265&quot;,&quot;type&quot;:1,&quot;deviceId&quot;:&quot;android_lucky_ef5722c5-96ff-4521-8096-27530a0365b2&quot;,&quot;systemVersion&quot;:&quot;29&quot;,&quot;blackBox&quot;:&quot;oGPHE1741688414xYaSQkj72m7&quot;,&quot;uniqueCode&quot;:&quot;DUQKlOhFPQSnh57_KB6erjHdTADHhPk26j60RFVRS2xPaEZQUVNuaDU3X0tCNmVyakhkVEFESGhQazI2ajYwc2h1&quot;,&quot;regionId&quot;:&quot;CO0001&quot;,&quot;regId&quot;:&quot;&quot;,&quot;deviceBrand&quot;:&quot;google&quot;,&quot;isSecurityVerify&quot;:false&#125;&#x27;</span></span><br><span class="line">key = <span class="string">b&quot;29XBu4ETjHx0YnfC&quot;</span></span><br><span class="line">aes_encrypted_data = aes_encrypt_ecb(data,key=key)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(aes_encrypted_data).decode(<span class="string">&quot;utf-8&quot;</span>).replace(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;-&quot;</span>).replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;_&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="unidbg调用md5-crypt"><a href="#unidbg调用md5-crypt" class="headerlink" title="unidbg调用md5_crypt"></a>unidbg调用md5_crypt</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">md5_crypt</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DvmClass</span> <span class="variable">CryptoHelperClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.luckincoffee.safeboxlib.CryptoHelper&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">bArr</span> <span class="operator">=</span> <span class="string">&quot;cid=210101;q=Xz0R82fS485b23ba817e4JzPH0DbB-Hyhw09ZJUl9kZ4SZ_KkVh07uBqj8ejykTw1bl02vu1dt67BbIKA-1FqlTuFGh8VoJemyEkmhqnf6w9u98dKvCdpFPDiRktU-PGDtnD9Y8rBYgBHuPyfnMR15jTMaF0HV4SMw6qU_S_3p771jHSE9Kl8Yx6zKgkBv71qLhQP68VNsifnmQFbtEBdQt5hK1-9WLGzrhB1jLiL1EJTtmqGymT21ymquQHXcDuk-yQQOEVQhMvN8p_dEkD23X6nDVntT3FTC90dmMItPDL6QlQoWsRTqvlVMkUz2wSNPsApVb2hq30D4x9RSvDE3sKJBGAzFqDG_XwE6yoojDNPn2wH0H0o3-wtCso0hRJXlvPTHz_zMYdTcMNKTwccWgu0mmbH5NKcVCxrZ6R2MeCfUb8ACp7PKjZeAecaHq_REu3Kkoi3xXPPK_MU_eLl5A1MFw_d7azTSHHUFmL3RdiC15vvA1bajH1NDbLEAxMV8nUOJVfuWxXDGS0Diknyj0V95At_KBG4y7Ylo-4fv4=;t=1741699524789;uid=1f0080f8-238f-483a-be04-9a7e2ca4c0e61741688413791&quot;</span>;</span><br><span class="line">    <span class="type">byte</span>[] bArr2 = &#123;-<span class="number">87</span>,-<span class="number">114</span>,-<span class="number">67</span>,<span class="number">121</span>,<span class="number">108</span>,-<span class="number">104</span>,-<span class="number">58</span>,<span class="number">66</span>,-<span class="number">48</span>,<span class="number">15</span>,<span class="number">40</span>,<span class="number">31</span>,<span class="number">112</span>,-<span class="number">58</span>,-<span class="number">81</span>,<span class="number">116</span>,<span class="number">73</span>,<span class="number">9</span>,-<span class="number">6</span>,<span class="number">80</span>,-<span class="number">38</span>,<span class="number">87</span>,<span class="number">98</span>,<span class="number">16</span>,<span class="number">114</span>,-<span class="number">89</span>,<span class="number">108</span>,<span class="number">124</span>,<span class="number">97</span>,-<span class="number">82</span>,<span class="number">52</span>,<span class="number">59</span>&#125;;</span><br><span class="line">    <span class="type">ByteArray</span> <span class="variable">byteValues</span> <span class="operator">=</span> CryptoHelperClass.callStaticJniMethodObject(emulator, <span class="string">&quot;md5_crypt([BI[B)[B&quot;</span>,</span><br><span class="line">            bArr.getBytes(),</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            bArr2);</span><br><span class="line">    <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(byteValues.getValue());</span><br><span class="line">    System.out.println(ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出并打印详细日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JNIEnv-&gt;SetByteArrayRegion([B@0x0000000000000000000000000000000000000000000000000000000000000000000000000000, 0, 38, RW@0x12393030) was called from RX@0x120441a8[libcryptoDD.so]0x441a8</span><br><span class="line">&gt;-----------------------------------------------------------------------------&lt;</span><br><span class="line">[21:08:40 131]SetByteArrayRegion array=[B@0x0000000000000000000000000000000000000000000000000000000000000000000000000000, start=0, length=38, buf=RW@0x12393030, md5=05dca414c8058fff5156a7ec4d10303f, hex=3135373236313433313135323736383536313235353430303538333131343137313330353532</span><br><span class="line">size: 38</span><br><span class="line">0000: 31 35 37 32 36 31 34 33 31 31 35 32 37 36 38 35    1572614311527685</span><br><span class="line">0010: 36 31 32 35 35 34 30 30 35 38 33 31 31 34 31 37    6125540058311417</span><br><span class="line">0020: 31 33 30 35 35 32                                  130552</span><br><span class="line">^-----------------------------------------------------------------------------^</span><br><span class="line">[21:08:40 132] DEBUG [com.github.unidbg.linux.android.dvm.DalvikVM64] (DalvikVM64$189:3075) - ReleaseByteArrayElements arrayPointer=unidbg@0x659a969b, pointer=RW@0x12056000, mode=0</span><br><span class="line">15726143115276856125540058311417130552</span><br></pre></td></tr></table></figure>

<p>使用简单明文参数<code>bileton</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">76453193612323879985881527471282403340</span><br></pre></td></tr></table></figure>

<p>根据可以看出数据来源于<code>0x441a8</code>这个地址处，到IDA里找到这个地址</p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/22.jpg"></p>
<p>到IDA里看没发现什么</p>
<p>反汇编后，看传入的明文参数的传递过程，到了<code>sub_4095C()</code></p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/23.jpg"></p>
<p>通过断点调试查看参数，发现数据后面加了盐<code>29XBu4ETjHx0YnfC</code></p>
<p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/24.jpg"></p>
<h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><p><img src="/2025/03/11/%E7%91%9E%E5%B9%B8%E7%99%BD%E7%9B%92AES/25.jpg"></p>
<p>这里后面分析不下来了，看了别人的文章了解到对md5的结果又进行了处理，这里直接把算法搬过来</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getsign</span>():</span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        encode_str = <span class="string">&#x27;d26e2b204974bf9edcf18055b39013f4&#x27;</span></span><br><span class="line">        i*=<span class="number">4</span></span><br><span class="line">        result = (<span class="built_in">int</span>(encode_str[(i+<span class="number">1</span>)*<span class="number">2</span>:(i+<span class="number">1</span>)*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>)&lt;&lt;<span class="number">16</span>) | (<span class="built_in">int</span>(encode_str[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>)&lt;&lt;<span class="number">24</span>) | (<span class="built_in">int</span>(encode_str[(i+<span class="number">2</span>)*<span class="number">2</span>:(i+<span class="number">2</span>)*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>)&lt;&lt;<span class="number">8</span>) | <span class="built_in">int</span>(encode_str[(i+<span class="number">3</span>)*<span class="number">2</span>:(i+<span class="number">3</span>)*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>)</span><br><span class="line">        result &amp;= <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span> result &amp; <span class="number">0x80000000</span>:</span><br><span class="line">            result = -((result ^ <span class="number">0xffffffff</span>) + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> result&lt;<span class="number">0</span>:</span><br><span class="line">            result = -result</span><br><span class="line">        res+=<span class="built_in">str</span>(result)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">getsign()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 76453193612323879985881527471282403340</span></span><br></pre></td></tr></table></figure>

<h1 id="Python实现md5-crypt"><a href="#Python实现md5-crypt" class="headerlink" title="Python实现md5_crypt"></a>Python实现md5_crypt</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_call</span>(<span class="params">encoded_data</span>):</span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(encoded_data)</span><br><span class="line">    <span class="keyword">return</span> md5.digest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getsign</span>(<span class="params">encode_str</span>):</span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        i*=<span class="number">4</span></span><br><span class="line">        result = (<span class="built_in">int</span>(encode_str[(i+<span class="number">1</span>)*<span class="number">2</span>:(i+<span class="number">1</span>)*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>)&lt;&lt;<span class="number">16</span>) | (<span class="built_in">int</span>(encode_str[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>)&lt;&lt;<span class="number">24</span>) | (<span class="built_in">int</span>(encode_str[(i+<span class="number">2</span>)*<span class="number">2</span>:(i+<span class="number">2</span>)*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>)&lt;&lt;<span class="number">8</span>) | <span class="built_in">int</span>(encode_str[(i+<span class="number">3</span>)*<span class="number">2</span>:(i+<span class="number">3</span>)*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>)</span><br><span class="line">        result &amp;= <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span> result &amp; <span class="number">0x80000000</span>:</span><br><span class="line">            result = -((result ^ <span class="number">0xffffffff</span>) + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> result&lt;<span class="number">0</span>:</span><br><span class="line">            result = -result</span><br><span class="line">        res+=<span class="built_in">str</span>(result)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;bileton&quot;</span></span><br><span class="line">salt = <span class="string">&quot;29XBu4ETjHx0YnfC&quot;</span></span><br><span class="line">md5 = <span class="built_in">bytes</span>.<span class="built_in">hex</span>(md5_call((data+salt).encode(<span class="string">&quot;utf-8&quot;</span>)))</span><br><span class="line"><span class="built_in">print</span>(md5)</span><br><span class="line"><span class="built_in">print</span>(getsign(md5))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 76453193612323879985881527471282403340</span></span><br></pre></td></tr></table></figure>



<h1 id="Python实现响应体解密"><a href="#Python实现响应体解密" class="headerlink" title="Python实现响应体解密"></a>Python实现响应体解密</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypted_ecb</span>(<span class="params">encrypted_data,key</span>):</span><br><span class="line">    cipher = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    decrypted_data = cipher.decrypt(encrypted_data)</span><br><span class="line">    unpadded_data = unpad(decrypted_data,AES.block_size)</span><br><span class="line">    <span class="keyword">return</span> unpadded_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">toStandardB64</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> data.replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;+&quot;</span>).replace(<span class="string">&quot;_&quot;</span>,<span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">&quot;nMymqvoWI5UzuGSsfOyxWS9E0JQYtcev4A_O1LXSr_HosyYfsqRmenMCcYf7-mdZjZ8LUfNc6HbRD89pGuGxJhYP475VhWKSXmkD7eAkTSmxA1MpUjQQHOjueGL1F_YWGExcwjd3N-sOHxEfeB59eTF1vGH9C_S6Q5TrXqrOg1R0yv5lrZ0CUyVHr38KtyytHyv4ip5jmin3q-HoLrMNZgkywRFi2RKOdxa8F-I1PLBhIOxZmtNm7IBiSVPvc8q2fnKJLbxMfM680Zr9YwRrxe_XcuzE1YLdSXTc2cmy5cq8M0xQ12eMbJo1sZhGPGs7&quot;</span></span><br><span class="line"></span><br><span class="line">standardb64 = toStandardB64(ciphertext).encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">plaintext = aes_decrypted_ecb(base64.b64decode(standardb64),<span class="string">b&quot;29XBu4ETjHx0YnfC&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;busiCode&quot;:&quot;BASE001&quot;,&quot;code&quot;:7,&quot;content&quot;:null,&quot;handler&quot;:&quot;USER&quot;,&quot;msg&quot;:&quot;验证码无效&quot;,&quot;status&quot;:&quot;BASE_ERROR&quot;,&quot;uid&quot;:&quot;1f0080f8-238f-483a-be04-9a7e2ca4c0e61741688413791&quot;,&quot;version&quot;:&quot;101&quot;,&quot;zeusId&quot;:&quot;luckycapiproxy-0ade0957-483805-214303&quot;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="整合代码，实现完整流程"><a href="#整合代码，实现完整流程" class="headerlink" title="整合代码，实现完整流程"></a>整合代码，实现完整流程</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt_ecb</span>(<span class="params">plaintext,key</span>):</span><br><span class="line">    cipher = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    padded_data = pad(plaintext,AES.block_size)</span><br><span class="line">    encrypted_data = cipher.encrypt(padded_data)</span><br><span class="line">    <span class="keyword">return</span> encrypted_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypted_ecb</span>(<span class="params">encrypted_data,key</span>):</span><br><span class="line">    cipher = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    decrypted_data = cipher.decrypt(encrypted_data)</span><br><span class="line">    unpadded_data = unpad(decrypted_data,AES.block_size)</span><br><span class="line">    <span class="keyword">return</span> unpadded_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">toStandardB64</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> data.replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;+&quot;</span>).replace(<span class="string">&quot;_&quot;</span>,<span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_call</span>(<span class="params">encoded_data</span>):</span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(encoded_data)</span><br><span class="line">    <span class="keyword">return</span> md5.digest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getsign</span>(<span class="params">encode_str</span>):</span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        i*=<span class="number">4</span></span><br><span class="line">        result = (<span class="built_in">int</span>(encode_str[(i+<span class="number">1</span>)*<span class="number">2</span>:(i+<span class="number">1</span>)*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>)&lt;&lt;<span class="number">16</span>) | (<span class="built_in">int</span>(encode_str[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>)&lt;&lt;<span class="number">24</span>) | (<span class="built_in">int</span>(encode_str[(i+<span class="number">2</span>)*<span class="number">2</span>:(i+<span class="number">2</span>)*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>)&lt;&lt;<span class="number">8</span>) | <span class="built_in">int</span>(encode_str[(i+<span class="number">3</span>)*<span class="number">2</span>:(i+<span class="number">3</span>)*<span class="number">2</span>+<span class="number">2</span>],<span class="number">16</span>)</span><br><span class="line">        result &amp;= <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span> result &amp; <span class="number">0x80000000</span>:</span><br><span class="line">            result = -((result ^ <span class="number">0xffffffff</span>) + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> result&lt;<span class="number">0</span>:</span><br><span class="line">            result = -result</span><br><span class="line">        res+=<span class="built_in">str</span>(result)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_q</span>():</span><br><span class="line">    data = <span class="string">b&#x27;&#123;&quot;mobile&quot;:&quot;17888888888&quot;,&quot;countryNo&quot;:&quot;86&quot;,&quot;validateCode&quot;:&quot;123456&quot;,&quot;appversion&quot;:&quot;5265&quot;,&quot;type&quot;:1,&quot;deviceId&quot;:&quot;android_lucky_ef5722c5-96ff-4521-8096-27530a0365b2&quot;,&quot;systemVersion&quot;:&quot;29&quot;,&quot;blackBox&quot;:&quot;oGPHE1741688414xYaSQkj72m7&quot;,&quot;uniqueCode&quot;:&quot;DUQKlOhFPQSnh57_KB6erjHdTADHhPk26j60RFVRS2xPaEZQUVNuaDU3X0tCNmVyakhkVEFESGhQazI2ajYwc2h1&quot;,&quot;regionId&quot;:&quot;CO0001&quot;,&quot;regId&quot;:&quot;&quot;,&quot;deviceBrand&quot;:&quot;google&quot;,&quot;isSecurityVerify&quot;:false&#125;&#x27;</span></span><br><span class="line">    key = <span class="string">b&quot;29XBu4ETjHx0YnfC&quot;</span></span><br><span class="line">    aes_encrypted_data = aes_encrypt_ecb(data,key=key)</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(aes_encrypted_data).decode(<span class="string">&quot;utf-8&quot;</span>).replace(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;-&quot;</span>).replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;_&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_response</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    standardb64 = toStandardB64(ciphertext).encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    plaintext = aes_decrypted_ecb(base64.b64decode(standardb64),<span class="string">b&quot;29XBu4ETjHx0YnfC&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> plaintext.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://capi.lkcoffee.com/resource/m/user/login&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">&quot;x-lk-akv&quot;</span>: <span class="string">&quot;5265&quot;</span>,</span><br><span class="line">  <span class="string">&quot;x-lk-mid&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;x-lk-sid&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;event_id&quot;</span>: <span class="string">&quot;1741773373890&quot;</span>,</span><br><span class="line">  <span class="string">&quot;x-lk-csid&quot;</span>: <span class="string">&quot;b23ee6cb-c0f2-4e43-9580-727ce47f7b73&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sentry-trace&quot;</span>: <span class="string">&quot;5d4028a1977c401da7dc5299c9fe942f-11ad2f67d12f4343-0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;baggage&quot;</span>: <span class="string">&quot;sentry-environment=release,sentry-public_key=d4365939f7c346a4b0c6ee50a412c050,sentry-release=com.lucky.luckyclient%405.2.65%2B201,sentry-sample_rate=0,sentry-trace_id=5d4028a1977c401da7dc5299c9fe942f,sentry-transaction=LoginActivity.btnConfirm&quot;</span>,</span><br><span class="line">  <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">  <span class="string">&quot;content-length&quot;</span>: <span class="string">&quot;684&quot;</span>,</span><br><span class="line">  <span class="string">&quot;accept-encoding&quot;</span>: <span class="string">&quot;gzip&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;uid=ede6c26f-85eb-4f41-b103-051605ae1c821741773364713&quot;</span>,</span><br><span class="line">  <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;okhttp/4.9.3&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body = &#123;</span><br><span class="line"><span class="comment">#   &quot;sign&quot;: &quot;7964953862091852252935269275418960748&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;q&quot;: &quot;-YqmJeyS17YrIsczlOeETZzPH0DbB-Hyhw09ZJUl9kZ4SZ_KkVh07uBqj8ejykTw1bl02vu1dt67BbIKA-1FqlTuFGh8VoJemyEkmhqnf6w9u98dKvCdpFPDiRktU-PGDtnD9Y8rBYgBHuPyfnMR15jTMaF0HV4SMw6qU_S_3p771jHSE9Kl8Yx6zKgkBv71qLhQP68VNsifnmQFbtEBdQt5hK1-9WLGzrhB1jLiL1EJTtmqGymT21ymquQHXcDudPQ7clgzz0Xzjt_NO-L5mbbklzohRwsDO0eQtHxD58zL6QlQoWsRTqvlVMkUz2wSNPsApVb2hq30D4x9RSvDE3sKJBGAzFqDG_XwE6yoojDNPn2wH0H0o3-wtCso0hRJXlvPTHz_zMYdTcMNKTwccWgu0mmbH5NKcVCxrZ6R2MeCfUb8ACp7PKjZeAecaHq_REu3Kkoi3xXPPK_MU_eLl5A1MFw_d7azTSHHUFmL3RdiC15vvA1bajH1NDbLEAxMV8nUOJVfuWxXDGS0Diknyj0V95At_KBG4y7Ylo-4fv4=&quot;,</span></span><br><span class="line">  <span class="string">&quot;q&quot;</span> : g_q(),</span><br><span class="line">  <span class="string">&quot;uid&quot;</span>: <span class="string">&quot;ede6c26f-85eb-4f41-b103-051605ae1c821741773364713&quot;</span>,</span><br><span class="line">  <span class="string">&quot;t&quot;</span>: <span class="string">&quot;1741773407429&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cid&quot;</span>: <span class="string">&quot;210101&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body_sorted = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(body.items()))</span><br><span class="line"></span><br><span class="line">sign_data = <span class="string">&quot;;&quot;</span>.join([key+<span class="string">&quot;=&quot;</span>+value <span class="keyword">for</span> key,value <span class="keyword">in</span> body_sorted.items()])</span><br><span class="line">salt = <span class="string">&quot;29XBu4ETjHx0YnfC&quot;</span></span><br><span class="line">sign = getsign(<span class="built_in">bytes</span>.<span class="built_in">hex</span>(md5_call((sign_data+salt).encode(<span class="string">&quot;utf-8&quot;</span>))))</span><br><span class="line"></span><br><span class="line">body[<span class="string">&quot;sign&quot;</span>] = sign</span><br><span class="line"><span class="built_in">print</span>(sign)</span><br><span class="line"></span><br><span class="line">response = requests.post(url=url,headers=headers,data=body)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line">ciphertext = response.text</span><br><span class="line"><span class="comment"># ciphertext = &quot;YpEwA8iL58QXeR-ZSZ3A7UAYW87GDqYNVVxccRJRXdrchLKJaUKgoMkCqriRjHJ4SHuZfPrwvOsq-38HXEl4EAM3FqOfGIeNuJ5q6Fu9OmWzWwpD4jYobI1KM2-6q8tRPbAQDw1nckcu6dY1NyzcLI_W1CV81Vyr7bEk33zBS_Qe5ayui3QUeI1r0cKnuzY2X7er31heAHd1jrRAX_rcylBkDe_EvXgcKWMJ8jw_KvXopUOKdAlZAOXaPmRvqP-XXFnmJ1md6AKmhZ4-64eo_iwXkOtjLv3PQHpr3CJr93C3kQIzAKmAR79hII_4WPcITE-Pb3x6ip6QuAEywIYn1_EZrhdvspv6kTdwrzn5kkA=&quot;</span></span><br><span class="line"><span class="built_in">print</span>(decrypt_response(ciphertext))</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;bizId&quot;:&quot;&quot;,&quot;busiCode&quot;:&quot;BASE001&quot;,&quot;code&quot;:7,&quot;content&quot;:null,&quot;handler&quot;:&quot;USER&quot;,&quot;msg&quot;:&quot;验证码无效&quot;,&quot;shardingId&quot;:&quot;&quot;,&quot;status&quot;:&quot;BASE_ERROR&quot;,&quot;uid&quot;:&quot;6e1c943b-cc1f-41ea-8ebd-b5d06ddae5c11741928800889&quot;,&quot;version&quot;:&quot;101&quot;,&quot;zeusId&quot;:&quot;luckycapiproxy-0ade7194-483869-687159&quot;&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>瑞幸白盒AES</tag>
      </tags>
  </entry>
  <entry>
    <title>看雪3w20_9题目ollvm9.apk复现</title>
    <url>/2025/03/06/%E7%9C%8B%E9%9B%AA3w20-9%E9%A2%98%E7%9B%AEollvm9-apk%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="ollvm9-apk"><a href="#ollvm9-apk" class="headerlink" title="ollvm9.apk"></a>ollvm9.apk</h1><p><img src="/2025/03/06/%E7%9C%8B%E9%9B%AA3w20-9%E9%A2%98%E7%9B%AEollvm9-apk%E5%A4%8D%E7%8E%B0/13.jpg"></p>
<h1 id="Jadx反编译分析"><a href="#Jadx反编译分析" class="headerlink" title="Jadx反编译分析"></a>Jadx反编译分析</h1><p><img src="/2025/03/06/%E7%9C%8B%E9%9B%AA3w20-9%E9%A2%98%E7%9B%AEollvm9-apk%E5%A4%8D%E7%8E%B0/14.jpg"></p>
<p>通过<code>UUIDCheckSum()</code>方法生成签名，参数是随机生成的长度36的字母数字字符串。</p>
<p>frida主动调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">call_UUIDCheckSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.kanxue.ollvm_ndk.MainActivity&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> result = <span class="title class_">MainActivity</span>.<span class="title class_">UUIDCheckSum</span>(<span class="string">&quot;0123456789abcdef0123456789abcdef1111&quot;</span>); </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">call_UUIDCheckSum()</span><br><span class="line">result: ah0NaxiObNmHc61xmwOOnN4K_h8Pb3qT_hvumQ9zn6qKa6aN</span><br></pre></td></tr></table></figure>

<h1 id="so分析"><a href="#so分析" class="headerlink" title="so分析"></a>so分析</h1><p>使用IDA打开so文件，跳转到<code>UUIDCheckSum</code>函数处</p>
<p><code>UUIDCheckSum</code>函数里又调用了三个函数</p>
<p><img src="/2025/03/06/%E7%9C%8B%E9%9B%AA3w20-9%E9%A2%98%E7%9B%AEollvm9-apk%E5%A4%8D%E7%8E%B0/15.jpg"></p>
<h2 id="hook-sub-FCB4"><a href="#hook-sub-FCB4" class="headerlink" title="hook_sub_FCB4()"></a>hook_sub_FCB4()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_sub_FCB4</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> funcaddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>).<span class="title function_">add</span>(<span class="number">0xFCB4</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(funcaddr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg0:&quot;</span>,args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg1:&quot;</span>,args[<span class="number">1</span>]);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret this.arg0:&quot;</span>,<span class="variable language_">this</span>.<span class="property">arg0</span>.<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_sub_FCB4</span>()</span><br></pre></td></tr></table></figure>

<p>hook结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arg0: 0123456789abcdef0123456789abcdef1111</span><br><span class="line">arg1: 0x24</span><br><span class="line">ret this.arg0: 10325476-8`cb-4g10-25479-8`cbedg00c3</span><br></pre></td></tr></table></figure>

<h2 id="hook-sub-1029C"><a href="#hook-sub-1029C" class="headerlink" title="hook_sub_1029C()"></a>hook_sub_1029C()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_sub_1029C</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> funcaddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>).<span class="title function_">add</span>(<span class="number">0x1029C</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(funcaddr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1029C arg0:&quot;</span>,args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1029C arg1:&quot;</span>,args[<span class="number">1</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1029C arg2:&quot;</span>,args[<span class="number">2</span>]);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg1</span> = args[<span class="number">1</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1029C ret this.arg0:&quot;</span>,<span class="variable language_">this</span>.<span class="property">arg0</span>.<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1029C ret this.arg1:&quot;</span>,<span class="variable language_">this</span>.<span class="property">arg1</span>.<span class="title function_">readCString</span>());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_sub_1029C</span>()</span><br></pre></td></tr></table></figure>

<p>hook结果，它被调用了两次，在其他地方也被调用了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1029C arg0: </span><br><span class="line">1029C arg1: 10325476-8`cb-4g10-25479-8`cbedg00c3</span><br><span class="line">1029C arg2: 0x24</span><br><span class="line">1029C ret this.arg0: 1</span><br><span class="line">1029C ret this.arg1: 10325476-8`cb-4g10-25479-8`cbedg00c3</span><br><span class="line"></span><br><span class="line">1029C arg0:</span><br><span class="line">1029C arg1: 10325476-8`cb-4g10-25479-8`cbedg00c3</span><br><span class="line">1029C arg2: 0x24</span><br><span class="line">1029C ret this.arg0: 1</span><br><span class="line">1029C ret this.arg1: 10325476-8`cb-4g10-25479-8`cbedg00c3</span><br></pre></td></tr></table></figure>



<h2 id="hook-sub-F9B8"><a href="#hook-sub-F9B8" class="headerlink" title="hook_sub_F9B8()"></a>hook_sub_F9B8()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_sub_F9B8</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> funcaddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>).<span class="title function_">add</span>(<span class="number">0xF9B8</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(funcaddr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;F9B8 arg0:&quot;</span>,args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;F9B8 ret this.arg0:&quot;</span>,<span class="variable language_">this</span>.<span class="property">arg0</span>.<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_sub_F9B8</span>()</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F9B8 arg0: 1</span><br><span class="line">F9B8 ret this.arg0: 1</span><br></pre></td></tr></table></figure>

<p>这两个函数好像没有做什么事情</p>
<p>在函数<code>F9B8()</code>里看到还调用了其他函数</p>
<p><img src="/2025/03/06/%E7%9C%8B%E9%9B%AA3w20-9%E9%A2%98%E7%9B%AEollvm9-apk%E5%A4%8D%E7%8E%B0/16.jpg"></p>
<h2 id="hook-sub-F04C"><a href="#hook-sub-F04C" class="headerlink" title="hook_sub_F04C()"></a>hook_sub_F04C()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_sub_F04C</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> funcaddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>).<span class="title function_">add</span>(<span class="number">0xF04C</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(funcaddr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;F04C arg0:&quot;</span>,args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;F04C arg1:&quot;</span>,args[<span class="number">1</span>]);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;F04C arg2:&quot;</span>,args[<span class="number">2</span>]);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;F04C arg3:&quot;</span>,args[<span class="number">3</span>]);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;F04C arg4:&quot;</span>,args[<span class="number">4</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;F04C arg5:&quot;</span>,args[<span class="number">5</span>].<span class="title function_">readCString</span>());</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;F04C ret:&quot;</span>,retval);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_sub_F04C</span>()</span><br></pre></td></tr></table></figure>

<p>hook结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F04C arg0: 10325476-8`cb-4g10-25479-8`cbedg00c3</span><br><span class="line">F04C arg1: 0x24</span><br><span class="line">F04C arg2: 0x24</span><br><span class="line">F04C arg3: 0xdde4659c</span><br><span class="line">F04C arg4: </span><br><span class="line">F04C arg5: </span><br><span class="line">F04C ret: 0xfd39fea0</span><br></pre></td></tr></table></figure>

<p>这里的两个地址无法访问</p>
<h1 id="UnidbgTrace-FCB4"><a href="#UnidbgTrace-FCB4" class="headerlink" title="UnidbgTrace FCB4"></a>UnidbgTrace FCB4</h1><p>先把函数模拟执行了，不需要补环境</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">process</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> DalvikModule dm;</span><br><span class="line">    <span class="keyword">private</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MainActivity</span><span class="params">()</span> &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder</span><br><span class="line">                .for64Bit() <span class="comment">// for32Bit()</span></span><br><span class="line">                .setProcessName(process)</span><br><span class="line">                .setRootDir(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;target/rootfs&quot;</span>))</span><br><span class="line">                .addBackendFactory(<span class="keyword">new</span> <span class="title class_">Unicorn2Factory</span>(<span class="literal">true</span>))</span><br><span class="line">                .build();</span><br><span class="line">        memory = emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;apktest/ollvm9.apk&quot;</span>));</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//        vm.setVerbose(true);</span></span><br><span class="line">        dm = vm.loadLibrary(<span class="string">&quot;native-lib&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">UUIDCheckSum</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DvmClass</span> <span class="variable">dvmClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.kanxue.ollvm_ndk.MainActivity&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">stringObject</span> <span class="operator">=</span> dvmClass.callStaticJniMethodObject(emulator,<span class="string">&quot;UUIDCheckSum(Ljava/lang/String;)Ljava/lang/String;&quot;</span>,<span class="string">&quot;0123456789abcdef0123456789abcdef1111&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> stringObject.getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MainActivity</span> <span class="variable">main</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MainActivity</span>();</span><br><span class="line">        System.out.println(main.UUIDCheckSum());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>UUIDCheckSum()</code>里添加trace代码</p>
<p>这里trace <code>FCB4()</code>函数的地址范围</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">traceFile</span> <span class="operator">=</span> <span class="string">&quot;myTraceCodeFile_FCB4.txt&quot;</span>;</span><br><span class="line"><span class="type">PrintStream</span> <span class="variable">traceStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    traceStream = <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(traceFile));</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">emulator.traceCode(<span class="number">0x1200FCB4</span>,<span class="number">0x1200FCB4</span>+<span class="number">0x27C</span>).setRedirect(traceStream);</span><br></pre></td></tr></table></figure>

<p><img src="/2025/03/06/%E7%9C%8B%E9%9B%AA3w20-9%E9%A2%98%E7%9B%AEollvm9-apk%E5%A4%8D%E7%8E%B0/17.jpg"></p>
<h2 id="分析trace"><a href="#分析trace" class="headerlink" title="分析trace"></a>分析trace</h2><p>使用notepad++助力分析日志文件</p>
<p>函数返回值会存放在X0寄存器里，找到它的地址</p>
<p><img src="/2025/03/06/%E7%9C%8B%E9%9B%AA3w20-9%E9%A2%98%E7%9B%AEollvm9-apk%E5%A4%8D%E7%8E%B0/18.jpg"></p>
<p><code>X0</code>为<code>0x12353030</code></p>
<p>搜索<code>0x12353030</code>，先分析一段数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x1200fe18: &quot;ldrb w20, [x0, x22]&quot; x0=0x12353030 x22=0x0 =&gt; w20=0x30  ;从x22加载一个字节到w20</span><br><span class="line">0x1200fe1c: &quot;ldrb w21, [sp, #0xc]&quot; sp=0xe4fff620 =&gt; w21=0xff</span><br><span class="line">0x1200fe20: &quot;ldr w23, [sp, #0x1c]&quot; sp=0xe4fff620 =&gt; w23=0x0</span><br><span class="line">0x1200fe24: &quot;eor w24, w20, #1&quot; w20=0x30 =&gt; w24=0x31 ;w20与1异或后存入w24</span><br><span class="line">0x1200fe28: &quot;strb w24, [x0, x22]&quot; w24=0x31 x0=0x12353030 x22=0x0 =&gt; w24=0x31 ;w24存入x22</span><br></pre></td></tr></table></figure>

<p>我们传入的参数转16进制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0123456789abcdef0123456789abcdef1111</span><br><span class="line">30 31 32 33 34 35 36 37 38 39 61 62 63 64 65 66 30 31 32 33 34 35 36 37 38 39 61 62 63 64 65 66 31 31 31 31</span><br></pre></td></tr></table></figure>

<p>把<code>FCB4()</code>的返回值转为16进制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10325476-8`cb-4g10-25479-8`cbedg00c3</span><br><span class="line">31 30 33 32 35 34 37 36 2d 38 60 63 62 2d 34 67 31 30 2d 32 35 34 37 39 2d 38 60 63 62 65 64 67 30 30 63 33</span><br></pre></td></tr></table></figure>

<p>初步猜想通过异或处理的，用C语言实现一下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sub_FCB4</span><span class="params">(<span class="type">char</span>* input,<span class="type">int</span> length,<span class="type">char</span>* result)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> w20 = input[i];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> w24 = w20 ^ <span class="number">1</span>;</span><br><span class="line">        result[i] = w24;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%0x &quot;</span>,result[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *input = <span class="string">&quot;0123456789abcdef0123456789abcdef1111&quot;</span>;</span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">strlen</span>(input);</span><br><span class="line">    <span class="type">int</span> *result = (<span class="type">int</span>*) <span class="built_in">malloc</span>(length);</span><br><span class="line">    sub_FCB4(input,length,result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 31 30 33 32 35 34 37 36 39 38 60 63 62 65 64 67 31 30 33 32 35 34 37 36 39 38 60 63 62 65 64 67 30 30 30 30</span></span><br></pre></td></tr></table></figure>

<p>这里输出结果与真实结果还是有差异的，对比分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">31 30 33 32 35 34 37 36 39 38 60 63 62 65 64 67 31 30 33 32 35 34 37 36 39 38 60 63 62 65 64 67 30 30 30 30  //输出结果</span><br><span class="line">31 30 33 32 35 34 37 36 2d 38 60 63 62 2d 34 67 31 30 2d 32 35 34 37 39 2d 38 60 63 62 65 64 67 30 30 63 33  //真实结果</span><br></pre></td></tr></table></figure>

<p>到trace中查找分析</p>
<p>发现如下这几种情况没有进行异或，而是直接传的固定的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;strb w7, [x0, x20]&quot; w7=0x2d x0=0x12353030 x20=0x8 =&gt; w7=0x2d</span><br><span class="line">&quot;strb w7, [x0, x20]&quot; w7=0x2d x0=0x12353030 x20=0xd =&gt; w7=0x2d</span><br><span class="line">&quot;strb w7, [x0, x20]&quot; w7=0x2d x0=0x12353030 x20=0x12 =&gt; w7=0x2d</span><br><span class="line">&quot;strb w7, [x0, x20]&quot; w7=0x2d x0=0x12353030 x20=0x18 =&gt; w7=0x2d</span><br><span class="line">&quot;strb w6, [x0, x20]&quot; w6=0x34 x0=0x12353030 x20=0xe =&gt; w6=0x34</span><br><span class="line">&quot;strb w8, [x0, #0x23]&quot; w8=0x33 x0=0x12353030 =&gt; w8=0x33</span><br><span class="line">&quot;strb w8, [x0, #0x22]&quot; w8=0x63 x0=0x12353030 =&gt; w8=0x63</span><br></pre></td></tr></table></figure>

<p>重新使用C语言实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sub_FCB4</span><span class="params">(<span class="type">char</span>* input,<span class="type">int</span> length,<span class="type">char</span>* result)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> w20 = input[i];</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0x8</span> || i==<span class="number">0xd</span> || i==<span class="number">0x12</span> || i==<span class="number">0x18</span>)&#123;</span><br><span class="line">            result[i] = <span class="number">0x2d</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0xe</span>)&#123;</span><br><span class="line">            result[i] = <span class="number">0x34</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0x22</span>)&#123;</span><br><span class="line">            result[i] = <span class="number">0x63</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0x23</span>)&#123;</span><br><span class="line">            result[i] = <span class="number">0x33</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> w24 = w20 ^ <span class="number">1</span>;</span><br><span class="line">        result[i] = w24;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%0x &quot;</span>,result[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *input = <span class="string">&quot;0123456789abcdef0123456789abcdef1111&quot;</span>;</span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">strlen</span>(input);</span><br><span class="line">    <span class="type">int</span> *result = (<span class="type">int</span>*) <span class="built_in">malloc</span>(length);</span><br><span class="line">    sub_FCB4(input,length,result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  31 30 33 32 35 34 37 36 2d 38 60 63 62 2d 34 67 31 30 2d 32 35 34 37 36 2d 38 60 63 62 65 64 67 30 30 63 33</span></span><br></pre></td></tr></table></figure>

<p>再次对比</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">31 30 33 32 35 34 37 36 2d 38 60 63 62 2d 34 67 31 30 2d 32 35 34 37 36 2d 38 60 63 62 65 64 67 30 30 63 33 // 输出结果</span><br><span class="line">31 30 33 32 35 34 37 36 2d 38 60 63 62 2d 34 67 31 30 2d 32 35 34 37 39 2d 38 60 63 62 65 64 67 30 30 63 33  //真实结果</span><br></pre></td></tr></table></figure>

<p>发现还是有一个地方不一样</p>
<p>到trace日志中查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x1200fcc8: &quot;ldrb w22, [x0, #0x18]&quot; x0=0x12353030 =&gt; w22=0x38</span><br><span class="line">...</span><br><span class="line">0x1200fd44: &quot;strb w22, [x0, #0x17]&quot; w22=0x38 x0=0x12353030 =&gt; w22=0x38</span><br><span class="line">...</span><br><span class="line">0x1200fe14: &quot;ldrsw x22, [sp, #0x18]&quot; x22=0x8f61219b sp=0xe4fff620 =&gt; x22=0x17</span><br><span class="line">0x1200fe18: &quot;ldrb w20, [x0, x22]&quot; x0=0x12353030 x22=0x17 =&gt; w20=0x38</span><br><span class="line">0x1200fe1c: &quot;ldrb w21, [sp, #0xc]&quot; sp=0xe4fff620 =&gt; w21=0xc5</span><br><span class="line">0x1200fe20: &quot;ldr w23, [sp, #0x1c]&quot; sp=0xe4fff620 =&gt; w23=0x494</span><br><span class="line">0x1200fe24: &quot;eor w24, w20, #1&quot; w20=0x38 =&gt; w24=0x39</span><br><span class="line">0x1200fe28: &quot;strb w24, [x0, x22]&quot; w24=0x39 x0=0x12353030 x22=0x17 =&gt; w24=0x39</span><br></pre></td></tr></table></figure>

<p>修改C</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sub_FCB4</span><span class="params">(<span class="type">char</span>* input,<span class="type">int</span> length,<span class="type">char</span>* result)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0x8</span> || i==<span class="number">0xd</span> || i==<span class="number">0x12</span> || i==<span class="number">0x18</span>)&#123;</span><br><span class="line">            result[i] = <span class="number">0x2d</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0xe</span>)&#123;</span><br><span class="line">            result[i] = <span class="number">0x34</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0x22</span>)&#123;</span><br><span class="line">            result[i] = <span class="number">0x63</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0x23</span>)&#123;</span><br><span class="line">            result[i] = <span class="number">0x33</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0x17</span>)&#123;</span><br><span class="line">            result[i]=input[i+<span class="number">1</span>] ^<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> w20 = input[i];</span><br><span class="line"></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> w24 = w20 ^ <span class="number">1</span>;</span><br><span class="line">        result[i] = w24;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%0x &quot;</span>,result[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *input = <span class="string">&quot;0123456789abcdef0123456789abcdef1111&quot;</span>;</span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">strlen</span>(input);</span><br><span class="line">    <span class="type">int</span> *result = (<span class="type">int</span>*) <span class="built_in">malloc</span>(length);</span><br><span class="line">    sub_FCB4(input,length,result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这次的结果就与真实结果是一样的</p>
<h1 id="UnidbgTrace-F04C"><a href="#UnidbgTrace-F04C" class="headerlink" title="UnidbgTrace F04C"></a>UnidbgTrace F04C</h1><p>修改trace代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">traceFile</span> <span class="operator">=</span> <span class="string">&quot;myTraceCodeFile_F04C.txt&quot;</span>;</span><br><span class="line"><span class="type">PrintStream</span> <span class="variable">traceStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    traceStream = <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(traceFile));</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">emulator.traceCode(<span class="number">0x1200F04C</span>,<span class="number">0x1200F04c</span>+<span class="number">0x224</span>).setRedirect(traceStream);</span><br></pre></td></tr></table></figure>

<p><img src="/2025/03/06/%E7%9C%8B%E9%9B%AA3w20-9%E9%A2%98%E7%9B%AEollvm9-apk%E5%A4%8D%E7%8E%B0/19.jpg"></p>
<p>把返回值转为16进制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ah0NaxiObNmHc61xmwOOnN4K_h8Pb3qT_hvumQ9zn6qKa6aN</span><br><span class="line">61 68 30 4e 61 78 69 4f 62 4e 6d 48 63 36 31 78 6d 77 4f 4f 6e 4e 34 4b 5f 68 38 50 62 33 71 54 5f 68 76 75 6d 51 39 7a 6e 36 71 4b 61 36 61 4e</span><br></pre></td></tr></table></figure>

<p>搜索<code>x0</code>，跳转到最开始的<code>x0</code>的地址<code>0x12353090</code></p>
<p>然后搜索<code>0x12353090</code></p>
<p><img src="/2025/03/06/%E7%9C%8B%E9%9B%AA3w20-9%E9%A2%98%E7%9B%AEollvm9-apk%E5%A4%8D%E7%8E%B0/20.jpg"></p>
<p>分析第一个值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;ldrb w8, [x21, x24]&quot; x21=0x12353090 x24=0x0 =&gt; w8=0x31</span><br><span class="line">&quot;lsr x8, x8, #2&quot; x8=0x31 =&gt; x8=0xc</span><br><span class="line">&quot;ldrb w1, [x23, x8]&quot; x23=0x12037010 x8=0xc =&gt; w1=0x61</span><br><span class="line">&quot;ldrb w8, [x21, x24]&quot; x21=0x12353090 x24=0x0 =&gt; w8=0x31</span><br><span class="line"></span><br><span class="line">1.把地址0x12353090偏移0x0处的值放入w8，w8=0x31</span><br><span class="line">2.将寄存器x8里的值逻辑右移2位，x8=0xc</span><br><span class="line">3.把地址0x12037010偏移为0xc处的值存入w1,w1=0x61</span><br><span class="line">4.把地址0x12353090偏移0x0处的值再次放入w8，w8=0x31</span><br></pre></td></tr></table></figure>

<p>这里出现的<code>0x12037010</code>这个地址指向的应该是一个表</p>
<p>用unidbg来找这个表，在函数地址<code>0xF04C</code>处下断点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">emulator.attach().addBreakPoint(dm.getModule().base+<span class="number">0x0FF30</span>);</span><br></pre></td></tr></table></figure>

<p>运行起来之后，用<code>m0x12037010</code>查看改地址处的数据为<code>0123456789-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</code></p>
<p>用C语言实现这个过程</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sub_FCB4</span><span class="params">(<span class="type">char</span>* input,<span class="type">int</span> length,<span class="type">char</span>* result)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0x8</span> || i==<span class="number">0xd</span> || i==<span class="number">0x12</span> || i==<span class="number">0x18</span>)&#123;</span><br><span class="line">            result[i] = <span class="number">0x2d</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0xe</span>)&#123;</span><br><span class="line">            result[i] = <span class="number">0x34</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0x22</span>)&#123;</span><br><span class="line">            result[i] = <span class="number">0x63</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0x23</span>)&#123;</span><br><span class="line">            result[i] = <span class="number">0x33</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0x17</span>)&#123;</span><br><span class="line">            result[i]=input[i+<span class="number">1</span>] ^<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> w20 = input[i];</span><br><span class="line"></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> w24 = w20 ^ <span class="number">1</span>;</span><br><span class="line">        result[i] = w24;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    for (int i = 0; i &lt; length; ++i) &#123;</span></span><br><span class="line"><span class="comment">//        printf(&quot;%0x &quot;,result[i]);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sub_F04C</span><span class="params">(<span class="type">char</span>* input,<span class="type">int</span> length,<span class="type">char</span>* char_table,<span class="type">char</span> *result)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> x8 = input[i]&gt;&gt;<span class="number">2</span>;</span><br><span class="line">        result[i] = char_table[x8];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%0x &quot;</span>,result[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *input = <span class="string">&quot;0123456789abcdef0123456789abcdef1111&quot;</span>;</span><br><span class="line">    <span class="type">int</span> input_length = <span class="built_in">strlen</span>(input);</span><br><span class="line">    <span class="type">int</span> *FCB4_result = (<span class="type">int</span>*) <span class="built_in">malloc</span>(input_length);</span><br><span class="line">    sub_FCB4(input,input_length,FCB4_result);</span><br><span class="line">    <span class="type">char</span> *char_table = <span class="string">&quot;0123456789-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="comment">//    int char_table_length = strlen(char_table);</span></span><br><span class="line">    <span class="type">char</span> *F04C_result = (<span class="type">int</span>*) <span class="built_in">malloc</span>(<span class="number">48</span>);</span><br><span class="line">    sub_F04C(FCB4_result,<span class="number">48</span>,char_table,F04C_result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 61 61 61 61 62 62 62 62 5f 63 6d 6d 6d 5f 62 6e 61 61 5f 61 62 62 62 63 5f 63 6d 6d 6d 6e 6e 6e 61 61 6d 61 30 30 30 30</span></span><br></pre></td></tr></table></figure>

<p>与真实答案对比</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">61 61 61 61 62 62 62 62 5f 63 6d 6d 6d 5f 62 6e 61 61 5f 61 62 62 62 63 5f 63 6d 6d 6d 6e 6e 6e 61 61 6d 61 30 30 30 30 // 输出</span><br><span class="line">61 68 30 4e 61 78 69 4f 62 4e 6d 48 63 36 31 78 6d 77 4f 4f 6e 4e 34 4b 5f 68 38 50 62 33 71 54 5f 68 76 75 6d 51 39 7a 6e 36 71 4b 61 36 61 4e // 真实结果</span><br></pre></td></tr></table></figure>

<p>第一位是相同的，但是后面的还要继续分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;ldrb w9, [x21, x24]&quot; x21=0x12353090 x24=0x1 =&gt; w9=0x30</span><br><span class="line">&quot;orr x8, x8, x9, lsr #4&quot; x8=0x10 x9=0x30 =&gt; x8=0x13</span><br><span class="line">0x1200f14c: &quot;ldrb w1, [x23, x8]&quot; x23=0x12037010 x8=0x13 =&gt; w1=0x68</span><br><span class="line">&quot;ldrb w8, [x21, x24]&quot; x21=0x12353090 x24=0x1 =&gt; w8=0x30</span><br><span class="line"></span><br><span class="line">1.把0x12353090地址偏移为1处的值加载到w9寄存器里</span><br><span class="line">2.将 x9 的值逻辑右移 4 位后，与 x8 的值按位或（OR），结果存回 x8，这里的x8来源于上次计算的结果</span><br><span class="line">3.把地址0x12037010偏移为0x13处的值存入w1,w1=0x68</span><br><span class="line">4.把0x12353090地址偏移为1处的值加载到w8寄存器里</span><br></pre></td></tr></table></figure>

<p>往后看第三个参数和第四个参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x1200f16c: &quot;ldrb w9, [x21, x24]&quot; x21=0x12353090 x24=0x2 =&gt; w9=0x33 # 从地址(x21 + x24)加载一个字节到w9</span><br><span class="line">0x1200f170: &quot;orr x8, x8, x9, lsr #6&quot; x8=0x0 x9=0x33 =&gt; x8=0x0  		# 将w9右移6位后与x8进行OR操作</span><br><span class="line">0x1200f174: &quot;ldrb w1, [x23, x8]&quot; x23=0x12037010 x8=0x0 =&gt; w1=0x30	# 从地址(x23 + x8)加载一个字节到w1</span><br><span class="line">0x1200f180: &quot;ldrb w8, [x21, x24]&quot; x21=0x12353090 x24=0x2 =&gt; w8=0x33 # 从地址(x21 + x24)加载一个字节到w8</span><br><span class="line"></span><br><span class="line">0x1200f184: &quot;and x8, x8, #0x3f&quot; x8=0x33 =&gt; x8=0x33					# 把x8同0x3f进行与操作，结果放入x8</span><br><span class="line">0x1200f188: &quot;ldrb w1, [x23, x8]&quot; x23=0x12037010 x8=0x33 =&gt; w1=0x4e	# 从地址(x23 + x8)加载一个字节到w1</span><br><span class="line"></span><br><span class="line">0x1200f11c: &quot;ldrb w8, [x21, x24]&quot; x21=0x12353090 x24=0x3 =&gt; w8=0x32	# 从地址(x21 + x24)加载一个字节到w8</span><br><span class="line">0x1200f120: &quot;lsr x8, x8, #2&quot; x8=0x32 =&gt; x8=0xc						# 将x8右移2位</span><br><span class="line">0x1200f124: &quot;ldrb w1, [x23, x8]&quot; x23=0x12037010 x8=0xc =&gt; w1=0x61	# 从地址(x23 + x8)加载一个字节到w1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>猜测这是循环操作的，每三个是一组，每组后面会加一步操作添加一个数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sub_FCB4</span><span class="params">(<span class="type">char</span>* input,<span class="type">int</span> length,<span class="type">char</span>* result)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0x8</span> || i==<span class="number">0xd</span> || i==<span class="number">0x12</span> || i==<span class="number">0x18</span>)&#123;</span><br><span class="line">            result[i] = <span class="number">0x2d</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0xe</span>)&#123;</span><br><span class="line">            result[i] = <span class="number">0x34</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0x22</span>)&#123;</span><br><span class="line">            result[i] = <span class="number">0x63</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0x23</span>)&#123;</span><br><span class="line">            result[i] = <span class="number">0x33</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0x17</span>)&#123;</span><br><span class="line">            result[i]=input[i+<span class="number">1</span>] ^<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> w20 = input[i];</span><br><span class="line"></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> w24 = w20 ^ <span class="number">1</span>;</span><br><span class="line">        result[i] = w24;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sub_F04C</span><span class="params">(<span class="type">char</span>* input,<span class="type">int</span> length,<span class="type">char</span> *result)</span>&#123;</span><br><span class="line">    <span class="type">char</span> *char_table = <span class="string">&quot;0123456789-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line">    <span class="type">int</span> x8;</span><br><span class="line">    <span class="type">int</span> count =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            x8 = input[i]&gt;&gt;<span class="number">2</span>;</span><br><span class="line">            result[count] = char_table[x8];</span><br><span class="line">            count++;</span><br><span class="line">            x8 = input[i];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            x8 = ((x8&amp;<span class="number">0b11</span>)&lt;&lt;<span class="number">4</span>);</span><br><span class="line">            x8 = (input[i]&gt;&gt;<span class="number">4</span>)^x8;</span><br><span class="line">            result[count] = char_table[x8];</span><br><span class="line">            count++;</span><br><span class="line">            x8 = input[i];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">2</span>)&#123;</span><br><span class="line">            x8 = ((x8&amp;<span class="number">0b1111</span>)&lt;&lt;<span class="number">2</span>);</span><br><span class="line">            x8 = (input[i]&gt;&gt;<span class="number">6</span>)^x8;</span><br><span class="line">            result[count] = char_table[x8];</span><br><span class="line">            count++;</span><br><span class="line">            x8 = input[i];</span><br><span class="line">            result[count] = char_table[x8&amp;<span class="number">0x3f</span>];</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%0x &quot;</span>,result[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> *input = <span class="string">&quot;0123456789abcdef0123456789abcdef1111&quot;</span>;</span><br><span class="line">    <span class="type">int</span> input_length = <span class="built_in">strlen</span>(input);</span><br><span class="line">    <span class="type">char</span> *FCB4_result = (<span class="type">char</span>*) <span class="built_in">malloc</span>(input_length);</span><br><span class="line">    sub_FCB4(input,input_length,FCB4_result);</span><br><span class="line">    <span class="type">char</span> *F04C_result = (<span class="type">char</span>*) <span class="built_in">malloc</span>(<span class="number">48</span>);</span><br><span class="line">    sub_F04C(FCB4_result,input_length,F04C_result);</span><br><span class="line">    <span class="built_in">free</span>(FCB4_result);</span><br><span class="line">    <span class="built_in">free</span>(F04C_result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">61 68 30 4e 61 78 69 4f 62 4e 6d 48 63 36 31 78 6d 77 4f 4f 6e 4e 34 4b 5f 68 38 50 62 33 71 54 5f 68 76 75 6d 51 39 7a 6e 36 71 4b 61 36 61 4e // 输出内容</span><br><span class="line">61 68 30 4e 61 78 69 4f 62 4e 6d 48 63 36 31 78 6d 77 4f 4f 6e 4e 34 4b 5f 68 38 50 62 33 71 54 5f 68 76 75 6d 51 39 7a 6e 36 71 4b 61 36 61 4e // 真实结果</span><br></pre></td></tr></table></figure>

<p>根据这个运算过程，可以猜测它是base64了</p>
<p>最终确定它是魔改的base64</p>
<p><img src="/2025/03/06/%E7%9C%8B%E9%9B%AA3w20-9%E9%A2%98%E7%9B%AEollvm9-apk%E5%A4%8D%E7%8E%B0/21.jpg"></p>
]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>ollvm9</tag>
      </tags>
  </entry>
  <entry>
    <title>算法小记</title>
    <url>/2025/03/28/%E7%AE%97%E6%B3%95%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="只有输出"><a href="#只有输出" class="headerlink" title="只有输出"></a>只有输出</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> str[] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h1><h2 id="给定两整数求和"><a href="#给定两整数求和" class="headerlink" title="给定两整数求和"></a>给定两整数求和</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cout &lt;&lt; a+b &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入描述：</span><br><span class="line">第一行有一个整数n。</span><br><span class="line">第二行有n个整数a。</span><br><span class="line">输出描述：</span><br><span class="line">输出一个整数，代表数组元素之和。</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">        sum+=a;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多组-一维数组-T组形式"><a href="#多组-一维数组-T组形式" class="headerlink" title="多组 一维数组 T组形式"></a>多组 一维数组 T组形式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入描述：</span><br><span class="line">第一行有一个整数t。</span><br><span class="line">随后t组数据。</span><br><span class="line">每组的第一行有一个整数n。</span><br><span class="line">每组的第二行有n个整数a。</span><br><span class="line">输出描述：</span><br><span class="line">输出t行，每行一个整数，代表数组元素之和。</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            cin &gt;&gt; a;</span><br><span class="line">            sum +=a;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入描述：</span><br><span class="line">第一行有两个整数n和m。</span><br><span class="line">随后n行，每行有m个整数 </span><br><span class="line">输出描述：</span><br><span class="line">输出一个整数，代表数组元素之和。</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="type">int</span> a;</span><br><span class="line">            cin &gt;&gt; a;</span><br><span class="line">            sum+=a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多组-二维数-T组形式"><a href="#多组-二维数-T组形式" class="headerlink" title="多组 二维数 T组形式"></a>多组 二维数 T组形式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入描述：</span><br><span class="line">第一行有一个整数 t。</span><br><span class="line">随后 t 组数据。</span><br><span class="line">每组的第一行有两个整数 n和 m。</span><br><span class="line">每组的随后 n 行，每行有 m 个整数 a 。</span><br><span class="line">输出描述：</span><br><span class="line">输出 t 行，每行一个整数，代表数组元素之和。</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">        <span class="type">int</span> n,m;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;m;k++)&#123;</span><br><span class="line">                <span class="type">int</span> a;</span><br><span class="line">                cin &gt;&gt; a;</span><br><span class="line">                sum+=a;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串逆序"><a href="#字符串逆序" class="headerlink" title="字符串逆序"></a>字符串逆序</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定一个长度为 </span><br><span class="line">n的字符串s ，请你将其倒置，然后输出。</span><br><span class="line">输入描述：</span><br><span class="line">第一行有一个整数 n。</span><br><span class="line">第二行有一个字符串 s，仅包含小写英文字符。</span><br><span class="line">输出描述：</span><br><span class="line">输出一个字符串，代表倒置后的字符串 s 。</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;algorithm&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">char</span> s[n]; </span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="comment">// 手动反转字符串</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        <span class="type">char</span> temp = s[i];</span><br><span class="line">        s[i] = s[n - <span class="number">1</span> - i];</span><br><span class="line">        s[n - <span class="number">1</span> - i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="多组-字符串-T组形式"><a href="#多组-字符串-T组形式" class="headerlink" title="多组 字符串 T组形式"></a>多组 字符串 T组形式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定 t 组询问，每次给出一个长度为 n 的字符串 s ，请将其倒置，然后输出。</span><br><span class="line">输入描述：</span><br><span class="line">第一行有一个整数 t随后 t 组数据。</span><br><span class="line">每组的第一行有一个整数 n 。</span><br><span class="line">每组的第二行有一个字符串 s，仅包含小写英文字符。</span><br><span class="line">输出描述：</span><br><span class="line">输出 t 行，每行一个字符串，代表倒置后的字符串 s 。</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;algorithm&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());</span><br><span class="line">        cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二维字符数组"><a href="#二维字符数组" class="headerlink" title="二维字符数组"></a>二维字符数组</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述：</span><br><span class="line">给定一个 n 行 m 列的二维字符数组 a ，第 i 行第 j 列元素的值为 a。</span><br><span class="line">请对行和列都倒置，然后输出之。</span><br><span class="line">输入描述：</span><br><span class="line">第一行有两个整数 n。</span><br><span class="line">随后 n 行，每行有 m 个字符，仅包含小写英文字符 。</span><br><span class="line">输出描述：</span><br><span class="line">输出一个二维字符数组。</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="type">char</span> arr[n][m];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            cin &gt;&gt;arr[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            cout &lt;&lt; arr[n<span class="number">-1</span> - i][m<span class="number">-1</span> - j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="type">char</span> arr[n][m]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取输入</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            cin &gt;&gt; arr[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 行倒置（交换上下对称行）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(arr[i][j], arr[n - <span class="number">1</span> - i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 列倒置（交换左右对称列）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m / <span class="number">2</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(arr[i][j], arr[i][m - <span class="number">1</span> - j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            cout &lt;&lt; arr[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="带空格的字符串"><a href="#带空格的字符串" class="headerlink" title="带空格的字符串"></a>带空格的字符串</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述：</span><br><span class="line">给定 t 组询问，每次给出一个长度为 n 的带空格的字符串 s ，请你去掉空格之后，将其倒置，然后输出。</span><br><span class="line">输入描述：</span><br><span class="line">第一行有一个整数 t 。</span><br><span class="line">随后 t 组数据。</span><br><span class="line">每组的第一行有一个整数 n 。</span><br><span class="line">每组的第二行有一个字符串 s，仅包含小写英文字符和空格，保证字符串首尾都不是空格。</span><br><span class="line">输出描述：</span><br><span class="line">输出 t 行，每行一个字符串，代表倒置后的字符串 s 。</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        cin.<span class="built_in">ignore</span>();</span><br><span class="line">        string s;</span><br><span class="line">        <span class="built_in">getline</span>(cin, s);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[n<span class="number">-1</span>-j]!=<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                cout &lt;&lt; s[n<span class="number">-1</span>-j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="格式化数字"><a href="#格式化数字" class="headerlink" title="格式化数字"></a>格式化数字</h1><h2 id="保留小数位数"><a href="#保留小数位数" class="headerlink" title="保留小数位数"></a>保留小数位数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述：</span><br><span class="line">给定一个小数 n ，请保留 3 位小数后输出。</span><br><span class="line">如果原来的小数位数少于 3 ，需要补充 0 。</span><br><span class="line">如果原来的小数位数多于 3 ，需要四舍五入到 3 位。</span><br><span class="line">输入：</span><br><span class="line">第一行有一个小数 n 。</span><br><span class="line">输出：</span><br><span class="line">输出一个小数，保留 3 位。</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">float</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.3f\n&quot;</span>,t);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="补充前导0"><a href="#补充前导0" class="headerlink" title="补充前导0"></a>补充前导0</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定一个正整数 n ，请你保留 9 个数位，然后输出。</span><br><span class="line">如果数位少于 9 个，那么需要补充前导零。</span><br><span class="line">输入描述：</span><br><span class="line">第一行有一个整数 n 。</span><br><span class="line">输出描述：</span><br><span class="line">输出一个数字，保留 9 个数位。</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%09d\n&quot;</span>,t);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="spj判断YES与NO"><a href="#spj判断YES与NO" class="headerlink" title="spj判断YES与NO"></a>spj判断YES与NO</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述：</span><br><span class="line">给定一个正整数n</span><br><span class="line">如果n是奇数，输出yes</span><br><span class="line">如果n是偶数，输出no</span><br><span class="line">输入描述：</span><br><span class="line">第一行有一个整数n</span><br><span class="line">输出描述：</span><br><span class="line">如果n是奇数，输出yes</span><br><span class="line">如果n是偶数，输出no</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="浮点误差"><a href="#浮点误差" class="headerlink" title="浮点误差"></a>浮点误差</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述：</span><br><span class="line">给定一个圆的半径 r ，请你求出该圆的面积。</span><br><span class="line">保证半径 r 是整数。</span><br><span class="line">如果你的答案和标准答案的误差不超过 0.001，即可通过本题。</span><br><span class="line">输入描述：</span><br><span class="line">第一行有一个整数 n。</span><br><span class="line">输出描述：</span><br><span class="line">输出一个数字，代表圆的面积。</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostream&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cmath&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    cin &gt;&gt; r;</span><br><span class="line">    <span class="type">double</span> s = <span class="built_in">pow</span>(r,<span class="number">2</span>)*M_PI;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.6f\n&quot;</span>,s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法小记</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数</title>
    <url>/2025/01/29/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>编码与加解密</title>
    <url>/2025/01/06/%E7%BC%96%E7%A0%81%E4%B8%8E%E5%8A%A0%E8%A7%A3%E5%AF%86/</url>
    <content><![CDATA[<h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><h2 id="Hex"><a href="#Hex" class="headerlink" title="Hex"></a>Hex</h2><h3 id="JS实现toHex"><a href="#JS实现toHex" class="headerlink" title="JS实现toHex"></a>JS实现toHex</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> hexdata = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        hexdata += data.<span class="title function_">charCodeAt</span>(i).<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hexdata;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">toHex</span>(<span class="string">&quot;Bileton&quot;</span>)) <span class="comment">// 42696c65746f6e</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>charCodeAt(i)</code> 获取字符串中每个字符的 Unicode 编码。</p>
</li>
<li><p><code>toString(16)</code> 将数字转换为 16 进制字符串。</p>
</li>
<li><p><code>padStart(2, &#39;0&#39;)</code> 确保每个字符的 Hex 码都是两位数（即不足两位时会在前面补充 0）。</p>
</li>
</ul>
<p><strong>frida常用</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">ByteString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params">tag, data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tag + <span class="string">&quot; Hex: &quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(data).<span class="title function_">hex</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Python实现toHex与fromHex"><a href="#Python实现toHex与fromHex" class="headerlink" title="Python实现toHex与fromHex"></a>Python实现toHex与fromHex</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data = <span class="string">&quot;Bileton&quot;</span></span><br><span class="line">data_toHex = data.encode(<span class="string">&quot;utf-8&quot;</span>).<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;toHex: &quot;</span>,data_toHex)</span><br><span class="line">data_toHex_fromHex = <span class="built_in">bytes</span>.fromhex(data_toHex).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;fromHex: &quot;</span>,data_toHex_fromHex)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">toHex:  42696c65746f6e</span><br><span class="line">fromHex:  Bileton</span><br></pre></td></tr></table></figure>



<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;Bileton&quot;</span></span><br><span class="line">data_toHex = binascii.hexlify(data.encode(<span class="string">&quot;utf-8&quot;</span>)).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;toHex: &quot;</span>, data_toHex)</span><br><span class="line">data_toHex_fromHex = binascii.unhexlify(data_toHex.encode(<span class="string">&quot;utf-8&quot;</span>)).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;fromHex: &quot;</span>, data_toHex_fromHex)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">toHex:  42696c65746f6e</span><br><span class="line">fromHex:  Bileton</span><br></pre></td></tr></table></figure>

<h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><h3 id="Python实现Base64的编码与解码"><a href="#Python实现Base64的编码与解码" class="headerlink" title="Python实现Base64的编码与解码"></a>Python实现Base64的编码与解码</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">data = <span class="string">&quot;Bielton&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;data:&quot;</span>,data)</span><br><span class="line">data_b64encode = base64.b64encode(data.encode())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b64编码：&quot;</span>,data_b64encode.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">data_b64decode = base64.b64decode(data_b64encode)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b64解码&quot;</span>,data_b64decode.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">data: Bielton</span><br><span class="line">b64编码： QmllbHRvbg==</span><br><span class="line">b64解码 Bielton</span><br></pre></td></tr></table></figure>

<h3 id="Java实现Base64的编码与解码"><a href="#Java实现Base64的编码与解码" class="headerlink" title="Java实现Base64的编码与解码"></a>Java实现Base64的编码与解码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;Bielton&quot;</span>;</span><br><span class="line">      Base64.Encoder  encoder=  Base64.getEncoder();</span><br><span class="line">      <span class="type">byte</span>[] encoded = encoder.encode(data.getBytes());</span><br><span class="line">      <span class="type">String</span> <span class="variable">encodedToString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(encoded);</span><br><span class="line">      System.out.println(encodedToString); <span class="comment">// QmllbHRvbg==</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] decoded = Base64.getDecoder().decode(encodedToString);</span><br><span class="line">      <span class="type">String</span> <span class="variable">decodedToString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(decoded);</span><br><span class="line">      System.out.println(decodedToString);  <span class="comment">// Bielton</span></span><br></pre></td></tr></table></figure>

<h3 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">B64_en</span> <span class="operator">=</span> findViewById(R.id.b64encode);</span><br><span class="line">B64_en.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;Bileton&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data_encode</span> <span class="operator">=</span> Base64.encodeToString(data.getBytes(), Base64.DEFAULT);</span><br><span class="line">        Toast.makeText(MainActivity.<span class="built_in">this</span>,data_encode,Toast.LENGTH_SHORT).show();  <span class="comment">// QmllbHRvbg==</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">Button</span> <span class="variable">B64_de</span> <span class="operator">=</span> findViewById(R.id.b64decode);</span><br><span class="line">B64_de.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;Bileton&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data_encode</span> <span class="operator">=</span> Base64.encodeToString(data.getBytes(), Base64.DEFAULT);</span><br><span class="line">        <span class="type">byte</span>[] data_decode = Base64.decode(data_encode,Base64.DEFAULT);</span><br><span class="line">        <span class="type">String</span> <span class="variable">decodeString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data_decode);</span><br><span class="line">        Toast.makeText(MainActivity.<span class="built_in">this</span>,decodeString,Toast.LENGTH_SHORT).show();  <span class="comment">// Bielton</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h1><h2 id="CRC32"><a href="#CRC32" class="headerlink" title="CRC32"></a>CRC32</h2><p>最终生成32位（4字节）的哈希值。</p>
<h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p>最终生成128位（16字节）长度的哈希值。</p>
<h3 id="Python调用MD5"><a href="#Python调用MD5" class="headerlink" title="Python调用MD5"></a>Python调用MD5</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_call</span>(<span class="params">encoded_data</span>):</span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(encoded_data)</span><br><span class="line">    <span class="keyword">return</span> md5.digest()</span><br><span class="line"></span><br><span class="line">md5_str = <span class="string">b&quot;Bileton&quot;</span></span><br><span class="line"><span class="built_in">print</span>(md5_str,<span class="string">&quot;的哈希值为：&quot;</span>,md5_call(md5_str).<span class="built_in">hex</span>()) </span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Bileton 的哈希值为： 1483ab1f77ea828faa5f78514d2765c1</span><br></pre></td></tr></table></figure>

<h3 id="Java调用MD5"><a href="#Java调用MD5" class="headerlink" title="Java调用MD5"></a>Java调用MD5</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## SHA1</span><br><span class="line"></span><br><span class="line">**消息处理**</span><br><span class="line"></span><br><span class="line">SHA1的消息处理方式与MD5基本相同，区别是最后的消息长度使用的是大端字节序。</span><br><span class="line"></span><br><span class="line">**初始化常量**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>H0 &#x3D; 0x67452301<br>H1 &#x3D; 0xEFCDAB89<br>H2 &#x3D; 0x98BADCFE<br>H3 &#x3D; 0x10325476<br>H4 &#x3D; 0xC3D2E1F0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**生成结果**</span><br><span class="line"></span><br><span class="line">最终生成160位（20字节）长度的哈希值。(这里的结果使用的是大端字节序。)</span><br><span class="line"></span><br><span class="line">### Python实现SHA1</span><br><span class="line"></span><br><span class="line">```py</span><br><span class="line">def sha1_call(encoded_data):</span><br><span class="line">    sha1 = hashlib.sha1()</span><br><span class="line">    sha1.update(encoded_data)</span><br><span class="line">    return sha1.digest()</span><br><span class="line"></span><br><span class="line">sha1_str = b&quot;Bileton&quot;</span><br><span class="line">print(sha1_str.decode(),&quot;的哈希值为：&quot;,sha1_call(sha1_str).hex())</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Bileton 的哈希值为： ab345d2ef3e3a48433207b746c9cb3a49b473e3a</span><br></pre></td></tr></table></figure>

<h2 id="SHA256"><a href="#SHA256" class="headerlink" title="SHA256"></a>SHA256</h2><p><strong>消息处理</strong></p>
<p>与SHA1相同。</p>
<p><strong>初始化常量</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">H0 = 0x6a09e667</span><br><span class="line">H1 = 0xbb67ae85</span><br><span class="line">H2 = 0x3c6ef372</span><br><span class="line">H3 = 0xa54ff53a</span><br><span class="line">H4 = 0x510e527f</span><br><span class="line">H5 = 0x9b05688c</span><br><span class="line">H6 = 0x1f83d9ab</span><br><span class="line">H7 = 0x5be0cd19</span><br></pre></td></tr></table></figure>

<p><strong>生成结果</strong></p>
<p>最终生成256位（32字节）长度的哈希值。(这里的结果使用的是大端字节序。)</p>
<h3 id="Python实现SHA256"><a href="#Python实现SHA256" class="headerlink" title="Python实现SHA256"></a>Python实现SHA256</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sha256_call</span>(<span class="params">encoded_data</span>):</span><br><span class="line">    sha256 = hashlib.sha256()</span><br><span class="line">    sha256.update(encoded_data)</span><br><span class="line">    <span class="keyword">return</span> sha256.digest()</span><br><span class="line"></span><br><span class="line">sha256_str = <span class="string">b&quot;Bileton&quot;</span></span><br><span class="line"><span class="built_in">print</span>(sha256_str.decode(),<span class="string">&quot;的哈希值为：&quot;</span>,sha256_call(sha256_str).<span class="built_in">hex</span>())</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Bileton 的哈希值为： b54bc358a78fb7bbfcb6bdcd79ba65436534c222ce67ebbc838e8a29df5b2b28</span><br></pre></td></tr></table></figure>

<h2 id="SHA512"><a href="#SHA512" class="headerlink" title="SHA512"></a>SHA512</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sha512_call</span>(<span class="params">encoded_data</span>):</span><br><span class="line">    sha512 = hashlib.sha512()</span><br><span class="line">    sha512.update(encoded_data)</span><br><span class="line">    <span class="keyword">return</span> sha512.digest()</span><br><span class="line"></span><br><span class="line">sha512_str = <span class="string">b&quot;Bileton&quot;</span></span><br><span class="line"><span class="built_in">print</span>(sha512_str.decode(),<span class="string">&quot;的哈希值为：&quot;</span>,sha512_call(sha512_str).<span class="built_in">hex</span>())</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Bileton 的哈希值为： 46c158d8ba16ccbecc15a6555ed65b3d83af4977f152496962cae3264605c9a6f0e8a9382d8ace14d83b95a9f5a6e65dd8581b191096bdf5a2883c8d83485464</span><br></pre></td></tr></table></figure>

<h2 id="SHA3-256"><a href="#SHA3-256" class="headerlink" title="SHA3_256"></a>SHA3_256</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sha3_256_call</span>(<span class="params">encoded_data</span>):</span><br><span class="line">    sha3_256 = hashlib.sha3_256()</span><br><span class="line">    sha3_256.update(encoded_data)</span><br><span class="line">    <span class="keyword">return</span> sha3_256.digest()</span><br><span class="line"></span><br><span class="line">sha3_256_str = <span class="string">b&quot;Bileton&quot;</span></span><br><span class="line"><span class="built_in">print</span>(sha3_256_str.decode(),<span class="string">&quot;的哈希值为：&quot;</span>,sha3_256_call(sha3_256_str).<span class="built_in">hex</span>())</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Bileton 的哈希值为： 1e45a220d0d8ae2c46d727da1e21d639d9414bdb5eaeeaa3a7188bbefb359204</span><br></pre></td></tr></table></figure>



<h2 id="MAC算法"><a href="#MAC算法" class="headerlink" title="MAC算法"></a>MAC算法</h2><p><strong>MAC公式</strong></p>
<p><img src="/2025/01/06/%E7%BC%96%E7%A0%81%E4%B8%8E%E5%8A%A0%E8%A7%A3%E5%AF%86/1.jpg"></p>
<p><code>message</code>是消息m<br><code>key</code>是密钥<br><code>||</code>是级联，其实就是拼接操作<br><code>ipad</code>值为0x36<br><code>opad</code>值为0x5c<br><code>⊕</code>代表异或</p>
<p><strong>密钥扩展</strong></p>
<ul>
<li>若密钥长度小于Hash的分组长度<br>在密钥末尾填充0，直到长度达到Hash的分组长度</li>
<li>若密钥长度大于Hash的分组长度<br>将密钥进行哈希运算，然后补充0，直到长度达到Hash的分组长度</li>
</ul>
<h3 id="HmacMD5"><a href="#HmacMD5" class="headerlink" title="HmacMD5"></a>HmacMD5</h3><p>与MD5不同的是，HmacMD5结合了密钥。</p>
<p>生成128位（16字节）长度的哈希值。</p>
<h3 id="HmacSHA1"><a href="#HmacSHA1" class="headerlink" title="HmacSHA1"></a>HmacSHA1</h3><p>与HmacSHA1不同的是，HmacSHA1结合了密钥。</p>
<p>生成256位（32字节）长度的哈希值。</p>
<h3 id="HmacSHA256"><a href="#HmacSHA256" class="headerlink" title="HmacSHA256"></a>HmacSHA256</h3><p>与HmacSHA256不同的是，HmacSHA256结合了密钥。</p>
<h2 id="SM3"><a href="#SM3" class="headerlink" title="SM3"></a>SM3</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmssl</span><br><span class="line"><span class="keyword">import</span> gmssl.sm3</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sm3_call</span>(<span class="params">data</span>):</span><br><span class="line">    hash_value = gmssl.sm3.sm3_hash(<span class="built_in">list</span>(data))</span><br><span class="line">    <span class="keyword">return</span> hash_value</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sm3_call(<span class="string">b&quot;bileton&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b096187636f59092a00c758defd085ae7e3153e9d8bb93e9a64d4f6cadcfa47a</span></span><br></pre></td></tr></table></figure>

<h1 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h1><h2 id="TEA"><a href="#TEA" class="headerlink" title="TEA"></a>TEA</h2><h2 id="XXTEA"><a href="#XXTEA" class="headerlink" title="XXTEA"></a>XXTEA</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install xxtea-py</span><br><span class="line">pip install cffi</span><br></pre></td></tr></table></figure>



<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xxtea</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;0123456789abcdef&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">data = <span class="string">&quot;biletont&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="comment"># data = bytes.fromhex(&quot;932d84f10aad1197f4c793ed&quot;)</span></span><br><span class="line"></span><br><span class="line">encrypted_data = xxtea.encrypt(data, key)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(encrypted_data).decode())</span><br><span class="line"></span><br><span class="line">data = base64.b64decode(<span class="string">&quot;ky2E8QqtEZf0x5Pt&quot;</span>)</span><br><span class="line">decrypt_data = xxtea.decrypt(data,key)</span><br><span class="line"><span class="built_in">print</span>(decrypt_data.decode())</span><br></pre></td></tr></table></figure>



<h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><h3 id="Python实现DES"><a href="#Python实现DES" class="headerlink" title="Python实现DES"></a>Python实现DES</h3><h4 id="加密ECB"><a href="#加密ECB" class="headerlink" title="加密ECB"></a>加密ECB</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad,unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des_encrypt_ecb</span>(<span class="params">plaintext,key</span>):</span><br><span class="line">    cipher = DES.new(key,DES.MODE_ECB)</span><br><span class="line">    padded_text = pad(plaintext,DES.block_size)</span><br><span class="line">    <span class="comment"># print(padded_text)</span></span><br><span class="line">    encrypted_data = cipher.encrypt(padded_text)</span><br><span class="line">    <span class="keyword">return</span> encrypted_data</span><br><span class="line"></span><br><span class="line">data = <span class="string">b&quot;Bileton&quot;</span></span><br><span class="line">key = <span class="string">b&quot;12345678&quot;</span></span><br><span class="line"><span class="built_in">print</span>(des_encrypt_ecb(data,key).<span class="built_in">hex</span>()) <span class="comment"># 66b99748acc81443</span></span><br></pre></td></tr></table></figure>

<h4 id="解密ECB"><a href="#解密ECB" class="headerlink" title="解密ECB"></a>解密ECB</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad,unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">desdecrypt_ecb</span>(<span class="params">encrypted_data,key</span>):</span><br><span class="line">    cipher = DES.new(key,DES.MODE_ECB)</span><br><span class="line">    decrypted_data = cipher.decrypt(encrypted_data)</span><br><span class="line">    unpadded_text = unpad(decrypted_data,DES.block_size)</span><br><span class="line">    <span class="keyword">return</span> unpadded_text</span><br><span class="line"></span><br><span class="line">encrypted_data = <span class="string">&quot;66b99748acc81443&quot;</span></span><br><span class="line">key = <span class="string">b&quot;12345678&quot;</span></span><br><span class="line">decrypted_data = desdecrypt_ecb(<span class="built_in">bytes</span>.fromhex(encrypted_data),key).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(decrypted_data) <span class="comment"># &quot;Bileton&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="加密CBC"><a href="#加密CBC" class="headerlink" title="加密CBC"></a>加密CBC</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad,unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des_encrypt_cbc</span>(<span class="params">plaintext,key,iv</span>):</span><br><span class="line">    cipher = DES.new(key,DES.MODE_CBC,iv)</span><br><span class="line">    padded_text = pad(plaintext,DES.block_size)</span><br><span class="line">    encrypted_data = cipher.encrypt(padded_text)</span><br><span class="line">    <span class="keyword">return</span> encrypted_data</span><br><span class="line"></span><br><span class="line">data = <span class="string">b&quot;Bileton&quot;</span></span><br><span class="line">key = <span class="string">b&quot;12345678&quot;</span></span><br><span class="line">iv = <span class="string">b&quot;12345678&quot;</span></span><br><span class="line">encrypted_data = des_encrypt_cbc(data,key,iv).<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(encrypted_data) <span class="comment"># fa8669e459a42d7f</span></span><br></pre></td></tr></table></figure>

<h4 id="解密CBC"><a href="#解密CBC" class="headerlink" title="解密CBC"></a>解密CBC</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad,unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des_decrypted_cbc</span>(<span class="params">encrypted_data,key,iv</span>):</span><br><span class="line">    cipher = DES.new(key,DES.MODE_CBC,iv)</span><br><span class="line">    decrtpted_data = cipher.decrypt(encrypted_data)</span><br><span class="line">    unpaded_data = unpad(decrtpted_data,DES.block_size)</span><br><span class="line">    <span class="keyword">return</span> unpaded_data</span><br><span class="line">    </span><br><span class="line">encrypted_data = <span class="string">&quot;fa8669e459a42d7f&quot;</span></span><br><span class="line">key = <span class="string">b&quot;12345678&quot;</span></span><br><span class="line">iv = <span class="string">b&quot;12345678&quot;</span></span><br><span class="line"></span><br><span class="line">decrypted_data = des_decrypted_cbc(<span class="built_in">bytes</span>.fromhex(encrypted_data),key,iv).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(decrypted_data) <span class="comment"># &quot;Bileton&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h2><h3 id="Python实现3DES"><a href="#Python实现3DES" class="headerlink" title="Python实现3DES"></a>Python实现3DES</h3><h4 id="加密ECB-1"><a href="#加密ECB-1" class="headerlink" title="加密ECB"></a>加密ECB</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad,unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des_encrypt_ecb</span>(<span class="params">plaintext,key</span>):</span><br><span class="line">    cipher = DES3.new(key,DES3.MODE_ECB)</span><br><span class="line">    padded_text = pad(plaintext,DES3.block_size)</span><br><span class="line">    <span class="comment"># print(padded_text)</span></span><br><span class="line">    encrypted_data = cipher.encrypt(padded_text)</span><br><span class="line">    <span class="keyword">return</span> encrypted_data</span><br><span class="line"></span><br><span class="line">data = <span class="string">b&quot;Bileton&quot;</span></span><br><span class="line">key = <span class="string">b&quot;123456788765432112345678&quot;</span></span><br><span class="line"><span class="built_in">print</span>(des_encrypt_ecb(data,key).<span class="built_in">hex</span>()) <span class="comment"># 4b7b3adfc5743685</span></span><br></pre></td></tr></table></figure>

<h4 id="解密ECB-1"><a href="#解密ECB-1" class="headerlink" title="解密ECB"></a>解密ECB</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad,unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">desdecrypt_ecb</span>(<span class="params">encrypted_data,key</span>):</span><br><span class="line">    cipher = DES3.new(key,DES3.MODE_ECB)</span><br><span class="line">    decrypted_data = cipher.decrypt(encrypted_data)</span><br><span class="line">    unpadded_text = unpad(decrypted_data,DES3.block_size)</span><br><span class="line">    <span class="keyword">return</span> unpadded_text</span><br><span class="line"></span><br><span class="line">encrypted_data = <span class="string">&quot;4b7b3adfc5743685&quot;</span></span><br><span class="line">key = <span class="string">b&quot;123456788765432112345678&quot;</span></span><br><span class="line">decrypted_data = desdecrypt_ecb(<span class="built_in">bytes</span>.fromhex(encrypted_data),key).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(decrypted_data) <span class="comment"># &quot;Bileton&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="加密CBC-1"><a href="#加密CBC-1" class="headerlink" title="加密CBC"></a>加密CBC</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad,unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des_encrypt_cbc</span>(<span class="params">plaintext,key,iv</span>):</span><br><span class="line">    cipher = DES3.new(key,DES3.MODE_CBC,iv)</span><br><span class="line">    padded_text = pad(plaintext,DES3.block_size)</span><br><span class="line">    encrypted_data = cipher.encrypt(padded_text)</span><br><span class="line">    <span class="keyword">return</span> encrypted_data</span><br><span class="line"></span><br><span class="line">data = <span class="string">b&quot;Bileton&quot;</span></span><br><span class="line">key = <span class="string">b&quot;123456788765432112345678&quot;</span></span><br><span class="line">iv = <span class="string">b&quot;12345678&quot;</span></span><br><span class="line">encrypted_data = des_encrypt_cbc(data,key,iv).<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(encrypted_data) <span class="comment"># 883036a2094c6fab</span></span><br></pre></td></tr></table></figure>

<h4 id="解密CBC-1"><a href="#解密CBC-1" class="headerlink" title="解密CBC"></a>解密CBC</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad,unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des_decrypted_cbc</span>(<span class="params">encrypted_data,key,iv</span>):</span><br><span class="line">    cipher = DES3.new(key,DES3.MODE_CBC,iv)</span><br><span class="line">    decrtpted_data = cipher.decrypt(encrypted_data)</span><br><span class="line">    unpaded_data = unpad(decrtpted_data,DES3.block_size)</span><br><span class="line">    <span class="keyword">return</span> unpaded_data</span><br><span class="line">    </span><br><span class="line">encrypted_data = <span class="string">&quot;883036a2094c6fab&quot;</span></span><br><span class="line">key = <span class="string">b&quot;123456788765432112345678&quot;</span></span><br><span class="line">iv = <span class="string">b&quot;12345678&quot;</span></span><br><span class="line"></span><br><span class="line">decrypted_data = des_decrypted_cbc(<span class="built_in">bytes</span>.fromhex(encrypted_data),key,iv).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(decrypted_data) <span class="comment"># &quot;Bileton&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><h3 id="Python实现AES"><a href="#Python实现AES" class="headerlink" title="Python实现AES"></a>Python实现AES</h3><h4 id="加密ECB-2"><a href="#加密ECB-2" class="headerlink" title="加密ECB"></a>加密ECB</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt_ecb</span>(<span class="params">plaintext,key</span>):</span><br><span class="line">    cipher = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    padded_data = pad(plaintext,AES.block_size)</span><br><span class="line">    encrypted_data = cipher.encrypt(padded_data)</span><br><span class="line">    <span class="keyword">return</span> encrypted_data</span><br><span class="line"></span><br><span class="line">data = <span class="string">b&quot;Bileton&quot;</span></span><br><span class="line">key = <span class="string">b&quot;0123456789abcdef&quot;</span></span><br><span class="line"></span><br><span class="line">encrypted_data = aes_encrypt_ecb(data,key).<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(encrypted_data) <span class="comment"># cef043b604dfa84449dd3a1e5bf117e6</span></span><br></pre></td></tr></table></figure>

<h4 id="解密ECB-2"><a href="#解密ECB-2" class="headerlink" title="解密ECB"></a>解密ECB</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypted_ecb</span>(<span class="params">encrypted_data,key</span>):</span><br><span class="line">    cipher = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    decrypted_data = cipher.decrypt(encrypted_data)</span><br><span class="line">    unpadded_data = unpad(decrypted_data,AES.block_size)</span><br><span class="line">    <span class="keyword">return</span> unpadded_data</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;cef043b604dfa84449dd3a1e5bf117e6&quot;</span></span><br><span class="line">key = <span class="string">b&quot;0123456789abcdef&quot;</span></span><br><span class="line">decrypted_data = aes_decrypted_ecb(<span class="built_in">bytes</span>.fromhex(data),key).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(decrypted_data) <span class="comment"># Bileton</span></span><br></pre></td></tr></table></figure>

<h4 id="加密CBC-2"><a href="#加密CBC-2" class="headerlink" title="加密CBC"></a>加密CBC</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt_ecb</span>(<span class="params">plaintext,key,iv</span>):</span><br><span class="line">    cipher = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">    padded_data = pad(plaintext,AES.block_size)</span><br><span class="line">    encrypted_data = cipher.encrypt(padded_data)</span><br><span class="line">    <span class="keyword">return</span> encrypted_data</span><br><span class="line"></span><br><span class="line">data = <span class="string">b&quot;Bileton&quot;</span></span><br><span class="line">key = <span class="string">b&quot;0123456789abcdef&quot;</span></span><br><span class="line">iv = <span class="string">b&quot;0123456789abcdef&quot;</span></span><br><span class="line"></span><br><span class="line">encrypted_data = aes_encrypt_ecb(data,key,iv).<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(encrypted_data) <span class="comment"># 95e9660e32eaf61a1873afdd9dac4757</span></span><br></pre></td></tr></table></figure>

<h4 id="解密CBC-2"><a href="#解密CBC-2" class="headerlink" title="解密CBC"></a>解密CBC</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypted_ecb</span>(<span class="params">encrypted_data,key,iv</span>):</span><br><span class="line">    cipher = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">    decrypted_data = cipher.decrypt(encrypted_data)</span><br><span class="line">    unpadded_data = unpad(decrypted_data,AES.block_size)</span><br><span class="line">    <span class="keyword">return</span> unpadded_data</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;95e9660e32eaf61a1873afdd9dac4757&quot;</span></span><br><span class="line">key = <span class="string">b&quot;0123456789abcdef&quot;</span></span><br><span class="line">iv = <span class="string">b&quot;0123456789abcdef&quot;</span></span><br><span class="line">decrypted_data = aes_decrypted_ecb(<span class="built_in">bytes</span>.fromhex(data),key,iv).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(decrypted_data) <span class="comment"># Bileton</span></span><br></pre></td></tr></table></figure>

<h2 id="SM4"><a href="#SM4" class="headerlink" title="SM4"></a>SM4</h2><h3 id="Python实现SM4"><a href="#Python实现SM4" class="headerlink" title="Python实现SM4"></a>Python实现SM4</h3><h4 id="加密ECB-3"><a href="#加密ECB-3" class="headerlink" title="加密ECB"></a>加密ECB</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmssl</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmssl.sm4 <span class="keyword">import</span> CryptSM4,SM4_ENCRYPT,SM4_DECRYPT</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sm4_encrypt_ecb</span>(<span class="params">plaintext,key</span>):</span><br><span class="line">    crypt_sm4 = CryptSM4()</span><br><span class="line">    crypt_sm4.set_key(key,SM4_ENCRYPT)</span><br><span class="line">    ciphertext = crypt_sm4.crypt_ecb(plaintext)</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line">plaintext_bytes = <span class="string">b&quot;bileton&quot;</span></span><br><span class="line">key_bytes = <span class="string">b&quot;0123456789abcdef&quot;</span> </span><br><span class="line">ciphertext = sm4_encrypt_ecb(plaintext=plaintext_bytes,key=key_bytes).<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a9194834e2f0a78db402e22a3b409bc8</span></span><br></pre></td></tr></table></figure>

<h4 id="解密ECB-3"><a href="#解密ECB-3" class="headerlink" title="解密ECB"></a>解密ECB</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmssl</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmssl.sm4 <span class="keyword">import</span> CryptSM4,SM4_ENCRYPT,SM4_DECRYPT</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sm4_decrypt_ecb</span>(<span class="params">ciphertext,key</span>):</span><br><span class="line">    crypt_sm4 = CryptSM4()</span><br><span class="line">    crypt_sm4.set_key(key,SM4_DECRYPT)</span><br><span class="line">    plaintext = crypt_sm4.crypt_ecb(ciphertext)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line">ciphertext_bytes = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;a9194834e2f0a78db402e22a3b409bc8&quot;</span>)</span><br><span class="line">key_bytes = <span class="string">b&quot;0123456789abcdef&quot;</span> </span><br><span class="line">plaintext = sm4_decrypt_ecb(ciphertext_bytes,key_bytes).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># bileton</span></span><br></pre></td></tr></table></figure>

<h4 id="加密CBC-3"><a href="#加密CBC-3" class="headerlink" title="加密CBC"></a>加密CBC</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmssl</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmssl.sm4 <span class="keyword">import</span> CryptSM4,SM4_ENCRYPT,SM4_DECRYPT</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sm4_encrypt_cbc</span>(<span class="params">plaintext,key,iv</span>):</span><br><span class="line">    crypt_sm4 = CryptSM4()</span><br><span class="line">    crypt_sm4.set_key(key,SM4_ENCRYPT)</span><br><span class="line">    ciphertext = crypt_sm4.crypt_cbc(iv,plaintext)</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line">plaintext_bytes = <span class="string">b&quot;bileton&quot;</span></span><br><span class="line">key_bytes = <span class="string">b&quot;0123456789abcdef&quot;</span> </span><br><span class="line">iv = <span class="string">b&quot;0123456789abcdef&quot;</span></span><br><span class="line">ciphertext = sm4_encrypt_cbc(plaintext=plaintext_bytes,key=key_bytes,iv=iv).<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4ca44c34423c7a670136671806a228ab</span></span><br></pre></td></tr></table></figure>

<h4 id="解密CBC-3"><a href="#解密CBC-3" class="headerlink" title="解密CBC"></a>解密CBC</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmssl</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmssl.sm4 <span class="keyword">import</span> CryptSM4,SM4_ENCRYPT,SM4_DECRYPT</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sm4_decrypt_cbc</span>(<span class="params">ciphertext,key,iv</span>):</span><br><span class="line">    crypt_sm4 = CryptSM4()</span><br><span class="line">    crypt_sm4.set_key(key,SM4_DECRYPT)</span><br><span class="line">    plaintext = crypt_sm4.crypt_cbc(iv,ciphertext)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line">ciphertext_bytes = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;4ca44c34423c7a670136671806a228ab&quot;</span>)</span><br><span class="line">key_bytes = <span class="string">b&quot;0123456789abcdef&quot;</span> </span><br><span class="line">iv = <span class="string">b&quot;0123456789abcdef&quot;</span></span><br><span class="line">plaintext = sm4_decrypt_cbc(ciphertext_bytes,key_bytes,iv=iv).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># bileton</span></span><br></pre></td></tr></table></figure>

<h1 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h1><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><h2 id="ECC"><a href="#ECC" class="headerlink" title="ECC"></a>ECC</h2><h1 id="压缩算法"><a href="#压缩算法" class="headerlink" title="压缩算法"></a>压缩算法</h1><h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><h2 id="zlib"><a href="#zlib" class="headerlink" title="zlib"></a>zlib</h2><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><h2 id="7z"><a href="#7z" class="headerlink" title="7z"></a>7z</h2>]]></content>
      <categories>
        <category>编码与加解密</category>
      </categories>
      <tags>
        <tag>编码与加解密</tag>
      </tags>
  </entry>
  <entry>
    <title>编程语言的发展轨迹</title>
    <url>/2024/12/31/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E5%8F%91%E5%B1%95%E8%BD%A8%E8%BF%B9/</url>
    <content><![CDATA[<h1 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h1><p>机器语言是计算机能够直接识别和执行的二进制代码。它是计算机最底层的编程语言，由 0 和 1 组成，可以与计算机硬件直接交互。</p>
<h1 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h1><p>汇编语言是机器指令的助记符，具有很高的执行效率，可读性较高。 </p>
<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h1 id="C-1"><a href="#C-1" class="headerlink" title="C#"></a>C#</h1><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>&emsp;&emsp;Go语言原生支持并发，通过轻量级的<strong>goroutine</strong>和<strong>channel</strong>机制，极大地简化了并发编程的复杂性。goroutine相比线程更加高效，资源占用低，可以支持大规模并发任务，非常适合构建高性能的服务器和分布式系统。</p>
<p>&emsp;&emsp;Go语言的并发是基于 <code>goroutine</code> 的，<code>goroutine</code> 类似于线程，但并非线程。可以将 <code>goroutine</code> 理解为一种虚拟线程。Go 语言运行时会参与调度 <code>goroutine</code>，并将 <code>goroutine</code> 合理地分配到每个 CPU 中，最大限度地使用CPU性能。</p>
<p>&emsp;&emsp;自动内存管理，开发者无需手动释放内存，Go 的 GC 会自动回收不再使用的对象，避免内存泄漏和悬垂指针（dangling pointer）等问题。</p>
]]></content>
      <categories>
        <category>见多识广</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>编译器调试器等一系列工具合集</title>
    <url>/2025/01/24/%E7%BC%96%E8%AF%91%E5%99%A8%E8%B0%83%E8%AF%95%E5%99%A8%E7%AD%89%E4%B8%80%E7%B3%BB%E5%88%97%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h1 id="Clang"><a href="#Clang" class="headerlink" title="Clang"></a>Clang</h1><p>Clang是一个由LLVM项目开发的开源编译器前端，支持C、C++、Objective-C等编程语言的编译。</p>
<h2 id="编译命令"><a href="#编译命令" class="headerlink" title="编译命令"></a>编译命令</h2><h3 id="生成可执行文件"><a href="#生成可执行文件" class="headerlink" title="生成可执行文件"></a>生成可执行文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clang -o output_program source_file.c</span><br></pre></td></tr></table></figure>

<h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>预处理阶段是源代码中所有宏定义、头文件包含以及条件编译指令的处理阶段。在预处理阶段会将源代码中的宏替换为相应的内容，展开头文件，并生成一个预处理结果文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clang -E source_file.c -o output_file.i</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>-E</code>：表示只执行预处理，并生成预处理后的输出。</p>
</li>
<li><p><code>source_file.c</code>：输入的源代码文件。</p>
</li>
<li><p><code>output_file.i</code>：输出的预处理文件（扩展名通常为<code>.i</code>）。</p>
</li>
</ul>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>编译阶段将预处理过的源代码转化为汇编代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clang -S source_file.c -o output_file.s</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>-S</code>：表示只进行编译，将源代码编译为汇编代码。</p>
</li>
<li><p><code>source_file.c</code>：输入的源代码文件。</p>
</li>
<li><p><code>output_file.s</code>：输出的汇编代码文件（扩展名通常为<code>.s</code>）。</p>
</li>
</ul>
<h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><p>汇编阶段将汇编代码转化为机器码，并生成一个目标文件（通常是<code>.o</code>文件）。该目标文件包含了机器可执行的代码，但还没有完成链接过程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clang -c source_file.c -o output_file.o</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>-c</code>：表示只进行汇编，将源代码编译为目标文件（<code>.o</code>文件）。</p>
</li>
<li><p><code>source_file.c</code>：输入的源代码文件。</p>
</li>
<li><p><code>output_file.o</code>：输出的目标文件（<code>.o</code>文件）。</p>
</li>
</ul>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>链接阶段将一个或多个目标文件（<code>.o</code>文件）与库文件（静态库、动态库）合并，生成最终的可执行文件。此过程包括符号解析和重定位。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clang source_file.o -o output_program</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>source_file.o</code>：输入的目标文件（<code>.o</code>文件）。</p>
</li>
<li><p><code>output_program</code>：输出的最终可执行文件。</p>
</li>
</ul>
<h3 id="指定目标平台交叉编译"><a href="#指定目标平台交叉编译" class="headerlink" title="指定目标平台交叉编译"></a>指定目标平台交叉编译</h3><p>可以在一个平台上编译出适用于另一个平台的二进制文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clang --target=xxx -o output_program source_file.c</span><br></pre></td></tr></table></figure>

<h1 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h1><p>GDB（GNU Debugger） 是 GNU 项目提供的一款强大的调试工具，主要用于调试 C、C++ 和其他支持的编程语言编写的程序。</p>
<h2 id="gdb-multiarch"><a href="#gdb-multiarch" class="headerlink" title="gdb-multiarch"></a>gdb-multiarch</h2><p>gdb-multiarch 是 GDB（GNU Debugger） 的一个变体，专门设计用于调试多种体系结构（architecture）的程序，特别是在交叉编译和嵌入式开发场景中非常有用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install gdb-multiarch</span><br></pre></td></tr></table></figure>

<h2 id="gef插件"><a href="#gef插件" class="headerlink" title="gef插件"></a>gef插件</h2><p><a href="https://github.com/hugsy/gef">https://github.com/hugsy/gef</a></p>
<p>安装完成效果如下</p>
<p><img src="/2025/01/24/%E7%BC%96%E8%AF%91%E5%99%A8%E8%B0%83%E8%AF%95%E5%99%A8%E7%AD%89%E4%B8%80%E7%B3%BB%E5%88%97%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86/1.jpg"></p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="gef-remote"><a href="#gef-remote" class="headerlink" title="gef remote"></a>gef remote</h4><p><code>gef-remote</code> 是对 GDB <code>target remote</code> 命令的增强版。该命令会使用远程目标的 <code>/proc</code> 文件系统，在本地临时目录（默认值存储在 <code>gef.config.tempdir</code> 中）中创建一个远程执行环境的副本，包括目标程序及其加载的所有库。此外，它会获取远程 <code>/proc/PID/maps</code> 的全部信息并加载到本地环境中。如果远程目标不支持 <code>/proc</code> 文件系统，该命令可能会失败。但在这种情况下，仍然可以使用 GDB 原生的 <code>target remote</code> 命令（功能有限）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gef-remote localhost 1234</span><br></pre></td></tr></table></figure>



<h2 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h2><p>使用gdbserver，在ndk目录下，push到手机<code>data/local/tmp</code>目录下</p>
<p>在目标设备上运行程序并启动 <code>gdbserver</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdbserver :1234 ./example</span><br></pre></td></tr></table></figure>

<p>端口转发</p>
<h2 id="gdb调试命令"><a href="#gdb调试命令" class="headerlink" title="gdb调试命令"></a>gdb调试命令</h2><h3 id="b（break）"><a href="#b（break）" class="headerlink" title="b（break）"></a>b（break）</h3><p>设置断点</p>
<ul>
<li><p>设置函数断点</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b main</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置地址断点（地址前要加*号）</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b *0xaaaabbbb</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="c（continue）"><a href="#c（continue）" class="headerlink" title="c（continue）"></a>c（continue）</h3><p>继续执行。</p>
<p>当程序在断点处停止时，使用 <code>c</code> 命令可以让程序继续执行，直到遇到下一个断点或者程序运行完毕。</p>
<h3 id="n"><a href="#n" class="headerlink" title="n"></a>n</h3><p><code>n</code> (next)：单步执行当前行，不进入函数内部。</p>
<h3 id="ni"><a href="#ni" class="headerlink" title="ni"></a>ni</h3><p><code>ni</code> 命令会 单步执行当前行的机器指令，如果当前行有函数调用，<code>ni</code> 不会进入函数内部，而是直接跳到下一个机器指令。</p>
<h3 id="s"><a href="#s" class="headerlink" title="s"></a>s</h3><p><code>s</code> (step)：单步执行当前行，如果有函数调用，会进入函数内部。</p>
<h3 id="finish"><a href="#finish" class="headerlink" title="finish"></a>finish</h3><p>继续执行直到当前函数返回。</p>
<h3 id="quit"><a href="#quit" class="headerlink" title="quit"></a>quit</h3><p>退出gdb调试器。</p>
<h1 id="make"><a href="#make" class="headerlink" title="make"></a>make</h1><p><code>make</code> 是一个经典的自动化构建工具，主要用于编译和管理项目中的代码文件。它根据 <code>Makefile</code> 中定义的规则，自动检测文件依赖关系并生成目标文件，帮助开发者简化和自动化编译工作。</p>
<h2 id="Makefile-基本结构"><a href="#Makefile-基本结构" class="headerlink" title="Makefile 基本结构"></a>Makefile 基本结构</h2><p>make 主要基于“目标-依赖-命令”三要素的概念</p>
<p>Makefile 是 <code>make</code> 的核心文件，通常用于定义构建目标、依赖关系以及执行命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目标: 依赖</span><br><span class="line">    命令</span><br></pre></td></tr></table></figure>

<ul>
<li>**目标 (Target)**：需要生成的文件（例如可执行程序）。</li>
<li>**依赖 (Dependencies)**：目标生成所需的文件。</li>
<li>**命令 (Commands)**：构建目标的具体命令（通常是 shell 命令）。</li>
</ul>
<h2 id="并行构建"><a href="#并行构建" class="headerlink" title="并行构建"></a>并行构建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make -j4</span><br><span class="line">// 同时运行 4 个编译任务</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make clean</span><br><span class="line">// 用于清理项目构建过程中生成的中间文件或目标文件，从而让项目恢复到初始状态。</span><br></pre></td></tr></table></figure>



<h2 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h2><p>**<code>make</code>**：执行默认目标（通常是第一个目标）。</p>
<p>**<code>make &lt;目标&gt;</code>**：执行指定的目标。</p>
<p>**<code>make -f &lt;文件&gt;</code>**：指定 Makefile 文件。</p>
<p>**<code>make clean</code>**：清理文件（运行 <code>clean</code> 伪目标）。</p>
<h1 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h1><p><code>CMake</code> 是一个跨平台的开源构建系统生成工具，主要用于管理复杂项目的构建过程。它通过编写 <strong>CMakeLists.txt</strong> 文件，生成适合不同平台和编译器的构建系统文件，从而简化跨平台项目的构建。</p>
<p>CMake 不直接编译代码，而是生成构建系统（例如 Makefile），然后使用生成的构建系统（如 <code>make</code>）进行实际的编译和构建。</p>
<h1 id="w64devkit"><a href="#w64devkit" class="headerlink" title="w64devkit"></a>w64devkit</h1><p><a href="https://github.com/skeeto/w64devkit">GitHub - skeeto&#x2F;w64devkit: Portable C and C++ Development Kit for x64 (and x86) Windows</a></p>
<p>w64devkit 是一个 Dockerfile，用于从源代码构建一个小型、便携的开发套件，旨在为 x86 和 x64 Windows 平台创建 C 和 C++ 应用程序。</p>
]]></content>
      <categories>
        <category>逆向工具集</category>
      </categories>
      <tags>
        <tag>小工具</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯游戏安全移动赛题Tencent2016A</title>
    <url>/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.tencent.tencent2016a</p>
<p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/1.jpg"></p>
<h1 id="Java层分析"><a href="#Java层分析" class="headerlink" title="Java层分析"></a>Java层分析</h1><h2 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h2><p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/2.jpg"></p>
<h2 id="c"><a href="#c" class="headerlink" title="c"></a>c</h2><p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/3.jpg"></p>
<h2 id="NativeCheckRegister"><a href="#NativeCheckRegister" class="headerlink" title="NativeCheckRegister"></a>NativeCheckRegister</h2><p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/4.jpg"></p>
<h1 id="so分析"><a href="#so分析" class="headerlink" title="so分析"></a>so分析</h1><h2 id="定位NativeCheckRegister函数位置"><a href="#定位NativeCheckRegister函数位置" class="headerlink" title="定位NativeCheckRegister函数位置"></a>定位NativeCheckRegister函数位置</h2><p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/5.jpg"></p>
<h2 id="NativeCheckRegister-1"><a href="#NativeCheckRegister-1" class="headerlink" title="NativeCheckRegister"></a>NativeCheckRegister</h2><p>类型修复及函数重命名之后的NativeCheckRegister函数如下</p>
<p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/6.jpg"></p>
<h2 id="check"><a href="#check" class="headerlink" title="check"></a>check</h2><p>类型修复及函数重命名后的check函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> __fastcall <span class="title function_">check</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name, <span class="type">char</span> *code)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> namelength; <span class="comment">// r5</span></span><br><span class="line">  _BOOL4 result; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// r4</span></span><br><span class="line">  _DWORD *nametempaddr; <span class="comment">// r7</span></span><br><span class="line">  <span class="type">int</span> nametempresult; <span class="comment">// r3</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> codetemp; <span class="comment">// r1</span></span><br><span class="line">  _DWORD nameresultarray[<span class="number">5</span>]; <span class="comment">// [sp+18h] [bp-458h] BYREF</span></span><br><span class="line">  _DWORD coderesultarray[<span class="number">5</span>]; <span class="comment">// [sp+2Ch] [bp-444h] BYREF</span></span><br><span class="line">  _BYTE namemix[<span class="number">20</span>]; <span class="comment">// [sp+40h] [bp-430h] BYREF</span></span><br><span class="line">  _BYTE codeResult[<span class="number">1052</span>]; <span class="comment">// [sp+54h] [bp-41Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  namelength = j_strlen(name);</span><br><span class="line">  <span class="keyword">if</span> ( (namelength - <span class="number">6</span>) &gt; <span class="number">0xE</span> )                 <span class="comment">// 校验name长度范围[6:20]</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  j_memset(namemix, <span class="number">0</span>, <span class="keyword">sizeof</span>(namemix));</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">16</span>; ++i )                   <span class="comment">// 基于name生成一个混淆数据</span></span><br><span class="line">  &#123;</span><br><span class="line">    nametempaddr = &amp;namemix[i];</span><br><span class="line">    nametempresult = name[i % namelength] * (i + <span class="number">20160126</span>) * namelength;<span class="comment">// 基于 name 的字符生成一个与 name 相关的混淆数据，存入namemix</span></span><br><span class="line">    *nametempaddr += nametempresult;</span><br><span class="line">  &#125;</span><br><span class="line">  j_memset(codeResult, <span class="number">0</span>, <span class="number">0x400</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( codeEnc1(code) &gt; <span class="number">1024</span> || codeEnc2(codeResult, code) != <span class="number">20</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  j_memset(nameresultarray, <span class="number">0</span>, <span class="keyword">sizeof</span>(nameresultarray));</span><br><span class="line">  j_memset(coderesultarray, <span class="number">0</span>, <span class="keyword">sizeof</span>(coderesultarray));</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j != <span class="number">5</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    codetemp = *&amp;codeResult[j * <span class="number">4</span>];</span><br><span class="line">    nameresultarray[j] = *&amp;namemix[j * <span class="number">4</span>] / <span class="number">10</span>;</span><br><span class="line">    coderesultarray[j] = codetemp;</span><br><span class="line">  &#125;</span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( coderesultarray[<span class="number">4</span>] + nameresultarray[<span class="number">0</span>] == coderesultarray[<span class="number">2</span>]</span><br><span class="line">    &amp;&amp; coderesultarray[<span class="number">4</span>] + nameresultarray[<span class="number">0</span>] + nameresultarray[<span class="number">1</span>] == <span class="number">2</span> * coderesultarray[<span class="number">4</span>]</span><br><span class="line">    &amp;&amp; nameresultarray[<span class="number">2</span>] + coderesultarray[<span class="number">3</span>] == coderesultarray[<span class="number">0</span>]</span><br><span class="line">    &amp;&amp; nameresultarray[<span class="number">2</span>] + coderesultarray[<span class="number">3</span>] + nameresultarray[<span class="number">3</span>] == <span class="number">2</span> * coderesultarray[<span class="number">3</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> nameresultarray[<span class="number">4</span>] + coderesultarray[<span class="number">1</span>] == <span class="number">3</span> * nameresultarray[<span class="number">2</span>];  <span class="comment">// 返回值为1则验证成功</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据以上信息，当满足以下条件，程序验证成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">coderesultarray[4] + nameresultarray[0] == coderesultarray[2]</span><br><span class="line">coderesultarray[4] + nameresultarray[0] + nameresultarray[1] == 2 * coderesultarray[4]</span><br><span class="line">nameresultarray[2] + coderesultarray[3] == coderesultarray[0]</span><br><span class="line">nameresultarray[2] + coderesultarray[3] + nameresultarray[3] == 2 * coderesultarray[3]</span><br><span class="line">nameresultarray[4] + coderesultarray[1] == 3 * nameresultarray[2]</span><br></pre></td></tr></table></figure>

<p>变换，整理得到如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">coderesultarray[4] + nameresultarray[0] == coderesultarray[2]</span><br><span class="line">nameresultarray[0] + nameresultarray[1] == coderesultarray[4]</span><br><span class="line">nameresultarray[2] + coderesultarray[3] == coderesultarray[0]</span><br><span class="line">nameresultarray[2] + nameresultarray[3] == coderesultarray[3]</span><br><span class="line">nameresultarray[4] + coderesultarray[1] == 3 * nameresultarray[2]</span><br></pre></td></tr></table></figure>

<p>由此可知：</p>
<ul>
<li>coderesultarray[0]可由nameresultarray[2]+nameresultarray[2]+nameresultarray[3]得到</li>
<li>coderesultarray[1]可由3 * nameresultarray[2]-nameresultarray[4]]得到</li>
<li>coderesultarray[2]可由nameresultarray[0] + nameresultarray[1]+nameresultarray[0]]得到</li>
<li>coderesultarray[3]可由nameresultarray[2] + nameresultarray[3]]得到</li>
<li>coderesultarray[4]可由nameresultarray[0] + nameresultarray[1]]得到</li>
</ul>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>由以上信息，我们可以知道，由<code>name-&gt;namemix-&gt;nameresultarray-&gt;coderesultarray</code></p>
<p>还知道<code>code-&gt;codeResult-&gt;coderesultarray</code></p>
<p>猜测可通过coderesultarray还原code</p>
<p>接下来分析code的两个处理函数codeEnc1和codeEnc2</p>
<h2 id="codeEnc1"><a href="#codeEnc1" class="headerlink" title="codeEnc1"></a>codeEnc1</h2><p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/7.jpg"></p>
<h3 id="a456789"><a href="#a456789" class="headerlink" title="a456789"></a>a456789</h3><p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/8.jpg"></p>
<p><strong>观察数据窗口</strong></p>
<p>发现末尾有一串Base64表，盲猜会出现Base64编码</p>
<p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/9.jpg"></p>
<p>经过分析，codeEnc1函数的功能是对输入的code进行校验，返回一个与字符串长度和规则相关的值，然后与1024进行比较。</p>
<h2 id="codeEnc2"><a href="#codeEnc2" class="headerlink" title="codeEnc2"></a>codeEnc2</h2><p>处理过后的codeEnc2函数如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">codeEnc2</span><span class="params">(<span class="type">char</span> *codeResult, <span class="type">char</span> *code)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *Cocode; <span class="comment">// r3</span></span><br><span class="line">  <span class="type">int</span> Cocode_code; <span class="comment">// r3</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r2</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">char</span> *codeResultTemp; <span class="comment">// r3</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// r3</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r6</span></span><br><span class="line"></span><br><span class="line">  Cocode = code;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    ++Cocode;</span><br><span class="line">  <span class="keyword">while</span> ( a456789[*(Cocode - <span class="number">1</span>)] &lt;= <span class="number">63u</span> );</span><br><span class="line">  Cocode_code = Cocode - code;                  <span class="comment">// Cocode_code是Cocode-code</span></span><br><span class="line">  v4 = Cocode_code - <span class="number">1</span>;</span><br><span class="line">  v5 = <span class="number">3</span> * ((Cocode_code + <span class="number">2</span>) / <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    codeResultTemp = codeResult;</span><br><span class="line">    <span class="keyword">if</span> ( v4 &lt;= <span class="number">4</span> )                              <span class="comment">// 判断剩余字符是否小于4字节</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v4 -= <span class="number">4</span>;</span><br><span class="line">    *codeResult = (a456789[code[<span class="number">1</span>]] &gt;&gt; <span class="number">4</span>) | (<span class="number">4</span> * a456789[*code]);</span><br><span class="line">    codeResult[<span class="number">1</span>] = (a456789[code[<span class="number">2</span>]] &gt;&gt; <span class="number">2</span>) | (<span class="number">16</span> * a456789[code[<span class="number">1</span>]]);</span><br><span class="line">    v7 = code[<span class="number">2</span>];</span><br><span class="line">    v8 = code[<span class="number">3</span>];</span><br><span class="line">    code += <span class="number">4</span>;</span><br><span class="line">    codeResult[<span class="number">2</span>] = (a456789[v7] &lt;&lt; <span class="number">6</span>) | a456789[v8];</span><br><span class="line">    codeResult += <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v4 &gt; <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *codeResult = (a456789[code[<span class="number">1</span>]] &gt;&gt; <span class="number">4</span>) | (<span class="number">4</span> * a456789[*code]);</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      codeResultTemp = codeResult + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      codeResult[<span class="number">1</span>] = (a456789[code[<span class="number">2</span>]] &gt;&gt; <span class="number">2</span>) | (<span class="number">16</span> * a456789[code[<span class="number">1</span>]]);</span><br><span class="line">      <span class="keyword">if</span> ( v4 == <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        codeResultTemp = codeResult + <span class="number">3</span>;</span><br><span class="line">        codeResult[<span class="number">2</span>] = (a456789[code[<span class="number">2</span>]] &lt;&lt; <span class="number">6</span>) | a456789[code[<span class="number">3</span>]];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        codeResultTemp = codeResult + <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;                                             <span class="comment">// 自实现过Base64编码的人在这里就不难看出来这里是Base64解码算法</span></span><br><span class="line">  *codeResultTemp = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v5 - (-v4 &amp; <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个Base64解码算法</p>
<h3 id="hook验证"><a href="#hook验证" class="headerlink" title="hook验证"></a>hook验证</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_native</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> soAddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libCheckRegister.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> codeEnc2 = soAddr.<span class="title function_">add</span>(<span class="number">0x1499</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(codeEnc2)</span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">protect</span>(codeEnc2, <span class="number">0x1000</span>, <span class="string">&#x27;rwx&#x27;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(codeEnc2,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg0:&quot;</span>,<span class="title function_">hexdump</span>(args[<span class="number">0</span>]));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg1:&quot;</span>,<span class="title function_">hexdump</span>(args[<span class="number">1</span>]));</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">codeResult</span> = args[<span class="number">0</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;codeResult:&quot;</span>,<span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">codeResult</span>));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret:&quot;</span>,ret)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ret</span>=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_native</span>()</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arg0:            </span><br><span class="line">0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">ffdc62f4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ffdc6304  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ffdc6314  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">arg1:</span><br><span class="line">0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">deb247a0  31 32 33 34 35 36 37 38 00 00 00 00 00 00 00 00  12345678........</span><br><span class="line">deb247b0  00 00 00 00 28 00 00 00 00 00 00 00 00 00 00 00  ....(...........</span><br><span class="line">codeResult: </span><br><span class="line">0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">ffdc62f4  d7 6d f8 e7 ae fc 00 00 00 00 00 00 00 00 00 00  .m..............</span><br><span class="line">ffdc6304  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ffdc6314  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret: 0x6</span><br></pre></td></tr></table></figure>

<p>如下证明codeEnc2是标准的Base64解码算法</p>
<p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/10.jpg"></p>
<h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>这里弄明白了，code经过Base64解码得到codeResult，codeResult部分数据经过Base64解码得到coderesultarray。</p>
<h3 id="重新捋一遍流程"><a href="#重新捋一遍流程" class="headerlink" title="重新捋一遍流程"></a>重新捋一遍流程</h3><p>首先，我们输入name，name经过混淆得到namemix，namemix的前20字节经过处理得到nameresultarray，然后由nameresultarray推导出coderesultarray，coderesultarray经过Base64编码得到code。</p>
<h1 id="C-还原"><a href="#C-还原" class="headerlink" title="C++还原"></a>C++还原</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 Base64 编码字符表</span></span><br><span class="line">string base64_chars =</span><br><span class="line">        <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line">        <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line">        <span class="string">&quot;0123456789+/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Base64 编码函数，将字节数组编码为 Base64 格式的字符串</span></span><br><span class="line"><span class="function">string <span class="title">base64_encode</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* bytes_to_encode, <span class="type">unsigned</span> <span class="type">int</span> in_len)</span> </span>&#123;</span><br><span class="line">    std::string ret; <span class="comment">// 存储编码后的结果</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> char_array_3[<span class="number">3</span>]; <span class="comment">// 临时存储3个字节</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> char_array_4[<span class="number">4</span>]; <span class="comment">// 临时存储4个编码后的字符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理输入数据，3个字节一组进行编码</span></span><br><span class="line">    <span class="keyword">while</span> (in_len--) &#123;</span><br><span class="line">        char_array_3[i++] = *(bytes_to_encode++);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="comment">// 将3个字节转换为4个6位的Base64字符索引</span></span><br><span class="line">            char_array_4[<span class="number">0</span>] = (char_array_3[<span class="number">0</span>] &amp; <span class="number">0xfc</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">            char_array_4[<span class="number">1</span>] = ((char_array_3[<span class="number">0</span>] &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">4</span>) + ((char_array_3[<span class="number">1</span>] &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">            char_array_4[<span class="number">2</span>] = ((char_array_3[<span class="number">1</span>] &amp; <span class="number">0x0f</span>) &lt;&lt; <span class="number">2</span>) + ((char_array_3[<span class="number">2</span>] &amp; <span class="number">0xc0</span>) &gt;&gt; <span class="number">6</span>);</span><br><span class="line">            char_array_4[<span class="number">3</span>] = char_array_3[<span class="number">2</span>] &amp; <span class="number">0x3f</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据索引从Base64字符表中获取字符</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; (i &lt; <span class="number">4</span>); i++)</span><br><span class="line">                ret += base64_chars[char_array_4[i]];</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理剩余的不足3字节的数据</span></span><br><span class="line">    <span class="keyword">if</span> (i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">            char_array_3[j] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 用\0填充</span></span><br><span class="line"></span><br><span class="line">        char_array_4[<span class="number">0</span>] = (char_array_3[<span class="number">0</span>] &amp; <span class="number">0xfc</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        char_array_4[<span class="number">1</span>] = ((char_array_3[<span class="number">0</span>] &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">4</span>) + ((char_array_3[<span class="number">1</span>] &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">        char_array_4[<span class="number">2</span>] = ((char_array_3[<span class="number">1</span>] &amp; <span class="number">0x0f</span>) &lt;&lt; <span class="number">2</span>) + ((char_array_3[<span class="number">2</span>] &amp; <span class="number">0xc0</span>) &gt;&gt; <span class="number">6</span>);</span><br><span class="line">        char_array_4[<span class="number">3</span>] = char_array_3[<span class="number">2</span>] &amp; <span class="number">0x3f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; (j &lt; i + <span class="number">1</span>); j++)</span><br><span class="line">            ret += base64_chars[char_array_4[j]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((i++ &lt; <span class="number">3</span>))</span><br><span class="line">            ret += <span class="string">&#x27;=&#x27;</span>; <span class="comment">// 用=填充</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 用于存储用户输入的姓名</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input name:&quot;</span>);</span><br><span class="line">    cin &gt;&gt; name; <span class="comment">// 输入姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> namelength = <span class="built_in">strlen</span>(name); <span class="comment">// 计算姓名长度</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;namelength:&quot;</span> &lt;&lt; namelength &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* temppointer = <span class="literal">NULL</span>; <span class="comment">// 临时指针</span></span><br><span class="line">    <span class="type">int</span> namemix[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 混淆后的结果数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成混淆数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">        temppointer = (<span class="type">char</span>*)namemix + i; <span class="comment">// 将指针指向namemix数组中的第i字节</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据姓名字符和索引计算一个混淆数</span></span><br><span class="line">        <span class="type">int</span> tempnumber = name[i % namelength] * (i + <span class="number">20160126</span>) * namelength;</span><br><span class="line"></span><br><span class="line">        *(<span class="type">int</span>*)temppointer += tempnumber; <span class="comment">// 将计算结果写入对应位置</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出混淆数据</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;namemix:&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i != <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; namemix[i] &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对混淆数据进一步处理，生成结果数组</span></span><br><span class="line">    <span class="type">int</span> nameresultarray[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        nameresultarray[i] = namemix[i] / <span class="number">10</span>; <span class="comment">// 每个值缩小10倍</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果数组</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;nameresultarrat&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; nameresultarray[i] &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据结果数组生成编码数组</span></span><br><span class="line">    <span class="type">int</span> coderesultarray[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    coderesultarray[<span class="number">0</span>] = nameresultarray[<span class="number">2</span>] + nameresultarray[<span class="number">2</span>] + nameresultarray[<span class="number">3</span>];</span><br><span class="line">    coderesultarray[<span class="number">1</span>] = <span class="number">3</span> * nameresultarray[<span class="number">2</span>] - nameresultarray[<span class="number">4</span>];</span><br><span class="line">    coderesultarray[<span class="number">2</span>] = nameresultarray[<span class="number">0</span>] + nameresultarray[<span class="number">1</span>] + nameresultarray[<span class="number">0</span>];</span><br><span class="line">    coderesultarray[<span class="number">3</span>] = nameresultarray[<span class="number">2</span>] + nameresultarray[<span class="number">3</span>];</span><br><span class="line">    coderesultarray[<span class="number">4</span>] = nameresultarray[<span class="number">0</span>] + nameresultarray[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出编码数组</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;coderesultarray:&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 输出为16进制格式</span></span><br><span class="line">        <span class="comment">//printf(&quot;%x\n&quot;, coderesultarray[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 Base64 对编码数组进行编码</span></span><br><span class="line">    string encodeStr = <span class="built_in">base64_encode</span>((<span class="type">unsigned</span> <span class="type">char</span>*)coderesultarray, <span class="number">20</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Code is :&quot;</span> &lt;&lt; encodeStr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="验证成功"><a href="#验证成功" class="headerlink" title="验证成功"></a>验证成功</h2><p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/11.jpg"></p>
]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>Tencent2016A</tag>
      </tags>
  </entry>
  <entry>
    <title>考研数学</title>
    <url>/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="基础？"><a href="#基础？" class="headerlink" title="基础？"></a>基础？</h1><h2 id="幂函数"><a href="#幂函数" class="headerlink" title="幂函数"></a>幂函数</h2><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/47.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/48.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/49.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/50.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/51.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/52.jpg"></p>
<p><strong>幂函数转根号</strong></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/77.jpg"></p>
<h2 id="指数函数"><a href="#指数函数" class="headerlink" title="指数函数"></a>指数函数</h2><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/53.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/54.jpg"></p>
<h2 id="对数函数"><a href="#对数函数" class="headerlink" title="对数函数"></a>对数函数</h2><p> <img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/57.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/58.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/59.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/60.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/61.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/62.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/63.jpg"></p>
<h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/55.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/56.jpg"></p>
<h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/64.jpg"></p>
<h3 id="三角函数特殊角值"><a href="#三角函数特殊角值" class="headerlink" title="三角函数特殊角值"></a>三角函数特殊角值</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/41.jpg"></p>
<h3 id="三角函数图像及性质"><a href="#三角函数图像及性质" class="headerlink" title="三角函数图像及性质"></a>三角函数图像及性质</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/42.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/65.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/66.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/67.jpg"></p>
<h3 id="反三角函数图像及性质"><a href="#反三角函数图像及性质" class="headerlink" title="反三角函数图像及性质"></a>反三角函数图像及性质</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/43.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/44.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/45.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/46.jpg"></p>
<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/68.jpg"></p>
<h3 id="奇变偶不变，符号看象限"><a href="#奇变偶不变，符号看象限" class="headerlink" title="奇变偶不变，符号看象限"></a>奇变偶不变，符号看象限</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/74.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/69.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/70.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/71.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/72.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/73.jpg"></p>
<h3 id="三角公式"><a href="#三角公式" class="headerlink" title="三角公式"></a>三角公式</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/75.jpg"></p>
<h3 id="判断函数奇偶性"><a href="#判断函数奇偶性" class="headerlink" title="判断函数奇偶性"></a>判断函数奇偶性</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/76.jpg"></p>
<h1 id="高数"><a href="#高数" class="headerlink" title="高数"></a>高数</h1><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/1.jpg"></p>
<p><strong>微积分的主要研究内容</strong></p>
<p>事物运动中的数量变化规律</p>
<p><strong>两种变化</strong></p>
<p>均匀变化</p>
<p>非均匀变化</p>
<p><strong>两个侧面</strong></p>
<p>微观（局部）</p>
<p>宏观（整体）</p>
<p><strong>微积分的主要研究对象</strong></p>
<p>函数y&#x3D;f(x) (a&lt;&#x3D;x&lt;&#x3D;b)的变化规律</p>
<p>微观（变化率）</p>
<p>宏观（变化量）</p>
<p><strong>思想方法</strong></p>
<p>利用已知求未知</p>
<p>通过均匀变化求非均匀变化</p>
<p>局部均匀化求近似，利用极限得精确</p>
<p>微分和积分分别是处理均匀量的商和积在处理非均匀量中的发展</p>
<h1 id="函数与极限"><a href="#函数与极限" class="headerlink" title="函数与极限"></a>函数与极限</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>给定两个非空集合 X 和 Y，<strong>函数</strong>（或映射） f 是一种规则，使得对于集合 XXX 中的任一元素 xxx ，都存在唯一一个元素 y∈Y与之对应，这个对应关系记作y&#x3D;f(x).</p>
<ul>
<li><strong>定义域</strong>：<strong>（Domain）</strong>：所有可以作为函数 f 输入的 x 的集合，即 X。</li>
<li><strong>值域（Range 或 Image）</strong>：函数f实际取值的集合</li>
<li><strong>对应关系</strong>：对于每个 x∈X，存在唯一的 y∈Y使得 f(x)&#x3D;y。</li>
</ul>
<p>通过定义域和对应关系可以确定一个函数。</p>
<p><strong>举例常见函数</strong></p>
<p>绝对值函数</p>
<p>符号函数</p>
<p>取整函数</p>
<p><strong>函数的几种特性</strong></p>
<p>有界性</p>
<p>单调性</p>
<p>奇偶性</p>
<p>周期性</p>
<h2 id="反函数与复合函数"><a href="#反函数与复合函数" class="headerlink" title="反函数与复合函数"></a>反函数与复合函数</h2><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/2.jpg"></p>
<p>原函数与它的反函数关于y&#x3D;x对称</p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/3.jpg"></p>
<h2 id="函数的运算"><a href="#函数的运算" class="headerlink" title="函数的运算"></a>函数的运算</h2><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/4.jpg"></p>
<h2 id="初等函数"><a href="#初等函数" class="headerlink" title="初等函数"></a>初等函数</h2><p>将幂函数，指数函数，对数函数，三角函数，反三角函数统称为初等函数。</p>
<h3 id="幂函数-1"><a href="#幂函数-1" class="headerlink" title="幂函数"></a>幂函数</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/6.jpg"></p>
<blockquote>
<p>x是自变量</p>
<p>a是一个常数（可以是正数、负数、分数或整数）。</p>
<p>当 a 为正整数时，幂函数就是多项式中的单项式；当 a 取非整数值或负值时，其定义域和性质会有所不同。</p>
</blockquote>
<p><strong>定义域与奇偶性</strong></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/7.jpg"></p>
<p><strong>图像</strong></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/8.jpg"></p>
<h3 id="指数函数-1"><a href="#指数函数-1" class="headerlink" title="指数函数"></a>指数函数</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/9.jpg"></p>
<blockquote>
<p>底数 a 是常数，满足 a&gt;0 且 a≠1；</p>
<p>指数部分是变量 x。</p>
<p><strong>特别说明：</strong> 当底数 a&#x3D;e（自然常数，约等于2.71828）时，函数 f(x)&#x3D;e^x 被称为自然指数函数，具有许多优美的性质。</p>
</blockquote>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/10.jpg"></p>
<p>图像特点</p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/11.jpg"></p>
<h3 id="对数函数-1"><a href="#对数函数-1" class="headerlink" title="对数函数"></a>对数函数</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/12.jpg"></p>
<blockquote>
<p><strong>底数 a 必须满足</strong>：a&gt;0 且 a≠1；</p>
<p><strong>变量 x 必须满足</strong>：x&gt;0。</p>
</blockquote>
<p>对数函数表示“a 的什么幂等于 x”，即满足</p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/13.jpg"></p>
<p>当底数取自然常数 e 时，函数写作</p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/14.jpg"></p>
<p><strong>基本性质</strong></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/15.jpg"></p>
<p><strong>图像特点</strong></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/16.jpg"></p>
<h3 id="三角函数-1"><a href="#三角函数-1" class="headerlink" title="三角函数"></a>三角函数</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/17.jpg"></p>
<h3 id="反三角函数"><a href="#反三角函数" class="headerlink" title="反三角函数"></a>反三角函数</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/18.jpg"></p>
<h2 id="数列极限的定义"><a href="#数列极限的定义" class="headerlink" title="数列极限的定义"></a>数列极限的定义</h2><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/5.jpg"></p>
<p>一个数列不收敛，就说它没有极限，或者说它是发散的</p>
<h2 id="收敛数列的性质"><a href="#收敛数列的性质" class="headerlink" title="收敛数列的性质"></a>收敛数列的性质</h2><p>唯一性</p>
<p>有界性</p>
<p>保号性</p>
<p>收敛数列与其子数列之间的关系</p>
<p>如果一个数列 {a_n}收敛于极限 A，那么它的任意一个子数列也收敛，且极限也为 A。</p>
<h2 id="函数极限"><a href="#函数极限" class="headerlink" title="函数极限"></a>函数极限</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/19.jpg"></p>
<p><strong>单侧极限</strong></p>
<p><strong>无穷极限</strong></p>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>唯一性</p>
<p>有界性</p>
<p>保号性</p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/20.jpg"></p>
<h2 id="无穷"><a href="#无穷" class="headerlink" title="无穷"></a>无穷</h2><h3 id="无穷小"><a href="#无穷小" class="headerlink" title="无穷小"></a>无穷小</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/21.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/24.jpg"></p>
<h3 id="无穷大"><a href="#无穷大" class="headerlink" title="无穷大"></a>无穷大</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/22.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/23.jpg"></p>
<h2 id="极限的运算法则"><a href="#极限的运算法则" class="headerlink" title="极限的运算法则"></a>极限的运算法则</h2><p>定理1：两个无穷小的和是无穷小</p>
<p>定理2：有界函数与无穷小的乘积是无穷小</p>
<p>推论1：常数与无穷小的乘积是无穷小</p>
<p>推论2：有限个无穷小的和也是无穷小</p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/25.jpg"></p>
<blockquote>
<p>无穷小的运算法则</p>
<p>极限四则运算法则（计算商的时候分母不能为0）</p>
<p>复合函数极限运算法则（内层函数不能为0）</p>
</blockquote>
<p>求函数极限的方法</p>
<blockquote>
<p>分式函数求极限的求法</p>
<p>代入法</p>
<p>零比零型约去分母0因子</p>
<p>无穷比无穷型，分子分母同除以最高次幂</p>
<p>复合函数求极限</p>
<p>设中间变量</p>
</blockquote>
<h3 id="零比零型极限问题"><a href="#零比零型极限问题" class="headerlink" title="零比零型极限问题"></a>零比零型极限问题</h3><p>利用平方差公式，立方差公式，因式分解来提取、消去零因子。</p>
<h3 id="无穷比无穷型"><a href="#无穷比无穷型" class="headerlink" title="无穷比无穷型"></a>无穷比无穷型</h3><blockquote>
<p>找出分子、分母的最高次项</p>
<p>所有项都除以最高次项（一般是分母的最高次幂）</p>
</blockquote>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/78.jpg"></p>
<h2 id="极限存在法则及两个重要极限"><a href="#极限存在法则及两个重要极限" class="headerlink" title="极限存在法则及两个重要极限"></a>极限存在法则及两个重要极限</h2><h3 id="夹逼准则"><a href="#夹逼准则" class="headerlink" title="夹逼准则"></a>夹逼准则</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/26.jpg"></p>
<h3 id="单调有界函数必有极限"><a href="#单调有界函数必有极限" class="headerlink" title="单调有界函数必有极限"></a>单调有界函数必有极限</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/27.jpg"></p>
<h3 id="两个重要极限"><a href="#两个重要极限" class="headerlink" title="两个重要极限"></a>两个重要极限</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/28.jpg"></p>
<h2 id="无穷小的比较"><a href="#无穷小的比较" class="headerlink" title="无穷小的比较"></a>无穷小的比较</h2><p>两个无穷小的和差积仍然是无穷小，但是对于商会有不同的情况。</p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/29.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/30.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/31.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/32.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/33.jpg"></p>
<h3 id="等价无穷小的代换"><a href="#等价无穷小的代换" class="headerlink" title="等价无穷小的代换"></a>等价无穷小的代换</h3><p>代换原则：乘除关系可以代换</p>
<h3 id="常见的等价无穷小"><a href="#常见的等价无穷小" class="headerlink" title="常见的等价无穷小"></a>常见的等价无穷小</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/34.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/35.jpg"></p>
<h2 id="函数的连续性与间断点"><a href="#函数的连续性与间断点" class="headerlink" title="函数的连续性与间断点"></a>函数的连续性与间断点</h2><h3 id="连续性"><a href="#连续性" class="headerlink" title="连续性"></a>连续性</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/36.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/37.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/38.jpg"></p>
<h3 id="间断点"><a href="#间断点" class="headerlink" title="间断点"></a>间断点</h3><p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/39.jpg"></p>
<p><img src="/2025/04/08/%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6/40.jpg"></p>
]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>考研数学</tag>
      </tags>
  </entry>
  <entry>
    <title>考研英语</title>
    <url>/2025/04/08/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD/</url>
    <content><![CDATA[<h1 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h1><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><p>n.行为，行动；功能，作用</p>
<blockquote>
<p>Actions speak louder than words.</p>
<p>行动胜于雄辩。</p>
<p>Prior knowledge and interests influence the subsequent actions we take.</p>
<p>先前的知识和兴趣会影响我们接下来采取的行动。</p>
</blockquote>
<h3 id="activate"><a href="#activate" class="headerlink" title="activate"></a>activate</h3><p>v.使活动；激活</p>
<blockquote>
<p>The burglar alarm is activated by movement.</p>
<p>这防盗报警器一动就响。</p>
<p>Curiosity activates creative minds.</p>
<p>好奇心激发创造性思维。</p>
</blockquote>
<h3 id="active"><a href="#active" class="headerlink" title="active"></a>active</h3><p>adj.积极的，活跃的；起作用的</p>
<blockquote>
<p>Playing with digital devices discourages kids from active discovery.</p>
<p>玩电子设备会阻碍孩子积极探索。</p>
<p>The brain is as active during REM（rapid eve movement）sleep as it is when fully awake.</p>
<p>大脑在快速眼动睡眠时与完全清醒时是一样活跃的。</p>
</blockquote>
<h3 id="actural"><a href="#actural" class="headerlink" title="actural"></a>actural</h3><p>adj.实际的；真正的；真实的</p>
<blockquote>
<p>The actural cost was higher than we expected.</p>
<p>实际成本比我们预期的要高。</p>
<p>Their methods do not attempt to estimate the actural biomass.</p>
<p>他们的方法并不试图估算实际的生物量。</p>
</blockquote>
<h3 id="acturally"><a href="#acturally" class="headerlink" title="acturally"></a>acturally</h3><p>adv.事实上，实际上</p>
<blockquote>
<p>A new study suggests that people are actually more stressed at home than at work.</p>
<p>一项新的研究表明，人们在家里的压力实际上比在工作时更大。</p>
</blockquote>
<h3 id="amaze"><a href="#amaze" class="headerlink" title="amaze"></a>amaze</h3><p>v.使惊奇；惊愕；</p>
<blockquote>
<p>Your sudden appearance amazed me a lot.</p>
<p>你突然出现让我非常惊讶。</p>
<p>We are amazed today at the mere number of plays produces.</p>
<p>今天，我们对所制作的戏剧数量感到震惊。</p>
</blockquote>
<h3 id="amazing"><a href="#amazing" class="headerlink" title="amazing"></a>amazing</h3><p>adj.令人惊异的；了不起的</p>
<blockquote>
<p>The networked computer is an amazing device.</p>
<p>网络计算机是一个令人惊叹的设备。</p>
</blockquote>
<h3 id="ambition"><a href="#ambition" class="headerlink" title="ambition"></a>ambition</h3><p>n.野心，雄心，抱负</p>
<blockquote>
<p>His burning ambition was to study medicine.</p>
<p>他最大的志向是学习医学。</p>
<p>He left the bank in 2005 with ambitions to be a CEO.</p>
<p>他于2005年离开了银行，怀着成为首席执行官的志向。</p>
</blockquote>
<h3 id="ambitious"><a href="#ambitious" class="headerlink" title="ambitious"></a>ambitious</h3><p>adj.有抱负的；有雄心的</p>
<h3 id="amuse"><a href="#amuse" class="headerlink" title="amuse"></a>amuse</h3><p>v.逗乐，逗笑；</p>
<h3 id="amusement"><a href="#amusement" class="headerlink" title="amusement"></a>amusement</h3><p>n.娱乐；消遣活动</p>
<h3 id="ancient"><a href="#ancient" class="headerlink" title="ancient"></a>ancient</h3><p>adj.古代的，古老的</p>
<blockquote>
<p>The pyramids were built in ancient times.</p>
<p>金字塔建于古代。</p>
</blockquote>
<h3 id="applaud"><a href="#applaud" class="headerlink" title="applaud"></a>applaud</h3><p>v.称赞；鼓掌</p>
<blockquote>
<p>They rose to applaud the speaker.</p>
<p>他们站起来为演讲者鼓掌。</p>
</blockquote>
<h3 id="arise"><a href="#arise" class="headerlink" title="arise"></a>arise</h3><p>v.发生；产生；出现；由…引起</p>
<blockquote>
<p>His failure arose from his laziness.</p>
<p>他的失败源于他的懒惰。</p>
<p>It is speculated that gardens arise from a basic human need in the individuals who made them.</p>
<p>有人推测，花园源于那些建造它们的人的基本人类需求。</p>
</blockquote>
<h3 id="arouse"><a href="#arouse" class="headerlink" title="arouse"></a>arouse</h3><p>v.唤醒；唤起，引起，激起</p>
<blockquote>
<p>My curiosity was fully aroused by his expression.</p>
<p>他的表情完全引起了我的好奇心。</p>
<p>The idea arose because of the perplexing behavior of the women in the plant.</p>
<p>这个想法源于工厂里女性员工令人困惑的行为。</p>
</blockquote>
<h3 id="astonish"><a href="#astonish" class="headerlink" title="astonish"></a>astonish</h3><p>v.使十分惊讶</p>
<blockquote>
<p>The news astonished everyone.</p>
<p>She astonished us by saying she was leaving</p>
</blockquote>
<h3 id="astonishing"><a href="#astonishing" class="headerlink" title="astonishing"></a>astonishing</h3><p>adj.令人十分惊讶的；令人大为惊奇的；难以置信的</p>
<h3 id="award"><a href="#award" class="headerlink" title="award"></a>award</h3><p>n.奖品，奖金</p>
<p>v.授予</p>
<blockquote>
<p>She was recently honoured with a lifetime achievement award.</p>
<p>她最近获得了终身成就奖。</p>
<p>A town of culture award could become an annual event.</p>
<p>“文化之城奖”可能会成为一项年度盛事。</p>
</blockquote>
<h3 id="awkward"><a href="#awkward" class="headerlink" title="awkward"></a>awkward</h3><p>adj.令人尴尬的；难处理的；笨拙的；不舒适的</p>
<blockquote>
<p>After he spoke , there was an awkward slience.</p>
<p>他讲完话后，场面一度陷入尴尬的沉默。</p>
<p>If you feel awkward being humorous, you must practice so that it becomes more natural.</p>
<p>如果你觉得开玩笑很尴尬，那你就必须多练习，让它变得更自然。</p>
</blockquote>
<h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><h3 id="behave"><a href="#behave" class="headerlink" title="behave"></a>behave</h3><p>v.表现；举止得体</p>
<blockquote>
<p>She doesn’t know how to behave in public.</p>
<p>她不知道在公共场合应该如何举止。</p>
</blockquote>
<h3 id="behaiour"><a href="#behaiour" class="headerlink" title="behaiour"></a>behaiour</h3><p>n.行为；举止；态度</p>
<blockquote>
<p>There’s no doubt that our peer groups exert enormous influence on our behavior.</p>
<p>毫无疑问，我们的同龄群体对我们的行为有着巨大的影响。</p>
</blockquote>
<h3 id="boost"><a href="#boost" class="headerlink" title="boost"></a>boost</h3><p>n.提升，增加，激励</p>
<p>v.提高，增强，激励</p>
<h3 id="burglar"><a href="#burglar" class="headerlink" title="burglar"></a>burglar</h3><p>v.指“入室盗窃者”或“夜盗”</p>
<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h3 id="clap"><a href="#clap" class="headerlink" title="clap"></a>clap</h3><p>n&#x2F;v.鼓掌；拍手</p>
<blockquote>
<p>The band played a familiar tune which had everyone clapping along.</p>
<p>乐队演奏了一首熟悉的曲子，大家纷纷跟着鼓掌。</p>
<p>With a clap of his hands he ordered more food.</p>
<p>他拍了一下手，点了更多的食物。</p>
</blockquote>
<h3 id="clock"><a href="#clock" class="headerlink" title="clock"></a>clock</h3><p>n.钟，时钟；</p>
<p>v.记录时间</p>
<h3 id="conduct"><a href="#conduct" class="headerlink" title="conduct"></a>conduct</h3><p>v.组织，安排；实施，执行；指挥；指导</p>
<p>n.行为，举止</p>
<blockquote>
<p>The sport has a strict code of confuct.</p>
<p>这项运动有严格的行为规范。</p>
</blockquote>
<h3 id="conductor"><a href="#conductor" class="headerlink" title="conductor"></a>conductor</h3><p>n.指挥；售票员，检票员；导体</p>
<blockquote>
<p>Semiconductor industry had been taken over by foreign enterprises.</p>
<p>半导体行业已经被外国企业接管。</p>
</blockquote>
<h3 id="curb"><a href="#curb" class="headerlink" title="curb"></a>curb</h3><p>v.控制；抑制；限制</p>
<blockquote>
<p>He needs to learn to curb his temper.</p>
<p>他需要学会控制自己的脾气。</p>
<p>Curbs on business-method claims would be a dramatic about-face.</p>
<p>对商业方法专利的限制将是一个戏剧性的转变。</p>
</blockquote>
<h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><h3 id="direct"><a href="#direct" class="headerlink" title="direct"></a>direct</h3><p>v.指导，指挥</p>
<p>adj.直接的</p>
<blockquote>
<p>The project mamagers direct the day-to-day.</p>
<p>项目经理负责日常事务的管理。</p>
</blockquote>
<h3 id="directly"><a href="#directly" class="headerlink" title="directly"></a>directly</h3><p>adv.直接地</p>
<h3 id="dismay"><a href="#dismay" class="headerlink" title="dismay"></a>dismay</h3><p>n.沮丧，灰心，丧气；诧异；惊愕</p>
<p>v.使失望；使惊愕</p>
<blockquote>
<p>I read of her resignation with some dismay.</p>
<p>我看到她的辞职报告的时候有些许沮丧</p>
<p>To her dismay,her name was not on the list.</p>
<p>令她失望的是，她的名字不在名单上。</p>
</blockquote>
<h3 id="distration"><a href="#distration" class="headerlink" title="distration"></a>distration</h3><p>n.干扰因素，焦虑不安</p>
<h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><h3 id="exact"><a href="#exact" class="headerlink" title="exact"></a>exact</h3><p>adj.准确的，精确的，严谨的</p>
<p>v.要求；强迫；强求</p>
<blockquote>
<p>The colours were an almost exact match.</p>
<p>这些颜色几乎完全匹配。</p>
<p>You should make shopping lists for your ingredients in their exact quantities.</p>
<p>你应该根据配料的准确用量列出购物清单。</p>
</blockquote>
<h3 id="exactly"><a href="#exactly" class="headerlink" title="exactly"></a>exactly</h3><p>adv.准确地，精确地</p>
<blockquote>
<p>This year marks exactly two centuries since its publication.</p>
<p>今年正好是它出版两百周年。</p>
</blockquote>
<h3 id="exercise"><a href="#exercise" class="headerlink" title="exercise"></a>exercise</h3><p>n.运动，锻炼，行使，施加</p>
<p>v.锻炼，行使，施加</p>
<h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><h3 id="flesh"><a href="#flesh" class="headerlink" title="flesh"></a>flesh</h3><p>n.肉，果肉；肉体；皮肤</p>
<blockquote>
<p>The flesh of the peach is sweet and juicy.</p>
<p>桃子的果肉香甜多汁。</p>
</blockquote>
<h2 id="H"><a href="#H" class="headerlink" title="H"></a>H</h2><h3 id="honor-honour"><a href="#honor-honour" class="headerlink" title="honor&#x2F;honour"></a>honor&#x2F;honour</h3><p>n.荣誉、光荣；奖项；</p>
<p>v.授予荣誉、表彰</p>
<h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><h3 id="interact"><a href="#interact" class="headerlink" title="interact"></a>interact</h3><p>v.交流，沟通；相互影响，相互作用</p>
<blockquote>
<p>He interacts very well with other children.</p>
<p>他与其他孩子相处得很好。</p>
</blockquote>
<h3 id="interaction"><a href="#interaction" class="headerlink" title="interaction"></a>interaction</h3><p>n.互动，交流；相互作用</p>
<blockquote>
<p>The human systems and the landscapes we live on are linked , and the interactions go both ways.</p>
<p>人类系统与我们赖以生存的自然景观是相互关联的，而且这种互动是双向的。</p>
</blockquote>
<h3 id="innovate"><a href="#innovate" class="headerlink" title="innovate"></a>innovate</h3><p>v.创新；革新</p>
<blockquote>
<p>The company can once again innovate its way out of tough economic times.</p>
<p>公司可以再次通过创新摆脱经济困境。</p>
</blockquote>
<h3 id="innovation"><a href="#innovation" class="headerlink" title="innovation"></a>innovation</h3><p>n.创造；创新；改革</p>
<blockquote>
<p>The first thing needed for innovation is a fascination with wonder.</p>
<p>创新所需的第一件事是对奇迹的迷恋。</p>
</blockquote>
<h2 id="R"><a href="#R" class="headerlink" title="R"></a>R</h2><h3 id="react"><a href="#react" class="headerlink" title="react"></a>react</h3><p>v.起化学反应；回应，做出反应</p>
<blockquote>
<p>All students in our university react strongly to the resign of the president.</p>
<p>我们学校的所有学生对校长辞职的反应很激烈。</p>
<p>The stock market reacts positively when companies tie CEO  pay to stock prices.</p>
<p>当公司把股价和首席执行官的工资挂钩时，股市会作出积极反应。</p>
</blockquote>
<h3 id="reaction"><a href="#reaction" class="headerlink" title="reaction"></a>reaction</h3><p>n.反应；反作用力</p>
<h3 id="reactor"><a href="#reactor" class="headerlink" title="reactor"></a>reactor</h3><p>n.核反应堆</p>
<h3 id="recur"><a href="#recur" class="headerlink" title="recur"></a>recur</h3><p>v.再发生；反复出现</p>
<blockquote>
<p>Cartwright believes one can exercise conscious control over recurring bad dreams.</p>
<p>卡特赖特相信一个人可以对反复出现的噩梦行使有意识的控制。</p>
</blockquote>
<h3 id="refresh"><a href="#refresh" class="headerlink" title="refresh"></a>refresh</h3><p>v.使精神振作，使精力恢复</p>
<blockquote>
<p>The following moring she awoke refreshed.</p>
<p>第二天早上，她醒来时神清气爽。</p>
<p>It was specifically to provide city dwellers with spaces for leisure where they could experience “a refreshing air”.</p>
<p>其目的正是为城市居民提供休闲空间，让他们能够体验“清新的空气”。</p>
</blockquote>
<h3 id="rise"><a href="#rise" class="headerlink" title="rise"></a>rise</h3><p>n.上升，增加</p>
<p>v.上升；增加；起义，反抗</p>
<blockquote>
<p>They rose from the table.</p>
<p>他们从桌子旁站起来了。</p>
<p>Everybody loves a fat pay rise.</p>
<p>每个人都喜欢大幅加薪。</p>
</blockquote>
<h3 id="raise"><a href="#raise" class="headerlink" title="raise"></a>raise</h3><p>n.加薪</p>
<p>v.举起；增加；提高；提及；饲养</p>
<blockquote>
<p>They had raised the white flag in surrender.</p>
<p>他们已经举起了白旗表示投降。</p>
</blockquote>
<h3 id="renew"><a href="#renew" class="headerlink" title="renew"></a>renew</h3><p>v.更新；重新开始</p>
<blockquote>
<p>We have to renew our efforts to attract young players.</p>
<p>我们必须重新加大力度来吸引年轻球员。</p>
<p>These labels encourage style-conscious consumers to see clothes as disposable and to renew their wardrobe every few weeks</p>
<p>这些品牌鼓励注重时尚的消费者将衣服视为一次性用品，并每隔几周就更新他们的衣橱。</p>
</blockquote>
<h3 id="renovate"><a href="#renovate" class="headerlink" title="renovate"></a>renovate</h3><p>v.翻新，修复；</p>
<blockquote>
<p>They spent the summer renovating the farmhouse.</p>
<p>他们整个夏天都在翻修农舍。</p>
</blockquote>
<h3 id="restore"><a href="#restore" class="headerlink" title="restore"></a>restore</h3><p>v.恢复，修复；归还</p>
<blockquote>
<p>The operation restored his sight.</p>
<p>手术恢复了他的视力。</p>
</blockquote>
<h3 id="restoration"><a href="#restoration" class="headerlink" title="restoration"></a>restoration</h3><p>n.整修；恢复；归还</p>
<blockquote>
<p>The palace is closed for restoration.</p>
<p>宫殿因维修而关闭。</p>
</blockquote>
<h3 id="reward"><a href="#reward" class="headerlink" title="reward"></a>reward</h3><p>n.奖励；回报；报酬</p>
<p>v.奖赏；奖励</p>
<blockquote>
<p>You deserve a reward for being so helpful.</p>
<p>你这么乐于助人，应该得到一份奖励。</p>
<p>Scientists need journals in which to publish their research,so they will supply the articles without monetary reward.</p>
<p>科学家需要期刊来发表他们的研究成果，因此他们会无偿提供文章。</p>
</blockquote>
<h2 id="S"><a href="#S" class="headerlink" title="S"></a>S</h2><h3 id="stale"><a href="#stale" class="headerlink" title="stale"></a>stale</h3><p>adj.不新鲜的；污浊的；陈腐的；厌倦的</p>
<blockquote>
<p>They starved but only could eat a piece of stale bread every day.</p>
<p>他们挨饿，每天只能吃一片发硬的面包。</p>
</blockquote>
<h3 id="steer"><a href="#steer" class="headerlink" title="steer"></a>steer</h3><p>v.驾驶；操纵；控制；引导</p>
<blockquote>
<p>steer clear of </p>
<p>避开；回避</p>
<p>This growth leader is also responsible for keeping the team focus on moving forward and steer them clear of distractions.</p>
<p>这位增长负责人还负责让团队专注于前进，并引导他们避开干扰。</p>
</blockquote>
<h3 id="stock"><a href="#stock" class="headerlink" title="stock"></a>stock</h3><p>n.股票股份</p>
<h3 id="storage"><a href="#storage" class="headerlink" title="storage"></a>storage</h3><p>n.贮存，贮藏</p>
<blockquote>
<p>There is a lot of storage space in the loft.</p>
<p>阁楼里有很多储藏空间。</p>
<p>But a boost in the storage capacity of batteries is making their ability to keep power flowing around the clock more likely.</p>
<p>但电池存储容量的提升使得它们全天候持续供电的能力变得更加可能。</p>
</blockquote>
<h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>n.商店；仓库</p>
<p>v.贮藏，贮存</p>
<h3 id="subsequent"><a href="#subsequent" class="headerlink" title="subsequent"></a>subsequent</h3><p>adj.“随后的”、“后来的”或“接着发生的”</p>
<h2 id="T"><a href="#T" class="headerlink" title="T"></a>T</h2><h3 id="tie"><a href="#tie" class="headerlink" title="tie"></a>tie</h3><p>v.“系、绑、连接”</p>
<p>n.“领带、平局、联系”</p>
<h2 id="P"><a href="#P" class="headerlink" title="P"></a>P</h2><h3 id="peer"><a href="#peer" class="headerlink" title="peer"></a>peer</h3><p>n.同龄人，伙伴</p>
<h3 id="praise"><a href="#praise" class="headerlink" title="praise"></a>praise</h3><p>n&#x2F;v.表扬，赞美</p>
<blockquote>
<p>His teachers are full of praise for the progress he has made.</p>
<p>他的老师们对他取得的进步赞不绝口。</p>
<p>Retail trade groups praised the ruling.</p>
<p>零售贸易团体对这一裁决表示赞赏。</p>
</blockquote>
<h3 id="president"><a href="#president" class="headerlink" title="president"></a>president</h3><p>n.“总统、主席、校长、会长”</p>
<h3 id="prize"><a href="#prize" class="headerlink" title="prize"></a>prize</h3><p>n.奖赏；奖金；奖品</p>
<p>v.珍视</p>
<blockquote>
<p>She was awarded the Nobel Peace Prize.</p>
<p>她被授予了诺贝尔和平奖。</p>
</blockquote>
]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>考研英语</tag>
      </tags>
  </entry>
  <entry>
    <title>自毁程序密码—阿里聚安全</title>
    <url>/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.yaotong.crackme</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/1.jpg"></p>
<h2 id="Java层分析"><a href="#Java层分析" class="headerlink" title="Java层分析"></a>Java层分析</h2><h3 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h3><p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/2.jpg"></p>
<p>很容易就能看出来是在securityCheck函数里进行安全校验。securityCheck是一个native函数，到so中进行分析。</p>
<h1 id="SO层分析"><a href="#SO层分析" class="headerlink" title="SO层分析"></a>SO层分析</h1><h2 id="定位函数位置"><a href="#定位函数位置" class="headerlink" title="定位函数位置"></a>定位函数位置</h2><p>在导出函数里搜索</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/3.jpg"></p>
<h2 id="securityCheck"><a href="#securityCheck" class="headerlink" title="securityCheck"></a>securityCheck</h2><p>数据类型修复和重命名后的securityCheck</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">Java_com_yaotong_crackme_MainActivity_securityCheck</span><span class="params">(JNIEnv *a1, jobject a2, <span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *inputStr; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> *wojiushidaan; <span class="comment">// r2</span></span><br><span class="line">  <span class="type">int</span> tempResult; <span class="comment">// r3</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r1</span></span><br><span class="line">​</span><br><span class="line">  <span class="keyword">if</span> ( !byte_6359 )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_2494(byte_6304, <span class="number">8</span>, &amp;unk_446B, &amp;unk_4468, <span class="number">2</span>, <span class="number">7</span>);</span><br><span class="line">    byte_6359 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !byte_635A )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_24F4(byte_636C, <span class="number">25</span>, &amp;unk_4530, &amp;unk_4474, <span class="number">3</span>, <span class="number">117</span>);</span><br><span class="line">    byte_635A = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _android_log_print(<span class="number">4</span>, byte_6304, byte_636C);</span><br><span class="line">  inputStr = (*a1)-&gt;GetStringUTFChars(a1, str, <span class="number">0</span>);</span><br><span class="line">  wojiushidaan = off_628C;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    tempResult = *wojiushidaan;</span><br><span class="line">    <span class="keyword">if</span> ( tempResult != *inputStr )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++wojiushidaan;</span><br><span class="line">    ++inputStr;</span><br><span class="line">    v8 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !tempResult )</span><br><span class="line">      <span class="keyword">return</span> v8;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="off-628C"><a href="#off-628C" class="headerlink" title="off_628C"></a>off_628C</h3><p>进入off_628C偏移查看，它的内容是”wojiushidaan”</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/4.jpg"></p>
<p>数据查看</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/5.jpg"></p>
<p>结合securityCheck函数分析，我觉得这就是正确答案了。</p>
<p>可是输入之后，还是校验失败。</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/6.jpg"></p>
<p>无奈只能动态调试</p>
<h1 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h1><p>IDA动态调试环境配置这里不再介绍。</p>
<h2 id="附加进程"><a href="#附加进程" class="headerlink" title="附加进程"></a>附加进程</h2><p>重新启动程序</p>
<p>在IDA里选择附加到进程</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/7.jpg"></p>
<p>附加进程之后，我们运行一下，会发现，程序崩了，IDA也崩了，说明这个so是有反调试的。</p>
<h2 id="反调试绕过"><a href="#反调试绕过" class="headerlink" title="反调试绕过"></a>反调试绕过</h2><p>猜测反调试是通过线程进行循环检测的。</p>
<p>打开线程窗口</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/8.jpg"></p>
<p>发现一个线程<code>yaotong.crackme</code>，有点可疑，右键这个线程，将状态改为suspend，暂停这个线程。</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/9.jpg"></p>
<p>然后运行，程序没有挂掉，可以进行调试。</p>
<h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><p>打开Modules窗口，找到libcrackme.so，双击进去，找到securityCheck函数，双击该函数跳转到函数的位置。</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/10.jpg"></p>
<p>在这个函数起始的位置下一个断点，将光标移动到断点位置，按下快捷键F，然后在输入框输入任意数据，点击输入密码，程序就会运行到断点位置。</p>
<p>F5查看反汇编，找到原来的变量偏移地址处，发现数据变了，变成了<code>aiyou,bucuoo</code></p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/11.jpg"></p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/12.jpg"></p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>将<code>aiyou,bucuoo</code>放进输入框，点击输入密码，跳转到成功界面。</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/13.jpg"></p>
<h1 id="使用frida-hook内存"><a href="#使用frida-hook内存" class="headerlink" title="使用frida hook内存"></a>使用frida hook内存</h1><p>找到存储答案的变量的内存地址</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/14.jpg"></p>
<p>在程序启动之后，使用frida直接对内存进行hook</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_yaotong</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> soAddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libcrackme.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> hookAddr = soAddr.<span class="title function_">add</span>(<span class="number">0x4450</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(hookAddr.<span class="title function_">readCString</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/15.jpg"></p>
<h1 id="使用unidbg模拟执行"><a href="#使用unidbg模拟执行" class="headerlink" title="使用unidbg模拟执行"></a>使用unidbg模拟执行</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yaotong.crackme;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.backend.DynarmicFactory;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DalvikModule dalvikModule;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    MainActivity() &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.yaotong.crackme&quot;</span>).addBackendFactory(<span class="keyword">new</span> <span class="title class_">DynarmicFactory</span>(<span class="literal">true</span>)).build();</span><br><span class="line">        memory = emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/java/com/yaotong/crackme/alijuanquan.apk&quot;</span>));</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);</span><br><span class="line">        dalvikModule = vm.loadLibrary(<span class="string">&quot;crackme&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">module</span> = dalvikModule.getModule();</span><br><span class="line">        vm.callJNI_OnLoad(emulator,<span class="keyword">module</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MainActivity</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MainActivity</span>();</span><br><span class="line">        System.out.println(test.Check());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">Check</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DvmClass</span> <span class="variable">dvmClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.yaotong.crackme.MainActivity&quot;</span>);</span><br><span class="line">        <span class="type">DvmObject</span> <span class="variable">dvmObject</span> <span class="operator">=</span> dvmClass.newObject(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> <span class="string">&quot;aiyou,bucuoo&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> dvmObject.callJniMethodBoolean(emulator,<span class="string">&quot;securityCheck(Ljava.lang.sring;)Z&quot;</span>,input);</span><br><span class="line">        System.out.println(<span class="string">&quot;result=&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/16.jpg"></p>
<p>待完善…</p>
<p>参考文章：<a href="https://mp.weixin.qq.com/s/r-XXZQImgRc-Lce5B7x60w">https://mp.weixin.qq.com/s/r-XXZQImgRc-Lce5B7x60w</a></p>
]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>自毁程序密码</tag>
      </tags>
  </entry>
  <entry>
    <title>见多识广</title>
    <url>/2024/12/26/%E8%A7%81%E5%A4%9A%E8%AF%86%E5%B9%BF/</url>
    <content><![CDATA[<h1 id="AIGC"><a href="#AIGC" class="headerlink" title="AIGC"></a>AIGC</h1><p>人工智能生成内容（Artificial Intelligence Generated Content），是指由人工智能（AI）技术创建、生成的各种内容，涵盖了文本、图像、视频、音频、代码等多种形式。</p>
<h1 id="LLM"><a href="#LLM" class="headerlink" title="LLM"></a>LLM</h1><p>大预言模型（Large Language Model），是指一种基于深度学习技术，尤其是通过神经网络训练而成的自然语言处理模型。</p>
<h1 id="HCI"><a href="#HCI" class="headerlink" title="HCI"></a>HCI</h1><p>人机交互（Human-Computer Interaction），是指人与计算机之间的交互过程和相关技术研究领域。</p>
<h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><p>远程过程调用（Remote Procedure Call），RPC 是一种计算机通信协议，允许程序在不同的地址空间（例如不同的计算机或同一台计算机的不同进程）之间调用函数或子程序，就像在本地调用一样，而无需了解底层的网络通信细节。</p>
<h1 id="AWD"><a href="#AWD" class="headerlink" title="AWD"></a>AWD</h1><p>攻防兼备（Attack With Defence）。</p>
<h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><p>二进制漏洞挖掘与利用</p>
<h1 id="ABI"><a href="#ABI" class="headerlink" title="ABI"></a>ABI</h1><p>应用程序二进制接口（Application Binary Interface），它定义了程序在运行时的二进制接口。ABI 主要用于描述操作系统和硬件平台如何协同工作，以及编译后的程序如何与系统或其他程序交互。</p>
<ul>
<li><p><strong>Linux 上的 x86_64 ABI</strong>：<br>定义了 64 位 Linux 系统上如何调用函数，参数如何传递。</p>
</li>
<li><p><strong>Android NDK 中的 ABI</strong>：</p>
<p>Android 平台支持多种 ABI，比如：</p>
<ul>
<li><code>armeabi-v7a</code>（32 位 ARM 架构）</li>
<li><code>arm64-v8a</code>（64 位 ARM 架构）</li>
<li><code>x86</code> 和 <code>x86_64</code>（Intel 架构）</li>
</ul>
<p>这些 ABI 直接决定了编译出来的二进制程序是否能在目标设备上运行。</p>
</li>
</ul>
<h1 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h1><p>Protocol Buffers（简称 <strong>protobuf</strong>）是 Google 开发的一种<strong>跨语言、跨平台、高效的结构化数据序列化机制</strong>，用于将结构化数据转换为紧凑的二进制格式，支持数据存储、网络通信等场景。</p>
<h1 id="原码反码补码"><a href="#原码反码补码" class="headerlink" title="原码反码补码"></a>原码反码补码</h1><h2 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h2><p>原码是最直观的数值表示法，它直接反映了数字的绝对值和符号。</p>
<ul>
<li><p>最高位（最左位）表示符号位：0表示正数，1表示负数</p>
</li>
<li><p>其余位表示数值的绝对值</p>
</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+43 的原码：0 0101011（0 + 43的二进制）</span><br><span class="line">-43 的原码：1 0101011（1 + 43的二进制）</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li><p>加法规则：不能直接相加，需要根据符号位判断是做加法还是减法</p>
</li>
<li><p>0的表示：+0 (00000000) 和 -0 (10000000) 是不同的表示</p>
</li>
</ul>
<h2 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h2><p>反码是对原码的一种改进，使运算更加便捷。</p>
<p><strong>反码表示规则：</strong></p>
<ul>
<li><p>正数的反码等于其原码</p>
</li>
<li><p>负数的反码是其原码除符号位外，按位取反（0变1，1变0）</p>
</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+43 的反码：0 0101011（与原码相同）</span><br><span class="line">-43 的反码：1 1010100（符号位不变，其余位取反）</span><br></pre></td></tr></table></figure>

<p><strong>反码的优点</strong></p>
<p>简化了减法操作：A - B 可以通过 A + (-B) 的反码实现</p>
<p>部分改善加法运算：符号不同的加法变得更容易</p>
<p><strong>反码的问题</strong></p>
<p>零仍有两种表示：+0 (00000000) 和 -0 (11111111)</p>
<p>加法需要”端进位回卷”：即末位进位需要加到最低位</p>
<h2 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h2><p>补码是现代计算机普遍采用的表示方式，解决了反码的问题。</p>
<p><strong>补码表示规则</strong></p>
<ul>
<li><p>正数的补码等于其原码</p>
</li>
<li><p>负数的补码等于其反码加1，或者等于”模-绝对值”（模是2的n次方，n是位数）</p>
</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+43 的补码：0 0101011（与原码相同）</span><br><span class="line">-43 的补码：1 1010101（反码加1）</span><br></pre></td></tr></table></figure>



<p>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1</span><br><span class="line">原码：10000001 （81）</span><br><span class="line">反码：11111110</span><br><span class="line">补码：11111111 （FF）</span><br><span class="line"></span><br><span class="line">-5</span><br><span class="line">原码：10000101 （85）</span><br><span class="line">反码：11111010</span><br><span class="line">补码：11111011 （FB）</span><br><span class="line"></span><br><span class="line">-64</span><br><span class="line">原码：11000000 （B0）</span><br><span class="line">反码：10111111</span><br><span class="line">补码：11000000 （B0）</span><br><span class="line"></span><br><span class="line">-127</span><br><span class="line">原码：11111111 （FF）</span><br><span class="line">反码：10000000</span><br><span class="line">补码：10000001 （81）</span><br><span class="line"></span><br><span class="line">-128</span><br><span class="line">原码：无</span><br><span class="line">反码：无</span><br><span class="line">补码：10000000 （80）</span><br></pre></td></tr></table></figure>

<h1 id="XAPK"><a href="#XAPK" class="headerlink" title="XAPK"></a>XAPK</h1><p>XAPK是一种专为Android操作系统设计的应用程序包文件格式,全称是”Extended Android Package”。它与常见的APK(Android Package)文件类似,但功能更强大,旨在解决大型应用程序或游戏的安装需求，通常以”.xapk”为文件扩展名。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用np管理器安装</p>
<p>使用adb install-multiple命令安装</p>
<h1 id="MCP"><a href="#MCP" class="headerlink" title="MCP"></a>MCP</h1><p>模型上下文协议</p>
]]></content>
      <categories>
        <category>见多识广</category>
      </categories>
      <tags>
        <tag>见多识广</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2025/01/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1 id="网络设备"><a href="#网络设备" class="headerlink" title="网络设备"></a>网络设备</h1><h2 id="集线器"><a href="#集线器" class="headerlink" title="集线器"></a>集线器</h2><p>将多个网络设备连接在一起，构成一个局域网。</p>
<p>集线器将接收到的信号广播到所有连接到它的设备上，而不是发送给特定的设备。</p>
<p>集线器无法识别数据包的目标设备，它只是简单地转发数据包给所有的连接设备，直到目标设备接收到该数据。</p>
<p>集线器工作在物理层。</p>
<h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><p>交换机可以把数据包仅转发给目标设备。</p>
<p>交换机内部维护者一张MAC地址表，记录每一台设备的MAC地址。</p>
<p>交换机工作在数据链路层。</p>
<h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p>路由器的主要功能是转发数据包，使不同网络之间可以通信。</p>
<p>路由器根据目的IP地址，查找路由表（Routing Table）来决定将数据包发送到哪个网络或设备。</p>
<p>路由器工作在网络层。</p>
<h2 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h2><p>网关是一个网络层设备。</p>
<p>用于连接不同网络协议的两个或多个网络，从而实现跨网络的数据传输和通信，帮助数据在不同的子网之间进行路由和转发。</p>
<h1 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h1><h2 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h2><p>MAC地址是网络接口卡（NIC）在局域网（LAN）中用于唯一标识设备的硬件地址。它是由硬件制造商在设备生产时分配的，通常嵌入在设备的网卡中。MAC地址通常是不可更改的。</p>
<p>MAC地址用于在局域网内唯一标识一台设备。</p>
<h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>IP地址是一个用于标识网络中设备的逻辑地址，它由网络层协议（如IPv4或IPv6）定义。IP地址不依赖于硬件，而是可以通过配置修改。它用于跨越不同网络之间的设备间通信。</p>
<h3 id="特殊IP地址"><a href="#特殊IP地址" class="headerlink" title="特殊IP地址"></a>特殊IP地址</h3><ul>
<li><p><strong>127.0.0.1</strong></p>
<p>本地回环地址，允许计算机与自己的网络进行通信，运行在同一台计算机上的Web服务器和浏览器可以通过127.0.0.1进行通信，不需要访问外部网络。</p>
</li>
<li><p><strong>0.0.0.0</strong></p>
<p>0.0.0.0 用作路由表中的默认路由地址。它代表“所有未知的目标地址”，即当路由器或设备不知道如何将数据包发送到目标网络时，数据包会发送到默认路由。</p>
</li>
</ul>
<h1 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h1><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>地址解析协议（Address Resolution Protocol）</p>
<p>ARP协议用于在局域网内根据IP地址查找MAC地址。</p>
<h1 id="虚拟网络"><a href="#虚拟网络" class="headerlink" title="虚拟网络"></a>虚拟网络</h1><p>在<code>vmware</code>中提供了三种网络工作模式，分别是桥接模式、NAT模式和仅主机模式。</p>
<h2 id="虚拟网络编辑器"><a href="#虚拟网络编辑器" class="headerlink" title="虚拟网络编辑器"></a>虚拟网络编辑器</h2><p>打开虚拟网络编辑器</p>
<p>一般情况下<code>VMnet0</code>为桥接模式，<code>VMnet1</code>为仅主机模式，<code>VMnet8</code>为NAT模式。</p>
<ul>
<li><p><strong>Host-only（仅主机模式）</strong></p>
<p>  将虚拟机与主机计算机相互连接，同时隔离虚拟机与外部网络的通信。</p>
<p>  VMware 会为仅主机模式创建一个虚拟网络适配器（例如 <code>VMnet1</code>），它充当主机与虚拟机之间的通信桥梁。</p>
<p>  主机和虚拟机都被分配到一个虚拟的私有网络中，通常使用 <code>192.168.x.x</code> 子网。</p>
</li>
<li><p><strong>Bridge（桥接模式）</strong></p>
<p>  允许虚拟机直接连接到主机所在的物理网络。虚拟机在这种模式下会被视为物理网络中的一个独立设备，并像主机一样拥有一个唯一的 IP 地址。</p>
</li>
<li><p><strong>NAT（网络地址转换模式）</strong></p>
<p>  虚拟机的网络通信会被主机的网络地址转换为外部网络能够识别的地址。</p>
<p>  NAT 模式通过 VMware 提供的虚拟 NAT 服务，将虚拟机的私有 IP 地址映射为主机的公共 IP 地址。</p>
<p>  VMware 在主机上会创建一个虚拟路由器，虚拟机的流量会先到达这个路由器，然后再通过主机的网络接口发送到外部网络。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>网络通信</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>识货app旧版本过强制更新及frida过反调试及搜索接口</title>
    <url>/2025/02/16/%E8%AF%86%E8%B4%A7app%E6%97%A7%E7%89%88%E6%9C%AC%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8Afrida%E8%BF%87%E5%8F%8D%E8%B0%83%E8%AF%95%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.hupu.shihuo</p>
<h1 id="旧版本7-21-1过强制更新"><a href="#旧版本7-21-1过强制更新" class="headerlink" title="旧版本7.21.1过强制更新"></a>旧版本7.21.1过强制更新</h1><p><img src="/2025/02/16/%E8%AF%86%E8%B4%A7app%E6%97%A7%E7%89%88%E6%9C%AC%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8Afrida%E8%BF%87%E5%8F%8D%E8%B0%83%E8%AF%95%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3/1.jpg"></p>
<p>打开app出现如下弹窗，提示需要版本更新，没有跳过选项。</p>
<p><img src="/2025/02/16/%E8%AF%86%E8%B4%A7app%E6%97%A7%E7%89%88%E6%9C%AC%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8Afrida%E8%BF%87%E5%8F%8D%E8%B0%83%E8%AF%95%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3/2.jpg"></p>
<h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><p>反编译apk，找到弹窗位置，通过hook修改跳出弹窗的逻辑，实现绕过。</p>
<h2 id="反编译apk"><a href="#反编译apk" class="headerlink" title="反编译apk"></a>反编译apk</h2><p>搜索新版本</p>
<p><img src="/2025/02/16/%E8%AF%86%E8%B4%A7app%E6%97%A7%E7%89%88%E6%9C%AC%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8Afrida%E8%BF%87%E5%8F%8D%E8%B0%83%E8%AF%95%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3/3.jpg"></p>
<p>双击跳转</p>
<p><img src="/2025/02/16/%E8%AF%86%E8%B4%A7app%E6%97%A7%E7%89%88%E6%9C%AC%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8Afrida%E8%BF%87%E5%8F%8D%E8%B0%83%E8%AF%95%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3/4.jpg"></p>
<p>这里出现了UpdateDialog对象，用来显示更新对话框的，可以把它的<code>show()</code>方法给hook掉</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dialog</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> updatedialog = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.azhon.appupdate.dialog.UpdateDialog&quot;</span>);</span><br><span class="line">        updatedialog.<span class="property">show</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hooked updatedialog!&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_dialog</span>()</span><br></pre></td></tr></table></figure>

<p>强制更新就被绕过了。</p>
<h2 id="关于frida的反调试"><a href="#关于frida的反调试" class="headerlink" title="关于frida的反调试"></a>关于frida的反调试</h2><p>目前我能实现的反调试方式</p>
<p>第一种：删除libmsaoaidsec.so</p>
<p>第二种：使用魔改特征的frida</p>
<p>第三种：使用脚本使<code>libmsaoaidsec.so</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params">so_name</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(path);</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(so_name)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    args[<span class="number">0</span>] = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="string">&quot;libc.so&quot;</span>);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced!&quot;</span>);</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">match</span> = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">match</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(so_name,<span class="string">&quot;加载成功&quot;</span>);</span><br><span class="line">                <span class="keyword">let</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(so_name);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_dlopen</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)</span><br></pre></td></tr></table></figure>



<h1 id="旧版本7-21-1搜索接口"><a href="#旧版本7-21-1搜索接口" class="headerlink" title="旧版本7.21.1搜索接口"></a>旧版本7.21.1搜索接口</h1><p>不需要逆向，接口拿过来可以直接用</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://sh-api.shihuo.cn/daga/search/goods/v1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># params = &#123;</span></span><br><span class="line"><span class="comment">#   &quot;minVersion&quot;: &quot;15811&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;clientCode&quot;: &quot;&#123;holder&#125;&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;v&quot;: &quot;7.21.1&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;channel&quot;: &quot;huawei&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;device&quot;: &quot;Pixel 3&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;platform&quot;: &quot;android&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;timestamp&quot;: &quot;1739685881886&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;token&quot;: &quot;63d08c1b7e73f693ae469e496de9115d&quot;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">&quot;refer&quot;</span>: <span class="string">&quot;shihuo%3A%2F%2Fwww.shihuo.cn%3Froute%3DhomeSearchList%26keywords%3D%25E8%2580%2590%25E5%2585%258B%2520%25E6%259D%25BF%25E9%259E%258B%26user_input%3D%2525E8%252580%252590%2525E5%252585%25258B%252B%2525E6%25259D%2525BF%2525E9%25259E%25258B%26lspm%3D76e5b1d459b968c2%26auto_spm%3D1%23%257B%2522from%2522%253A%2522shihuo%253A%255C%252F%255C%252Fwww.shihuo.cn%253Froute%253Dhome%2522%252C%2522block%2522%253A%2522search%2522%252C%2522extra%2522%253A%2522%2525E8%252580%252590%2525E5%252585%25258B%252B%2525E6%25259D%2525BF%2525E9%25259E%25258B%2522%252C%2522lspm%2522%253A%252276e5b1d459b968c2%2522%257D&quot;</span>,</span><br><span class="line">  <span class="string">&quot;pid&quot;</span>: <span class="string">&quot;homeSearchList_2C6CF5D74E1ECDB61F481B696DABC4EB&quot;</span>,</span><br><span class="line">  <span class="string">&quot;platform&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">  <span class="string">&quot;timestamp&quot;</span>: <span class="string">&quot;1739685881886&quot;</span>,</span><br><span class="line">  <span class="string">&quot;app-v&quot;</span>: <span class="string">&quot;7.21.1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sh-token&quot;</span>: <span class="string">&quot;I94Av9S84fN2NhNWJhOTdkMzY0ZTAzNmUy7n1IN+BhH/apcfLGs3AtbTItTM2aeBQsrmqjaFoIKuwJtiSOimYpEkf5HAQ+DnV2+ax5mFSS7UDffJ7yTDh09DVz8wy2IKAGFLxHn2so4qPnFCM7/bFZvMlxKtdBtpneNu4naDjGaYmmvtn5OiLyGA==&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sh-id&quot;</span>: <span class="string">&quot;6kcbtp547ae55614428f8a183900e404&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sh-sign&quot;</span>: <span class="string">&quot;BF6CBE0C80B13F43B0DF450795B07E5E&quot;</span>,</span><br><span class="line">  <span class="string">&quot;abtest-control&quot;</span>: <span class="string">&quot;r2=3;r3=0;Oq=13;hm=0;HN=3;aJ=1;j4=0;zF=1;HV=0;zH=1;YJ=11;qe=3;QF=11;rK=2;92=0;QP=0;AA=3;af=12;18=32;Ya=0;ZE=1;AM=2;shrec_is_gdetail=12;c8=12;kB=13;ay=3;jc=1;search_wf=2;Ql=0;JG=1;ZW=12;1P=11;zz=12;BE=13;Qv=0;1V=15;S8=11;Ah=12;BK=2;SB=0;9h=2;9k=11;Av=22;cY=2;tK=3;1h=1;SK=0;2O=2;dD=0;Rs=0;t_s=1739685888575;gdetail_brand_rec=11;dQ=1;KY=4;Sa=0;Br=1;3D=12;CV=15;e9=1;By=1;uO=1;v3=0;uR=1;data_community_relate=11;42=1;dc=2;Ss=24;dg=0;tx=19;LR=0;DO=HN_3;lx=1;uc=2;nD=46;w1=1;w3=1;UU=18;EG=0;mp=2;ux=0;data_community_personal=89;UZ=0;fL=0;ev=21;5F=1;vh=34;vj=0;vn=14;NI=1;mainSearchV4=25;nj=2;VR=0;4r=2;ff=35;nn=0;vw=1;shrec_gdetail_bags=11;O4=1;fl=22;data_gdetail_shoes_personal=11;data_gdetail_clothes_personal=11;G2=4;oZ=12;fr=2;Vb=3;wd=25;h6=31;gdetail_shoes_brand_rec=11;5f=2;fx=3;Vi=22;Nc=1;OJ=1;shrec_home_feed=16;gd=11;Fd=2;6V=38;X9=48;xZ=1;ou=3;GN=0;i3=21;hS=1;shrec_cf_mine_v2=11;hW=3;Wg=12;shrec_gdetail_clothes=13;XK=14;XL=1;Od=11;XQ=0;HC=2;hf=44;XW=26&quot;</span>,</span><br><span class="line">  <span class="string">&quot;shreqid&quot;</span>: <span class="string">&quot;0FC60C1C79E118772078BC81A8C5F408&quot;</span>,</span><br><span class="line">  <span class="string">&quot;osv&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">  <span class="string">&quot;network&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sh_session&quot;</span>: <span class="string">&quot;bc29dc5aed1745e3a2b5107a51efa2a3_foreground_24728&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sk&quot;</span>: <span class="string">&quot;9RNoP7luDgrcx9TCUPfjbNh8NkZDAyE0Eh92Xn2YrHj29ftrV8byU7I0cndB2Mwhi6IWpNVii1GaAwv0L69US2K9fT1s&quot;</span>,</span><br><span class="line">  <span class="string">&quot;appid&quot;</span>: <span class="string">&quot;app&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;acw_tc=1a0c380d17396858923536528e0039b6c0f0fdf49dab56cfa931f2163d400e&quot;</span>,</span><br><span class="line">  <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Android 10 &#123;Z29vZ2xl&#125; CPU_ABI arm64-v8a CPU_ABI2  HARDWARE blueline MODEL &#123;UGl4ZWwgMw&#125; network/WIFI shihuo/7.21.1 sc(&#123;holder&#125;,huawei) minVersion(15811) sh-dv-sign[v1|e9f9a714ae419624528a60f5fbe353070d2751f79b8da0aa]&quot;</span>,</span><br><span class="line">  <span class="string">&quot;daga-ban-personal&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/json; charset=UTF-8&quot;</span>,</span><br><span class="line">  <span class="string">&quot;content-length&quot;</span>: <span class="string">&quot;656&quot;</span>,</span><br><span class="line">  <span class="string">&quot;accept-encoding&quot;</span>: <span class="string">&quot;gzip&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">json = &#123;</span><br><span class="line">  <span class="string">&quot;background_word&quot;</span>: <span class="string">&quot;%E8%80%90%E5%85%8B+%E6%9D%BF%E9%9E%8B&quot;</span>,</span><br><span class="line">  <span class="string">&quot;from&quot;</span>: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">  <span class="string">&quot;isHot&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: <span class="string">&quot;运动裤&quot;</span>,</span><br><span class="line">  <span class="string">&quot;lspm&quot;</span>: <span class="string">&quot;76e5b1d459b968c2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;needAttrs&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;page&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line"><span class="comment">#   &quot;pageContext&quot;: &quot;&#123;\&quot;pageId\&quot;:\&quot;homeSearchList_2C6CF5D74E1ECDB61F481B696DABC4EB\&quot;,\&quot;ptiRoot\&quot;:&#123;\&quot;biz\&quot;:\&quot;&#123;\\\&quot;layer\\\&quot;:\\\&quot;1\\\&quot;&#125;\&quot;,\&quot;name\&quot;:\&quot;\&quot;,\&quot;toInfo\&quot;:&#123;\&quot;route\&quot;:\&quot;homeSearch\&quot;,\&quot;back_keywords\&quot;:\&quot;耐克 板鞋\&quot;&#125;,\&quot;id\&quot;:\&quot;home:searchInput\&quot;,\&quot;pageId\&quot;:\&quot;appHome_078418BC23DF560B291D24AFF2FCF9B2\&quot;,\&quot;pageOptions\&quot;:&#123;\&quot;haveSkin\&quot;:\&quot;1\&quot;&#125;&#125;,\&quot;layer\&quot;:\&quot;3\&quot;&#125;&quot;,</span></span><br><span class="line">  <span class="string">&quot;pageSize&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">  <span class="string">&quot;page_route&quot;</span>: <span class="string">&quot;homeSearchList&quot;</span>,</span><br><span class="line">  <span class="string">&quot;predictSex&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;use_type&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;user_input&quot;</span>: <span class="string">&quot;%E8%80%90%E5%85%8B+%E6%9D%BF%E9%9E%8B&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url=url,headers=headers,json=json)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>

<p>直接修改请求体中的<code>keywords</code>进行使用</p>
<h1 id="Unidbg"><a href="#Unidbg" class="headerlink" title="Unidbg"></a>Unidbg</h1><p><strong>响应体解密</strong></p>
<p><img src="/2025/02/16/%E8%AF%86%E8%B4%A7app%E6%97%A7%E7%89%88%E6%9C%AC%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8Afrida%E8%BF%87%E5%8F%8D%E8%B0%83%E8%AF%95%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3/5.jpg"></p>
<p>目标是<code>heracles()</code>函数，加载的so是<code>libdusanwa.so</code></p>
<p><img src="/2025/02/16/%E8%AF%86%E8%B4%A7app%E6%97%A7%E7%89%88%E6%9C%AC%E8%BF%87%E5%BC%BA%E5%88%B6%E6%9B%B4%E6%96%B0%E5%8F%8Afrida%E8%BF%87%E5%8F%8D%E8%B0%83%E8%AF%95%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3/6.jpg"></p>
<h2 id="hook-heracles"><a href="#hook-heracles" class="headerlink" title="hook heracles()"></a>hook heracles()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bArrToString</span>(<span class="params">bArr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(bArr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_heracles</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">SwSdk</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.shizhuang.dusanwa.main.SwSdk&quot;</span>);</span><br><span class="line">        <span class="title class_">SwSdk</span>[<span class="string">&quot;heracles&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">bArr, i, i2</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SwSdk.heracles is called: bArr=<span class="subst">$&#123;bArr&#125;</span>, i=<span class="subst">$&#123;i&#125;</span>, i2=<span class="subst">$&#123;i2&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;heracles&quot;</span>](bArr, i, i2);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SwSdk.heracles result=<span class="subst">$&#123;bArrToString(result)&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_heracles</span>()</span><br></pre></td></tr></table></figure>

<p>hook结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SwSdk.heracles is called: bArr=-33,-44,19,-38,69,38,-62,-117,-45,59,-80,-92,113,114,53,-92,-8,8,-63,-17,-81,4,-73,54,-117,-30,-111,-37,16,16,-26,35,31,53,81,126,-121,-59,16,45,88,-87,71,4,-15,-74,-29,26,74,11,-75,-120,95,37,23,125,-28,99,62,10,118,86,-8,84,20,-20,-12,-23,60,-16,-93,94,104,95,20,16,105,33,9,-54,-125,51,95,72,-104,-68,-5,8,95,5,60,-38,-128,74,16,-101,61,-105,9,38,-127,31,-51,-76,-93,10,-34,-117,-20,25,94,118,14,-46,58,-30,-41,125,-124,-26,-43,-74,-84,123,-118,-50,26,83,-77,16,-42,16,-54,-51,34,0,-58,-41,56,32,-74,83,70,112,21,101,42,26,101,-118,-112,-3,-88,-35,-127,-57,-93,-82,68,-65,107,-50,52,49,61,-85,44,92,-26,90,-42,76,-77,66,6,-29,-25,109,55,-44,-91,-81,-57,26,-52,-51,-118,-29,-74,-31,35,-85,41,12,-49,110,11,-44,118,43,14,1,94,-90,107,36,87,-108,82,27,8,-77,10,17,59,-58,-27,-112,-10,50,-125,103,-112,-86,22,-74,-11,-41,-31,11,-82,79,-97,86,15,16,-123,-17,-10,72,-54,100,-68,-33,-112,-34,114,-54,-75,126,-88,-31,-118,28,-50,76,-40,-107,-121,73,92,-64,120,60,-76,50,19,109,61,-20,73,4,24,57,62,-101,-71,114,-27,4,29,-11,-93,-84,-92,90,-73,-59,-102,14,-34,18,-43,48,29,-79,-19,25,76,79,87,-36,104,74,24,6,91,-74,-118,21,-49,44,6,-74,-125,-78,37,116,102,10,113,-111,51,46,-20,-123,-60,69,-53,-85,-81,-40,54,120,29,-108,-97,-83,-49,1,-119,90,108,94,47,18,-21,-21,116,-41,33,-28,25,-6,-10,-25,-28,93,-47,21,90,27,24,-110,65,-75,-91,-30,-108,-72,63,-86,-115,-121,80,-96,-18,-99,106,-47,64,-48,-6,-60,66,109,-63,-77,95,101,-123,4,-15,72,-3,-90,45,-58,-108,8,96,-12,34,-68,111,105,-50,-111,-108,-103,20,37,-48,-61,-36,-37,-19,105,-109,-31,-111,-119,-120,-93,-68,-5,50,86,-10,63,-87,47,34,-21,-29,-10,120,1,-75,5,44,17,-62,25,110,98,120,-108,101,82,19,38,-25,127,112,-73,-68,88,-112,92,85,20,-92,85,-119,-37,96,-50,-69,49,-30,-104,-19,-14,103,41,127,-87,85,-22,108,61,25,3,-74,57,-12,80,-110,-24,63,88,116,-126,71,-19,109,57,-47,-24,-30,89,36,-83,-95,88,-61,-41,-80,44,-75,30,-106,70,-31,-51,-16,68,39,94,-7,34,-120,118,-61,125,110,-127,-80,-92,12,-49,111,-61,18,-42,-17,118,30,-32,18,-88,-20,-59,-71,92,-105,-107,13,55,-76,32,-125,50,12,-99,80,11,92,-102,-121,18,-22,-55,-67,80,120,-107,-25,-85,-38,28,-92,103,-33,-67,82,-43,112,124,-21,-77,109,49,87,90,-102,-107,21,-46,81,10,-22,-46,-97,-7,66,31,-14,-85,50,-47,-30,-74,-22,-102,16,4,105,59,-76,44,108,27,3,-90,-66,-71,80,-42,-59,126,58,-70,-115,84,-17,88,-24,2,-22,99,106,-67,-56,-72,119,-24,-18,-91,-12, i=-1, i2=0</span><br><span class="line">SwSdk.heracles result=&#123;&quot;code&quot;:0,&quot;status&quot;:0,&quot;req_id&quot;:&quot;BB3279FBC2CC8429647CB94564844A42&quot;,&quot;msg&quot;:&quot;ok&quot;,&quot;data&quot;:&#123;&quot;activity_dynamic_modules&quot;:[&#123;&quot;component&quot;:&quot;dynamic_common_hori_style_1&quot;,&quot;page&quot;:&quot;detail_questionnaire_style_1&quot;,&quot;height&quot;:49,&quot;pageData&quot;:&#123;&quot;href&quot;:&quot;shihuo://www.shihuo.cn?route=fastWebview\u0026share_item=hidden\u0026url=https%3A%2F%2Fzt-public.shihuo.cn%2Fpage%2F17374428518420016%2Findex.html%3FsourceId%3D133&quot;,&quot;desc&quot;:&quot;&#123;\&quot;goods_id\&quot;:\&quot;5028781\&quot;,\&quot;plan_id\&quot;:0,\&quot;source_id\&quot;:1&#125;&quot;,&quot;plan_id&quot;:374,&quot;click_times&quot;:9999,&quot;entry_type&quot;:1,&quot;entrance_img&quot;:&quot;http://static.shihuocdn.cn/app/res/dsgn/b757d06747a0458982fe0a62359f83c7.jpeg&quot;&#125;&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="call-heracles"><a href="#call-heracles" class="headerlink" title="call_heracles()"></a>call_heracles()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">call_heracles</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">SwSdk</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.shizhuang.dusanwa.main.SwSdk&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> bArr = [-<span class="number">33</span>,-<span class="number">44</span>,<span class="number">19</span>,-<span class="number">38</span>,<span class="number">69</span>,<span class="number">38</span>,-<span class="number">62</span>,-<span class="number">117</span>,-<span class="number">45</span>,<span class="number">59</span>,-<span class="number">80</span>,-<span class="number">92</span>,<span class="number">113</span>,<span class="number">114</span>,<span class="number">53</span>,-<span class="number">92</span>,-<span class="number">8</span>,<span class="number">8</span>,-<span class="number">63</span>,-<span class="number">17</span>,-<span class="number">81</span>,<span class="number">4</span>,-<span class="number">73</span>,<span class="number">54</span>,-<span class="number">117</span>,-<span class="number">30</span>,-<span class="number">111</span>,-<span class="number">37</span>,<span class="number">16</span>,<span class="number">16</span>,-<span class="number">26</span>,<span class="number">35</span>,<span class="number">31</span>,<span class="number">53</span>,<span class="number">81</span>,<span class="number">126</span>,-<span class="number">121</span>,-<span class="number">59</span>,<span class="number">16</span>,<span class="number">45</span>,<span class="number">88</span>,-<span class="number">87</span>,<span class="number">71</span>,<span class="number">4</span>,-<span class="number">15</span>,-<span class="number">74</span>,-<span class="number">29</span>,<span class="number">26</span>,<span class="number">74</span>,<span class="number">11</span>,-<span class="number">75</span>,-<span class="number">120</span>,<span class="number">95</span>,<span class="number">37</span>,<span class="number">23</span>,<span class="number">125</span>,-<span class="number">28</span>,<span class="number">99</span>,<span class="number">62</span>,<span class="number">10</span>,<span class="number">118</span>,<span class="number">86</span>,-<span class="number">8</span>,<span class="number">84</span>,<span class="number">20</span>,-<span class="number">20</span>,-<span class="number">12</span>,-<span class="number">23</span>,<span class="number">60</span>,-<span class="number">16</span>,-<span class="number">93</span>,<span class="number">94</span>,<span class="number">104</span>,<span class="number">95</span>,<span class="number">20</span>,<span class="number">16</span>,<span class="number">105</span>,<span class="number">33</span>,<span class="number">9</span>,-<span class="number">54</span>,-<span class="number">125</span>,<span class="number">51</span>,<span class="number">95</span>,<span class="number">72</span>,-<span class="number">104</span>,-<span class="number">68</span>,-<span class="number">5</span>,<span class="number">8</span>,<span class="number">95</span>,<span class="number">5</span>,<span class="number">60</span>,-<span class="number">38</span>,-<span class="number">128</span>,<span class="number">74</span>,<span class="number">16</span>,-<span class="number">101</span>,<span class="number">61</span>,-<span class="number">105</span>,<span class="number">9</span>,<span class="number">38</span>,-<span class="number">127</span>,<span class="number">31</span>,-<span class="number">51</span>,-<span class="number">76</span>,-<span class="number">93</span>,<span class="number">10</span>,-<span class="number">34</span>,-<span class="number">117</span>,-<span class="number">20</span>,<span class="number">25</span>,<span class="number">94</span>,<span class="number">118</span>,<span class="number">14</span>,-<span class="number">46</span>,<span class="number">58</span>,-<span class="number">30</span>,-<span class="number">41</span>,<span class="number">125</span>,-<span class="number">124</span>,-<span class="number">26</span>,-<span class="number">43</span>,-<span class="number">74</span>,-<span class="number">84</span>,<span class="number">123</span>,-<span class="number">118</span>,-<span class="number">50</span>,<span class="number">26</span>,<span class="number">83</span>,-<span class="number">77</span>,<span class="number">16</span>,-<span class="number">42</span>,<span class="number">16</span>,-<span class="number">54</span>,-<span class="number">51</span>,<span class="number">34</span>,<span class="number">0</span>,-<span class="number">58</span>,-<span class="number">41</span>,<span class="number">56</span>,<span class="number">32</span>,-<span class="number">74</span>,<span class="number">83</span>,<span class="number">70</span>,<span class="number">112</span>,<span class="number">21</span>,<span class="number">101</span>,<span class="number">42</span>,<span class="number">26</span>,<span class="number">101</span>,-<span class="number">118</span>,-<span class="number">112</span>,-<span class="number">3</span>,-<span class="number">88</span>,-<span class="number">35</span>,-<span class="number">127</span>,-<span class="number">57</span>,-<span class="number">93</span>,-<span class="number">82</span>,<span class="number">68</span>,-<span class="number">65</span>,<span class="number">107</span>,-<span class="number">50</span>,<span class="number">52</span>,<span class="number">49</span>,<span class="number">61</span>,-<span class="number">85</span>,<span class="number">44</span>,<span class="number">92</span>,-<span class="number">26</span>,<span class="number">90</span>,-<span class="number">42</span>,<span class="number">76</span>,-<span class="number">77</span>,<span class="number">66</span>,<span class="number">6</span>,-<span class="number">29</span>,-<span class="number">25</span>,<span class="number">109</span>,<span class="number">55</span>,-<span class="number">44</span>,-<span class="number">91</span>,-<span class="number">81</span>,-<span class="number">57</span>,<span class="number">26</span>,-<span class="number">52</span>,-<span class="number">51</span>,-<span class="number">118</span>,-<span class="number">29</span>,-<span class="number">74</span>,-<span class="number">31</span>,<span class="number">35</span>,-<span class="number">85</span>,<span class="number">41</span>,<span class="number">12</span>,-<span class="number">49</span>,<span class="number">110</span>,<span class="number">11</span>,-<span class="number">44</span>,<span class="number">118</span>,<span class="number">43</span>,<span class="number">14</span>,<span class="number">1</span>,<span class="number">94</span>,-<span class="number">90</span>,<span class="number">107</span>,<span class="number">36</span>,<span class="number">87</span>,-<span class="number">108</span>,<span class="number">82</span>,<span class="number">27</span>,<span class="number">8</span>,-<span class="number">77</span>,<span class="number">10</span>,<span class="number">17</span>,<span class="number">59</span>,-<span class="number">58</span>,-<span class="number">27</span>,-<span class="number">112</span>,-<span class="number">10</span>,<span class="number">50</span>,-<span class="number">125</span>,<span class="number">103</span>,-<span class="number">112</span>,-<span class="number">86</span>,<span class="number">22</span>,-<span class="number">74</span>,-<span class="number">11</span>,-<span class="number">41</span>,-<span class="number">31</span>,<span class="number">11</span>,-<span class="number">82</span>,<span class="number">79</span>,-<span class="number">97</span>,<span class="number">86</span>,<span class="number">15</span>,<span class="number">16</span>,-<span class="number">123</span>,-<span class="number">17</span>,-<span class="number">10</span>,<span class="number">72</span>,-<span class="number">54</span>,<span class="number">100</span>,-<span class="number">68</span>,-<span class="number">33</span>,-<span class="number">112</span>,-<span class="number">34</span>,<span class="number">114</span>,-<span class="number">54</span>,-<span class="number">75</span>,<span class="number">126</span>,-<span class="number">88</span>,-<span class="number">31</span>,-<span class="number">118</span>,<span class="number">28</span>,-<span class="number">50</span>,<span class="number">76</span>,-<span class="number">40</span>,-<span class="number">107</span>,-<span class="number">121</span>,<span class="number">73</span>,<span class="number">92</span>,-<span class="number">64</span>,<span class="number">120</span>,<span class="number">60</span>,-<span class="number">76</span>,<span class="number">50</span>,<span class="number">19</span>,<span class="number">109</span>,<span class="number">61</span>,-<span class="number">20</span>,<span class="number">73</span>,<span class="number">4</span>,<span class="number">24</span>,<span class="number">57</span>,<span class="number">62</span>,-<span class="number">101</span>,-<span class="number">71</span>,<span class="number">114</span>,-<span class="number">27</span>,<span class="number">4</span>,<span class="number">29</span>,-<span class="number">11</span>,-<span class="number">93</span>,-<span class="number">84</span>,-<span class="number">92</span>,<span class="number">90</span>,-<span class="number">73</span>,-<span class="number">59</span>,-<span class="number">102</span>,<span class="number">14</span>,-<span class="number">34</span>,<span class="number">18</span>,-<span class="number">43</span>,<span class="number">48</span>,<span class="number">29</span>,-<span class="number">79</span>,-<span class="number">19</span>,<span class="number">25</span>,<span class="number">76</span>,<span class="number">79</span>,<span class="number">87</span>,-<span class="number">36</span>,<span class="number">104</span>,<span class="number">74</span>,<span class="number">24</span>,<span class="number">6</span>,<span class="number">91</span>,-<span class="number">74</span>,-<span class="number">118</span>,<span class="number">21</span>,-<span class="number">49</span>,<span class="number">44</span>,<span class="number">6</span>,-<span class="number">74</span>,-<span class="number">125</span>,-<span class="number">78</span>,<span class="number">37</span>,<span class="number">116</span>,<span class="number">102</span>,<span class="number">10</span>,<span class="number">113</span>,-<span class="number">111</span>,<span class="number">51</span>,<span class="number">46</span>,-<span class="number">20</span>,-<span class="number">123</span>,-<span class="number">60</span>,<span class="number">69</span>,-<span class="number">53</span>,-<span class="number">85</span>,-<span class="number">81</span>,-<span class="number">40</span>,<span class="number">54</span>,<span class="number">120</span>,<span class="number">29</span>,-<span class="number">108</span>,-<span class="number">97</span>,-<span class="number">83</span>,-<span class="number">49</span>,<span class="number">1</span>,-<span class="number">119</span>,<span class="number">90</span>,<span class="number">108</span>,<span class="number">94</span>,<span class="number">47</span>,<span class="number">18</span>,-<span class="number">21</span>,-<span class="number">21</span>,<span class="number">116</span>,-<span class="number">41</span>,<span class="number">33</span>,-<span class="number">28</span>,<span class="number">25</span>,-<span class="number">6</span>,-<span class="number">10</span>,-<span class="number">25</span>,-<span class="number">28</span>,<span class="number">93</span>,-<span class="number">47</span>,<span class="number">21</span>,<span class="number">90</span>,<span class="number">27</span>,<span class="number">24</span>,-<span class="number">110</span>,<span class="number">65</span>,-<span class="number">75</span>,-<span class="number">91</span>,-<span class="number">30</span>,-<span class="number">108</span>,-<span class="number">72</span>,<span class="number">63</span>,-<span class="number">86</span>,-<span class="number">115</span>,-<span class="number">121</span>,<span class="number">80</span>,-<span class="number">96</span>,-<span class="number">18</span>,-<span class="number">99</span>,<span class="number">106</span>,-<span class="number">47</span>,<span class="number">64</span>,-<span class="number">48</span>,-<span class="number">6</span>,-<span class="number">60</span>,<span class="number">66</span>,<span class="number">109</span>,-<span class="number">63</span>,-<span class="number">77</span>,<span class="number">95</span>,<span class="number">101</span>,-<span class="number">123</span>,<span class="number">4</span>,-<span class="number">15</span>,<span class="number">72</span>,-<span class="number">3</span>,-<span class="number">90</span>,<span class="number">45</span>,-<span class="number">58</span>,-<span class="number">108</span>,<span class="number">8</span>,<span class="number">96</span>,-<span class="number">12</span>,<span class="number">34</span>,-<span class="number">68</span>,<span class="number">111</span>,<span class="number">105</span>,-<span class="number">50</span>,-<span class="number">111</span>,-<span class="number">108</span>,-<span class="number">103</span>,<span class="number">20</span>,<span class="number">37</span>,-<span class="number">48</span>,-<span class="number">61</span>,-<span class="number">36</span>,-<span class="number">37</span>,-<span class="number">19</span>,<span class="number">105</span>,-<span class="number">109</span>,-<span class="number">31</span>,-<span class="number">111</span>,-<span class="number">119</span>,-<span class="number">120</span>,-<span class="number">93</span>,-<span class="number">68</span>,-<span class="number">5</span>,<span class="number">50</span>,<span class="number">86</span>,-<span class="number">10</span>,<span class="number">63</span>,-<span class="number">87</span>,<span class="number">47</span>,<span class="number">34</span>,-<span class="number">21</span>,-<span class="number">29</span>,-<span class="number">10</span>,<span class="number">120</span>,<span class="number">1</span>,-<span class="number">75</span>,<span class="number">5</span>,<span class="number">44</span>,<span class="number">17</span>,-<span class="number">62</span>,<span class="number">25</span>,<span class="number">110</span>,<span class="number">98</span>,<span class="number">120</span>,-<span class="number">108</span>,<span class="number">101</span>,<span class="number">82</span>,<span class="number">19</span>,<span class="number">38</span>,-<span class="number">25</span>,<span class="number">127</span>,<span class="number">112</span>,-<span class="number">73</span>,-<span class="number">68</span>,<span class="number">88</span>,-<span class="number">112</span>,<span class="number">92</span>,<span class="number">85</span>,<span class="number">20</span>,-<span class="number">92</span>,<span class="number">85</span>,-<span class="number">119</span>,-<span class="number">37</span>,<span class="number">96</span>,-<span class="number">50</span>,-<span class="number">69</span>,<span class="number">49</span>,-<span class="number">30</span>,-<span class="number">104</span>,-<span class="number">19</span>,-<span class="number">14</span>,<span class="number">103</span>,<span class="number">41</span>,<span class="number">127</span>,-<span class="number">87</span>,<span class="number">85</span>,-<span class="number">22</span>,<span class="number">108</span>,<span class="number">61</span>,<span class="number">25</span>,<span class="number">3</span>,-<span class="number">74</span>,<span class="number">57</span>,-<span class="number">12</span>,<span class="number">80</span>,-<span class="number">110</span>,-<span class="number">24</span>,<span class="number">63</span>,<span class="number">88</span>,<span class="number">116</span>,-<span class="number">126</span>,<span class="number">71</span>,-<span class="number">19</span>,<span class="number">109</span>,<span class="number">57</span>,-<span class="number">47</span>,-<span class="number">24</span>,-<span class="number">30</span>,<span class="number">89</span>,<span class="number">36</span>,-<span class="number">83</span>,-<span class="number">95</span>,<span class="number">88</span>,-<span class="number">61</span>,-<span class="number">41</span>,-<span class="number">80</span>,<span class="number">44</span>,-<span class="number">75</span>,<span class="number">30</span>,-<span class="number">106</span>,<span class="number">70</span>,-<span class="number">31</span>,-<span class="number">51</span>,-<span class="number">16</span>,<span class="number">68</span>,<span class="number">39</span>,<span class="number">94</span>,-<span class="number">7</span>,<span class="number">34</span>,-<span class="number">120</span>,<span class="number">118</span>,-<span class="number">61</span>,<span class="number">125</span>,<span class="number">110</span>,-<span class="number">127</span>,-<span class="number">80</span>,-<span class="number">92</span>,<span class="number">12</span>,-<span class="number">49</span>,<span class="number">111</span>,-<span class="number">61</span>,<span class="number">18</span>,-<span class="number">42</span>,-<span class="number">17</span>,<span class="number">118</span>,<span class="number">30</span>,-<span class="number">32</span>,<span class="number">18</span>,-<span class="number">88</span>,-<span class="number">20</span>,-<span class="number">59</span>,-<span class="number">71</span>,<span class="number">92</span>,-<span class="number">105</span>,-<span class="number">107</span>,<span class="number">13</span>,<span class="number">55</span>,-<span class="number">76</span>,<span class="number">32</span>,-<span class="number">125</span>,<span class="number">50</span>,<span class="number">12</span>,-<span class="number">99</span>,<span class="number">80</span>,<span class="number">11</span>,<span class="number">92</span>,-<span class="number">102</span>,-<span class="number">121</span>,<span class="number">18</span>,-<span class="number">22</span>,-<span class="number">55</span>,-<span class="number">67</span>,<span class="number">80</span>,<span class="number">120</span>,-<span class="number">107</span>,-<span class="number">25</span>,-<span class="number">85</span>,-<span class="number">38</span>,<span class="number">28</span>,-<span class="number">92</span>,<span class="number">103</span>,-<span class="number">33</span>,-<span class="number">67</span>,<span class="number">82</span>,-<span class="number">43</span>,<span class="number">112</span>,<span class="number">124</span>,-<span class="number">21</span>,-<span class="number">77</span>,<span class="number">109</span>,<span class="number">49</span>,<span class="number">87</span>,<span class="number">90</span>,-<span class="number">102</span>,-<span class="number">107</span>,<span class="number">21</span>,-<span class="number">46</span>,<span class="number">81</span>,<span class="number">10</span>,-<span class="number">22</span>,-<span class="number">46</span>,-<span class="number">97</span>,-<span class="number">7</span>,<span class="number">66</span>,<span class="number">31</span>,-<span class="number">14</span>,-<span class="number">85</span>,<span class="number">50</span>,-<span class="number">47</span>,-<span class="number">30</span>,-<span class="number">74</span>,-<span class="number">22</span>,-<span class="number">102</span>,<span class="number">16</span>,<span class="number">4</span>,<span class="number">105</span>,<span class="number">59</span>,-<span class="number">76</span>,<span class="number">44</span>,<span class="number">108</span>,<span class="number">27</span>,<span class="number">3</span>,-<span class="number">90</span>,-<span class="number">66</span>,-<span class="number">71</span>,<span class="number">80</span>,-<span class="number">42</span>,-<span class="number">59</span>,<span class="number">126</span>,<span class="number">58</span>,-<span class="number">70</span>,-<span class="number">115</span>,<span class="number">84</span>,-<span class="number">17</span>,<span class="number">88</span>,-<span class="number">24</span>,<span class="number">2</span>,-<span class="number">22</span>,<span class="number">99</span>,<span class="number">106</span>,-<span class="number">67</span>,-<span class="number">56</span>,-<span class="number">72</span>,<span class="number">119</span>,-<span class="number">24</span>,-<span class="number">18</span>,-<span class="number">91</span>,-<span class="number">12</span>];</span><br><span class="line">        <span class="keyword">let</span> i = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> i2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="title class_">SwSdk</span>[<span class="string">&quot;heracles&quot;</span>](bArr, i, i2);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SwSdk.heracles result=<span class="subst">$&#123;bArrToString(result)&#125;</span>`</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// call_heracles()</span></span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SwSdk.heracles result=&#123;&quot;code&quot;:0,&quot;status&quot;:0,&quot;req_id&quot;:&quot;BB3279FBC2CC8429647CB94564844A42&quot;,&quot;msg&quot;:&quot;ok&quot;,&quot;data&quot;:&#123;&quot;activity_dynamic_modules&quot;:[&#123;&quot;component&quot;:&quot;dynamic_common_hori_style_1&quot;,&quot;page&quot;:&quot;detail_questionnaire_style_1&quot;,&quot;height&quot;:49,&quot;pageData&quot;:&#123;&quot;href&quot;:&quot;shihuo://www.shihuo.cn?route=fastWebview\u0026share_item=hidden\u0026url=https%3A%2F%2Fzt-public.shihuo.cn%2Fpage%2F17374428518420016%2Findex.html%3FsourceId%3D133&quot;,&quot;desc&quot;:&quot;&#123;\&quot;goods_id\&quot;:\&quot;5028781\&quot;,\&quot;plan_id\&quot;:0,\&quot;source_id\&quot;:1&#125;&quot;,&quot;plan_id&quot;:374,&quot;click_times&quot;:9999,&quot;entry_type&quot;:1,&quot;entrance_img&quot;:&quot;http://static.shihuocdn.cn/app/res/dsgn/b757d06747a0458982fe0a62359f83c7.jpeg&quot;&#125;&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="unidbg模拟执行"><a href="#unidbg模拟执行" class="headerlink" title="unidbg模拟执行"></a>unidbg模拟执行</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwSdk</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> DalvikModule dm;</span><br><span class="line">    <span class="keyword">private</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SwSdk</span><span class="params">()</span> &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder</span><br><span class="line">                .for64Bit() <span class="comment">// for32Bit()</span></span><br><span class="line">                .setRootDir(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;target/rootfs&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">        memory = emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/java/com/com/hupu/shihuo/shihuo_7.21.1.apk&quot;</span>));</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);</span><br><span class="line">        dm = vm.loadLibrary(<span class="string">&quot;dusanwa&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] heracles()&#123;</span><br><span class="line">        <span class="type">DvmClass</span> <span class="variable">SwSdkClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.shizhuang.dusanwa.main.SwSdk&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] barr = &#123;-<span class="number">33</span>,-<span class="number">44</span>,<span class="number">19</span>,-<span class="number">38</span>,<span class="number">69</span>,<span class="number">38</span>,-<span class="number">62</span>,-<span class="number">117</span>,-<span class="number">45</span>,<span class="number">59</span>,-<span class="number">80</span>,-<span class="number">92</span>,<span class="number">113</span>,<span class="number">114</span>,<span class="number">53</span>,-<span class="number">92</span>,-<span class="number">8</span>,<span class="number">8</span>,-<span class="number">63</span>,-<span class="number">17</span>,-<span class="number">81</span>,<span class="number">4</span>,-<span class="number">73</span>,<span class="number">54</span>,-<span class="number">117</span>,-<span class="number">30</span>,-<span class="number">111</span>,-<span class="number">37</span>,<span class="number">16</span>,<span class="number">16</span>,-<span class="number">26</span>,<span class="number">35</span>,<span class="number">31</span>,<span class="number">53</span>,<span class="number">81</span>,<span class="number">126</span>,-<span class="number">121</span>,-<span class="number">59</span>,<span class="number">16</span>,<span class="number">45</span>,<span class="number">88</span>,-<span class="number">87</span>,<span class="number">71</span>,<span class="number">4</span>,-<span class="number">15</span>,-<span class="number">74</span>,-<span class="number">29</span>,<span class="number">26</span>,<span class="number">74</span>,<span class="number">11</span>,-<span class="number">75</span>,-<span class="number">120</span>,<span class="number">95</span>,<span class="number">37</span>,<span class="number">23</span>,<span class="number">125</span>,-<span class="number">28</span>,<span class="number">99</span>,<span class="number">62</span>,<span class="number">10</span>,<span class="number">118</span>,<span class="number">86</span>,-<span class="number">8</span>,<span class="number">84</span>,<span class="number">20</span>,-<span class="number">20</span>,-<span class="number">12</span>,-<span class="number">23</span>,<span class="number">60</span>,-<span class="number">16</span>,-<span class="number">93</span>,<span class="number">94</span>,<span class="number">104</span>,<span class="number">95</span>,<span class="number">20</span>,<span class="number">16</span>,<span class="number">105</span>,<span class="number">33</span>,<span class="number">9</span>,-<span class="number">54</span>,-<span class="number">125</span>,<span class="number">51</span>,<span class="number">95</span>,<span class="number">72</span>,-<span class="number">104</span>,-<span class="number">68</span>,-<span class="number">5</span>,<span class="number">8</span>,<span class="number">95</span>,<span class="number">5</span>,<span class="number">60</span>,-<span class="number">38</span>,-<span class="number">128</span>,<span class="number">74</span>,<span class="number">16</span>,-<span class="number">101</span>,<span class="number">61</span>,-<span class="number">105</span>,<span class="number">9</span>,<span class="number">38</span>,-<span class="number">127</span>,<span class="number">31</span>,-<span class="number">51</span>,-<span class="number">76</span>,-<span class="number">93</span>,<span class="number">10</span>,-<span class="number">34</span>,-<span class="number">117</span>,-<span class="number">20</span>,<span class="number">25</span>,<span class="number">94</span>,<span class="number">118</span>,<span class="number">14</span>,-<span class="number">46</span>,<span class="number">58</span>,-<span class="number">30</span>,-<span class="number">41</span>,<span class="number">125</span>,-<span class="number">124</span>,-<span class="number">26</span>,-<span class="number">43</span>,-<span class="number">74</span>,-<span class="number">84</span>,<span class="number">123</span>,-<span class="number">118</span>,-<span class="number">50</span>,<span class="number">26</span>,<span class="number">83</span>,-<span class="number">77</span>,<span class="number">16</span>,-<span class="number">42</span>,<span class="number">16</span>,-<span class="number">54</span>,-<span class="number">51</span>,<span class="number">34</span>,<span class="number">0</span>,-<span class="number">58</span>,-<span class="number">41</span>,<span class="number">56</span>,<span class="number">32</span>,-<span class="number">74</span>,<span class="number">83</span>,<span class="number">70</span>,<span class="number">112</span>,<span class="number">21</span>,<span class="number">101</span>,<span class="number">42</span>,<span class="number">26</span>,<span class="number">101</span>,-<span class="number">118</span>,-<span class="number">112</span>,-<span class="number">3</span>,-<span class="number">88</span>,-<span class="number">35</span>,-<span class="number">127</span>,-<span class="number">57</span>,-<span class="number">93</span>,-<span class="number">82</span>,<span class="number">68</span>,-<span class="number">65</span>,<span class="number">107</span>,-<span class="number">50</span>,<span class="number">52</span>,<span class="number">49</span>,<span class="number">61</span>,-<span class="number">85</span>,<span class="number">44</span>,<span class="number">92</span>,-<span class="number">26</span>,<span class="number">90</span>,-<span class="number">42</span>,<span class="number">76</span>,-<span class="number">77</span>,<span class="number">66</span>,<span class="number">6</span>,-<span class="number">29</span>,-<span class="number">25</span>,<span class="number">109</span>,<span class="number">55</span>,-<span class="number">44</span>,-<span class="number">91</span>,-<span class="number">81</span>,-<span class="number">57</span>,<span class="number">26</span>,-<span class="number">52</span>,-<span class="number">51</span>,-<span class="number">118</span>,-<span class="number">29</span>,-<span class="number">74</span>,-<span class="number">31</span>,<span class="number">35</span>,-<span class="number">85</span>,<span class="number">41</span>,<span class="number">12</span>,-<span class="number">49</span>,<span class="number">110</span>,<span class="number">11</span>,-<span class="number">44</span>,<span class="number">118</span>,<span class="number">43</span>,<span class="number">14</span>,<span class="number">1</span>,<span class="number">94</span>,-<span class="number">90</span>,<span class="number">107</span>,<span class="number">36</span>,<span class="number">87</span>,-<span class="number">108</span>,<span class="number">82</span>,<span class="number">27</span>,<span class="number">8</span>,-<span class="number">77</span>,<span class="number">10</span>,<span class="number">17</span>,<span class="number">59</span>,-<span class="number">58</span>,-<span class="number">27</span>,-<span class="number">112</span>,-<span class="number">10</span>,<span class="number">50</span>,-<span class="number">125</span>,<span class="number">103</span>,-<span class="number">112</span>,-<span class="number">86</span>,<span class="number">22</span>,-<span class="number">74</span>,-<span class="number">11</span>,-<span class="number">41</span>,-<span class="number">31</span>,<span class="number">11</span>,-<span class="number">82</span>,<span class="number">79</span>,-<span class="number">97</span>,<span class="number">86</span>,<span class="number">15</span>,<span class="number">16</span>,-<span class="number">123</span>,-<span class="number">17</span>,-<span class="number">10</span>,<span class="number">72</span>,-<span class="number">54</span>,<span class="number">100</span>,-<span class="number">68</span>,-<span class="number">33</span>,-<span class="number">112</span>,-<span class="number">34</span>,<span class="number">114</span>,-<span class="number">54</span>,-<span class="number">75</span>,<span class="number">126</span>,-<span class="number">88</span>,-<span class="number">31</span>,-<span class="number">118</span>,<span class="number">28</span>,-<span class="number">50</span>,<span class="number">76</span>,-<span class="number">40</span>,-<span class="number">107</span>,-<span class="number">121</span>,<span class="number">73</span>,<span class="number">92</span>,-<span class="number">64</span>,<span class="number">120</span>,<span class="number">60</span>,-<span class="number">76</span>,<span class="number">50</span>,<span class="number">19</span>,<span class="number">109</span>,<span class="number">61</span>,-<span class="number">20</span>,<span class="number">73</span>,<span class="number">4</span>,<span class="number">24</span>,<span class="number">57</span>,<span class="number">62</span>,-<span class="number">101</span>,-<span class="number">71</span>,<span class="number">114</span>,-<span class="number">27</span>,<span class="number">4</span>,<span class="number">29</span>,-<span class="number">11</span>,-<span class="number">93</span>,-<span class="number">84</span>,-<span class="number">92</span>,<span class="number">90</span>,-<span class="number">73</span>,-<span class="number">59</span>,-<span class="number">102</span>,<span class="number">14</span>,-<span class="number">34</span>,<span class="number">18</span>,-<span class="number">43</span>,<span class="number">48</span>,<span class="number">29</span>,-<span class="number">79</span>,-<span class="number">19</span>,<span class="number">25</span>,<span class="number">76</span>,<span class="number">79</span>,<span class="number">87</span>,-<span class="number">36</span>,<span class="number">104</span>,<span class="number">74</span>,<span class="number">24</span>,<span class="number">6</span>,<span class="number">91</span>,-<span class="number">74</span>,-<span class="number">118</span>,<span class="number">21</span>,-<span class="number">49</span>,<span class="number">44</span>,<span class="number">6</span>,-<span class="number">74</span>,-<span class="number">125</span>,-<span class="number">78</span>,<span class="number">37</span>,<span class="number">116</span>,<span class="number">102</span>,<span class="number">10</span>,<span class="number">113</span>,-<span class="number">111</span>,<span class="number">51</span>,<span class="number">46</span>,-<span class="number">20</span>,-<span class="number">123</span>,-<span class="number">60</span>,<span class="number">69</span>,-<span class="number">53</span>,-<span class="number">85</span>,-<span class="number">81</span>,-<span class="number">40</span>,<span class="number">54</span>,<span class="number">120</span>,<span class="number">29</span>,-<span class="number">108</span>,-<span class="number">97</span>,-<span class="number">83</span>,-<span class="number">49</span>,<span class="number">1</span>,-<span class="number">119</span>,<span class="number">90</span>,<span class="number">108</span>,<span class="number">94</span>,<span class="number">47</span>,<span class="number">18</span>,-<span class="number">21</span>,-<span class="number">21</span>,<span class="number">116</span>,-<span class="number">41</span>,<span class="number">33</span>,-<span class="number">28</span>,<span class="number">25</span>,-<span class="number">6</span>,-<span class="number">10</span>,-<span class="number">25</span>,-<span class="number">28</span>,<span class="number">93</span>,-<span class="number">47</span>,<span class="number">21</span>,<span class="number">90</span>,<span class="number">27</span>,<span class="number">24</span>,-<span class="number">110</span>,<span class="number">65</span>,-<span class="number">75</span>,-<span class="number">91</span>,-<span class="number">30</span>,-<span class="number">108</span>,-<span class="number">72</span>,<span class="number">63</span>,-<span class="number">86</span>,-<span class="number">115</span>,-<span class="number">121</span>,<span class="number">80</span>,-<span class="number">96</span>,-<span class="number">18</span>,-<span class="number">99</span>,<span class="number">106</span>,-<span class="number">47</span>,<span class="number">64</span>,-<span class="number">48</span>,-<span class="number">6</span>,-<span class="number">60</span>,<span class="number">66</span>,<span class="number">109</span>,-<span class="number">63</span>,-<span class="number">77</span>,<span class="number">95</span>,<span class="number">101</span>,-<span class="number">123</span>,<span class="number">4</span>,-<span class="number">15</span>,<span class="number">72</span>,-<span class="number">3</span>,-<span class="number">90</span>,<span class="number">45</span>,-<span class="number">58</span>,-<span class="number">108</span>,<span class="number">8</span>,<span class="number">96</span>,-<span class="number">12</span>,<span class="number">34</span>,-<span class="number">68</span>,<span class="number">111</span>,<span class="number">105</span>,-<span class="number">50</span>,-<span class="number">111</span>,-<span class="number">108</span>,-<span class="number">103</span>,<span class="number">20</span>,<span class="number">37</span>,-<span class="number">48</span>,-<span class="number">61</span>,-<span class="number">36</span>,-<span class="number">37</span>,-<span class="number">19</span>,<span class="number">105</span>,-<span class="number">109</span>,-<span class="number">31</span>,-<span class="number">111</span>,-<span class="number">119</span>,-<span class="number">120</span>,-<span class="number">93</span>,-<span class="number">68</span>,-<span class="number">5</span>,<span class="number">50</span>,<span class="number">86</span>,-<span class="number">10</span>,<span class="number">63</span>,-<span class="number">87</span>,<span class="number">47</span>,<span class="number">34</span>,-<span class="number">21</span>,-<span class="number">29</span>,-<span class="number">10</span>,<span class="number">120</span>,<span class="number">1</span>,-<span class="number">75</span>,<span class="number">5</span>,<span class="number">44</span>,<span class="number">17</span>,-<span class="number">62</span>,<span class="number">25</span>,<span class="number">110</span>,<span class="number">98</span>,<span class="number">120</span>,-<span class="number">108</span>,<span class="number">101</span>,<span class="number">82</span>,<span class="number">19</span>,<span class="number">38</span>,-<span class="number">25</span>,<span class="number">127</span>,<span class="number">112</span>,-<span class="number">73</span>,-<span class="number">68</span>,<span class="number">88</span>,-<span class="number">112</span>,<span class="number">92</span>,<span class="number">85</span>,<span class="number">20</span>,-<span class="number">92</span>,<span class="number">85</span>,-<span class="number">119</span>,-<span class="number">37</span>,<span class="number">96</span>,-<span class="number">50</span>,-<span class="number">69</span>,<span class="number">49</span>,-<span class="number">30</span>,-<span class="number">104</span>,-<span class="number">19</span>,-<span class="number">14</span>,<span class="number">103</span>,<span class="number">41</span>,<span class="number">127</span>,-<span class="number">87</span>,<span class="number">85</span>,-<span class="number">22</span>,<span class="number">108</span>,<span class="number">61</span>,<span class="number">25</span>,<span class="number">3</span>,-<span class="number">74</span>,<span class="number">57</span>,-<span class="number">12</span>,<span class="number">80</span>,-<span class="number">110</span>,-<span class="number">24</span>,<span class="number">63</span>,<span class="number">88</span>,<span class="number">116</span>,-<span class="number">126</span>,<span class="number">71</span>,-<span class="number">19</span>,<span class="number">109</span>,<span class="number">57</span>,-<span class="number">47</span>,-<span class="number">24</span>,-<span class="number">30</span>,<span class="number">89</span>,<span class="number">36</span>,-<span class="number">83</span>,-<span class="number">95</span>,<span class="number">88</span>,-<span class="number">61</span>,-<span class="number">41</span>,-<span class="number">80</span>,<span class="number">44</span>,-<span class="number">75</span>,<span class="number">30</span>,-<span class="number">106</span>,<span class="number">70</span>,-<span class="number">31</span>,-<span class="number">51</span>,-<span class="number">16</span>,<span class="number">68</span>,<span class="number">39</span>,<span class="number">94</span>,-<span class="number">7</span>,<span class="number">34</span>,-<span class="number">120</span>,<span class="number">118</span>,-<span class="number">61</span>,<span class="number">125</span>,<span class="number">110</span>,-<span class="number">127</span>,-<span class="number">80</span>,-<span class="number">92</span>,<span class="number">12</span>,-<span class="number">49</span>,<span class="number">111</span>,-<span class="number">61</span>,<span class="number">18</span>,-<span class="number">42</span>,-<span class="number">17</span>,<span class="number">118</span>,<span class="number">30</span>,-<span class="number">32</span>,<span class="number">18</span>,-<span class="number">88</span>,-<span class="number">20</span>,-<span class="number">59</span>,-<span class="number">71</span>,<span class="number">92</span>,-<span class="number">105</span>,-<span class="number">107</span>,<span class="number">13</span>,<span class="number">55</span>,-<span class="number">76</span>,<span class="number">32</span>,-<span class="number">125</span>,<span class="number">50</span>,<span class="number">12</span>,-<span class="number">99</span>,<span class="number">80</span>,<span class="number">11</span>,<span class="number">92</span>,-<span class="number">102</span>,-<span class="number">121</span>,<span class="number">18</span>,-<span class="number">22</span>,-<span class="number">55</span>,-<span class="number">67</span>,<span class="number">80</span>,<span class="number">120</span>,-<span class="number">107</span>,-<span class="number">25</span>,-<span class="number">85</span>,-<span class="number">38</span>,<span class="number">28</span>,-<span class="number">92</span>,<span class="number">103</span>,-<span class="number">33</span>,-<span class="number">67</span>,<span class="number">82</span>,-<span class="number">43</span>,<span class="number">112</span>,<span class="number">124</span>,-<span class="number">21</span>,-<span class="number">77</span>,<span class="number">109</span>,<span class="number">49</span>,<span class="number">87</span>,<span class="number">90</span>,-<span class="number">102</span>,-<span class="number">107</span>,<span class="number">21</span>,-<span class="number">46</span>,<span class="number">81</span>,<span class="number">10</span>,-<span class="number">22</span>,-<span class="number">46</span>,-<span class="number">97</span>,-<span class="number">7</span>,<span class="number">66</span>,<span class="number">31</span>,-<span class="number">14</span>,-<span class="number">85</span>,<span class="number">50</span>,-<span class="number">47</span>,-<span class="number">30</span>,-<span class="number">74</span>,-<span class="number">22</span>,-<span class="number">102</span>,<span class="number">16</span>,<span class="number">4</span>,<span class="number">105</span>,<span class="number">59</span>,-<span class="number">76</span>,<span class="number">44</span>,<span class="number">108</span>,<span class="number">27</span>,<span class="number">3</span>,-<span class="number">90</span>,-<span class="number">66</span>,-<span class="number">71</span>,<span class="number">80</span>,-<span class="number">42</span>,-<span class="number">59</span>,<span class="number">126</span>,<span class="number">58</span>,-<span class="number">70</span>,-<span class="number">115</span>,<span class="number">84</span>,-<span class="number">17</span>,<span class="number">88</span>,-<span class="number">24</span>,<span class="number">2</span>,-<span class="number">22</span>,<span class="number">99</span>,<span class="number">106</span>,-<span class="number">67</span>,-<span class="number">56</span>,-<span class="number">72</span>,<span class="number">119</span>,-<span class="number">24</span>,-<span class="number">18</span>,-<span class="number">91</span>,-<span class="number">12</span>&#125;;</span><br><span class="line">        <span class="type">DvmObject</span> <span class="variable">barrobj</span> <span class="operator">=</span> ProxyDvmObject.createObject(vm,barr);</span><br><span class="line">        <span class="type">DvmObject</span> <span class="variable">dvmObject</span> <span class="operator">=</span> SwSdkClass.callStaticJniMethodObject(emulator,<span class="string">&quot;heracles([BII)[B&quot;</span>,barrobj,-<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="type">byte</span>[] ret = (<span class="type">byte</span>[]) dvmObject.getValue();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SwSdk</span> <span class="variable">swSdk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SwSdk</span>();</span><br><span class="line">        System.out.println(Arrays.toString(swSdk.heracles()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="补环境"><a href="#补环境" class="headerlink" title="补环境"></a>补环境</h3><h3 id="补currentActivityThread"><a href="#补currentActivityThread" class="headerlink" title="补currentActivityThread()"></a>补currentActivityThread()</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.UnsupportedOperationException: android/app/ActivityThread-&gt;currentActivityThread()Landroid/app/ActivityThread;</span><br><span class="line">	at com.github.unidbg.linux.android.dvm.AbstractJni.callStaticObjectMethod(AbstractJni.java:433)</span><br></pre></td></tr></table></figure>

<p>补</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &quot;android/app/ActivityThread-&gt;currentActivityThread()Landroid/app/ActivityThread;&quot;:&#123;</span><br><span class="line">    return vm.resolveClass(&quot;android/app/ActivityThread&quot;).newObject(null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="补getApplication"><a href="#补getApplication" class="headerlink" title="补getApplication()"></a>补getApplication()</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.UnsupportedOperationException: android/app/ActivityThread-&gt;getApplication()Landroid/app/Application;</span><br><span class="line">	at com.github.unidbg.linux.android.dvm.AbstractJni.callObjectMethod(AbstractJni.java:933)</span><br></pre></td></tr></table></figure>

<p>补</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &quot;android/app/ActivityThread-&gt;getApplication()Landroid/app/Application;&quot;:&#123;</span><br><span class="line">    return vm.resolveClass(&quot;android/app/Application&quot;).newObject(null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="补getPackageManager"><a href="#补getPackageManager" class="headerlink" title="补getPackageManager()"></a>补getPackageManager()</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.UnsupportedOperationException: android/app/Application-&gt;getPackageManager()Landroid/content/pm/PackageManager;</span><br><span class="line">	at com.github.unidbg.linux.android.dvm.AbstractJni.callObjectMethod(AbstractJni.java:933)</span><br></pre></td></tr></table></figure>

<p>补</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &quot;android/app/Application-&gt;getPackageManager()Landroid/content/pm/PackageManager;&quot;:&#123;</span><br><span class="line">    return vm.resolveClass(&quot;android/content/pm/PackageManager&quot;).newObject(null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="over"><a href="#over" class="headerlink" title="over"></a>over</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;code&quot;:0,&quot;status&quot;:0,&quot;req_id&quot;:&quot;BB3279FBC2CC8429647CB94564844A42&quot;,&quot;msg&quot;:&quot;ok&quot;,&quot;data&quot;:&#123;&quot;activity_dynamic_modules&quot;:[&#123;&quot;component&quot;:&quot;dynamic_common_hori_style_1&quot;,&quot;page&quot;:&quot;detail_questionnaire_style_1&quot;,&quot;height&quot;:49,&quot;pageData&quot;:&#123;&quot;href&quot;:&quot;shihuo://www.shihuo.cn?route=fastWebview\u0026share_item=hidden\u0026url=https%3A%2F%2Fzt-public.shihuo.cn%2Fpage%2F17374428518420016%2Findex.html%3FsourceId%3D133&quot;,&quot;desc&quot;:&quot;&#123;\&quot;goods_id\&quot;:\&quot;5028781\&quot;,\&quot;plan_id\&quot;:0,\&quot;source_id\&quot;:1&#125;&quot;,&quot;plan_id&quot;:374,&quot;click_times&quot;:9999,&quot;entry_type&quot;:1,&quot;entrance_img&quot;:&quot;http://static.shihuocdn.cn/app/res/dsgn/b757d06747a0458982fe0a62359f83c7.jpeg&quot;&#125;&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>识货app</tag>
      </tags>
  </entry>
  <entry>
    <title>详解AES</title>
    <url>/2025/01/29/%E8%AF%A6%E8%A7%A3AES/</url>
    <content><![CDATA[<h1 id="AES简介"><a href="#AES简介" class="headerlink" title="AES简介"></a>AES简介</h1><p>AES的全称是Advanced Encryption Standard，意思是高级加密标准，是一种对称密钥加密算法，它的出现主要是为了取代DES加密算法的。AES是一种块加密算法，它将数据分成固定大小的块（通常是128位），然后进行加密。</p>
<p><strong>块大小</strong>：AES加密算法使用128位（16字节）的块来处理数据。无论输入数据的大小是多少，AES都会将其分割成多个128位块进行加密。</p>
<p><strong>秘钥长度</strong>：AES支持三种不同长度的密钥：</p>
<ul>
<li><strong>AES-128</strong>：密钥长度为128位（16字节）</li>
<li><strong>AES-192</strong>：密钥长度为192位（24字节）</li>
<li><strong>AES-256</strong>：密钥长度为256位（32字节）</li>
</ul>
<h1 id="加密流程"><a href="#加密流程" class="headerlink" title="加密流程"></a>加密流程</h1><p>AES的加密流程可以分为3个步骤。</p>
<h2 id="初始轮（Initial-Round）"><a href="#初始轮（Initial-Round）" class="headerlink" title="初始轮（Initial Round）"></a>初始轮（Initial Round）</h2><p><strong>轮密钥加（AddRoundKey）</strong></p>
<p>在初始轮，输入的明文块（128位）与扩展出的第一轮密钥（轮密钥）进行按位异或（XOR）操作。</p>
<h2 id="中间轮（Rounds）"><a href="#中间轮（Rounds）" class="headerlink" title="中间轮（Rounds）"></a>中间轮（Rounds）</h2><p>中间轮在初始轮之后，会重复进行多次（取决于密钥长度，AES-128通常为9轮，AES-192为11轮，AES-256为13轮）。</p>
<p><strong>字节代换（SubBytes）</strong></p>
<p>字节代换使用一个固定的S-Box（代换盒），将数据块中的每个字节都进行代换。S-Box是一个非线性的代换表，可以增加算法的复杂性和安全性。</p>
<p>对于状态矩阵中的每个字节，AES通过查找S-Box表中的对应值来替换。例如，如果某个字节的值是<code>0x32</code>，那么该字节将被替换为S-Box中<code>0x32</code>位置对应的值。</p>
<p><strong>行移位（ShiftRows）</strong></p>
<p>对状态矩阵中的每一行进行循环左移。具体来说：</p>
<ul>
<li>第一行不变。</li>
<li>第二行左移1个字节。</li>
<li>第三行左移2个字节。</li>
<li>第四行左移3个字节。</li>
</ul>
<p><strong>列混合（MixColumns）</strong></p>
<p>每一列的四个字节会与一个固定矩阵相乘，生成新的四个字节。</p>
<p><strong>轮密钥加（AddRoundKey）</strong></p>
<p>将当前状态矩阵与当前轮的轮密钥进行按位异或（XOR）操作。轮密钥是在密钥扩展阶段从原始密钥中生成的，每一轮都有不同的轮密钥。</p>
<h2 id="最终轮（Final-Round）"><a href="#最终轮（Final-Round）" class="headerlink" title="最终轮（Final Round）"></a>最终轮（Final Round）</h2><p>最终轮与中间轮类似，但没有列混合步骤。</p>
<p>最终轮执行完后，生成的内容就是AES加密后的密文。</p>
<h1 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h1><p>密钥扩展（Key Expansion）是AES加密过程中的一个关键步骤，它将原始的密钥扩展成多个轮密钥（Round Keys），这些轮密钥将在加密过程中使用。密钥扩展的目的是确保在每一轮加密中，使用的密钥都是不同的，以增强算法的安全性。</p>
<h2 id="轮秘钥的生成"><a href="#轮秘钥的生成" class="headerlink" title="轮秘钥的生成"></a>轮秘钥的生成</h2><p>对于AES-128（密钥长度为128位，即16字节），AES需要生成10轮的轮密钥（每轮一个轮密钥）。对于AES-192（192位）和AES-256（256位），它们分别需要12轮和14轮的轮密钥。</p>
<ul>
<li><strong>AES-128</strong>：原始密钥长度为16字节，扩展出11个轮密钥（包括初始轮）。</li>
<li><strong>AES-192</strong>：原始密钥长度为24字节，扩展出13个轮密钥。</li>
<li><strong>AES-256</strong>：原始密钥长度为32字节，扩展出15个轮密钥。</li>
</ul>
<h2 id="密钥扩展的步骤"><a href="#密钥扩展的步骤" class="headerlink" title="密钥扩展的步骤"></a>密钥扩展的步骤</h2><p><strong>初始化</strong></p>
<p>将原始密钥按字节划分为多个字。每个字是4字节（32位）。假设原始密钥长度为128位（16字节），则将其分为4个字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">W0, W1, W2, W3</span><br></pre></td></tr></table></figure>

<p><strong>扩展轮秘钥</strong></p>
<ul>
<li>初始密钥：16字节（4字），记为 <code>W[0]</code> 到 <code>W[3]</code>。</li>
<li>扩展密钥：从<code>W[4]</code>扩展到<code>W[44]</code>，生成44个字（176字节），用于11轮加密。</li>
</ul>
<p><strong>生成规则</strong></p>
<p>对于<code>W[i]</code></p>
<ul>
<li><p>如果i不是4的倍数，那么第i列为</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">W[i] = W[i-4] ⊕ W[i-1]</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果i是4的倍数，那么第i列为</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">W[i] = W[i-4] ⊕ T(W[i-1])</span><br></pre></td></tr></table></figure>

<p>  函数T包含三部分内容</p>
<ul>
<li>循环左移（RotWord）：将输入字的4字节左移1位，如 <code>[a,b,c,d] → [b,c,d,a]</code>。</li>
<li>S盒替换（SubWord）：每个字节通过AES的S盒进行非线性替换。</li>
<li>异或轮常数（Rcon）：与轮常数 <code>Rcon[j] = [0x01, 0x02, 0x04, ..., 0x80]</code>异或。</li>
</ul>
<p>  如</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">W4 = W0 ⊕ SubWord(RotWord(W3)) ⊕ Rcon[1]</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Python实现AES"><a href="#Python实现AES" class="headerlink" title="Python实现AES"></a>Python实现AES</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"></span><br><span class="line">S_BOX = [</span><br><span class="line">    [<span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>],</span><br><span class="line">    [<span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>],</span><br><span class="line">    [<span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>],</span><br><span class="line">    [<span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>],</span><br><span class="line">    [<span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>],</span><br><span class="line">    [<span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>],</span><br><span class="line">    [<span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>],</span><br><span class="line">    [<span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>],</span><br><span class="line">    [<span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>],</span><br><span class="line">    [<span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>],</span><br><span class="line">    [<span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>],</span><br><span class="line">    [<span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>],</span><br><span class="line">    [<span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>],</span><br><span class="line">    [<span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>],</span><br><span class="line">    [<span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>],</span><br><span class="line">    [<span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算逆 S_BOX</span></span><br><span class="line">INV_S_BOX = [[<span class="number">0</span>] * <span class="number">16</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        s = S_BOX[i][j]</span><br><span class="line">        INV_S_BOX[s &gt;&gt; <span class="number">4</span>][s &amp; <span class="number">0xF</span>] = (i &lt;&lt; <span class="number">4</span>) | j</span><br><span class="line"></span><br><span class="line">RCON = [</span><br><span class="line">    [<span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>],</span><br><span class="line">    [<span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>],</span><br><span class="line">    [<span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>],</span><br><span class="line">    [<span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>],</span><br><span class="line">    [<span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>],</span><br><span class="line">    [<span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>],</span><br><span class="line">    [<span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>],</span><br><span class="line">    [<span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>],</span><br><span class="line">    [<span class="number">0x1B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>],</span><br><span class="line">    [<span class="number">0x36</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------- 工具函数 -----------------</span></span><br><span class="line"><span class="comment"># PKCS7 填充：如果数据正好为整数个块，则额外添加一个完整块</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pkcs7_pad</span>(<span class="params">data: <span class="built_in">list</span>, block_size=<span class="number">16</span></span>):</span><br><span class="line">    padding_length = block_size - (<span class="built_in">len</span>(data) % block_size)</span><br><span class="line">    padding = [padding_length] * padding_length</span><br><span class="line">    <span class="keyword">return</span> data + padding</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># PKCS7 去填充</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pkcs7_unpad</span>(<span class="params">data: <span class="built_in">list</span>, block_size=<span class="number">16</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data <span class="keyword">or</span> <span class="built_in">len</span>(data) % block_size != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;数据长度错误，不能去填充&quot;</span>)</span><br><span class="line">    pad_len = data[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> pad_len &lt; <span class="number">1</span> <span class="keyword">or</span> pad_len &gt; block_size:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;无效的填充&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> data[-pad_len:] != [pad_len] * pad_len:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;填充不正确&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> data[:-pad_len]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表异或</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_list</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> [x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(a, b)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------- AES 密钥扩展 -----------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_word</span>(<span class="params">byte</span>):</span><br><span class="line">    <span class="keyword">return</span> S_BOX[byte &gt;&gt; <span class="number">4</span>][byte &amp; <span class="number">0xF</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">key_expansion</span>(<span class="params">key, key_size=<span class="number">128</span></span>):</span><br><span class="line">    key = <span class="built_in">list</span>(key)</span><br><span class="line">    nk = &#123;<span class="number">128</span>: <span class="number">4</span>, <span class="number">192</span>: <span class="number">6</span>, <span class="number">256</span>: <span class="number">8</span>&#125;[key_size]  <span class="comment"># 初始密钥的字数</span></span><br><span class="line">    nr = &#123;<span class="number">128</span>: <span class="number">10</span>, <span class="number">192</span>: <span class="number">12</span>, <span class="number">256</span>: <span class="number">14</span>&#125;[key_size]  <span class="comment"># 轮数</span></span><br><span class="line">    words = [key[i * <span class="number">4</span>:(i + <span class="number">1</span>) * <span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nk)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nk, <span class="number">4</span> * (nr + <span class="number">1</span>)):</span><br><span class="line">        temp = words[i - <span class="number">1</span>].copy()</span><br><span class="line">        <span class="keyword">if</span> i % nk == <span class="number">0</span>:</span><br><span class="line">            temp = temp[<span class="number">1</span>:] + temp[:<span class="number">1</span>]</span><br><span class="line">            temp = [sub_word(b) <span class="keyword">for</span> b <span class="keyword">in</span> temp]</span><br><span class="line">            temp = xor_list(temp, RCON[i // nk - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">elif</span> key_size == <span class="number">256</span> <span class="keyword">and</span> i % nk == <span class="number">0x4</span>:</span><br><span class="line">            temp = [sub_word(b) <span class="keyword">for</span> b <span class="keyword">in</span> temp]</span><br><span class="line">        words.append(xor_list(words[i - nk], temp))</span><br><span class="line">    round_keys = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(words), <span class="number">4</span>):</span><br><span class="line">        round_key = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            round_key.extend(words[i + j])</span><br><span class="line">        round_keys.append(round_key[:<span class="number">16</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;round_keys:&quot;</span>,round_keys)</span><br><span class="line">    <span class="keyword">return</span> round_keys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------- 状态与字节转换 -----------------</span></span><br><span class="line"><span class="comment"># bytes 到 state（4×4 矩阵，列优先）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bytes_to_state</span>(<span class="params">block</span>):</span><br><span class="line">    state = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        col = []</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            col.append(block[r + <span class="number">4</span> * c])</span><br><span class="line">        state.append(col)</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># state 到 bytes</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">state_to_bytes</span>(<span class="params">state</span>):</span><br><span class="line">    block = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            block.append(state[c][r])</span><br><span class="line">    <span class="keyword">return</span> block</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------- 基本变换 -----------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_round_key</span>(<span class="params">state, round_key_state</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            state[c][r] ^= round_key_state[c][r]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_bytes</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            state[c][r] = S_BOX[state[c][r] &gt;&gt; <span class="number">4</span>][state[c][r] &amp; <span class="number">0xF</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_sub_bytes</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            byte = state[c][r]</span><br><span class="line">            state[c][r] = INV_S_BOX[byte &gt;&gt; <span class="number">4</span>][byte &amp; <span class="number">0xF</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shift_rows</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="comment"># 第一行不变，从第二行开始左循环移位</span></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        row = [state[c][r] <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        row = row[r:] + row[:r]</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            state[c][r] = row[c]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_shift_rows</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        row = [state[c][r] <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        row = row[-r:] + row[:-r]</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            state[c][r] = row[c]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 xtime 与 gmul 用于列混淆</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xtime</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> ((x &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x1b</span>) &amp; <span class="number">0xFF</span> <span class="keyword">if</span> (x &amp; <span class="number">0x80</span>) <span class="keyword">else</span> (x &lt;&lt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gmul</span>(<span class="params">a, b</span>):</span><br><span class="line">    p = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> b &amp; <span class="number">1</span>:</span><br><span class="line">            p ^= a</span><br><span class="line">        a = xtime(a)</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mix_columns</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        col = state[c]</span><br><span class="line">        t0 = gmul(<span class="number">0x2</span>, col[<span class="number">0</span>]) ^ gmul(<span class="number">0x3</span>, col[<span class="number">1</span>]) ^ col[<span class="number">2</span>] ^ col[<span class="number">3</span>]</span><br><span class="line">        t1 = col[<span class="number">0</span>] ^ gmul(<span class="number">0x2</span>, col[<span class="number">1</span>]) ^ gmul(<span class="number">0x3</span>, col[<span class="number">2</span>]) ^ col[<span class="number">3</span>]</span><br><span class="line">        t2 = col[<span class="number">0</span>] ^ col[<span class="number">1</span>] ^ gmul(<span class="number">0x2</span>, col[<span class="number">2</span>]) ^ gmul(<span class="number">0x3</span>, col[<span class="number">3</span>])</span><br><span class="line">        t3 = gmul(<span class="number">0x3</span>, col[<span class="number">0</span>]) ^ col[<span class="number">1</span>] ^ col[<span class="number">2</span>] ^ gmul(<span class="number">0x2</span>, col[<span class="number">3</span>])</span><br><span class="line">        state[c] = [t0, t1, t2, t3]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_mix_columns</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        col = state[c]</span><br><span class="line">        t0 = gmul(<span class="number">0x0e</span>, col[<span class="number">0</span>]) ^ gmul(<span class="number">0x0b</span>, col[<span class="number">1</span>]) ^ gmul(<span class="number">0x0d</span>, col[<span class="number">2</span>]) ^ gmul(<span class="number">0x09</span>, col[<span class="number">3</span>])</span><br><span class="line">        t1 = gmul(<span class="number">0x09</span>, col[<span class="number">0</span>]) ^ gmul(<span class="number">0x0e</span>, col[<span class="number">1</span>]) ^ gmul(<span class="number">0x0b</span>, col[<span class="number">2</span>]) ^ gmul(<span class="number">0x0d</span>, col[<span class="number">3</span>])</span><br><span class="line">        t2 = gmul(<span class="number">0x0d</span>, col[<span class="number">0</span>]) ^ gmul(<span class="number">0x09</span>, col[<span class="number">1</span>]) ^ gmul(<span class="number">0x0e</span>, col[<span class="number">2</span>]) ^ gmul(<span class="number">0x0b</span>, col[<span class="number">3</span>])</span><br><span class="line">        t3 = gmul(<span class="number">0x0b</span>, col[<span class="number">0</span>]) ^ gmul(<span class="number">0x0d</span>, col[<span class="number">1</span>]) ^ gmul(<span class="number">0x09</span>, col[<span class="number">2</span>]) ^ gmul(<span class="number">0x0e</span>, col[<span class="number">3</span>])</span><br><span class="line">        state[c] = [t0, t1, t2, t3]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------- AES 加密 -----------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt</span>(<span class="params">plaintext, key, iv=<span class="literal">None</span>, key_size=<span class="number">128</span></span>):</span><br><span class="line">    plaintext = <span class="built_in">list</span>(plaintext)</span><br><span class="line">    key_length_map = &#123;<span class="number">128</span>: <span class="number">16</span>, <span class="number">192</span>: <span class="number">24</span>, <span class="number">256</span>: <span class="number">32</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">not</span> <span class="keyword">in</span> key_length_map:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;key_size 必须为 128/192/256&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(key) != key_length_map[key_size]:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;密钥长度错误：期望 <span class="subst">&#123;key_length_map[key_size]&#125;</span> 字节，实际 <span class="subst">&#123;<span class="built_in">len</span>(key)&#125;</span> 字节&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> iv <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="built_in">len</span>(iv) != <span class="number">16</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;IV 必须为16字节&quot;</span>)</span><br><span class="line">    block_size = <span class="number">16</span></span><br><span class="line">    padded = pkcs7_pad(plaintext, block_size)</span><br><span class="line">    num_blocks = <span class="built_in">len</span>(padded) // block_size</span><br><span class="line">    round_keys = key_expansion(key, key_size)</span><br><span class="line">    round_key_states = [bytes_to_state(rk) <span class="keyword">for</span> rk <span class="keyword">in</span> round_keys]</span><br><span class="line">    nr = &#123;<span class="number">128</span>: <span class="number">10</span>, <span class="number">192</span>: <span class="number">12</span>, <span class="number">256</span>: <span class="number">14</span>&#125;[key_size]</span><br><span class="line">    result = []</span><br><span class="line">    <span class="comment"># 在 CBC 模式下，需要更新 iv；若 iv 存在则使用其值</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(num_blocks):</span><br><span class="line">        block = padded[b * block_size:(b + <span class="number">1</span>) * block_size]</span><br><span class="line">        <span class="keyword">if</span> iv:</span><br><span class="line">            block = xor_list(block, iv)</span><br><span class="line">        state = bytes_to_state(block)</span><br><span class="line">        add_round_key(state, round_key_states[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> rnd <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, nr):</span><br><span class="line">            sub_bytes(state)</span><br><span class="line">            shift_rows(state)</span><br><span class="line">            mix_columns(state)</span><br><span class="line">            add_round_key(state, round_key_states[rnd])</span><br><span class="line">        <span class="comment"># 最后一轮（不做列混淆）</span></span><br><span class="line">        sub_bytes(state)</span><br><span class="line">        shift_rows(state)</span><br><span class="line">        add_round_key(state, round_key_states[nr])</span><br><span class="line">        cipher_block = state_to_bytes(state)</span><br><span class="line">        <span class="keyword">if</span> iv:</span><br><span class="line">            iv = cipher_block  <span class="comment"># CBC 模式下，更新 IV 为上个密文块</span></span><br><span class="line">        result.extend(cipher_block)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------- AES 解密 -----------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypt</span>(<span class="params">ciphertext, key, iv=<span class="literal">None</span>, key_size=<span class="number">128</span></span>):</span><br><span class="line">    ciphertext = <span class="built_in">list</span>(ciphertext)</span><br><span class="line">    key_length_map = &#123;<span class="number">128</span>: <span class="number">16</span>, <span class="number">192</span>: <span class="number">24</span>, <span class="number">256</span>: <span class="number">32</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> key_size <span class="keyword">not</span> <span class="keyword">in</span> key_length_map:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;key_size 必须为 128/192/256&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(key) != key_length_map[key_size]:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;密钥长度错误：期望 <span class="subst">&#123;key_length_map[key_size]&#125;</span> 字节，实际 <span class="subst">&#123;<span class="built_in">len</span>(key)&#125;</span> 字节&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> iv <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="built_in">len</span>(iv) != <span class="number">16</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;IV 必须为16字节&quot;</span>)</span><br><span class="line">    block_size = <span class="number">16</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(ciphertext) % block_size != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;密文长度必须为块大小的整数倍&quot;</span>)</span><br><span class="line">    num_blocks = <span class="built_in">len</span>(ciphertext) // block_size</span><br><span class="line">    round_keys = key_expansion(key, key_size)</span><br><span class="line">    round_key_states = [bytes_to_state(rk) <span class="keyword">for</span> rk <span class="keyword">in</span> round_keys]</span><br><span class="line">    nr = &#123;<span class="number">128</span>: <span class="number">10</span>, <span class="number">192</span>: <span class="number">12</span>, <span class="number">256</span>: <span class="number">14</span>&#125;[key_size]</span><br><span class="line">    result = []</span><br><span class="line">    <span class="comment"># 在 CBC 模式下，需保存初始 iv 用于异或恢复</span></span><br><span class="line">    prev_cipher = iv <span class="keyword">if</span> iv <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(num_blocks):</span><br><span class="line">        block = ciphertext[b * block_size:(b + <span class="number">1</span>) * block_size]</span><br><span class="line">        state = bytes_to_state(block)</span><br><span class="line">        <span class="comment"># 初始逆变换：最后一轮的逆操作</span></span><br><span class="line">        add_round_key(state, round_key_states[nr])</span><br><span class="line">        inv_shift_rows(state)</span><br><span class="line">        inv_sub_bytes(state)</span><br><span class="line">        <span class="comment"># 中间轮次（从 nr-1 到 1）</span></span><br><span class="line">        <span class="keyword">for</span> rnd <span class="keyword">in</span> <span class="built_in">range</span>(nr - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            add_round_key(state, round_key_states[rnd])</span><br><span class="line">            inv_mix_columns(state)</span><br><span class="line">            inv_shift_rows(state)</span><br><span class="line">            inv_sub_bytes(state)</span><br><span class="line">        <span class="comment"># 最后一轮：加上第一轮密钥</span></span><br><span class="line">        add_round_key(state, round_key_states[<span class="number">0</span>])</span><br><span class="line">        plain_block = state_to_bytes(state)</span><br><span class="line">        <span class="keyword">if</span> iv:</span><br><span class="line">            plain_block = xor_list(plain_block, prev_cipher)</span><br><span class="line">            prev_cipher = block  <span class="comment"># 更新 prev_cipher 为当前密文块</span></span><br><span class="line">        result.extend(plain_block)</span><br><span class="line">    <span class="comment"># 去除 PKCS7 填充</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(pkcs7_unpad(result, block_size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------- 示例函数 -----------------</span></span><br><span class="line">data = <span class="string">b&quot;Bileton&quot;</span></span><br><span class="line">key = <span class="string">b&quot;0123456789abcdef&quot;</span></span><br><span class="line"><span class="built_in">print</span>(aes_encrypt(data,key).<span class="built_in">hex</span>())</span><br><span class="line"><span class="comment"># cef043b604dfa84449dd3a1e5bf117e6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(aes_decrypt(<span class="built_in">bytes</span>.fromhex(<span class="string">&quot;cef043b604dfa84449dd3a1e5bf117e6&quot;</span>),key).decode())</span><br><span class="line"><span class="comment"># Bileton</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编码与加解密</category>
      </categories>
      <tags>
        <tag>AES</tag>
      </tags>
  </entry>
  <entry>
    <title>详解DES及3DES</title>
    <url>/2025/02/13/%E8%AF%A6%E8%A7%A3DES%E5%8F%8A3DES/</url>
    <content><![CDATA[<h1 id="DES简介"><a href="#DES简介" class="headerlink" title="DES简介"></a>DES简介</h1><p>DES（Data Encryption Standard）是一种对称加密算法。DES是一种分组加密算法，分组长度是64位（即8字节），密钥长度为64位（8字节），每8位包含一个校验位，用于奇偶校验，所以只有56位参与运算。</p>
<h1 id="加密流程"><a href="#加密流程" class="headerlink" title="加密流程"></a>加密流程</h1><p>DES的加密流程可以分为3个步骤。</p>
<h2 id="初始置换（IP）"><a href="#初始置换（IP）" class="headerlink" title="初始置换（IP）"></a>初始置换（IP）</h2><p>64位明文通过固定置换表（IP表）重新排列。</p>
<p><strong>初始置换表</strong></p>
<p><img src="/2025/02/13/%E8%AF%A6%E8%A7%A3DES%E5%8F%8A3DES/1.jpg"></p>
<p>原来位于第58个位置的数据放在第1个位置，原来位于第50个位置的数据放在第2个位置，第42个放在第3个，以此类推。</p>
<h2 id="16轮Feistel迭代"><a href="#16轮Feistel迭代" class="headerlink" title="16轮Feistel迭代"></a>16轮Feistel迭代</h2><p>将经过初始置换的64位数据被分成两部分，分为左32位（L₀）和右32位（R₀）。</p>
<p>后面每一轮都会输出新的左部分和右部分，记为 Ln和 Rn，其中n 是轮次编号（从0到15）。</p>
<h3 id="E扩展置换"><a href="#E扩展置换" class="headerlink" title="E扩展置换"></a>E扩展置换</h3><p>将32位的 Rn 通过一个固定的扩展置换表变成48位的数据。</p>
<p><strong>扩展置换表</strong></p>
<p><img src="/2025/02/13/%E8%AF%A6%E8%A7%A3DES%E5%8F%8A3DES/2.jpg"></p>
<p>经过这样一个表将原来32位的数据扩展为48位的数据。</p>
<h3 id="与子密钥异或（XOR）"><a href="#与子密钥异或（XOR）" class="headerlink" title="与子密钥异或（XOR）"></a>与子密钥异或（XOR）</h3><p>扩展后的48位数据与当前轮子密钥Kₙ按位异或，子密钥的长度是48位，异或后的数据长度也是48位。（后面会讲子密钥生成过程）。</p>
<h3 id="S盒替换"><a href="#S盒替换" class="headerlink" title="S盒替换"></a>S盒替换</h3><p>将异或后的48位数据分为8块，每块数据长度为6位，在DES中有8个S盒，在每个S盒中，将6位的输入压缩为4位的输出，然后得到32位的输出。</p>
<p><img src="/2025/02/13/%E8%AF%A6%E8%A7%A3DES%E5%8F%8A3DES/3.jpg"></p>
<h3 id="P盒置换"><a href="#P盒置换" class="headerlink" title="P盒置换"></a>P盒置换</h3><p>S盒得到的32位输出通过固定置换表（P盒）进一步混淆，重新排列。</p>
<p><strong>P盒置换表</strong></p>
<p><img src="/2025/02/13/%E8%AF%A6%E8%A7%A3DES%E5%8F%8A3DES/4.jpg"></p>
<p>这样一次轮函数就结束了</p>
<h2 id="逆初始置换（IP⁻¹）"><a href="#逆初始置换（IP⁻¹）" class="headerlink" title="逆初始置换（IP⁻¹）"></a>逆初始置换（IP⁻¹）</h2><p>经过16轮的轮函数迭代之后，将L15和R15拼接成64位的数据，经过逆初始置换表置换之后，生成最终的64位密文。</p>
<p><strong>逆IP置换表</strong></p>
<p><img src="/2025/02/13/%E8%AF%A6%E8%A7%A3DES%E5%8F%8A3DES/5.jpg"></p>
<h1 id="密钥调度（生成子密钥）"><a href="#密钥调度（生成子密钥）" class="headerlink" title="密钥调度（生成子密钥）"></a>密钥调度（生成子密钥）</h1><p>主密钥长度为64位，除去8位校验位（第8,16,24,32,40,48,56,64位），剩余56位参与运算。</p>
<h2 id="PC-1置换"><a href="#PC-1置换" class="headerlink" title="PC-1置换"></a>PC-1置换</h2><p>将64位密钥（剔除校验位后为56位）按照预定的PC-1置换表重新排列，并分为左右两部分（各28位）。</p>
<p><strong>PC-1置换表</strong></p>
<p><img src="/2025/02/13/%E8%AF%A6%E8%A7%A3DES%E5%8F%8A3DES/6.jpg"></p>
<h2 id="循环左移"><a href="#循环左移" class="headerlink" title="循环左移"></a>循环左移</h2><p>对左右各28位数据进行循环左移。根据轮数不同，每一轮移位的位数（1位或2位）也有所不同，目的是使得子密钥具有足够的扩散性。</p>
<p>每次循环左移是基于上一次生成的中间密钥部分进行移位。</p>
<p><img src="/2025/02/13/%E8%AF%A6%E8%A7%A3DES%E5%8F%8A3DES/7.jpg"></p>
<h2 id="PC-2置换"><a href="#PC-2置换" class="headerlink" title="PC-2置换"></a>PC-2置换</h2><p>将移位后的56位密钥合并后，通过PC-2置换表选择48位作为当前轮的子密钥，生成16轮子密钥。</p>
<p><strong>PC-2置换表</strong></p>
<p><img src="/2025/02/13/%E8%AF%A6%E8%A7%A3DES%E5%8F%8A3DES/8.jpg"></p>
<h1 id="3DES简介"><a href="#3DES简介" class="headerlink" title="3DES简介"></a>3DES简介</h1><p>3DES（Triple DES），即三重DES加密算法，3DES是为了增加DES的强度，将DES重复3次所得到的一种密码算法，也称为TDEA。</p>
<h2 id="加密模式"><a href="#加密模式" class="headerlink" title="加密模式"></a>加密模式</h2><p>3DES通过三次DES操作实现加密，支持两种主要模式：</p>
<ul>
<li><strong>EDE模式（加密-解密-加密）</strong>：最常用，支持密钥灵活性。</li>
<li><strong>EEE模式（加密-加密-加密）</strong>：较少使用，安全性类似但需更多计算。</li>
</ul>
<h3 id="EDE模式"><a href="#EDE模式" class="headerlink" title="EDE模式"></a>EDE模式</h3><p>3DES最常用的模式是<strong>EDE模式（Encrypt-Decrypt-Encrypt）</strong>。</p>
<p><strong>加密流程</strong></p>
<p>其基本思路是：</p>
<p><strong>第一步</strong>：使用密钥K₁对明文进行DES加密。</p>
<p><strong>第二步</strong>：使用密钥K₂对中间结果进行DES解密。</p>
<p><strong>第三步</strong>：使用密钥K₃对结果再次加密，生成最终密文。</p>
<p>公式表示：</p>
<p><img src="/2025/02/13/%E8%AF%A6%E8%A7%A3DES%E5%8F%8A3DES/9.jpg"></p>
<p><strong>解密流程</strong></p>
<p>解密是加密的逆过程，顺序为：</p>
<p><img src="/2025/02/13/%E8%AF%A6%E8%A7%A3DES%E5%8F%8A3DES/10.jpg"></p>
]]></content>
      <categories>
        <category>编码与加解密</category>
      </categories>
      <tags>
        <tag>DES</tag>
      </tags>
  </entry>
  <entry>
    <title>详解MD5</title>
    <url>/2025/03/06/%E8%AF%A6%E8%A7%A3MD5/</url>
    <content><![CDATA[<h1 id="MD5简介"><a href="#MD5简介" class="headerlink" title="MD5简介"></a>MD5简介</h1><p>MD5（Message-Digest Algorithm 5） 是一种广泛使用的哈希函数，其核心功能是将任意长度的输入数据转换为固定长度的128位（16字节）哈希值，通常以32位十六进制字符串表示。  </p>
<h1 id="数据填充"><a href="#数据填充" class="headerlink" title="数据填充"></a>数据填充</h1><p>把输入数据填充到64字节（512位）的倍数（最少填充9个字节，最多填充64+8个字节）。</p>
<p>填充方式：</p>
<ul>
<li>在原始数据的后面填充0x80</li>
<li>填充N个0</li>
<li>使用小端序在最后8个字节填充输入数据的bit长度</li>
</ul>
<h1 id="分块处理"><a href="#分块处理" class="headerlink" title="分块处理"></a>分块处理</h1><p>将填充后的数据分割为多个512位（64字节）的块，每个块进一步分为16个32位子块（记为<code>M[0]</code>到<code>M[15]</code>）。</p>
<h1 id="初始化寄存器"><a href="#初始化寄存器" class="headerlink" title="初始化寄存器"></a>初始化寄存器</h1><p>初始化4个32位寄存器（A、B、C、D），初始值为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A = 0x67452301  </span><br><span class="line">B = 0xEFCDAB89  </span><br><span class="line">C = 0x98BADCFE  </span><br><span class="line">D = 0x10325476</span><br></pre></td></tr></table></figure>

<h1 id="四轮非线性变换"><a href="#四轮非线性变换" class="headerlink" title="四轮非线性变换"></a>四轮非线性变换</h1><p>每个512位块会经过四轮处理（每轮16步，共64步），每轮使用不同的逻辑函数和参数</p>
<h2 id="四轮逻辑函数"><a href="#四轮逻辑函数" class="headerlink" title="四轮逻辑函数"></a>四轮逻辑函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = A = 0x67452301  </span><br><span class="line">b = B = 0xEFCDAB89</span><br><span class="line">c = C = 0x98BADCFE</span><br><span class="line">d = D = 0x10325476</span><br></pre></td></tr></table></figure>



<p>每轮使用不同的非线性函数（共4个）：</p>
<ul>
<li><strong>Round 1</strong>：<code>F(b, c, d) = (b &amp; c ) | ((~b) &amp; d)</code></li>
<li><strong>Round 2</strong>：<code>G(b, c, d) = (b &amp; d) | (c &amp; (~d))</code></li>
<li><strong>Round 3</strong>：<code>H(b, c, d) = b ⊕ c ⊕ d</code></li>
<li><strong>Round 4</strong>：<code>I(b, c, d) = c ⊕ (b | (~d))</code></li>
</ul>
<h2 id="消息子块的使用顺序"><a href="#消息子块的使用顺序" class="headerlink" title="消息子块的使用顺序"></a>消息子块的使用顺序</h2><p>每轮以不同顺序使用16个消息子块 <code>M[k]</code>：</p>
<ul>
<li><strong>Round 1</strong>：<code>k = 0, 1, 2, ..., 15</code>（顺序使用）</li>
<li><strong>Round 2</strong>：<code>k = (1 + 5i) mod 16</code>（i从0到15）</li>
<li><strong>Round 3</strong>：<code>k = (5 + 3i) mod 16</code>（i从0到15）</li>
<li><strong>Round 4</strong>：<code>k = 7i mod 16</code>（i从0到15）</li>
</ul>
<h2 id="常量表与循环左移"><a href="#常量表与循环左移" class="headerlink" title="常量表与循环左移"></a>常量表与循环左移</h2><p>每步操作使用一个预定义的32位常量 <code>T[1..64]</code>，其值为 <code>⌊2^32 × |sin(i)|⌋</code>（i为步数）。循环左移位数 <code>s</code> 按如下规则变化：</p>
<ul>
<li>Round 1: <code>s = [7, 12, 17, 22]</code> 循环使用</li>
<li>Round 2: <code>s = [5, 9, 14, 20]</code></li>
<li>Round 3: <code>s = [4, 11, 16, 23]</code></li>
<li>Round 4: <code>s = [6, 10, 15, 21]</code></li>
</ul>
<h2 id="单步操作详解（以第i步为例）"><a href="#单步操作详解（以第i步为例）" class="headerlink" title="单步操作详解（以第i步为例）"></a>单步操作详解（以第i步为例）</h2><p>每步操作对寄存器 <code>A, B, C, D</code> 进行更新，公式如下：</p>
<p><strong>计算中间值</strong></p>
<p><code>temp= FF(a,b,c,d,M[k],s[i],T[i])</code></p>
<p><code>FF(a,b,c,d,M[k],s[i],T[i]) = b + ((a+F(b,c,d) + M[k] + T[i]) &lt;&lt;&lt; s[i])</code></p>
<p>（其中 <code>+</code> 是模 2^32 加法，<code>&lt;&lt;&lt; s</code> 表示循环左移s位）</p>
<p><strong>更新寄存器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = b + temp</span><br></pre></td></tr></table></figure>

<p><strong>寄存器轮换</strong></p>
<p><img src="/2025/03/06/%E8%AF%A6%E8%A7%A3MD5/1.jpg"></p>
<h1 id="生成最终哈希值"><a href="#生成最终哈希值" class="headerlink" title="生成最终哈希值"></a>生成最终哈希值</h1><p>将所有块处理完成后，将寄存器A、B、C、D的值按小端序拼接，转换为十六进制字符串，即为MD5哈希值。</p>
<h1 id="python实现md5"><a href="#python实现md5" class="headerlink" title="python实现md5"></a>python实现md5</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># T Table</span></span><br><span class="line">T = [[<span class="number">0xD76AA478</span>, <span class="number">0xE8C7B756</span>, <span class="number">0x242070DB</span>, <span class="number">0xC1BDCEEE</span>, <span class="number">0xF57C0FAF</span>, <span class="number">0x4787C62A</span>, <span class="number">0xA8304613</span>, <span class="number">0xFD469501</span>, <span class="number">0x698098D8</span>, <span class="number">0x8B44F7AF</span>, <span class="number">0xFFFF5BB1</span>, <span class="number">0x895CD7BE</span>, <span class="number">0x6B901122</span>, <span class="number">0xFD987193</span>, <span class="number">0xA679438E</span>, <span class="number">0x49B40821</span>], </span><br><span class="line">     [<span class="number">0xF61E2562</span>, <span class="number">0xC040B340</span>, <span class="number">0x265E5A51</span>, <span class="number">0xE9B6C7AA</span>, <span class="number">0xD62F105D</span>, <span class="number">0x02441453</span>, <span class="number">0xD8A1E681</span>, <span class="number">0xE7D3FBC8</span>, <span class="number">0x21E1CDE6</span>, <span class="number">0xC33707D6</span>, <span class="number">0xF4D50D87</span>, <span class="number">0x455A14ED</span>, <span class="number">0xA9E3E905</span>, <span class="number">0xFCEFA3F8</span>, <span class="number">0x676F02D9</span>, <span class="number">0x8D2A4C8A</span>], </span><br><span class="line">     [<span class="number">0xFFFA3942</span>, <span class="number">0x8771F681</span>, <span class="number">0x6D9D6122</span>, <span class="number">0xFDE5380C</span>, <span class="number">0xA4BEEA44</span>, <span class="number">0x4BDECFA9</span>, <span class="number">0xF6BB4B60</span>, <span class="number">0xBEBFBC70</span>, <span class="number">0x289B7EC6</span>, <span class="number">0xEAA127FA</span>, <span class="number">0xD4EF3085</span>, <span class="number">0x04881D05</span>, <span class="number">0xD9D4D039</span>, <span class="number">0xE6DB99E5</span>, <span class="number">0x1FA27CF8</span>, <span class="number">0xC4AC5665</span>], </span><br><span class="line">     [<span class="number">0xF4292244</span>, <span class="number">0x432AFF97</span>, <span class="number">0xAB9423A7</span>, <span class="number">0xFC93A039</span>, <span class="number">0x655B59C3</span>, <span class="number">0x8F0CCC92</span>, <span class="number">0xFFEFF47D</span>, <span class="number">0x85845DD1</span>, <span class="number">0x6FA87E4F</span>, <span class="number">0xFE2CE6E0</span>, <span class="number">0xA3014314</span>, <span class="number">0x4E0811A1</span>, <span class="number">0xF7537E82</span>, <span class="number">0xBD3AF235</span>, <span class="number">0x2AD7D2BB</span>, <span class="number">0xEB86D391</span>]]</span><br><span class="line"></span><br><span class="line">ROLStep = [[<span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>], </span><br><span class="line">           [<span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>], </span><br><span class="line">           [<span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>], </span><br><span class="line">           [<span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Logic Functions</span></span><br><span class="line">f = <span class="keyword">lambda</span> b, c, d : (b &amp; c) | ((~b) &amp; d)</span><br><span class="line">g = <span class="keyword">lambda</span> b, c, d : (b &amp; d) | (c &amp; (~d))</span><br><span class="line">h = <span class="keyword">lambda</span> b, c, d : b ^ c ^ d</span><br><span class="line">i = <span class="keyword">lambda</span> b, c, d : c ^ (b | (~d))</span><br><span class="line">rho_2 = <span class="keyword">lambda</span> i : (<span class="number">1</span> + <span class="number">5</span> * (i)) % <span class="number">16</span></span><br><span class="line">rho_3 = <span class="keyword">lambda</span> i : (<span class="number">5</span> + <span class="number">3</span> * (i)) % <span class="number">16</span></span><br><span class="line">rho_4 = <span class="keyword">lambda</span> i : (<span class="number">7</span> * (i)) % <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ROLs</span>(<span class="params">x, y</span>):</span><br><span class="line">    x, y = <span class="built_in">int</span>(x), <span class="built_in">int</span>(y)</span><br><span class="line">    mask1 = (<span class="number">1</span> &lt;&lt; y) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ((x &gt;&gt; (<span class="number">32</span> - y)) &amp; mask1) | ((x &lt;&lt; y) &amp; ~mask1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compress Hash Functions</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">FF</span>(<span class="params">a, b, c, d, M, s</span>):</span><br><span class="line">    <span class="comment"># print(&quot;%x&quot;%a, &quot;%x&quot;%b, &quot;%x&quot;%c, &quot;%x&quot;%d, &quot;%x&quot;%M, s, &quot;%x&quot;%((f(b, c, d)) % (2 ** 32)))</span></span><br><span class="line">    a = (b + ROLs((a + f(b, c, d) + M + T[<span class="number">0</span>][s]) % (<span class="number">2</span> ** <span class="number">32</span>), ROLStep[<span class="number">0</span>][s])) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">return</span> d, a, b, c</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GG</span>(<span class="params">a, b, c, d, M, s</span>):</span><br><span class="line">    <span class="comment"># print(&quot;%x&quot;%a, &quot;%x&quot;%b, &quot;%x&quot;%c, &quot;%x&quot;%d, &quot;%x&quot;%M, s, &quot;%x&quot;%((g(b, c, d)) % (2 ** 32)))</span></span><br><span class="line">    a = (b + ROLs((a + g(b, c, d) + M + T[<span class="number">1</span>][s]) % (<span class="number">2</span> ** <span class="number">32</span>), ROLStep[<span class="number">1</span>][s])) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">return</span> d, a, b, c</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">HH</span>(<span class="params">a, b, c, d, M, s</span>):</span><br><span class="line">    <span class="comment"># print(&quot;%x&quot;%a, &quot;%x&quot;%b, &quot;%x&quot;%c, &quot;%x&quot;%d, &quot;%x&quot;%M, s, &quot;%x&quot;%((h(b, c, d)) % (2 ** 32)))</span></span><br><span class="line">    a = (b + ROLs((a + h(b, c, d) + M + T[<span class="number">2</span>][s]) % (<span class="number">2</span> ** <span class="number">32</span>), ROLStep[<span class="number">2</span>][s])) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">return</span> d, a, b, c</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">II</span>(<span class="params">a, b, c, d, M, s</span>):</span><br><span class="line">    <span class="comment"># print(&quot;%x&quot;%a, &quot;%x&quot;%b, &quot;%x&quot;%c, &quot;%x&quot;%d, &quot;%x&quot;%M, s, &quot;%x&quot;%((i(b, c, d)) % (2 ** 32)))</span></span><br><span class="line">    a = (b + ROLs((a + i(b, c, d) + M + T[<span class="number">3</span>][s]) % (<span class="number">2</span> ** <span class="number">32</span>), ROLStep[<span class="number">3</span>][s])) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">return</span> d, a, b, c</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read 32bit Litte Endian From y to x</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load32L</span>(<span class="params">y</span>):</span><br><span class="line">    <span class="comment"># print(y)</span></span><br><span class="line">    x = (((<span class="built_in">ord</span>(y[<span class="number">3</span>]) &amp; <span class="number">255</span>) &lt;&lt; <span class="number">24</span>) + ((<span class="built_in">ord</span>(y[<span class="number">2</span>]) &amp; <span class="number">255</span>) &lt;&lt; <span class="number">16</span>) + ((<span class="built_in">ord</span>(y[<span class="number">1</span>]) &amp; <span class="number">255</span>) &lt;&lt; <span class="number">8</span>) + (<span class="built_in">ord</span>(y[<span class="number">0</span>]) &amp; <span class="number">255</span>))</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># Store 32bit Little Endian From x to y</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">store32L</span>(<span class="params">x</span>):</span><br><span class="line">    y = [<span class="string">&quot;&quot;</span>] * <span class="number">4</span></span><br><span class="line">    y[<span class="number">0</span>] = <span class="built_in">chr</span>(x &amp; <span class="number">255</span>)</span><br><span class="line">    y[<span class="number">1</span>] = <span class="built_in">chr</span>((x&gt;&gt;<span class="number">8</span>) &amp; <span class="number">255</span>)</span><br><span class="line">    y[<span class="number">2</span>] = <span class="built_in">chr</span>((x&gt;&gt;<span class="number">16</span>) &amp; <span class="number">255</span>)</span><br><span class="line">    y[<span class="number">3</span>] = <span class="built_in">chr</span>((x&gt;&gt;<span class="number">24</span>) &amp; <span class="number">255</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen64LS</span>(<span class="params">x</span>):</span><br><span class="line">    x, y = <span class="built_in">int</span>(x), <span class="string">&quot;&quot;</span></span><br><span class="line">    y += <span class="built_in">chr</span>(x &amp; <span class="number">255</span>)</span><br><span class="line">    y += <span class="built_in">chr</span>((x&gt;&gt;<span class="number">8</span>) &amp; <span class="number">255</span>)</span><br><span class="line">    y += <span class="built_in">chr</span>((x&gt;&gt;<span class="number">16</span>) &amp; <span class="number">255</span>)</span><br><span class="line">    y += <span class="built_in">chr</span>((x&gt;&gt;<span class="number">24</span>) &amp; <span class="number">255</span>)</span><br><span class="line">    y += <span class="built_in">chr</span>((x&gt;&gt;<span class="number">32</span>) &amp; <span class="number">255</span>)</span><br><span class="line">    y += <span class="built_in">chr</span>((x&gt;&gt;<span class="number">40</span>) &amp; <span class="number">255</span>)</span><br><span class="line">    y += <span class="built_in">chr</span>((x&gt;&gt;<span class="number">48</span>) &amp; <span class="number">255</span>)</span><br><span class="line">    y += <span class="built_in">chr</span>((x&gt;&gt;<span class="number">56</span>) &amp; <span class="number">255</span>)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compressMD5</span>(<span class="params">msg, a, b, c, d</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(msg) / <span class="number">64</span>)):</span><br><span class="line">        aa, bb, cc, dd = a, b, c, d</span><br><span class="line">        s = msg[<span class="number">64</span> * i : <span class="number">64</span> * (i + <span class="number">1</span>)]</span><br><span class="line">        w = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            w[j] = load32L(s[<span class="number">4</span> * j: <span class="number">4</span> * (j + <span class="number">1</span>)])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            <span class="comment"># print(&quot;%x&quot;%a, &quot;%x&quot;%b, &quot;%x&quot;%c, &quot;%x&quot;%d, &quot;%x&quot;%w[j])</span></span><br><span class="line">            a, b, c, d = FF(a, b, c, d, w[j], j)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            <span class="comment"># print(&quot;%x&quot;%a, &quot;%x&quot;%b, &quot;%x&quot;%c, &quot;%x&quot;%d, &quot;%x&quot;%w[rho_2(j)])</span></span><br><span class="line">            a, b, c, d = GG(a, b, c, d, w[rho_2(j)], j)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            <span class="comment"># print(&quot;%x&quot;%a, &quot;%x&quot;%b, &quot;%x&quot;%c, &quot;%x&quot;%d, &quot;%x&quot;%w[rho_3(j)])</span></span><br><span class="line">            a, b, c, d = HH(a, b, c, d, w[rho_3(j)], j)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            <span class="comment"># print(&quot;%x&quot;%a, &quot;%x&quot;%b, &quot;%x&quot;%c, &quot;%x&quot;%d, &quot;%x&quot;%w[rho_4(j)])</span></span><br><span class="line">            a, b, c, d = II(a, b, c, d, w[rho_4(j)], j)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># a, b, c, d = (a + aa) &amp; 0xFFFFFFFF, (b + bb) &amp; 0xFFFFFFFF, (c + cc) &amp; 0xFFFFFFFF, (d + dd) &amp; 0xFFFFFFFF</span></span><br><span class="line">        a, b, c, d = a + aa, b + bb, c + cc, d + dd</span><br><span class="line">    <span class="keyword">return</span> a, b, c, d</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hexDigest</span>(<span class="params">hexNum</span>):</span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line">    s += <span class="string">&quot;%0.2x&quot;</span>%(hexNum &amp; <span class="number">255</span>)</span><br><span class="line">    s += <span class="string">&quot;%0.2x&quot;</span>%((hexNum &gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>)</span><br><span class="line">    s += <span class="string">&quot;%0.2x&quot;</span>%((hexNum &gt;&gt; <span class="number">16</span>) &amp; <span class="number">255</span>)</span><br><span class="line">    s += <span class="string">&quot;%0.2x&quot;</span>%((hexNum &gt;&gt; <span class="number">24</span>) &amp; <span class="number">255</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hashMD5</span>(<span class="params">msg</span>):</span><br><span class="line">    a, b, c, d = <span class="number">0x67452301</span>, <span class="number">0xEFCDAB89</span>, <span class="number">0x98BADCFE</span>, <span class="number">0x10325476</span></span><br><span class="line">    msg = <span class="built_in">str</span>(msg)</span><br><span class="line">    strlen, endLen = <span class="built_in">len</span>(msg), <span class="built_in">len</span>(msg) % <span class="number">64</span></span><br><span class="line">    segments = []</span><br><span class="line">    msg += <span class="built_in">chr</span>(<span class="number">0x80</span>)</span><br><span class="line">    endLen += <span class="number">1</span></span><br><span class="line">    fill = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> endLen &gt; <span class="number">56</span>:</span><br><span class="line">        <span class="keyword">while</span> endLen &lt; <span class="number">64</span>:</span><br><span class="line">            msg += <span class="built_in">chr</span>(fill)</span><br><span class="line">            endLen = (endLen + <span class="number">1</span>) % <span class="number">64</span></span><br><span class="line">            <span class="comment"># print(&quot;endLen =&quot;, endLen, &quot;filled =&quot;, chr(fill), &quot;Msg =&quot;, msg)</span></span><br><span class="line">        endLen = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> endLen &lt; <span class="number">56</span>:</span><br><span class="line">        msg += <span class="built_in">chr</span>(fill)</span><br><span class="line">        endLen = (endLen + <span class="number">1</span>) % <span class="number">64</span></span><br><span class="line"></span><br><span class="line">    msg = msg + gen64LS(strlen * <span class="number">8</span>)</span><br><span class="line">    a, b, c, d = compressMD5(msg, a, b, c, d)</span><br><span class="line">    <span class="comment"># print(hex(a), hex(b), hex(c), hex(d))</span></span><br><span class="line"></span><br><span class="line">    output = hexDigest(a) + hexDigest(b) + hexDigest(c) + hexDigest(d)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="comment"># Main Program</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    message = <span class="string">&quot;123456&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Original:&quot;</span>, message)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My MD5 Hash:&quot;</span>, hashMD5(message))</span><br><span class="line">    <span class="comment"># print(&quot;HashLib MD5 Hash:&quot;, hashlib.md5(message.encode(&quot;UTF-8&quot;)).hexdigest())</span></span><br></pre></td></tr></table></figure>

<p>版本2</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 左旋转</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">left_rotate</span>(<span class="params">x, c</span>):</span><br><span class="line">    <span class="keyword">return</span> ((x &lt;&lt; c) | (x &gt;&gt; (<span class="number">32</span> - c))) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义四个非线性函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">F</span>(<span class="params">x, y, z</span>): <span class="keyword">return</span> (x &amp; y) | (~x &amp; z)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">G</span>(<span class="params">x, y, z</span>): <span class="keyword">return</span> (x &amp; z) | (y &amp; ~z)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">H</span>(<span class="params">x, y, z</span>): <span class="keyword">return</span> x ^ y ^ z</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">I</span>(<span class="params">x, y, z</span>): <span class="keyword">return</span> y ^ (x | ~z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化向量</span></span><br><span class="line">A0 = <span class="number">0x67452301</span></span><br><span class="line">B0 = <span class="number">0xefcdab89</span></span><br><span class="line">C0 = <span class="number">0x98badcfe</span></span><br><span class="line">D0 = <span class="number">0x10325476</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常量表 T</span></span><br><span class="line">T = [<span class="built_in">int</span>(<span class="number">2</span>**<span class="number">32</span> * <span class="built_in">abs</span>(math.sin(i + <span class="number">1</span>))) &amp; <span class="number">0xFFFFFFFF</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每轮的位移数</span></span><br><span class="line">S = [  <span class="comment"># 4轮，每轮16步</span></span><br><span class="line">    [<span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>]*<span class="number">4</span>,</span><br><span class="line">    [<span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>]*<span class="number">4</span>,</span><br><span class="line">    [<span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>]*<span class="number">4</span>,</span><br><span class="line">    [<span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>]*<span class="number">4</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">message</span>):</span><br><span class="line">    message = <span class="built_in">bytearray</span>(message)  <span class="comment"># 拷贝为可变数组</span></span><br><span class="line">    orig_len_in_bits = (<span class="number">8</span> * <span class="built_in">len</span>(message)) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加 0x80 和填充 0</span></span><br><span class="line">    message.append(<span class="number">0x80</span>)</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(message) * <span class="number">8</span>) % <span class="number">512</span> != <span class="number">448</span>:</span><br><span class="line">        message.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加原始长度（64位）</span></span><br><span class="line">    message += struct.pack(<span class="string">&#x27;&lt;Q&#x27;</span>, orig_len_in_bits)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化缓冲区</span></span><br><span class="line">    A, B, C, D = A0, B0, C0, D0</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分块处理</span></span><br><span class="line">    <span class="keyword">for</span> chunk_offset <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(message), <span class="number">64</span>):</span><br><span class="line">        chunk = message[chunk_offset:chunk_offset + <span class="number">64</span>]</span><br><span class="line">        M = <span class="built_in">list</span>(struct.unpack(<span class="string">&#x27;&lt;16I&#x27;</span>, chunk))</span><br><span class="line"></span><br><span class="line">        a, b, c, d = A, B, C, D</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= i &lt;= <span class="number">15</span>:</span><br><span class="line">                f = F(b, c, d)</span><br><span class="line">                g = i</span><br><span class="line">                s = S[<span class="number">0</span>][i]</span><br><span class="line">            <span class="keyword">elif</span> <span class="number">16</span> &lt;= i &lt;= <span class="number">31</span>:</span><br><span class="line">                f = G(b, c, d)</span><br><span class="line">                g = (<span class="number">5</span>*i + <span class="number">1</span>) % <span class="number">16</span></span><br><span class="line">                s = S[<span class="number">1</span>][i - <span class="number">16</span>]</span><br><span class="line">            <span class="keyword">elif</span> <span class="number">32</span> &lt;= i &lt;= <span class="number">47</span>:</span><br><span class="line">                f = H(b, c, d)</span><br><span class="line">                g = (<span class="number">3</span>*i + <span class="number">5</span>) % <span class="number">16</span></span><br><span class="line">                s = S[<span class="number">2</span>][i - <span class="number">32</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                f = I(b, c, d)</span><br><span class="line">                g = (<span class="number">7</span>*i) % <span class="number">16</span></span><br><span class="line">                s = S[<span class="number">3</span>][i - <span class="number">48</span>]</span><br><span class="line"></span><br><span class="line">            temp = (a + f + T[i] + M[g]) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            a, d, c, b = d, c, b, (b + left_rotate(temp, s)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将结果加回缓冲区</span></span><br><span class="line">        A = (A + a) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        B = (B + b) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        C = (C + c) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">        D = (D + d) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出最终结果（小端序拼接）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="string">f&#x27;<span class="subst">&#123;word:02x&#125;</span>&#x27;</span> <span class="keyword">for</span> word <span class="keyword">in</span> struct.pack(<span class="string">&#x27;&lt;4I&#x27;</span>, A, B, C, D))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(md5(<span class="string">b&#x27;Bileton&#x27;</span>))  <span class="comment"># 应输出: 900150983cd24fb0d6963f7d28e17f72</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编码与加解密</category>
      </categories>
      <tags>
        <tag>MD5</tag>
      </tags>
  </entry>
  <entry>
    <title>详解RSA</title>
    <url>/2025/03/11/%E8%AF%A6%E8%A7%A3RSA/</url>
    <content><![CDATA[<h1 id="RSA介绍"><a href="#RSA介绍" class="headerlink" title="RSA介绍"></a>RSA介绍</h1><p>RSA是一种非对称加密算法，广泛应用于数据加密和数字签名。其安全性基于大整数分解的数学难题：将两个大质数相乘容易，但分解乘积还原质数极其困难。</p>
<p><strong>非对称加密</strong></p>
<ul>
<li><strong>公钥</strong>：公开用于加密。</li>
<li><strong>私钥</strong>：保密用于解密。</li>
</ul>
<h2 id="数学基础"><a href="#数学基础" class="headerlink" title="数学基础"></a><strong>数学基础</strong></h2><ul>
<li><strong>欧拉定理</strong>：若<em>a</em>与<em>n</em>互质，则<em>a**ϕ</em>(<em>n</em>)≡1mod<em>n</em>，其中<em>ϕ</em>(<em>n</em>)是欧拉函数。</li>
<li><strong>模反元素</strong>：若<em>e</em>与<em>ϕ</em>(<em>n</em>)互质，则存在<em>d</em>使得<em>e</em>⋅<em>d</em>≡1mod<em>ϕ</em>(<em>n</em>)。</li>
</ul>
<h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a><strong>欧拉函数</strong></h3><p>欧拉函数，记作 <strong>φ(n)<strong>，是数论中的一个核心概念，用于计算</strong>小于n且与n互质的正整数</strong>的个数。</p>
<h3 id="模反元素"><a href="#模反元素" class="headerlink" title="模反元素"></a><strong>模反元素</strong></h3><p>模反元素，简称<strong>模逆元</strong>，它描述了一个数在模运算下“可逆”的性质。</p>
<ul>
<li>若整数 <em>a</em> 和 <em>n</em> <strong>互质</strong>（即 gcd(<em>a</em>,<em>n</em>)&#x3D;1），则存在整数 <em>b</em>，使得：<em>a</em>⋅<em>b</em>≡1mod<em>n</em></li>
<li>此时，<em>b</em> 称为 <em>a</em> 在模 <em>n</em> 下的<strong>模反元素</strong>（或称逆元），记作 <em>a</em>−1mod<em>n</em>。</li>
</ul>
<p><strong>通俗理解</strong>：</p>
<ul>
<li><p>在模 <em>n</em> 的算术体系中，<em>a</em> 的逆元 <em>b</em> 相当于“倒数”，使得 <em>a</em>⋅<em>b</em> 的余数为1。</p>
<p>  示例：在模7下，3的逆元是5，因为 3×5&#x3D;15≡1mod7。</p>
</li>
</ul>
<h1 id="加密流程"><a href="#加密流程" class="headerlink" title="加密流程"></a>加密流程</h1><p><img src="/2025/03/11/%E8%AF%A6%E8%A7%A3RSA/1.jpg"></p>
]]></content>
      <categories>
        <category>编码与加解密</category>
      </categories>
      <tags>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>详解SHA1</title>
    <url>/2025/03/09/%E8%AF%A6%E8%A7%A3SHA1/</url>
    <content><![CDATA[<h1 id="SHA1简介"><a href="#SHA1简介" class="headerlink" title="SHA1简介"></a>SHA1简介</h1><p>SHA-1（Secure Hash Algorithm 1）是一种广泛使用的密码散列函数，它属于SHA家族算法的一员，主要用于生成数据的固定长度（160位即20字节）哈希值，用于验证数据完整性、数字签名等场景。</p>
<h1 id="数据填充"><a href="#数据填充" class="headerlink" title="数据填充"></a>数据填充</h1><p>把输入数据填充到64字节（512位）的倍数（最少填充9个字节，最多填充64+8个字节）。</p>
<p>填充方式：</p>
<ul>
<li>在原始数据的后面填充0x80</li>
<li>填充N个0</li>
<li>使用大端序在最后8个字节填充输入数据的bit长度</li>
</ul>
<h1 id="分块处理"><a href="#分块处理" class="headerlink" title="分块处理"></a>分块处理</h1><p>将填充后的数据分割为多个512位（64字节）的块，每个块包含16个32位字子块。</p>
<h1 id="初始化哈希值"><a href="#初始化哈希值" class="headerlink" title="初始化哈希值"></a>初始化哈希值</h1><p>初始哈希值由5个32位常数组成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">H0 = 0x67452301</span><br><span class="line">H1 = 0xEFCDAB89</span><br><span class="line">H2 = 0x98BADCFE</span><br><span class="line">H3 = 0x10325476</span><br><span class="line">H4 = 0xC3D2E1F0</span><br></pre></td></tr></table></figure>

<h1 id="对每个512位块处理"><a href="#对每个512位块处理" class="headerlink" title="对每个512位块处理"></a>对每个512位块处理</h1><p>每个块要经过80轮循环操作来更新哈希值：</p>
<h2 id="消息扩展"><a href="#消息扩展" class="headerlink" title="消息扩展"></a>消息扩展</h2><p>将16个初始字扩展到80个字（W[0]到W[79]）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">W[t] = (W[t-3] XOR W[t-8] XOR W[t-14] XOR W[t-16]) &lt;&lt;&lt; 1</span><br></pre></td></tr></table></figure>

<h2 id="初始化变量"><a href="#初始化变量" class="headerlink" title="初始化变量"></a>初始化变量</h2><p>将<code>A, B, C, D, E</code>分别设置为当前的<code>H0, H1, H2, H3, H4</code></p>
<h2 id="循环运算"><a href="#循环运算" class="headerlink" title="循环运算"></a>循环运算</h2><p>不同的轮次使用不同的逻辑函数和常数：</p>
<ul>
<li><strong>阶段0-19</strong>：<code>f = (B AND C) OR (NOT B AND D)</code>，常数<code>K=0x5A827999</code></li>
<li><strong>阶段20-39</strong>：<code>f = B XOR C XOR D</code>，常数<code>K=0x6ED9EBA1</code></li>
<li><strong>阶段40-59</strong>：<code>f = (B AND C) OR (B AND D) OR (C AND D)</code>，常数<code>K=0x8F1BBCDC</code></li>
<li><strong>阶段60-79</strong>：<code>f = B XOR C XOR D</code>，常数<code>K=0xCA62C1D6</code></li>
</ul>
<h2 id="更新哈希值"><a href="#更新哈希值" class="headerlink" title="更新哈希值"></a>更新哈希值</h2><p>每轮通过以下公式更新临时变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">temp = (A &lt;&lt;&lt; 5) + f + E + K + W[t]</span><br><span class="line">E = D</span><br><span class="line">D = C</span><br><span class="line">C = B &lt;&lt;&lt; 30</span><br><span class="line">B = A</span><br><span class="line">A = temp</span><br></pre></td></tr></table></figure>

<p><img src="/2025/03/09/%E8%AF%A6%E8%A7%A3SHA1/2.jpg"></p>
<h1 id="生成最终哈希值"><a href="#生成最终哈希值" class="headerlink" title="生成最终哈希值"></a>生成最终哈希值</h1><p>最终将5个哈希变量（A, B, C, D, E）拼接成160位（20字节）的结果，通常表示为40个十六进制字符。</p>
<p>SHA-1最后的输出是通过大端序来拼接的。</p>
]]></content>
      <categories>
        <category>编码与加解密</category>
      </categories>
      <tags>
        <tag>SHA1</tag>
      </tags>
  </entry>
  <entry>
    <title>详解SHA2-256</title>
    <url>/2025/03/09/%E8%AF%A6%E8%A7%A3SHA2-256/</url>
    <content><![CDATA[<h1 id="SHA256简介"><a href="#SHA256简介" class="headerlink" title="SHA256简介"></a>SHA256简介</h1><p>SHA-256（Secure Hash Algorithm 256）是SHA-2家族中的一种密码散列函数,它生成256位（32字节）的哈希值，广泛应用于数据完整性验证、数字签名、区块链（如比特币）等场景，相较于SHA-1，SHA-256具有更高的安全性和抗碰撞能力。</p>
<h1 id="消息预处理"><a href="#消息预处理" class="headerlink" title="消息预处理"></a>消息预处理</h1><h2 id="数据填充"><a href="#数据填充" class="headerlink" title="数据填充"></a>数据填充</h2><p>把输入数据填充到64字节（512位）的倍数（最少填充9个字节，最多填充64+8个字节）。</p>
<p>填充方式：</p>
<ul>
<li>在原始数据的后面填充0x80</li>
<li>填充N个0</li>
<li>使用大端序在最后8个字节填充输入数据的bit长度</li>
</ul>
<h2 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h2><p>将填充后的数据分割为多个512位（64字节）的块，每个块包含16个32位字子块。</p>
<h1 id="初始化哈希值"><a href="#初始化哈希值" class="headerlink" title="初始化哈希值"></a>初始化哈希值</h1><p>SHA-256的初始哈希值（H₀-H₇）由前8个素数的平方根的小数部分前32位构成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">H0 = 0x6a09e667</span><br><span class="line">H1 = 0xbb67ae85</span><br><span class="line">H2 = 0x3c6ef372</span><br><span class="line">H3 = 0xa54ff53a</span><br><span class="line">H4 = 0x510e527f</span><br><span class="line">H5 = 0x9b05688c</span><br><span class="line">H6 = 0x1f83d9ab</span><br><span class="line">H7 = 0x5be0cd19</span><br></pre></td></tr></table></figure>

<h1 id="处理每个512位块"><a href="#处理每个512位块" class="headerlink" title="处理每个512位块"></a>处理每个512位块</h1><p>每个块经过64轮循环操作，更新哈希值：</p>
<h2 id="消息扩展"><a href="#消息扩展" class="headerlink" title="消息扩展"></a>消息扩展</h2><p>将16个初始字扩展为64个字（W[0]-W[63]）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">For t = 16 to 63:</span><br><span class="line">    W[t] = σ₁(W[t-2]) + W[t-7] + σ₀(W[t-15]) + W[t-16]</span><br><span class="line">    </span><br><span class="line">σ₀(x) = (x &gt;&gt; 7) ^ (x &gt;&gt; 18) ^ (x &gt;&gt; 3)</span><br><span class="line">σ₁(x) = (x &gt;&gt; 17) ^ (x &gt;&gt; 19) ^ (x &gt;&gt; 10)</span><br></pre></td></tr></table></figure>

<h2 id="初始化变量"><a href="#初始化变量" class="headerlink" title="初始化变量"></a>初始化变量</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = H0</span><br><span class="line">b = H1</span><br><span class="line">c = H2</span><br><span class="line">d = H3</span><br><span class="line">e = H4</span><br><span class="line">f = H5</span><br><span class="line">g = H6</span><br><span class="line">h = H7</span><br></pre></td></tr></table></figure>

<h2 id="主循环（64轮运算）"><a href="#主循环（64轮运算）" class="headerlink" title="主循环（64轮运算）"></a>主循环（64轮运算）</h2><h3 id="逻辑函数"><a href="#逻辑函数" class="headerlink" title="逻辑函数"></a>逻辑函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ch(e, f, g) = (e &amp; f) ^ (~e &amp; g)</span><br><span class="line">Maj(a, b, c) = (a &amp; b) ^ (a &amp; c) ^ (b &amp; c)</span><br><span class="line">Σ₀(x) = (x &gt;&gt; 2) ^ (x &gt;&gt; 13) ^ (x &gt;&gt; 22)</span><br><span class="line">Σ₁(x) = (x &gt;&gt; 6) ^ (x &gt;&gt; 11) ^ (x &gt;&gt; 25)</span><br></pre></td></tr></table></figure>

<h3 id="轮常数K-t"><a href="#轮常数K-t" class="headerlink" title="轮常数K[t]"></a>轮常数<code>K[t]</code></h3><p>由前64个素数的立方根小数部分前32位生成（例如 <code>K[0] = 0x428a2f98</code>，<code>K[63] = 0xc67178f2</code>）。</p>
<h3 id="计算（对-t-0-到-63）："><a href="#计算（对-t-0-到-63）：" class="headerlink" title="计算（对 t = 0 到 63）："></a>计算（对 <code>t = 0</code> 到 <code>63</code>）：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">T1 = h + Σ₁(e) + Ch(e, f, g) + K[t] + W[t]</span><br><span class="line">T2 = Σ₀(a) + Maj(a, b, c)</span><br><span class="line">h = g</span><br><span class="line">g = f</span><br><span class="line">f = e</span><br><span class="line">e = d + T1</span><br><span class="line">d = c</span><br><span class="line">c = b</span><br><span class="line">b = a</span><br><span class="line">a = T1 + T2</span><br></pre></td></tr></table></figure>

<p><img src="/2025/03/09/%E8%AF%A6%E8%A7%A3SHA2-256/1.jpg"></p>
<h2 id="更新哈希值"><a href="#更新哈希值" class="headerlink" title="更新哈希值"></a>更新哈希值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">H0 = (H0 + a) &amp; 0xFFFFFFFF</span><br><span class="line">H1 = (H1 + b) &amp; 0xFFFFFFFF</span><br><span class="line">H2 = (H2 + c) &amp; 0xFFFFFFFF</span><br><span class="line">H3 = (H3 + d) &amp; 0xFFFFFFFF</span><br><span class="line">H4 = (H4 + e) &amp; 0xFFFFFFFF</span><br><span class="line">H5 = (H5 + f) &amp; 0xFFFFFFFF</span><br><span class="line">H6 = (H6 + g) &amp; 0xFFFFFFFF</span><br><span class="line">H7 = (H7 + h) &amp; 0xFFFFFFFF</span><br></pre></td></tr></table></figure>

<h1 id="生成最终哈希值"><a href="#生成最终哈希值" class="headerlink" title="生成最终哈希值"></a>生成最终哈希值</h1><p>将所有块处理完毕后，将 <code>H0</code> 到 <code>H7</code> 按 大端序 拼接为256位（32字节）结果，转换为64位十六进制字符串。</p>
]]></content>
      <categories>
        <category>编码与加解密</category>
      </categories>
      <tags>
        <tag>SHA2-256</tag>
      </tags>
  </entry>
  <entry>
    <title>详解SM3</title>
    <url>/2025/03/23/%E8%AF%A6%E8%A7%A3SM3/</url>
    <content><![CDATA[<h1 id="SM3介绍"><a href="#SM3介绍" class="headerlink" title="SM3介绍"></a>SM3介绍</h1><p><strong>SM3</strong> 是中国国家密码管理局发布的密码杂凑算法（Hash Algorithm），SM3 是一种密码学安全哈希函数，用于生成固定长度的消息摘要（通常为 256 比特），广泛应用于数字签名、消息认证码、数据完整性校验等领域。</p>
<h1 id="初始向量"><a href="#初始向量" class="headerlink" title="初始向量"></a>初始向量</h1><p>8个32位寄存器IV</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">H0=A=0x7380166F,</span><br><span class="line">H1=B=0x4914B2B9,</span><br><span class="line">H2=C=0x172442D7,</span><br><span class="line">H3=D=0xDA8A0600,</span><br><span class="line">H4=E=0xA96F30BC,</span><br><span class="line">H5=F=0x163138AA,</span><br><span class="line">H6=G=0xE38DEE4D,</span><br><span class="line">H7=H=0xB0FB0E4E</span><br></pre></td></tr></table></figure>

<h1 id="消息预处理"><a href="#消息预处理" class="headerlink" title="消息预处理"></a>消息预处理</h1><h2 id="消息填充"><a href="#消息填充" class="headerlink" title="消息填充"></a>消息填充</h2><p>把输入数据填充到64字节（512位）的倍数（最少填充9个字节，最多填充64+8个字节）。</p>
<p><strong>填充方式：</strong></p>
<ul>
<li>在原始数据的后面填充0x80</li>
<li>填充N个0</li>
<li>使用大端序在最后8个字节填充输入数据的bit长度</li>
</ul>
<h2 id="分组处理"><a href="#分组处理" class="headerlink" title="分组处理"></a>分组处理</h2><p>将填充后的消息划分为 512 比特的分组<code>Bi</code>，每个分组划分为16个32比特字W0，W1，W2，W3 … … W15（大端序）</p>
<h2 id="消息扩展"><a href="#消息扩展" class="headerlink" title="消息扩展"></a>消息扩展</h2><p>把16个32比特字扩展为132个32比特字（前68个字，后64个字）</p>
<h3 id="前68个字"><a href="#前68个字" class="headerlink" title="前68个字"></a>前68个字</h3><p>初始16个字来自分组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Wj=Wj(i)0≤j≤15</span><br></pre></td></tr></table></figure>

<p>后续的52个字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Wj=P1(W(j−16)⊕W(j−9)⊕(W(j−3)&lt;&lt;&lt;15))⊕(W(j−13)&lt;&lt;&lt;7)⊕W(j−6),16≤j≤67</span><br></pre></td></tr></table></figure>

<h4 id="置换函数P1-X"><a href="#置换函数P1-X" class="headerlink" title="置换函数P1(X)"></a>置换函数P1(X)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">P1(X)=X⊕(X&lt;&lt;&lt;15)⊕(X&lt;&lt;&lt;23)</span><br></pre></td></tr></table></figure>

<p>通过循环移位和异或操作，破坏输入数据的线性结构，增强扩散性。</p>
<h3 id="后64个字"><a href="#后64个字" class="headerlink" title="后64个字"></a>后64个字</h3><p>直接由前68个字生成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Wj′=Wj⊕W(j+4),0≤j≤63</span><br></pre></td></tr></table></figure>

<p>这样就得到了132个32比热的字</p>
<h1 id="迭代压缩"><a href="#迭代压缩" class="headerlink" title="迭代压缩"></a>迭代压缩</h1><p>将消息扩展后的132个字（<code>Wj </code>和 <code>Wj′</code>）与初始向量（<code>IV</code>）结合，通过多轮非线性操作生成最终的256位哈希值。</p>
<h2 id="加载初始值"><a href="#加载初始值" class="headerlink" title="加载初始值"></a>加载初始值</h2><p>初始寄存器值 <em>V</em>(<em>i</em>)&#x3D;(<em>A</em>,<em>B</em>,<em>C</em>,<em>D</em>,<em>E</em>,<em>F</em>,<em>G</em>,<em>H</em>)。</p>
<p>如果是第一个分组，<em>V</em>(0) 为IV；后续分组使用前一分组的输出。</p>
<h2 id="64轮迭代更新"><a href="#64轮迭代更新" class="headerlink" title="64轮迭代更新"></a>64轮迭代更新</h2><h3 id="轮常量Tj"><a href="#轮常量Tj" class="headerlink" title="轮常量Tj"></a>轮常量Tj</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Tj=</span><br><span class="line">&#123; </span><br><span class="line">	0x79CC4519, 0≤j≤15(前16轮)</span><br><span class="line">	0x7A879D8A, 16≤j≤63(后48轮)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="逻辑函数FFj和GGj"><a href="#逻辑函数FFj和GGj" class="headerlink" title="逻辑函数FFj和GGj"></a>逻辑函数FFj和GGj</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FFj(X,Y,Z) = X⊕Y⊕Z		GGj(X,Y,Z)=X⊕Y⊕Z	,0≤j≤15(前16轮)</span><br><span class="line">FFj(X,Y,Z) = (X&amp;Y)|(X&amp;Z)|(Y&amp;Z)			,16≤j≤63(后48轮)</span><br><span class="line">GGj(X,Y,Z) = (X&amp;Y)|(~X&amp;Z)				,16≤j≤63(后48轮)</span><br></pre></td></tr></table></figure>



<h3 id="以第j轮迭代流程为例"><a href="#以第j轮迭代流程为例" class="headerlink" title="以第j轮迭代流程为例"></a>以第j轮迭代流程为例</h3><h4 id="计算中间变量SS1-和-SS2"><a href="#计算中间变量SS1-和-SS2" class="headerlink" title="计算中间变量SS1 和 SS2"></a>计算中间变量SS1 和 SS2</h4><p>结合寄存器和轮常量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SS1=((A&lt;&lt;&lt;12)+E+(Tj&lt;&lt;&lt;j))&lt;&lt;&lt;7</span><br><span class="line">SS2=(SS1⊕A&lt;&lt;&lt;12)</span><br></pre></td></tr></table></figure>

<h4 id="计算临时变量TT1和TT2"><a href="#计算临时变量TT1和TT2" class="headerlink" title="计算临时变量TT1和TT2"></a>计算临时变量TT1和TT2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TT1 = FFj(A,B,C) + D + SS2 + Wj&#x27;</span><br><span class="line">TT2 = GGj(E,F,G) + H + SS1 + Wj</span><br></pre></td></tr></table></figure>

<h4 id="更新寄存器"><a href="#更新寄存器" class="headerlink" title="更新寄存器"></a>更新寄存器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D=C</span><br><span class="line">C=B&lt;&lt;&lt;9</span><br><span class="line">B=A</span><br><span class="line">A=TT1</span><br><span class="line">H=G</span><br><span class="line">G=F&lt;&lt;&lt;9</span><br><span class="line">F=E</span><br><span class="line">E=P0(TT2)</span><br></pre></td></tr></table></figure>

<h5 id="置换函数P0"><a href="#置换函数P0" class="headerlink" title="置换函数P0"></a>置换函数P0</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">P0(X)=X⊕(X&lt;&lt;&lt;9)⊕(X&lt;&lt;&lt;17)</span><br></pre></td></tr></table></figure>

<h1 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">H0=H0⊕A，H1=H1⊕B，H2=H2⊕C，H3=H3⊕D，H4=H4⊕E，H5=H5⊕F，H6=H6⊕G，H7=H7⊕H</span><br></pre></td></tr></table></figure>

<p>按照大端序排列输出</p>
]]></content>
      <categories>
        <category>编码与加解密</category>
      </categories>
      <tags>
        <tag>SM3</tag>
      </tags>
  </entry>
  <entry>
    <title>详解TEA</title>
    <url>/2025/03/23/%E8%AF%A6%E8%A7%A3TEA/</url>
    <content><![CDATA[<h1 id="TEA简介"><a href="#TEA简介" class="headerlink" title="TEA简介"></a>TEA简介</h1><p>TEA（Tiny Encryption Algorithm）是一种对称密钥分组密码算法。</p>
<p>分组长度：64位（8字节）（明文分为两个32位块，密文分为两个32位块）。</p>
<p>密钥长度：128位（16字节）（分为四个32位子密钥）。</p>
<h1 id="加密流程"><a href="#加密流程" class="headerlink" title="加密流程"></a>加密流程</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ul>
<li><p>将64位明文分为两部分：<code>L0</code>（左32位）和 <code>R0</code>（右32位）。</p>
</li>
<li><p>初始化轮常量：<em>δ</em>&#x3D;0x9E3779B9（黄金比例相关常数，用于增强非线性）。</p>
</li>
<li><p>初始化累加变量：sum&#x3D;0。</p>
</li>
</ul>
<h2 id="轮迭代（64轮）"><a href="#轮迭代（64轮）" class="headerlink" title="轮迭代（64轮）"></a>轮迭代（64轮）</h2><p>对于每一轮i（从0到63）</p>
<p>1.更新累加变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum=sum+δ</span><br></pre></td></tr></table></figure>

<p>2.更新左半部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">L(i+1)=Ri</span><br></pre></td></tr></table></figure>

<p>3.更新右半部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ri+1=Li+F(Ri,sum,K)</span><br></pre></td></tr></table></figure>

<h3 id="轮函数F"><a href="#轮函数F" class="headerlink" title="轮函数F"></a>轮函数F</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F(Ri,sum,K)=((Ri&lt;&lt;4)+Kleft)⊕(Ri+sum)⊕((Ri&gt;&gt;5)+Kright)</span><br></pre></td></tr></table></figure>

<h3 id="Kleft和Kright"><a href="#Kleft和Kright" class="headerlink" title="Kleft和Kright"></a>Kleft和Kright</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">偶数轮（i为偶数）：Kleft=K[0], Kright=K[1]</span><br><span class="line">奇数轮（i为奇数）：Kleft=K[2], Kright=K[3]</span><br></pre></td></tr></table></figure>

<h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><p>经过64轮后，密文为左右部分合并</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ciphertext=(L64∣∣R64)</span><br></pre></td></tr></table></figure>

<h1 id="XTEA简介"><a href="#XTEA简介" class="headerlink" title="XTEA简介"></a>XTEA简介</h1><p>XTEA（Extended TEA）是TEA（Tiny Encryption Algorithm）的改进版本。</p>
<ol>
<li><strong>密钥调度</strong>：引入更复杂的子密钥生成逻辑，避免密钥相关攻击。</li>
<li><strong>轮函数</strong>：调整位移和混合操作的顺序，增强非线性性和扩散性。</li>
<li><strong>轮常量计算</strong>：优化轮常量的使用方式，减少数学规律性。</li>
</ol>
<h2 id="算法参数"><a href="#算法参数" class="headerlink" title="算法参数"></a>算法参数</h2><ul>
<li><strong>分组长度</strong>：64位（分为两个32位块 <em>L</em> 和 <em>R</em>）。</li>
<li><strong>密钥长度</strong>：128位（16字节）（分为四个32位子密钥 <em>K</em>[0],<em>K</em>[1],<em>K</em>[2],<em>K</em>[3]）。</li>
<li><strong>加密轮数</strong>：通常为 <strong>64轮</strong>（Feistel结构）。</li>
<li><strong>安全性</strong>：抗相关密钥攻击和已知明文攻击，理论安全性优于TEA。</li>
</ul>
<h1 id="加密流程-1"><a href="#加密流程-1" class="headerlink" title="加密流程"></a>加密流程</h1><p>XTEA采用 <strong>Feistel结构</strong>，每轮操作更新左右两部分数据。</p>
<h2 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h2><ul>
<li>明文分为两个32位块：<em>L</em>0（左）和 <em>R</em>0（右）。</li>
<li>轮常量：<em>δ</em>&#x3D;0x9E3779B9（黄金比例相关常数）。</li>
<li>累加变量：<em>sum</em>&#x3D;0。</li>
</ul>
<h2 id="64轮迭代"><a href="#64轮迭代" class="headerlink" title="64轮迭代"></a>64轮迭代</h2><p>对于每轮 <em>i</em>（从0到63）：</p>
<p><strong>更新左半部分</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Li+1=Li+(((Ri≪4)⊕(Ri≫5))+Ri)⊕(sum+K[(sum≫11)&amp;3])</span><br></pre></td></tr></table></figure>

<p><strong>更新累加变量</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum=sum+δ</span><br></pre></td></tr></table></figure>

<p><strong>更新右半部分</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ri+1=Ri+(((Li+1≪4)⊕(Li+1≫5))+Li+1)⊕(sum+K[sum&amp;3])</span><br></pre></td></tr></table></figure>

<h2 id="合并-1"><a href="#合并-1" class="headerlink" title="合并"></a>合并</h2><p>经过64轮后，密文为左右部分合并：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ciphertext=(L64∣∣R64)</span><br></pre></td></tr></table></figure>

<h1 id="XXTEA简介"><a href="#XXTEA简介" class="headerlink" title="XXTEA简介"></a>XXTEA简介</h1><p>XXTEA（Corrected Block TEA）是TEA算法的最终改进版本,旨在解决TEA和XTEA在处理 <strong>可变长度数据块</strong> 时的局限性。它支持任意长度的数据块（最小64位），并在混合操作中引入更复杂的非线性逻辑，显著提升了安全性。</p>
<h2 id="核心改进"><a href="#核心改进" class="headerlink" title="核心改进"></a>核心改进</h2><ol>
<li><strong>支持可变长度数据块</strong>：可加密任意长度（≥64位）的数据，无需固定分组。</li>
<li><strong>增强的混合操作</strong>：通过多次位移和异或操作，强化非线性扩散。</li>
<li><strong>优化的密钥调度</strong>：密钥参与更分散，避免局部性弱点。</li>
</ol>
<h2 id="算法参数-1"><a href="#算法参数-1" class="headerlink" title="算法参数"></a>算法参数</h2><ul>
<li><strong>数据块长度</strong>：任意长度（最小64位，即8字节）。</li>
<li><strong>密钥长度</strong>：128位（16字节）（分为四个32位子密钥 <em>K</em>[0],<em>K</em>[1],<em>K</em>[2],<em>K</em>[3]）。</li>
<li><strong>推荐轮数</strong>：通常为 <strong>52轮</strong>（根据数据块长度动态调整）。</li>
<li><strong>安全性</strong>：抗已知明文攻击和选择密文攻击，安全性优于XTEA。</li>
</ul>
<h1 id="加密流程-2"><a href="#加密流程-2" class="headerlink" title="加密流程"></a>加密流程</h1><p>XXTEA采用 <strong>整块混合迭代</strong> 而非Feistel结构，所有数据字参与每轮计算。</p>
<h2 id="初始化-2"><a href="#初始化-2" class="headerlink" title="初始化"></a>初始化</h2><ul>
<li>将明文分为 <em>n</em> 个32位字（<em>v</em>0,<em>v</em>1,…,<em>v**n</em>−1），<em>n</em>≥2。</li>
<li>定义轮常量：<em>δ</em>&#x3D;0x9E3779B9</li>
<li>累加变量 <em>s<strong>u</strong>m</em>&#x3D;0。</li>
</ul>
<h2 id="预处理轮次"><a href="#预处理轮次" class="headerlink" title="预处理轮次"></a>预处理轮次</h2><p><strong>计算初始轮次：</strong></p>
<p><img src="/2025/03/23/%E8%AF%A6%E8%A7%A3TEA/1.jpg"></p>
<p>例如：<em>n</em>&#x3D;4（128位数据块）→ Rounds &#x3D; 6 + 13 &#x3D; 19轮。</p>
<h2 id="轮迭代（每轮更新所有字）"><a href="#轮迭代（每轮更新所有字）" class="headerlink" title="轮迭代（每轮更新所有字）"></a>轮迭代（每轮更新所有字）</h2><p>对于每轮 <em>i</em>（从0到Rounds-1）：</p>
<p><strong>更新累加变量</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum=sum+δ</span><br></pre></td></tr></table></figure>

<p><strong>计算密钥混合索引</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">e=(sum≫2)&amp;3</span><br></pre></td></tr></table></figure>

<p><strong>逐字更新数据块</strong></p>
<p>对于每个字 vj（<em>j</em> 从0到 <em>n</em>−1）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vj=vj+(((vj−1≪4)⊕(vj+1≫5))+vj+1)⊕(sum+K[(j&amp;3)⊕e])</span><br></pre></td></tr></table></figure>

<p><strong>边界处理</strong>：</p>
<ul>
<li><em>v</em>−1&#x3D;<em>vn</em>−1（当 <em>j</em>&#x3D;0 时）。</li>
<li><em>vn</em>&#x3D;<em>v</em>0（当 <em>j</em>&#x3D;<em>n</em>−1 时）。</li>
</ul>
]]></content>
      <categories>
        <category>编码与加解密</category>
      </categories>
      <tags>
        <tag>TEA</tag>
      </tags>
  </entry>
  <entry>
    <title>详解对称加密算法的填充方式及加密模式</title>
    <url>/2025/02/14/%E8%AF%A6%E8%A7%A3%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%A1%AB%E5%85%85%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="填充方式"><a href="#填充方式" class="headerlink" title="填充方式"></a>填充方式</h1><p>填充方式（Padding）是指在加密过程中，为了使得数据块的长度符合加密算法的要求（通常是固定长度），而对数据进行补充的操作。</p>
<h2 id="PKCS-5"><a href="#PKCS-5" class="headerlink" title="PKCS#5"></a>PKCS#5</h2><p>用于对8字节块大小的加密算法（如DES）进行填充。</p>
<p>如果数据的长度不是8字节的倍数，则使用填充字节数的值来填充。例如，如果需要填充3个字节，则填充3个字节，其值为 <code>0x03</code>。</p>
<h2 id="PKCS-7"><a href="#PKCS-7" class="headerlink" title="PKCS#7"></a>PKCS#7</h2><p>是对 PKCS#5 的扩展，适用于块大小为任意字节的加密算法（如AES的16字节块），它的填充方式与PKCS#5相同，但支持更多的块大小。填充字节的值是填充字节的数量。例如，如果需要填充3个字节，则填充3个字节，其值为 <code>0x03</code>。</p>
<h2 id="Zero填充"><a href="#Zero填充" class="headerlink" title="Zero填充"></a>Zero填充</h2><p>使用字节值为零（<code>0x00</code>）的填充方式，将数据填充至指定块大小。这种方法在一些情况下容易出错，特别是如果明文本身包含零字节时。</p>
<h1 id="加密模式"><a href="#加密模式" class="headerlink" title="加密模式"></a>加密模式</h1><p>对称加密算法通常基于分组密码来加密数据。分组密码的基本思想是将数据划分为若干个固定大小的块（如64位、128位等），然后对每个块进行加密。</p>
<h2 id="ECB模式"><a href="#ECB模式" class="headerlink" title="ECB模式"></a>ECB模式</h2><p>ECB（Electronic Codebook），也就是电子密码本模式。</p>
<p>原理：将明文分为固定大小的块，对每个块单独加密，生成对应的密文块。</p>
<p><img src="/2025/02/14/%E8%AF%A6%E8%A7%A3%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%A1%AB%E5%85%85%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%BC%8F/1.jpg"></p>
<h2 id="CBC模式"><a href="#CBC模式" class="headerlink" title="CBC模式"></a>CBC模式</h2><p>CBC（CBC - Cipher Block Chaining），也就是密码分组链接模式。</p>
<p>每个数据块在加密前都会与前一个密文块进行异或运算，首块数据与初始化向量（IV）进行异或，然后进行加密，使得相同的明文块即使在不同的位置也会生成不同的密文。</p>
<p><img src="/2025/02/14/%E8%AF%A6%E8%A7%A3%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%A1%AB%E5%85%85%E6%96%B9%E5%BC%8F%E5%8F%8A%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%BC%8F/2.jpg"></p>
]]></content>
      <categories>
        <category>编码与加解密</category>
      </categories>
      <tags>
        <tag>填充方式及加密模式</tag>
      </tags>
  </entry>
  <entry>
    <title>详解SM4</title>
    <url>/2025/03/16/%E8%AF%A6%E8%A7%A3SM4/</url>
    <content><![CDATA[<h1 id="SM4简介"><a href="#SM4简介" class="headerlink" title="SM4简介"></a>SM4简介</h1><p>SM4是中国国家密码管理局（GM&#x2F;T 0002-2012）发布的商用分组密码算法，属于对称加密算法。</p>
<p>类型：对称分组加密</p>
<p><strong>分组长度</strong>：128位（16字节）</p>
<p><strong>密钥长度</strong>：128位（16字节）</p>
<p><strong>迭代轮数</strong>：32轮</p>
<p><strong>设计结构</strong>：基于Feistel网络结构，但实际采用更高效的<strong>非线性迭代结构</strong>。</p>
<h1 id="加密流程"><a href="#加密流程" class="headerlink" title="加密流程"></a>加密流程</h1><h2 id="明文处理"><a href="#明文处理" class="headerlink" title="明文处理"></a>明文处理</h2><p>将128位明文分为4个32位字（大端序存储）：X0，X1，X2，X3</p>
<h2 id="32轮迭代加密"><a href="#32轮迭代加密" class="headerlink" title="32轮迭代加密"></a>32轮迭代加密</h2><h3 id="轮函数"><a href="#轮函数" class="headerlink" title="轮函数"></a>轮函数</h3><p>每轮的操作公式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X&#123;i+4&#125;=Xi⊕T(X&#123;i+1&#125;⊕X&#123;i+2&#125;⊕X&#123;i+3&#125;⊕rki)</span><br><span class="line"></span><br><span class="line">// rki会在后面密钥调度中提到，这里理解为轮秘钥</span><br></pre></td></tr></table></figure>

<p>也可以把这个公式理解为轮函数F</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X&#123;i+4&#125; = F(Xi,X&#123;i+1&#125;,X&#123;i+2&#125;,X&#123;i+3&#125;) = Xi⊕T(X&#123;i+1&#125;⊕X&#123;i+2&#125;⊕X&#123;i+3&#125;⊕rki)</span><br></pre></td></tr></table></figure>

<h3 id="核心函数T"><a href="#核心函数T" class="headerlink" title="核心函数T"></a>核心函数T</h3><h4 id="S盒置换（非线性层）"><a href="#S盒置换（非线性层）" class="headerlink" title="S盒置换（非线性层）"></a>S盒置换（非线性层）</h4><p>将T函数的输入<code>X&#123;i+1&#125;⊕X&#123;i+2&#125;⊕X&#123;i+3&#125;⊕rki</code>32位拆分为4个8位字节，每个字节通过固定S盒替换（查表），得到32位的结果B.</p>
<h4 id="线性变换L（扩散层）"><a href="#线性变换L（扩散层）" class="headerlink" title="线性变换L（扩散层）"></a>线性变换L（扩散层）</h4><p>对S盒的32位输出B进行循环左移和异或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">L(B)=B⊕(B⋘2)⊕(B⋘10)⊕(B⋘18)⊕(B⋘24)</span><br></pre></td></tr></table></figure>

<h3 id="更新寄存器"><a href="#更新寄存器" class="headerlink" title="更新寄存器"></a>更新寄存器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X&#123;i+4&#125;=Xi⊕L(B)</span><br></pre></td></tr></table></figure>

<h2 id="反序合并"><a href="#反序合并" class="headerlink" title="反序合并"></a>反序合并</h2><p>最终输出密文时，将<em>X</em>32,<em>X</em>33,<em>X</em>34,<em>X</em>35反序排列并合并为128位。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X32=0x12345678(字A)</span><br><span class="line">X33=0x9ABCDEF0(字B)</span><br><span class="line">X34=0x11223344(字C)</span><br><span class="line">X35=0x55667788(字D)</span><br></pre></td></tr></table></figure>

<p>取逆序字：<code>D=0x55667788</code>, <code>C=0x11223344</code>, <code>B=0x9ABCDEF0</code>, <code>A=0x12345678</code>。</p>
<p>按大端序合并</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cipher = 0x55667788112233449ABCDEF012345678</span><br></pre></td></tr></table></figure>

<h1 id="密钥调度"><a href="#密钥调度" class="headerlink" title="密钥调度"></a>密钥调度</h1><p>通过密钥调度生成32个轮秘钥（每轮一个，32位）。</p>
<h2 id="主密钥拆分"><a href="#主密钥拆分" class="headerlink" title="主密钥拆分"></a>主密钥拆分</h2><p>首先将128位主密钥分为4个32位字：MK0，MK1，MK2，MK3</p>
<h2 id="固定常数FK"><a href="#固定常数FK" class="headerlink" title="固定常数FK"></a>固定常数FK</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FK0=0xA3B1BAC6,</span><br><span class="line">FK1=0x56AA3350,</span><br><span class="line">FK2=0x677D9197,</span><br><span class="line">FK3=0xB27022DC.</span><br></pre></td></tr></table></figure>

<h2 id="固定参数CK"><a href="#固定参数CK" class="headerlink" title="固定参数CK"></a>固定参数CK</h2><p><img src="/2025/03/16/%E8%AF%A6%E8%A7%A3SM4/1.jpg"></p>
<h2 id="生成中间密钥"><a href="#生成中间密钥" class="headerlink" title="生成中间密钥"></a>生成中间密钥</h2><p>每个<code>MKi</code>与<code>FKi</code>异或，得到初始密钥<code>K0</code>到<code>K3</code></p>
<h2 id="迭代生成轮秘钥"><a href="#迭代生成轮秘钥" class="headerlink" title="迭代生成轮秘钥"></a>迭代生成轮秘钥</h2><p>通过32轮迭代生成后续的<code>K4</code>到<code>K35</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─迭代32轮：</span><br><span class="line">│   for i = 0 to 31:</span><br><span class="line">│     计算中间值 = K_&#123;i+1&#125; ⊕ K_&#123;i+2&#125; ⊕ K_&#123;i+3&#125; ⊕ CK_i</span><br><span class="line">│     │</span><br><span class="line">│     ├─S盒置换（4字节查表）</span><br><span class="line">│     │</span><br><span class="line">│     └─线性变换L&#x27;（循环左移13、23位后异或）</span><br><span class="line">│     生成 K_&#123;i+4&#125; = K_i ⊕ T&#x27;(中间值)</span><br><span class="line">│     保存 rk_i = K_&#123;i+4&#125;</span><br></pre></td></tr></table></figure>

<h3 id="T’函数"><a href="#T’函数" class="headerlink" title="T’函数"></a>T’函数</h3><p>与加密过程中的T函数类似，S盒置换与加密算法中的S盒算法相同，有区别的是线性替换L’</p>
<h3 id="线性变换L′"><a href="#线性变换L′" class="headerlink" title="线性变换L′"></a>线性变换L′</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">L′(B)=B⊕(B⋘13)⊕(B⋘23)</span><br></pre></td></tr></table></figure>

<h2 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主密钥 (128位)</span><br><span class="line">│</span><br><span class="line">├─拆分为 MK₀, MK₁, MK₂, MK₃</span><br><span class="line">│</span><br><span class="line">├─异或 FK₀-FK₃ → 生成 K₀-K₃</span><br><span class="line">│</span><br><span class="line">├─迭代32轮：</span><br><span class="line">│   for i = 0 to 31:</span><br><span class="line">│     计算中间值 = K_&#123;i+1&#125; ⊕ K_&#123;i+2&#125; ⊕ K_&#123;i+3&#125; ⊕ CK_i</span><br><span class="line">│     │</span><br><span class="line">│     ├─S盒置换（4字节查表）</span><br><span class="line">│     │</span><br><span class="line">│     └─线性变换L&#x27;（循环左移13、23位后异或）</span><br><span class="line">│     生成 K_&#123;i+4&#125; = K_i ⊕ T&#x27;(中间值)</span><br><span class="line">│     保存 rk_i = K_&#123;i+4&#125;</span><br><span class="line">│</span><br><span class="line">└─输出轮密钥 rk_0, rk_1, ..., rk_31</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>编码与加解密</category>
      </categories>
      <tags>
        <tag>SM4</tag>
      </tags>
  </entry>
  <entry>
    <title>豆瓣frida检测绕过及搜索接口参数还原</title>
    <url>/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.douban.frodo</p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/1.png" alt="1"></p>
<h1 id="frida反调试绕过"><a href="#frida反调试绕过" class="headerlink" title="frida反调试绕过"></a>frida反调试绕过</h1><p>首先尝试注入frida，发现直接就挂掉了，说明frida被检测到了</p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/2.jpg" alt="1"></p>
<h2 id="定位检测frida的so"><a href="#定位检测frida的so" class="headerlink" title="定位检测frida的so"></a>定位检测frida的so</h2><p>hook dlopen查看so加载流程，看在加载哪一个so的时候挂掉的，说明检测frida的函数在那个so里。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//Android8.0之后加载so通过android_dlopen_ext函数</span></span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;leave!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_dlopen</span>()</span><br></pre></td></tr></table></figure>

<p>根据hook的输出可以知道，在加载<code>libmsaoaidsec.so</code>之后，frida就挂掉了，说明是在<code>libmsaoaidsec.so</code>里检测的frida。</p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/3.jpg" alt="1"></p>
<h2 id="定位检测frida的函数地址，并进行替换"><a href="#定位检测frida的函数地址，并进行替换" class="headerlink" title="定位检测frida的函数地址，并进行替换"></a>定位检测frida的函数地址，并进行替换</h2><p>根据so的加载流程，<code>call_construction()</code>函数用来确保动态库中的函数得到加载并执行，在<code>call_construction()</code>函数里会调用一个<code>init_array()</code>函数，它包含了一组指向函数的指针，用于对函数进行初始化，在so加载完成之后，会调用<code>JNI_OnLoad()</code>函数，用于进行 JNI 环境的初始化、注册本地方法。</p>
<h3 id="hook-pthread-create"><a href="#hook-pthread-create" class="headerlink" title="hook pthread_create()"></a>hook pthread_create()</h3><p>检测frida的函数通常不会在主线程中，我们可以通过hook pthread_create()函数来打印线程中创建的函数的地址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//Android8.0之后加载so通过android_dlopen_ext函数</span></span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                    <span class="title function_">hook_pthread</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="comment">// console.log(&quot;leave!&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_pthread</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pth_create = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[pth_create]&quot;</span>, pth_create);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pth_create, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(args[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address&quot;</span>, <span class="variable language_">module</span>.<span class="property">name</span>, args[<span class="number">2</span>].<span class="title function_">sub</span>(<span class="variable language_">module</span>.<span class="property">base</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hook_dlopen</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>

<p>结果如下，在<code>libmsaoaidsec.so</code>里创建了三个函数</p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/4.jpg" alt="1"></p>
<h3 id="hook-call-construction"><a href="#hook-call-construction" class="headerlink" title="hook call_construction()"></a>hook call_construction()</h3><p>可以通过hook call_construction()这个函数来对pthread_create()中创建的函数进行替换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//Android8.0之后加载so通过android_dlopen_ext函数</span></span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                    <span class="title function_">hook_call_constructors</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="comment">//console.log(&quot;leave!&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_call_constructors</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> linker64_base_addr = <span class="title class_">Module</span>.<span class="title function_">getBaseAddress</span>(<span class="string">&quot;linker64&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> call_constructors_func_off = <span class="number">0x2C274</span> <span class="comment">//这个地址是从手机上把linker64 pull出来，然后到IDA中找到的，不同的机型，地址可能不一样</span></span><br><span class="line">    <span class="keyword">var</span> call_constructors_func_addr = linker64_base_addr.<span class="title function_">add</span>(call_constructors_func_off)</span><br><span class="line">    <span class="keyword">var</span> listener = <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(call_constructors_func_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hooked call_constructors&quot;</span>)</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x1c544</span>), <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0x1c544:替换成功&quot;</span>)</span><br><span class="line">                &#125;, <span class="string">&quot;void&quot;</span>, []))</span><br><span class="line">                <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x1b924</span>), <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0x1B924:替换成功&quot;</span>)</span><br><span class="line">                &#125;, <span class="string">&quot;void&quot;</span>, []))</span><br><span class="line">                <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x26e5c</span>), <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0x26e5c:替换成功&quot;</span>)</span><br><span class="line">                &#125;, <span class="string">&quot;void&quot;</span>, []))</span><br><span class="line">                listener.<span class="title function_">detach</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hook_dlopen</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>

<p>结果如下，frida反调试绕过成功了！</p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/5.jpg" alt="1"></p>
<h1 id="sign参数还原"><a href="#sign参数还原" class="headerlink" title="_sign参数还原"></a>_sign参数还原</h1><h2 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h2><p>通过抓包找到有关<code>_sig</code>参数的数据包</p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/6.jpg" alt="1"></p>
<h2 id="jadx反编译apk"><a href="#jadx反编译apk" class="headerlink" title="jadx反编译apk"></a>jadx反编译apk</h2><p>搜索字符串<code>&quot;_sig&quot;</code></p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/7.jpg" alt="1"></p>
<h2 id="intercept"><a href="#intercept" class="headerlink" title="intercept"></a>intercept</h2><p>定位到intercept函数，如下可以看出来<code>sig</code>的值为F3.first，F3的值为<code>i0.d.F(request)</code></p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/8.jpg" alt="1"></p>
<p>跟进到F方法里</p>
<h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><p>F方法内容如下</p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/9.jpg" alt="1"></p>
<p>返回值是E方法</p>
<p>跟进到E方法</p>
<h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><p>E方法内容如下</p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/10.jpg" alt="1"></p>
<p><strong>分析流程</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.判断str是否为空	（TextUtils.isEmpty(str)）</span><br><span class="line">   ↓</span><br><span class="line">2.获取str2	（StringBuilder l10 = android.support.v4.media.e.l(str2)）</span><br><span class="line">   ↓</span><br><span class="line">3.获取URL的路径部分，并进行url编码	（String encodedPath = HttpUrl.parse(str).encodedPath()）</span><br><span class="line">   ↓</span><br><span class="line">4.对进行过URL解码的路径部分进行URL解码	（decode = Uri.decode(encodedPath)）</span><br><span class="line">   ↓</span><br><span class="line">5.如果路径URL的路径部分的末尾有/符号，则删除它</span><br><span class="line">   ↓</span><br><span class="line">6.在l10末尾追加一个&amp;符号</span><br><span class="line">   ↓</span><br><span class="line">7.对解码的URL路径部分进行url编码，然后追加到l10末尾</span><br><span class="line">   ↓</span><br><span class="line">8.在l10末尾追加一个&amp;符号</span><br><span class="line">   ↓</span><br><span class="line">9.在l10末尾追加当前时间戳</span><br><span class="line">   ↓</span><br><span class="line">10.进行HmacSHA1签名</span><br><span class="line">   ↓</span><br><span class="line">11.进行Base64编码</span><br></pre></td></tr></table></figure>

<h2 id="hook-doFinal"><a href="#hook-doFinal" class="headerlink" title="hook doFinal"></a>hook doFinal</h2><p>hook doFinal方法来查看参与加密的参数的格式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">ByteString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">toBase64</span>(<span class="params">tag, data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(tag + <span class="string">&quot; Base64: &quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(data).<span class="title function_">base64</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params">tag, data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(tag + <span class="string">&quot; Hex: &quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(data).<span class="title function_">hex</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">toUtf8</span>(<span class="params">tag, data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(tag + <span class="string">&quot; Utf8: &quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(data).<span class="title function_">utf8</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mac = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.crypto.Mac&quot;</span>);</span><br><span class="line">    mac.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.security.Key&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.init(&#x27;java.security.Key&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; init Key&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> keyBytes = key.<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, keyBytes);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, keyBytes);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, keyBytes);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">init</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">doFinal</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.doFinal.overload(&#x27;[B&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data:&quot;</span>,<span class="title function_">toUtf8</span>(<span class="string">&quot;data:&quot;</span>,data))</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">doFinal</span>(data)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>,<span class="title function_">toBase64</span>(<span class="string">&quot;result&quot;</span>,result))</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mac.init(&#x27;java.security.Key&#x27;) is called!</span><br><span class="line">HmacSHA1 init Key Utf8: bf7dddc7c9cfe6f7</span><br><span class="line">HmacSHA1 init Key Hex: 62663764646463376339636665366637</span><br><span class="line">HmacSHA1 init Key Base64: YmY3ZGRkYzdjOWNmZTZmNw==</span><br><span class="line">Mac.doFinal.overload(&#x27;[B&#x27;) is called!</span><br><span class="line">data: Utf8: GET&amp;%2Fapi%2Fv2%2Fsearch&amp;1736261466</span><br><span class="line">data: undefined</span><br><span class="line">result Base64: S6+RLmdsNP1NdjQghxJebsST7Tc=</span><br><span class="line">result: undefined</span><br><span class="line">=======================================================</span><br></pre></td></tr></table></figure>



<h2 id="hook-E"><a href="#hook-E" class="headerlink" title="hook E"></a>hook E</h2><p>对E方法进行hook，可以查看参数和返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_E</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> d = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;i0.d&quot;</span>);</span><br><span class="line">        d.<span class="property">E</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">str1,str2,str3</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----E----&quot;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str1:&quot;</span>,str1);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str2:&quot;</span>,str2);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str3:&quot;</span>,str3);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>.<span class="title function_">E</span>(str1,str2,str3);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>,result)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----over----&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_E</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----E----</span><br><span class="line">str1: https://frodo.douban.com/api/v2/search/suggestion?q=%E8%AF%AF%E6%9D%80&amp;loc_id=108288&amp;apikey=0dad551ec0f84ed02907ff5c42e8ec70&amp;channel=ali_market&amp;udid=ce0fb355c7f98012b1d6716853b6841ba7e35819&amp;os_rom=android&amp;timezone=Asia%2FShanghai</span><br><span class="line">str2: GET</span><br><span class="line">str3: null</span><br><span class="line">result: Pair&#123;idc8eWIGKhtP6hTr9piPi5OSadQ= 1736098880&#125;</span><br><span class="line">----over----</span><br><span class="line">----E----</span><br><span class="line">str1: https://frodo.douban.com/api/v2/search/found_words?screen_width=1080&amp;screen_height=2028&amp;wx_api_ver=0&amp;opensdk_ver=638058496&amp;webview_ua=Mozilla%2F5.0%20%28Linux%3B%20Android%209%3B%20Pixel%203%20Build%2FPD1A.180720.030%3B%20wv%29%20AppleWebKit%2F537.36%20%28KHTML%2C%20like%20Gecko%29%20Version%2F4.0%20Chrome%2F66.0.3359.158%20Mobile%20Safari%2F537.36&amp;sugar=0&amp;update_mark=1709887761.853333336&amp;network=wifi&amp;enable_sdk_bidding=1&amp;timezone=Asia%2FShanghai</span><br><span class="line">str2: POST</span><br><span class="line">str3: null</span><br><span class="line">result: Pair&#123;gYm5pJeYn7Wh/uv2QxJF6sh6sfA= 1736098863&#125;</span><br><span class="line">----over----</span><br></pre></td></tr></table></figure>

<h2 id="hook-SecretKeySpec"><a href="#hook-SecretKeySpec" class="headerlink" title="hook SecretKeySpec"></a>hook SecretKeySpec</h2><p>对于hmacsha1算法，我们得知道密钥才行，可以hook SecretKeySpec得到密钥</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_SecretKeySpec</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> secretkeyspec = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.crypto.spec.SecretKeySpec&quot;</span>);</span><br><span class="line">        secretkeyspec.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">str5,sha1</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> stringdata = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(str5);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str5:&quot;</span>,stringdata);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sha1:&quot;</span>,sha1);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;====+++====&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_SecretKeySpec</span>()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="attr">str5</span>: bf7dddc7c9cfe6f7</span><br><span class="line"><span class="attr">sha1</span>: <span class="title class_">HmacSHA1</span></span><br></pre></td></tr></table></figure>

<p>得到hmacsha1的密钥为<code>bf7dddc7c9cfe6f7</code></p>
<h2 id="参数还原"><a href="#参数还原" class="headerlink" title="参数还原"></a>参数还原</h2><p>这里拿一份hook到的数据进行分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----E----</span><br><span class="line">str1: https://frodo.douban.com/api/v2/search/suggestion?q=%E8%AF%AF%E6%9D%80&amp;loc_id=108288&amp;apikey=0dad551ec0f84ed02907ff5c42e8ec70&amp;channel=ali_market&amp;udid=ce0fb355c7f98012b1d6716853b6841ba7e35819&amp;os_rom=android&amp;timezone=Asia%2FShanghai</span><br><span class="line">str2: GET</span><br><span class="line">str3: null</span><br><span class="line">result: Pair&#123;idc8eWIGKhtP6hTr9piPi5OSadQ= 1736098880&#125;</span><br><span class="line">----over----</span><br></pre></td></tr></table></figure>

<p>首先需要的是请求方式，这里是<code>GET</code></p>
<p>其次是URL的路径部分，还要进行url编码，这里拿到的是<code>%2Fapi%2Fv2%2Fsearch%2Fsuggestion</code></p>
<p>然后是时间戳<code>1736098880</code></p>
<p>进行HmacSHA1签名，在进行Base64编码</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hmacsha1</span>(<span class="params">key,data</span>):</span><br><span class="line">    key_bytes = key.encode()</span><br><span class="line">    data_bytes = data.encode()</span><br><span class="line">    mac = hmac.new(key_bytes,data_bytes,hashlib.sha1)</span><br><span class="line">    sha1_result = mac.digest()</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(sha1_result).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    </span><br><span class="line">key = <span class="string">&quot;bf7dddc7c9cfe6f7&quot;</span></span><br><span class="line">data = <span class="string">&quot;GET&amp;%2Fapi%2Fv2%2Fsearch%2Fsuggestion&amp;1736098880&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sig:&quot;</span>+hmacsha1(key,data))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">sig:idc8eWIGKhtP6hTr9piPi5OSadQ=</span><br></pre></td></tr></table></figure>

<h1 id="搜索接口"><a href="#搜索接口" class="headerlink" title="搜索接口"></a>搜索接口</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hmacsha1</span>(<span class="params">key,data</span>):</span><br><span class="line">    key_bytes = key.encode()</span><br><span class="line">    data_bytes = data.encode()</span><br><span class="line">    mac = hmac.new(key_bytes,data_bytes,hashlib.sha1)</span><br><span class="line">    sha1_result = mac.digest()</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(sha1_result).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://frodo.douban.com/api/v2/search&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;api-client/1 com.douban.frodo/7.89.0(307) Android/28 product/blueline vendor/Google model/Pixel 3 brand/google  rom/android  network/wifi  udid/ce0fb355c7f98012b1d6716853b6841ba7e35819  platform/mobile&quot;</span>,</span><br><span class="line">  <span class="string">&quot;accept-encoding&quot;</span>: <span class="string">&quot;br,gzip&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timestamp = <span class="built_in">int</span>(time.time())</span><br><span class="line">encode_data = <span class="string">&quot;GET&quot;</span>+<span class="string">&quot;&amp;&quot;</span>+<span class="string">&quot;%2Fapi%2Fv2%2Fsearch&quot;</span>+<span class="string">&quot;&amp;&quot;</span>+<span class="built_in">str</span>(timestamp)</span><br><span class="line">key = <span class="string">&quot;bf7dddc7c9cfe6f7&quot;</span></span><br><span class="line">sig = hmacsha1(key,encode_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sig:&quot;</span>,sig)</span><br><span class="line"></span><br><span class="line">query = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>)</span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">  <span class="string">&quot;q&quot;</span>: query,</span><br><span class="line">  <span class="string">&quot;sort&quot;</span>: <span class="string">&quot;relevance&quot;</span>,</span><br><span class="line">  <span class="string">&quot;count&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">  <span class="string">&quot;screen_width&quot;</span>: <span class="string">&quot;1080&quot;</span>,</span><br><span class="line">  <span class="string">&quot;screen_height&quot;</span>: <span class="string">&quot;2028&quot;</span>,</span><br><span class="line">  <span class="string">&quot;wx_api_ver&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;opensdk_ver&quot;</span>: <span class="string">&quot;638058496&quot;</span>,</span><br><span class="line">  <span class="string">&quot;webview_ua&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PD1A.180720.030; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.158 Mobile Safari/537.36&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sugar&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;update_mark&quot;</span>: <span class="string">&quot;1709887761.853333336&quot;</span>,</span><br><span class="line">  <span class="string">&quot;network&quot;</span>: <span class="string">&quot;wifi&quot;</span>,</span><br><span class="line">  <span class="string">&quot;enable_sdk_bidding&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;loc_id&quot;</span>: <span class="string">&quot;108288&quot;</span>,</span><br><span class="line">  <span class="string">&quot;apikey&quot;</span>: <span class="string">&quot;0dad551ec0f84ed02907ff5c42e8ec70&quot;</span>,</span><br><span class="line">  <span class="string">&quot;channel&quot;</span>: <span class="string">&quot;ali_market&quot;</span>,</span><br><span class="line">  <span class="string">&quot;udid&quot;</span>: <span class="string">&quot;ce0fb355c7f98012b1d6716853b6841ba7e35819&quot;</span>,</span><br><span class="line">  <span class="string">&quot;os_rom&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">  <span class="string">&quot;oaid&quot;</span>: <span class="string">&quot;EdGi3zYQCRzmwwB1YR7WKg==\n&quot;</span>,</span><br><span class="line">  <span class="string">&quot;timezone&quot;</span>: <span class="string">&quot;Asia/Shanghai&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_sig&quot;</span>:sig,</span><br><span class="line">  <span class="string">&quot;_ts&quot;</span>: timestamp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,headers=headers,params=params)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="comment"># print(response.text)</span></span><br><span class="line">text = json.loads(response.text)</span><br><span class="line"><span class="built_in">print</span>(text)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>豆瓣</tag>
      </tags>
  </entry>
  <entry>
    <title>车智赢app登录参数逆向</title>
    <url>/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.che168.autotradercloud</p>
<p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/1.jpg"></p>
<h1 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h1><p>输入手机号和密码进行登录（1888888888,12345678），出现账号和密码错误</p>
<p>分析数据包</p>
<p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/2.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url: https://dealercloudapi.che168.com/tradercloud/sealed/login/login.ashx</span><br><span class="line">method: POST</span><br><span class="line">headers: &#123;</span><br><span class="line">  &quot;:authority&quot;: &quot;dealercloudapi.che168.com&quot;,</span><br><span class="line">  &quot;:method&quot;: &quot;POST&quot;,</span><br><span class="line">  &quot;:path&quot;: &quot;/tradercloud/sealed/login/login.ashx&quot;,</span><br><span class="line">  &quot;:scheme&quot;: &quot;https&quot;,</span><br><span class="line">  &quot;cache-control&quot;: &quot;public, max-age=0&quot;,</span><br><span class="line">  &quot;traceid&quot;: &quot;atc.android_75ca194d-982a-4c62-9c0a-eb647fcfff77&quot;,</span><br><span class="line">  &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;,</span><br><span class="line">  &quot;content-length&quot;: &quot;275&quot;,</span><br><span class="line">  &quot;accept-encoding&quot;: &quot;gzip&quot;,</span><br><span class="line">  &quot;user-agent&quot;: &quot;okhttp/3.14.9&quot;</span><br><span class="line">&#125;</span><br><span class="line">body: &#123;</span><br><span class="line">  &quot;_appid&quot;: &quot;atc.android&quot;,</span><br><span class="line">  &quot;_sign&quot;: &quot;821E3885B2FC914FBFAD687399B650E7&quot;,</span><br><span class="line">  &quot;appversion&quot;: &quot;3.71.0&quot;,</span><br><span class="line">  &quot;channelid&quot;: &quot;csy&quot;,</span><br><span class="line">  &quot;pwd&quot;: &quot;25d55ad283aa400af464c76d713c07ad&quot;,</span><br><span class="line">  &quot;signkey&quot;: &quot;&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;&quot;,</span><br><span class="line">  &quot;udid&quot;: &quot;aYU5PJ/U/aR1iOFu+Rd2HB7mst8DN5YX+4ft9CvXkL/YCpKYH4gg9+MiTNly tCkk7g9hVsWqMGbruaIqoS6K5A==&quot;,</span><br><span class="line">  &quot;username&quot;: &quot;18888888888&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里面需要逆向的参数有<code>_sign</code>、<code>pwd</code>、<code>udid</code></p>
<h1 id="jadx反编译分析"><a href="#jadx反编译分析" class="headerlink" title="jadx反编译分析"></a>jadx反编译分析</h1><h2 id="pwd参数还原"><a href="#pwd参数还原" class="headerlink" title="pwd参数还原"></a>pwd参数还原</h2><p>搜索接口</p>
<p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/3.jpg"></p>
<p>双击跳转</p>
<p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/4.jpg"></p>
<p>它是一个字段，右键字段名查找用例，然后跳转至调用的地方，如下，它是url方法的参数</p>
<h3 id="loginByPassword"><a href="#loginByPassword" class="headerlink" title="loginByPassword()"></a>loginByPassword()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loginByPassword</span><span class="params">(String str, String str2, String str3, String str4, String str5, ResponseCallback&lt;UserBean&gt; responseCallback)</span> &#123;</span><br><span class="line">    HttpUtil.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpUtil</span>.Builder();</span><br><span class="line">    builder.tag(str).method(HttpUtil.Method.POST).signType(<span class="number">1</span>).url(LOGIN_URL).param(<span class="string">&quot;username&quot;</span>, str2).param(<span class="string">&quot;type&quot;</span>, str4).param(<span class="string">&quot;signkey&quot;</span>, str5).param(<span class="string">&quot;pwd&quot;</span>, SecurityUtil.encodeMD5(str3));</span><br><span class="line">    doRequest(builder, responseCallback, <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;BaseResult&lt;UserBean&gt;&gt;() &#123; <span class="comment">// from class: com.che168.autotradercloud.user.model.UserModel.5</span></span><br><span class="line">    &#125;.getType());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里就可以看到传递的参数了</p>
<p>这里出现了一个参数<code>pwd</code>，并进行了MD5哈希算法签名</p>
<p>可以把输入的密码进行MD5签名，与抓包的数据进行对比，如下，是一样的</p>
<p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/5.jpg"></p>
<h2 id="sign参数还原"><a href="#sign参数还原" class="headerlink" title="_sign参数还原"></a>_sign参数还原</h2><p>搜索<code>&quot;_sign&quot;</code></p>
<p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/6.jpg"></p>
<p>当不确定是哪一个的时候，可以点进去看看上下文有没有其他相关的参数，或者可疑性比较大的方法进行hook，打印参数和返回值。</p>
<p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/7.jpg"></p>
<p>发现这几个sign的值都是通过<code>toSign()</code>方法得到的</p>
<h3 id="toSign"><a href="#toSign" class="headerlink" title="toSign()"></a>toSign()</h3><p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/8.jpg"></p>
<p>这里面对map中的内容通过字符串进行拼接，然后进行MD5签名，然后转为大写</p>
<p>可以通过hook toSign()方法查看参数和返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_toSign</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">let</span> <span class="title class_">AHAPIHelper</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.autohome.ahkit.AHAPIHelper&quot;</span>);</span><br><span class="line">        <span class="title class_">AHAPIHelper</span>[<span class="string">&quot;toSign&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">context, map</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`AHAPIHelper.toSign is called: context=<span class="subst">$&#123;context&#125;</span>, map=<span class="subst">$&#123;map&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;toSign&quot;</span>](context, map);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`AHAPIHelper.toSign result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hook 之后点击登录没反应，可能是找错函数了，加密并没有走toSign()函数</p>
<p>接着找，看这几个函数</p>
<p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/9.jpg"></p>
<p>如下，这里的参数跟请求体中的参数也对得上</p>
<p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/10.jpg"></p>
<p><code>_sign</code>的值是<code>signByType</code>，它的值是<code>signByType()</code>方法返回的</p>
<h3 id="signByType"><a href="#signByType" class="headerlink" title="signByType()"></a>signByType()</h3><p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/11.jpg"></p>
<p>这个方法根据<code>signType</code>的值来设置str的值，然后拼接paraMap的键和值，最后在拼接一个str，然后把字符串进行MD5签名</p>
<h3 id="hook-signByType"><a href="#hook-signByType" class="headerlink" title="hook signByType()"></a>hook signByType()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_sign</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">SignManager</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.che168.atclibrary.base.SignManager&quot;</span>);</span><br><span class="line">        <span class="title class_">SignManager</span>[<span class="string">&quot;signByType&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">signType, paramMap</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SignManager.signByType is called: signType=<span class="subst">$&#123;signType&#125;</span>, paramMap=<span class="subst">$&#123;paramMap&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;signByType&quot;</span>](signType, paramMap);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SignManager.signByType result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hook结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SignManager.signByType is called: signType=1, paramMap=&#123;_appid=atc.android, appversion=3.71.0, channelid=csy, pwd=25d55ad283aa400af464c76d713c07ad, signkey=, type=, udid=aYU5PJ/U/aR1iOFu+Rd2HB7mst8DN5YX+4ft9CvXkL/YCpKYH4gg968SLlht BKxj7FEpfjd4+7OOqUly74+vGQ==, username=18888888888&#125;</span><br><span class="line">SignManager.signByType result=21DD339870BDF9DAE15131F6D01B9BB2</span><br></pre></td></tr></table></figure>

<p><code>signTpe</code>的值是1，在源码中找到对应的<code>str</code>是<code>&quot;W@oC!AH_6Ew1f6%8&quot;</code></p>
<h3 id="hook-encodeMD5"><a href="#hook-encodeMD5" class="headerlink" title="hook encodeMD5()"></a>hook encodeMD5()</h3><p>可以hook encodeMD5查看MD5签名的参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_encodeMD5</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">SecurityUtil</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.autohome.ahkit.utils.SecurityUtil&quot;</span>);</span><br><span class="line">        <span class="title class_">SecurityUtil</span>[<span class="string">&quot;encodeMD5&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">str</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SecurityUtil.encodeMD5 is called: str=<span class="subst">$&#123;str&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;encodeMD5&quot;</span>](str);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SecurityUtil.encodeMD5 result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SecurityUtil.encodeMD5 is called: str=W@oC!AH_6Ew1f6%8_appidatc.androidappversion3.71.0channelidcsypwd25d55ad283aa400af464c76d713c07adsignkeytypeudidaYU5PJ/U/aR1iOFu+Rd2HB7mst8DN5YX+4ft9CvXkL/YCpKYH4gg9/rOGiHZ fplHNBBIgv34WQSSYDABqqyELA==username18888888888W@oC!AH_6Ew1f6%8</span><br><span class="line">SecurityUtil.encodeMD5 result=d0bf664cc12b402592b7bbf926087bcc</span><br></pre></td></tr></table></figure>

<h2 id="udid参数还原"><a href="#udid参数还原" class="headerlink" title="udid参数还原"></a>udid参数还原</h2><p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/12.jpg"></p>
<p><code>udid</code>是通过<code>getUDID()</code>方法获取的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUDID</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> SecurityUtil.encode3Des(context, getIMEI(context) + HiAnalyticsConstant.REPORT_VAL_SEPARATOR + (System.currentTimeMillis() / <span class="number">1000</span>) + <span class="string">&quot;.000000|&quot;</span> + SPUtils.getDeviceId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出<code>udid</code>是通过<code>3Des</code>加密得到的</p>
<p>分析<code>3Des</code>加密的明文，它是由<code>getIMEI(context) + HiAnalyticsConstant.REPORT_VAL_SEPARATOR + (System.currentTimeMillis() / 1000) + &quot;.000000|&quot; + SPUtils.getDeviceId()</code>拼接而成的</p>
<h3 id="getIMEI"><a href="#getIMEI" class="headerlink" title="getIMEI()"></a>getIMEI()</h3><p>首先分析<code>getIMEI()</code>，我在jadx里反编译不了这个函数，换用Jeb进行反编译</p>
<p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/13.jpg"></p>
<p>分析代码，生成IMEI有不同的方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.((TelephonyManager)context0.getSystemService(&quot;phone&quot;)).getDeviceId();</span><br><span class="line">返回DeviceId</span><br><span class="line">2.AppUtils.getIMEIbyAndroidIDandUUID(context0);</span><br><span class="line">返回uuid</span><br><span class="line">3.((WifiManager)context0.getSystemService(&quot;wifi&quot;)).getConnectionInfo().getMacAddress();</span><br><span class="line">UUID.nameUUIDFromBytes(s1.getBytes(&quot;utf8&quot;)).toString();</span><br><span class="line">先获取wifi mac地址，然后根据这个mac地址生成一个uuid，然后返回</span><br></pre></td></tr></table></figure>

<p>这里面最简单的方式就是直接生成uuid的方式了。</p>
<h3 id="getIMEIbyAndroidIDandUUID"><a href="#getIMEIbyAndroidIDandUUID" class="headerlink" title="getIMEIbyAndroidIDandUUID()"></a>getIMEIbyAndroidIDandUUID()</h3><p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/14.jpg"></p>
<p>直接随机生成一个uuid就可以了。</p>
<h3 id="REPORT-VAL-SEPARATOR"><a href="#REPORT-VAL-SEPARATOR" class="headerlink" title="REPORT_VAL_SEPARATOR"></a>REPORT_VAL_SEPARATOR</h3><p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/15.jpg"></p>
<p><code>REPORT_VAL_SEPARATOR = &quot;|&quot;</code></p>
<h3 id="getDeviceId"><a href="#getDeviceId" class="headerlink" title="getDeviceId()"></a>getDeviceId()</h3><p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/16.jpg"></p>
<p>它是从内存中获取的，需要找到这个值是什么时候如何存进去的</p>
<h3 id="saveDeviceId"><a href="#saveDeviceId" class="headerlink" title="saveDeviceId()"></a>saveDeviceId()</h3><p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/17.jpg"></p>
<p>这个方法里面传入了一个字符串，通过查找用例来找传入的字符串是什么</p>
<h3 id="regDevice"><a href="#regDevice" class="headerlink" title="regDevice()"></a>regDevice()</h3><p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/18.jpg"></p>
<p>向服务器发送请求返回一个<code>RegDeviceResult</code>对象，然后<code>RegDeviceResult.deviceid</code>字段作为<code>saveDeviceId()</code>的参数</p>
<p><code>deviceid</code>是从服务器返回的，而且是程序第一次启动的时候设置的。</p>
<p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/19.jpg"></p>
<p>请求的url是<code>/tradercloud/v100/push/regdevice.ashx</code></p>
<p>可以通过抓包获取<code>deviceid</code>的值。</p>
<p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/20.jpg"></p>
<p>返回的<code>deviceid</code>值是<code>436586</code>。</p>
<h3 id="Python生成加密参数"><a href="#Python生成加密参数" class="headerlink" title="Python生成加密参数"></a>Python生成加密参数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_imei</span>():</span><br><span class="line">    u4 = uuid.uuid4()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(u4)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_data</span>():</span><br><span class="line">    REPORT_VAL_SEPARATOR = <span class="string">&quot;|&quot;</span></span><br><span class="line">    deviceid = <span class="string">&quot;436586&quot;</span></span><br><span class="line">    <span class="keyword">return</span> g_imei()+REPORT_VAL_SEPARATOR+<span class="built_in">str</span>(<span class="built_in">int</span>(time.time()))+<span class="string">&quot;.000000|&quot;</span>+deviceid</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(g_data())</span><br></pre></td></tr></table></figure>

<h3 id="encode3Des"><a href="#encode3Des" class="headerlink" title="encode3Des()"></a>encode3Des()</h3><p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/21.jpg"></p>
<p><strong>获取key</strong></p>
<h4 id="getDesKey"><a href="#getDesKey" class="headerlink" title="getDesKey()"></a>getDesKey()</h4><p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/22.jpg"></p>
<h4 id="getSignKey"><a href="#getSignKey" class="headerlink" title="getSignKey"></a>getSignKey</h4><p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/23.jpg"></p>
<h4 id="getSignDesKey"><a href="#getSignDesKey" class="headerlink" title="getSignDesKey()"></a>getSignDesKey()</h4><p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/24.jpg"></p>
<h4 id="get3desKey"><a href="#get3desKey" class="headerlink" title="get3desKey()"></a>get3desKey()</h4><p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/25.jpg"></p>
<p><code>get3desKey()</code>是一个native函数，需要到so中分析，它在<code>native-lib.so</code>里</p>
<p>IDA打开<code>native-lib.so</code>反编译，现在静态函数里找</p>
<p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/26.jpg"></p>
<p>直接就找到了，跳转过去</p>
<p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/27.jpg"></p>
<p>分析代码，查看<code>DES3_KEY</code>的值</p>
<p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/28.jpg"></p>
<p>kei的值是<code>appapiche168comappapiche168comap</code></p>
<h4 id="hook-getDesKey"><a href="#hook-getDesKey" class="headerlink" title="hook getDesKey()"></a>hook getDesKey()</h4><p>也可以通过hook 获取</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_getDesKey</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">AHAPIHelper</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.autohome.ahkit.AHAPIHelper&quot;</span>);</span><br><span class="line">        <span class="title class_">AHAPIHelper</span>[<span class="string">&quot;getDesKey&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`AHAPIHelper.getDesKey is called: context=<span class="subst">$&#123;context&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;getDesKey&quot;</span>](context);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`AHAPIHelper.getDesKey result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_getDesKey</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AHAPIHelper.getDesKey is called: context=com.che168.autotradercloud.ATCApplication@ddbd62d</span><br><span class="line">AHAPIHelper.getDesKey result=appapiche168comappapiche168comap</span><br></pre></td></tr></table></figure>

<h4 id="iv向量"><a href="#iv向量" class="headerlink" title="iv向量"></a>iv向量</h4><p><img src="/2025/02/16/%E8%BD%A6%E6%99%BA%E8%B5%A2app%E7%99%BB%E5%BD%95%E5%8F%82%E6%95%B0%E9%80%86%E5%90%91/29.jpg"></p>
<p><code>iv</code>的值为<code>appapich</code></p>
<h4 id="hook-encode3Des"><a href="#hook-encode3Des" class="headerlink" title="hook encode3Des"></a>hook encode3Des</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_encode3Des</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">SecurityUtil</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.autohome.ahkit.utils.SecurityUtil&quot;</span>);</span><br><span class="line">        <span class="title class_">SecurityUtil</span>[<span class="string">&quot;encode3Des&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">context, str</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SecurityUtil.encode3Des is called: context=<span class="subst">$&#123;context&#125;</span>, str=<span class="subst">$&#123;str&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;encode3Des&quot;</span>](context, str);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SecurityUtil.encode3Des result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_encode3Des</span>()</span><br></pre></td></tr></table></figure>

<p>hook 结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SecurityUtil.encode3Des is called: context=com.che168.autotradercloud.ATCApplication@77f5244, str=01f27aed_7242_412e_80fe_d77895dd8c6c|1739375229.000000|436588</span><br><span class="line">SecurityUtil.encode3Des result=dtRLGew6PDK+XUyKHax77H3+dDRC6VqmOHCbYsmzYEtRxFWu5cuowjF1r6Jy DRO/48UWBBgl5RF4+L8WGxjENg==</span><br></pre></td></tr></table></figure>

<h3 id="Python生成uuid"><a href="#Python生成uuid" class="headerlink" title="Python生成uuid"></a>Python生成uuid</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad,unpad</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_imei</span>():</span><br><span class="line">    u4 = uuid.uuid4()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(u4)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_data</span>():</span><br><span class="line">    REPORT_VAL_SEPARATOR = <span class="string">&quot;|&quot;</span></span><br><span class="line">    deviceid = <span class="string">&quot;436586&quot;</span></span><br><span class="line">    <span class="keyword">return</span> g_imei()+REPORT_VAL_SEPARATOR+<span class="built_in">str</span>(<span class="built_in">int</span>(time.time()))+<span class="string">&quot;.000000|&quot;</span>+deviceid</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des_encrypt_cbc</span>(<span class="params">plaintext,key,iv</span>):</span><br><span class="line">    cipher = DES3.new(key,DES3.MODE_CBC,iv)</span><br><span class="line">    padded_text = pad(plaintext,DES3.block_size)</span><br><span class="line">    encrypted_data = cipher.encrypt(padded_text)</span><br><span class="line">    <span class="keyword">return</span> encrypted_data</span><br><span class="line"></span><br><span class="line">data =  g_data().encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">key = <span class="string">b&quot;appapiche168comappapiche&quot;</span></span><br><span class="line">iv = <span class="string">b&quot;appapich&quot;</span></span><br><span class="line"></span><br><span class="line">udid = base64.b64encode(des_encrypt_cbc(data,key,iv))</span><br><span class="line"><span class="built_in">print</span>(udid)</span><br></pre></td></tr></table></figure>



<h1 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad,unpad</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_call</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 创建md5对象</span></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    <span class="comment"># 更新要加密的数据，参数要是字节类型</span></span><br><span class="line">    md5.update(data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="comment"># 获取加密后的数据，以16进制表示</span></span><br><span class="line">    md5_hex = md5.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> md5_hex</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_pwd</span>(<span class="params">pwd</span>):</span><br><span class="line">    <span class="keyword">return</span> md5_call(pwd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_imei</span>():</span><br><span class="line">    u4 = uuid.uuid4()</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(u4)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_data</span>():</span><br><span class="line">    REPORT_VAL_SEPARATOR = <span class="string">&quot;|&quot;</span></span><br><span class="line">    deviceid = <span class="string">&quot;436586&quot;</span></span><br><span class="line">    <span class="keyword">return</span> g_imei()+REPORT_VAL_SEPARATOR+<span class="built_in">str</span>(<span class="built_in">int</span>(time.time()))+<span class="string">&quot;.000000|&quot;</span>+deviceid</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des_encrypt_cbc</span>(<span class="params">plaintext,key,iv</span>):</span><br><span class="line">    cipher = DES3.new(key,DES3.MODE_CBC,iv)</span><br><span class="line">    padded_text = pad(plaintext,DES3.block_size)</span><br><span class="line">    encrypted_data = cipher.encrypt(padded_text)</span><br><span class="line">    <span class="keyword">return</span> encrypted_data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_udid</span>():</span><br><span class="line">    data =  g_data().encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    key = <span class="string">b&quot;appapiche168comappapiche&quot;</span></span><br><span class="line">    iv = <span class="string">b&quot;appapich&quot;</span></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(des_encrypt_cbc(data,key,iv)).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g_sign</span>(<span class="params">body</span>):</span><br><span class="line">    <span class="comment"># print(body)</span></span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&quot;W@oC!AH_6Ew1f6%8&quot;</span></span><br><span class="line">    sign_str =<span class="string">&quot;&quot;</span></span><br><span class="line">    sign_str+=<span class="built_in">str</span></span><br><span class="line">    sign_str+=<span class="string">&quot;_appid&quot;</span></span><br><span class="line">    sign_str+=body[<span class="string">&quot;_appid&quot;</span>]</span><br><span class="line">    sign_str+=<span class="string">&quot;appversion&quot;</span></span><br><span class="line">    sign_str+=body[<span class="string">&quot;appversion&quot;</span>]</span><br><span class="line">    sign_str+=<span class="string">&quot;channelid&quot;</span></span><br><span class="line">    sign_str+=body[<span class="string">&quot;channelid&quot;</span>]</span><br><span class="line">    sign_str+=<span class="string">&quot;pwd&quot;</span></span><br><span class="line">    sign_str+=body[<span class="string">&quot;pwd&quot;</span>]</span><br><span class="line">    sign_str+=<span class="string">&quot;signkey&quot;</span></span><br><span class="line">    sign_str+=<span class="string">&quot;type&quot;</span></span><br><span class="line">    sign_str+=<span class="string">&quot;udid&quot;</span></span><br><span class="line">    sign_str+=body[<span class="string">&quot;udid&quot;</span>]</span><br><span class="line">    sign_str+=<span class="string">&quot;username&quot;</span></span><br><span class="line">    sign_str+=body[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">    sign_str+=<span class="built_in">str</span></span><br><span class="line">    <span class="comment"># print(sign_str)</span></span><br><span class="line">    sign = md5_call(sign_str)</span><br><span class="line">    <span class="keyword">return</span> sign.upper()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://dealercloudapi.che168.com/tradercloud/sealed/login/login.ashx&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">&quot;cache-control&quot;</span>: <span class="string">&quot;public, max-age=0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;traceid&quot;</span>: <span class="string">&quot;atc.android_75ca194d-982a-4c62-9c0a-eb647fcfff77&quot;</span>,</span><br><span class="line">  <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">  <span class="string">&quot;content-length&quot;</span>: <span class="string">&quot;275&quot;</span>,</span><br><span class="line">  <span class="string">&quot;accept-encoding&quot;</span>: <span class="string">&quot;gzip&quot;</span>,</span><br><span class="line">  <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;okhttp/3.14.9&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body = &#123;</span><br><span class="line">  <span class="string">&quot;_appid&quot;</span>: <span class="string">&quot;atc.android&quot;</span>,</span><br><span class="line"><span class="comment">#   &quot;_sign&quot;: &quot;821E3885B2FC914FBFAD687399B650E7&quot;,</span></span><br><span class="line">  <span class="string">&quot;appversion&quot;</span>: <span class="string">&quot;3.71.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;channelid&quot;</span>: <span class="string">&quot;csy&quot;</span>,</span><br><span class="line"><span class="comment">#   &quot;pwd&quot;: &quot;25d55ad283aa400af464c76d713c07ad&quot;,</span></span><br><span class="line">  <span class="string">&quot;signkey&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="comment">#   &quot;udid&quot;: &quot;aYU5PJ/U/aR1iOFu+Rd2HB7mst8DN5YX+4ft9CvXkL/YCpKYH4gg9+MiTNly tCkk7g9hVsWqMGbruaIqoS6K5A==&quot;,</span></span><br><span class="line"><span class="comment">#   &quot;username&quot;: &quot;18888888888&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;Please input username:&quot;</span>)</span><br><span class="line">pwd = <span class="built_in">input</span>(<span class="string">&quot;Please input pwd:&quot;</span>)</span><br><span class="line">body[<span class="string">&quot;username&quot;</span>] = username</span><br><span class="line">body[<span class="string">&quot;pwd&quot;</span>] = g_pwd(pwd)</span><br><span class="line">body[<span class="string">&quot;udid&quot;</span>] = g_udid()</span><br><span class="line">sign = g_sign(body)</span><br><span class="line">body[<span class="string">&quot;_sign&quot;</span>] = sign</span><br><span class="line"></span><br><span class="line">response = requests.post(url=url,headers=headers,data=body)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Unidbg"><a href="#Unidbg" class="headerlink" title="Unidbg"></a>Unidbg</h1><h2 id="调用get3desKey-方法"><a href="#调用get3desKey-方法" class="headerlink" title="调用get3desKey()方法"></a>调用get3desKey()方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MainActivity 继承 AbstractJni，通过 JNI (Java Native Interface) 与本地代码交互。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 声明用于安卓模拟器、内存和虚拟机（VM）设置的对象。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">process</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 进程名称（可以后续设置）。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，用于初始化模拟器、内存和虚拟机（VM）。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MainActivity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个 64 位的安卓模拟器实例。</span></span><br><span class="line">        emulator = AndroidEmulatorBuilder</span><br><span class="line">                .for64Bit() <span class="comment">// 如果需要可以使用 for32Bit()。</span></span><br><span class="line">                .setProcessName(process) <span class="comment">// 设置模拟器的进程名称。</span></span><br><span class="line">                .addBackendFactory(<span class="keyword">new</span> <span class="title class_">Unicorn2Factory</span>(<span class="literal">true</span>)) <span class="comment">// 添加后端工厂（Unicorn 引擎）。</span></span><br><span class="line">                .build(); <span class="comment">// 构建模拟器。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取模拟器的内存。</span></span><br><span class="line">        memory = emulator.getMemory();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置库解析器，指定安卓版本为 23（安卓 6.0 Marshmallow）。</span></span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用指定的 APK 文件创建虚拟机（Dalvik VM）。</span></span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/java/com/chezhiying/getkey/chezhiying_3.71.0.apk&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置 JNI，以便与本地方法交互。</span></span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 加载模拟器所需的本地库（native-lib）。</span></span><br><span class="line">        vm.loadLibrary(<span class="string">&quot;native-lib&quot;</span>, <span class="literal">true</span>); <span class="comment">// 第二个参数指定是否动态加载该库。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 JNI 和模拟器获取 3DES 密钥的方法。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getkey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 解析 APK 中的 CheckSignUtil 类，用于调用其方法。</span></span><br><span class="line">        <span class="type">DvmClass</span> <span class="variable">CheckSignUtilClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.autohome.ahkit.jni.CheckSignUtil&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 指定 get3desKey 方法的签名。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> <span class="string">&quot;get3desKey(Landroid/content/Context;)Ljava/lang/String;&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用 CheckSignUtil 类中的静态方法 get3desKey，传递一个空的 Context 对象。</span></span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">stringObject</span> <span class="operator">=</span> CheckSignUtilClass.callStaticJniMethodObject(emulator, method, vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="literal">null</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从返回的 StringObject 中获取字符串结果。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resultstring</span> <span class="operator">=</span> stringObject.getValue();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 输出结果（即 3DES 密钥）。</span></span><br><span class="line">        System.out.println(resultstring);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// main 方法，用于启动模拟器、运行进程并调用 getkey 方法。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 MainActivity 实例，初始化模拟器和虚拟机。</span></span><br><span class="line">        <span class="type">MainActivity</span> <span class="variable">main</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MainActivity</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用 getkey 方法，获取 3DES 密钥。</span></span><br><span class="line">        main.getkey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">appapiche168comappapiche168comap</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>车智赢</tag>
      </tags>
  </entry>
  <entry>
    <title>随记</title>
    <url>/2025/02/06/%E9%9A%8F%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="工具站"><a href="#工具站" class="headerlink" title="工具站"></a>工具站</h1><p>文本处理：<a href="https://www.toolhelper.cn/Char/TextHandle">https://www.toolhelper.cn/Char/TextHandle</a></p>
<p>加解密：<a href="https://gchq.github.io/CyberChef/">https://gchq.github.io/CyberChef/</a></p>
<p>protobuf解析：<a href="https://protobuf-decoder.netlify.app/">Protobuf Decoder</a></p>
<h1 id="编程语言教程"><a href="#编程语言教程" class="headerlink" title="编程语言教程"></a>编程语言教程</h1><p><a href="https://liaoxuefeng.com/">廖雪峰的官方网站</a></p>
<p><a href="https://www.runoob.com/">菜鸟教程 - 学的不仅是技术，更是梦想！</a></p>
<h1 id="脱壳站"><a href="#脱壳站" class="headerlink" title="脱壳站"></a>脱壳站</h1><p><a href="https://56.al/">56.al</a></p>
<h1 id="脱壳机"><a href="#脱壳机" class="headerlink" title="脱壳机"></a>脱壳机</h1><p><a href="https://github.com/Youlor/Youpk">https://github.com/Youlor/Youpk</a></p>
<h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><h2 id="hook-okhttp"><a href="#hook-okhttp" class="headerlink" title="hook okhttp"></a>hook okhttp</h2><p><a href="https://github.com/siyujie/OkHttpLogger-Frida">GitHub - siyujie&#x2F;OkHttpLogger-Frida: Frida 实现拦截okhttp的脚本</a></p>
<h1 id="frida-dump"><a href="#frida-dump" class="headerlink" title="frida_dump"></a>frida_dump</h1><p><a href="https://github.com/lasting-yang/frida_dump">https://github.com/lasting-yang/frida_dump</a></p>
<h1 id="Unidbg"><a href="#Unidbg" class="headerlink" title="Unidbg"></a>Unidbg</h1><p><a href="https://blog.csdn.net/m0_68075044/article/details/130156575">龙哥unidbg基础入门_unidbg入门-CSDN博客</a></p>
<h1 id="安卓逆向这档事"><a href="#安卓逆向这档事" class="headerlink" title="安卓逆向这档事"></a>安卓逆向这档事</h1><p><a href="https://www.52pojie.cn/thread-1695141-1-1.html">《安卓逆向这档事》一、模拟器环境搭建 - 吾爱破解 - 52pojie.cn</a></p>
<p><a href="https://www.52pojie.cn/thread-1695796-1-1.html">《安卓逆向这档事》二、初识APK文件结构、双开、汉化、基础修 - 吾爱破解 - 52pojie.cn</a></p>
<p><a href="https://www.52pojie.cn/thread-1701353-1-1.html">《安卓逆向这档事》三、初识smali，vip终结者 - 吾爱破解 - 52pojie.cn</a></p>
<p><a href="https://www.52pojie.cn/thread-1706691-1-1.html">《安卓逆向这档事》四、恭喜你获得广告&amp;弹窗静默卡 - 吾爱破解 - 52pojie.cn</a></p>
<p><a href="https://www.52pojie.cn/thread-1714727-1-1.html">《安卓逆向这档事》五、1000-7&#x3D;？&amp;动态调试&amp;Log插桩 - 吾爱破解 - 52pojie.cn</a></p>
<p><a href="https://www.52pojie.cn/thread-1731181-1-1.html">《安卓逆向这档事》六、校验的N次方-签名校验对抗、PM代{过}{滤}理、IO重定向 - 吾爱破解 - 52pojie.cn</a></p>
<p><a href="https://www.52pojie.cn/thread-1740944-1-1.html">《安卓逆向这档事》七、Sorry，会Hook真的可以为所欲为-Xposed快速上手(上)模块编.. - 吾爱破解 - 52pojie.cn</a></p>
<p><a href="https://www.52pojie.cn/thread-1748081-1-1.html">《安卓逆向这档事》八、Sorry，会Hook真的可以为所欲为-xposed快速上手(下)快速hook - 吾爱破解 - 52pojie.cn</a></p>
<p><a href="https://www.52pojie.cn/thread-1762225-1-1.html">《安卓逆向这档事》九、密码学基础、算法自吐、非标准加密对抗 - 吾爱破解 - 52pojie.cn</a></p>
<p><a href="https://www.52pojie.cn/thread-1787667-1-1.html">《安卓逆向这档事》十、不是我说，有了IDA还要什么女朋友？ - 吾爱破解 - 52pojie.cn</a></p>
<h1 id="frida"><a href="#frida" class="headerlink" title="frida"></a>frida</h1><p><a href="https://kevinspider.github.io/frida/frida-hook-so/">分类: frida | 凡墙总是门</a></p>
<h1 id="可以下载旧版app的应用和网站"><a href="#可以下载旧版app的应用和网站" class="headerlink" title="可以下载旧版app的应用和网站"></a>可以下载旧版app的应用和网站</h1><p>豌豆荚</p>
<p>360手机助手</p>
<p><a href="https://apkpure.com/cn/">https://apkpure.com/cn/</a></p>
<p><a href="https://www.apkmirror.com/">https://www.apkmirror.com/</a></p>
<p><a href="https://apkcombo.app/zh/">APKCombo</a></p>
<h1 id="CSDN文章"><a href="#CSDN文章" class="headerlink" title="CSDN文章"></a>CSDN文章</h1><p><a href="https://blog.csdn.net/freeking101/article/details/108613033?spm=1001.2014.3001.5502">MT 管理器、NP 管理器_mt管理器论坛-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/freeking101/article/details/140722459?spm=1001.2014.3001.5502">爬虫 APP 逆向 —＞ 粉笔考研_爬取粉笔题库-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/freeking101/article/details/105109231?spm=1001.2014.3001.5502">安卓逆向_1 — 逆向环境、apk结构、apk打包、apk启动 (点击图标，APP加载流程)、smali_apk文件是什么语言写的-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/mochenangel/article/details/118099793">charles修改请求、响应的方式总结（多图很详细）_charles修改响应-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/xhmico/article/details/133852152?ops_request_misc=%7B%22request_id%22:%221e717632d241c936edb95d988b46a3b0%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=1e717632d241c936edb95d988b46a3b0&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-133852152-null-null.142%5Ev102%5Epc_search_result_base9&utm_term=fiddler&spm=1018.2226.3001.4187">Fiddler 的使用(详细教程)_fiddler使用教程-CSDN博客</a></p>
<h1 id="看雪"><a href="#看雪" class="headerlink" title="看雪"></a>看雪</h1><p>[<a href="https://bbs.kanxue.com/thread-252630.htm">原创]FART：ART环境下基于主动调用的自动化脱壳方案-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p>
<p>[<a href="https://bbs.kanxue.com/thread-272870.htm">原创]Android Hook技术学习——常见的Hook技术方案总结-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p>
<h1 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h1><p><a href="https://www.cnblogs.com/liuqingzheng">刘清政 - 博客园</a></p>
<p><a href="https://blog.seeflower.dev/page/10/">SeeFlowerX</a></p>
<p><a href="https://www.yuque.com/yihanhan-2kgh2/slx2ag#">《新零基础安卓逆向笔记》</a></p>
<p><a href="https://eternalsakura13.com/categories/">Sakura</a></p>
<p><a href="https://mp.weixin.qq.com/s/86kCXf3TiG-KtcIRHXRDTA">二手程序员Notion</a></p>
<p><a href="https://www.lyldalek.top/">二手程序员博客</a></p>
<p><a href="http://gityuan.com/2016/03/26/app-process-create/">理解Android进程创建流程 - Gityuan博客 | 袁辉辉的技术博客</a></p>
<p><a href="http://gityuan.com/android/">Android 操作系统架构开篇 - Gityuan博客 | 袁辉辉的技术博客</a></p>
<p><a href="https://geekdaxue.co/books/hackdoors@cy0x13">《windows逆向大师之路》 - 极客文档</a></p>
<h1 id="安卓源码"><a href="#安卓源码" class="headerlink" title="安卓源码"></a>安卓源码</h1><p><a href="http://androidxref.com/">http://androidxref.com</a></p>
<p><a href="http://aospxref.com/">AOSPXRef</a></p>
<p><a href="https://cs.android.com/android/platform/superproject/">https://cs.android.com/android/platform/superproject/</a></p>
<p><a href="https://www.androidos.net.cn/sourcecode">Android OS 在线源代码 - https://www.androidos.net.cn</a></p>
<p><a href="https://android.googlesource.com/platform/">platform&#x2F; - Git at Google</a></p>
<p><a href="https://armconverter.com/">Online ARM to HEX Converter</a></p>
<h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><p><a href="https://s5rxx58djb.feishu.cn/docx/CxQqd3Vs3oMEihxF7vYcjn0SnRc">面试资料 - 飞书云文档</a></p>
<h1 id="逆向实战案例文章"><a href="#逆向实战案例文章" class="headerlink" title="逆向实战案例文章"></a>逆向实战案例文章</h1><p><a href="https://mp.weixin.qq.com/s/aogufRIf6ybVkEPf25sxQw">瑞幸咖啡APP-白盒AES与MD5相关参数分析</a></p>
<p><a href="https://blog.csdn.net/m0_38098782/article/details/128930150">某咖啡逆向_瑞幸咖啡app逆向-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/xmx_000/article/details/137057088">某幸咖啡 “标准“白盒AES+sign_unidbg太慢-CSDN博客</a></p>
<p><a href="https://www.52pojie.cn/thread-2001103-1-1.html">某幸咖啡协议算法 - 吾爱破解 - 52pojie.cn</a></p>
<p><a href="https://blog.csdn.net/weixin_40306397/article/details/140721458">学习luckin coffee 过程_瑞幸sign-CSDN博客</a></p>
<p>[<a href="https://bbs.kanxue.com/thread-285929.htm">分享]某内容分享平台最新shield字段分析-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p>
<p>[<a href="https://bbs.kanxue.com/thread-284570.htm">原创]shopee app算法分析第一篇-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p>
<p><a href="https://bbs.kanxue.com/thread-281610.htm">最新版shield纯算分析-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p>
<h1 id="Linux系统调用表"><a href="#Linux系统调用表" class="headerlink" title="Linux系统调用表"></a>Linux系统调用表</h1><p><a href="https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md">Chromium OS Docs - Linux System Call Table</a></p>
<h1 id="Python处理protobuf"><a href="#Python处理protobuf" class="headerlink" title="Python处理protobuf"></a>Python处理protobuf</h1><p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install blackboxprotobuf</span><br></pre></td></tr></table></figure>

<h2 id="解析protobuf"><a href="#解析protobuf" class="headerlink" title="解析protobuf"></a>解析protobuf</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> blackboxprotobuf</span><br><span class="line"></span><br><span class="line">hx = <span class="string">&quot;xxxx&quot;</span></span><br><span class="line"></span><br><span class="line">data = blackboxprotobuf.decode_message(<span class="built_in">bytes</span>.fromhex(hx))</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure>

<h2 id="组装protobuf"><a href="#组装protobuf" class="headerlink" title="组装protobuf"></a>组装protobuf</h2>]]></content>
      <categories>
        <category>见多识广</category>
      </categories>
      <tags>
        <tag>随记</tag>
      </tags>
  </entry>
  <entry>
    <title>高效率工具集合</title>
    <url>/2025/01/08/%E9%AB%98%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h1><p>一个强大的文件搜索工具，快速定位计算机上的文件和文件夹。</p>
<h1 id="Snipast"><a href="#Snipast" class="headerlink" title="Snipast"></a>Snipast</h1><p>一个简单但强大的截图工具，也可以让你将截图贴回到屏幕上！</p>
<ul>
<li><code>F1</code>截图</li>
<li>按下<code>F1</code>，再按下<code>F3</code>，截图就可以在桌面置顶显示</li>
</ul>
<h1 id="PixPin"><a href="#PixPin" class="headerlink" title="PixPin"></a>PixPin</h1><p>随心截图, 随意贴图。</p>
<p>屏幕截图，录制屏幕，长截图，文字识别，贴图，以及更多功能。</p>
<h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><p>一款 Markdown 编辑器和阅读器。</p>
<h1 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h1><p>轻量级代码编辑器。</p>
<h1 id="PotPlayer"><a href="#PotPlayer" class="headerlink" title="PotPlayer"></a>PotPlayer</h1><p>一款免费的多媒体播放器，支持各种视频编解码器和格式。</p>
<h1 id="Maye-Lite"><a href="#Maye-Lite" class="headerlink" title="Maye Lite"></a>Maye Lite</h1><p>简洁的快速启动工具。</p>
<h1 id="IDM"><a href="#IDM" class="headerlink" title="IDM"></a>IDM</h1><p>下载加速器。</p>
<h1 id="SpaceSniffer"><a href="#SpaceSniffer" class="headerlink" title="SpaceSniffer"></a>SpaceSniffer</h1><p>一款免费且便携的磁盘空间分析工具。</p>
<h1 id="Xmind"><a href="#Xmind" class="headerlink" title="Xmind"></a>Xmind</h1><p>思维导图软件。</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li><p><strong>Ctrl+N</strong></p>
<p>  新建思维导图</p>
</li>
<li><p><strong>Ctrl+O</strong></p>
<p>  打开思维导图</p>
</li>
<li><p><strong>Ctrl+T</strong></p>
<p>  新建标签页面</p>
</li>
<li><p><strong>Tab</strong></p>
<p>  添加子主题</p>
</li>
<li><p><strong>Ctrl+Shift</strong></p>
<p>  添加父主题</p>
</li>
<li><p><strong>Enter&#x2F;Shift Enter</strong></p>
<p>  插入主题</p>
</li>
</ul>
<h1 id="Cyberchef"><a href="#Cyberchef" class="headerlink" title="Cyberchef"></a>Cyberchef</h1><p>CyberChef 是一个功能强大的在线工具，用于执行各种数据处理和分析任务，特别适用于安全研究、数字取证、密码学分析、数据转换和加密解密等方面。</p>
<h1 id="浏览器拓展插件"><a href="#浏览器拓展插件" class="headerlink" title="浏览器拓展插件"></a>浏览器拓展插件</h1><h2 id="ADGUARD"><a href="#ADGUARD" class="headerlink" title="ADGUARD"></a>ADGUARD</h2><p>广告拦截器</p>
<h2 id="网盘直链下载助手"><a href="#网盘直链下载助手" class="headerlink" title="网盘直链下载助手"></a>网盘直链下载助手</h2><p>可以在web端下载网盘文件</p>
<h1 id="逆向工具"><a href="#逆向工具" class="headerlink" title="逆向工具"></a>逆向工具</h1><h2 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h2><p>反编译工具</p>
<h2 id="Magisk"><a href="#Magisk" class="headerlink" title="Magisk"></a>Magisk</h2><p>面具</p>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>movecert</p>
<p>Shamiko</p>
<h3 id="lsposed"><a href="#lsposed" class="headerlink" title="lsposed"></a>lsposed</h3><p>JustTrustMe</p>
<p>JustMePlush</p>
<p>TrustMeAlready</p>
<h2 id="Kitsune-Magisk"><a href="#Kitsune-Magisk" class="headerlink" title="Kitsune Magisk"></a>Kitsune Magisk</h2><p>狐妖面具</p>
<h2 id="SocksDroid"><a href="#SocksDroid" class="headerlink" title="SocksDroid"></a>SocksDroid</h2><p><a href="https://github.com/PeterCxy/SocksDroid">GitHub - PeterCxy&#x2F;SocksDroid</a></p>
<h2 id="WIFI-ADB"><a href="#WIFI-ADB" class="headerlink" title="WIFI ADB"></a>WIFI ADB</h2><h2 id="ProxyPin"><a href="#ProxyPin" class="headerlink" title="ProxyPin"></a>ProxyPin</h2><h2 id="MT管理器"><a href="#MT管理器" class="headerlink" title="MT管理器"></a>MT管理器</h2><h2 id="算法助手"><a href="#算法助手" class="headerlink" title="算法助手"></a>算法助手</h2><h2 id="dump-so"><a href="#dump-so" class="headerlink" title="dump_so"></a>dump_so</h2><p><a href="https://github.com/SeeFlowerX/frida_dump">https://github.com/SeeFlowerX/frida_dump</a></p>
]]></content>
      <categories>
        <category>高效率工具合集</category>
      </categories>
      <tags>
        <tag>高效率工具合集</tag>
      </tags>
  </entry>
  <entry>
    <title>高数</title>
    <url>/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<h1 id="函数与极限"><a href="#函数与极限" class="headerlink" title="函数与极限"></a>函数与极限</h1><h2 id="映射与函数"><a href="#映射与函数" class="headerlink" title="映射与函数"></a>映射与函数</h2><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p><strong>映射的概念</strong></p>
<p>映射类似于一种对应关系，把一个集合中的元素对应到另一个集合里的元素。比如说，集合A里的每个元素，通过某种规则，对应到集合B里的一个元素，这种对应关系就是映射。</p>
<p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/1.jpg"></p>
<p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/7.jpg"></p>
<p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/2.jpg"></p>
<p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/3.jpg"></p>
<p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/4.jpg"></p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/5.jpg"></p>
<p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/6.jpg"></p>
<p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/8.jpg"></p>
<p><strong>例1</strong></p>
<p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/9.jpg"></p>
<p><strong>例2</strong></p>
<p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/10.jpg"></p>
<p><strong>例3</strong></p>
<p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/11.jpg"></p>
<h4 id="函数的几种特性"><a href="#函数的几种特性" class="headerlink" title="函数的几种特性"></a>函数的几种特性</h4><h5 id="有界性"><a href="#有界性" class="headerlink" title="有界性"></a>有界性</h5><p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/12.jpg"></p>
<p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/13.jpg"></p>
<h5 id="单调性"><a href="#单调性" class="headerlink" title="单调性"></a>单调性</h5><p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/14.jpg"></p>
<p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/15.jpg"></p>
<h5 id="奇偶性"><a href="#奇偶性" class="headerlink" title="奇偶性"></a>奇偶性</h5><p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/16.jpg"></p>
<p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/17.jpg"></p>
<p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/18.jpg"></p>
<h5 id="周期性"><a href="#周期性" class="headerlink" title="周期性"></a>周期性</h5><p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/19.jpg"></p>
<h4 id="反函数与复合函数"><a href="#反函数与复合函数" class="headerlink" title="反函数与复合函数"></a>反函数与复合函数</h4><p><strong>反函数</strong></p>
<p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/20.jpg"></p>
<p><strong>复合函数</strong></p>
<p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/21.jpg"></p>
<h4 id="函数的运算"><a href="#函数的运算" class="headerlink" title="函数的运算"></a>函数的运算</h4><p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/22.jpg"></p>
<h4 id="初等函数"><a href="#初等函数" class="headerlink" title="初等函数"></a>初等函数</h4><p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/23.jpg"></p>
<h2 id="数列的极限"><a href="#数列的极限" class="headerlink" title="数列的极限"></a>数列的极限</h2><h3 id="数列的定义"><a href="#数列的定义" class="headerlink" title="数列的定义"></a>数列的定义</h3><p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/24.jpg"></p>
<p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/25.jpg"></p>
<h3 id="极限的定义"><a href="#极限的定义" class="headerlink" title="极限的定义"></a>极限的定义</h3><p><img src="/2025/01/29/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/26.jpg"></p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>高数</tag>
      </tags>
  </entry>
</search>
