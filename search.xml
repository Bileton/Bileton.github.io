<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AndroidDemo Hook案例</title>
    <url>/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.example.androiddemo</p>
<h1 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h1><p>一个登录界面</p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/1.jpg"></p>
<p>把apk丢进jadx进行分析</p>
<p>查看<code>AndroidManifest.xml</code>文件</p>
<p>程序启动的第一个<code>Activity</code>是<code>com.example.androiddemo.Activity.LoginActivity</code></p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/2.jpg"></p>
<h2 id="LoginActivity"><a href="#LoginActivity" class="headerlink" title="LoginActivity"></a>LoginActivity</h2><p>如下，调用了一个<code>a</code>方法来对用户名和密码进行校验</p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/3.jpg"></p>
<h3 id="a"><a href="#a" class="headerlink" title="a"></a>a</h3><p>如下，对<code>Username</code>进行了一次<code>HmacSHA256</code>签名</p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/4.jpg"></p>
<p>当<code>Username</code>的<code>HmacSHA256</code>签名与<code>Password</code>相同时，可以登录成功。</p>
<h3 id="hook-a"><a href="#hook-a" class="headerlink" title="hook a"></a>hook a</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">LoginActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.androiddemo.Activity.LoginActivity&quot;</span>)</span><br><span class="line">        <span class="title class_">LoginActivity</span>.<span class="property">a</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">str1,str2</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str1:&quot;</span>,str1);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str2:&quot;</span>,str2);</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">a</span>(str1,str2);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>,result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_a</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bileton</span><br><span class="line">77cd249b2fa536da37dcd3fc6993fe94aefb61a70328aa4cd12984a053f6a7c3</span><br></pre></td></tr></table></figure>

<p>登录成功</p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/5.jpg"></p>
<h2 id="进入下一关"><a href="#进入下一关" class="headerlink" title="进入下一关"></a>进入下一关</h2><p>点击进入下一关，会出现<code>Check Failed</code></p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/6.jpg"></p>
<h2 id="FridaActivity1"><a href="#FridaActivity1" class="headerlink" title="FridaActivity1"></a>FridaActivity1</h2><p>查看源码，得知点击登录之后，会进入<code>FridaActivity1</code></p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/7.jpg"></p>
<p>如下是<code>FridaActivity1</code>的内容</p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/9.jpg"></p>
<p>绕过方式很简单，可以直接修改<code>a</code>方法的返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">FridaActivity1</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.androiddemo.Activity.FridaActivity1&quot;</span>);</span><br><span class="line">        <span class="title class_">FridaActivity1</span>.<span class="property">a</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">a</span>(data);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>,result)</span><br><span class="line">            result =  <span class="string">&quot;R4jSLLLLLLLLLLOrLE7/5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL=&quot;</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced result:&quot;</span>,result)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_a</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">result: R4jSLLLLLLLLLRknplkBpZDpis69kh7i+YAPTmMn2ABsOLLLLL==</span><br><span class="line">replaced result: R4jSLLLLLLLLLLOrLE7/5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL=</span><br></pre></td></tr></table></figure>

<p>还有另一种绕过方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">FridaActivity1</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.androiddemo.Activity.FridaActivity1&quot;</span>);</span><br><span class="line">        <span class="title class_">FridaActivity1</span>.<span class="property">a</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">original_data</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;original_data:&quot;</span>,original_data);</span><br><span class="line">            <span class="keyword">var</span> my_data = <span class="title class_">FridaActivity1</span>.<span class="title function_">b</span>(<span class="string">&quot;bileton&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data:&quot;</span>,my_data);</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">a</span>(my_data);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>,result);</span><br><span class="line">            result =  <span class="string">&quot;R4jSLLLLLLLLLLOrLE7/5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL=&quot;</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced result:&quot;</span>,result)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_a</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">original_data: 31,-117,8,0,0,0,0,0,0,0,123,-79,126,-5,-117,125,-109,-97,-74,46,125,-70,-66,-19,-7,-126,70,43,0,-15,-40,-110,-30,16,0,0,0</span><br><span class="line">data: 31,-117,8,0,0,0,0,0,0,0,75,-54,-52,73,45,-55,-49,3,0,-26,-70,19,-27,7,0,0,0</span><br><span class="line">result: R4jSLLLLLLLLLOlTzOuiyc8MLDa5O+URLLLL</span><br><span class="line">replaced result: R4jSLLLLLLLLLLOrLE7/5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL=</span><br></pre></td></tr></table></figure>

<p>进入到了第二关</p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/8.jpg"></p>
<h1 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h1><p>第一关结束跳转到了<code>FridaActivity2</code></p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/10.jpg"></p>
<p>需要把<code>static_bool_var</code>和<code>bool_var</code>的值都修改为<code>true</code>才能进入<code>FridaActivity3</code></p>
<p>这里可以主动调用<code>setStatic_bool_var</code>方法和<code>setBool_var</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_activity2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">FridaActivity2</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.androiddemo.Activity.FridaActivity2&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;static_bool_var:&quot;</span>,<span class="title class_">FridaActivity2</span>.<span class="property">static_bool_var</span>.<span class="property">value</span>);</span><br><span class="line">        <span class="title class_">FridaActivity2</span>.<span class="title function_">setStatic_bool_var</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced_static_bool_var:&quot;</span>,<span class="title class_">FridaActivity2</span>.<span class="property">static_bool_var</span>.<span class="property">value</span>);</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.example.androiddemo.Activity.FridaActivity2&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj.bool_var:&quot;</span>,obj.<span class="property">bool_var</span>.<span class="property">value</span>);</span><br><span class="line">                obj.<span class="title function_">setBool_var</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced_obj.bool_var:&quot;</span>,obj.<span class="property">bool_var</span>.<span class="property">value</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static_bool_var: false</span><br><span class="line">replaced_static_bool_var: true</span><br><span class="line">obj.bool_var: false</span><br><span class="line">replaced_obj.bool_var: true</span><br></pre></td></tr></table></figure>

<p>点击进入第三关</p>
<h1 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h1><p>第二关结束跳转到了<code>FridaActivity3</code></p>
<p><img src="/2025/01/15/AndroidDemo-Hook%E6%A1%88%E4%BE%8B/11.jpg"></p>
<p>需要把<code>static_bool_var</code>、<code>bool_var</code>、<code>same_name_bool_var</code>三个值都设置为<code>true</code>才能进入<code>FridaActivity4</code></p>
<p>这里存在一个坑点是存在一个与字段名<code>same_name_bool_var</code>相同的方法名<code>same_name_bool_var</code>，操作字段名的话需要在其名字前面加上一个<code>_</code>，即<code>_same_name_bool_var</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_activity3</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">FridaActivity3</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.androiddemo.Activity.FridaActivity3&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;static_bool_var:&quot;</span>,<span class="title class_">FridaActivity3</span>.<span class="property">static_bool_var</span>.<span class="property">value</span>);</span><br><span class="line">    <span class="title class_">FridaActivity3</span>.<span class="property">static_bool_var</span>.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced_static_bool_var:&quot;</span>,<span class="title class_">FridaActivity3</span>.<span class="property">static_bool_var</span>.<span class="property">value</span>);</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.example.androiddemo.Activity.FridaActivity3&quot;</span>,&#123;</span><br><span class="line">        <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj.bool_var:&quot;</span>,obj.<span class="property">bool_var</span>.<span class="property">value</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj._same_name_bool_var:&quot;</span>,obj.<span class="property">_same_name_bool_var</span>.<span class="property">value</span>);</span><br><span class="line">            obj.<span class="property">bool_var</span>.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">            obj.<span class="property">_same_name_bool_var</span>.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced_obj.bool_var:&quot;</span>,obj.<span class="property">bool_var</span>.<span class="property">value</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replaced_obj._same_name_bool_var:&quot;</span>,obj.<span class="property">_same_name_bool_var</span>.<span class="property">value</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static_bool_var: false</span><br><span class="line">replaced_static_bool_var: true</span><br><span class="line">obj.bool_var: false</span><br><span class="line">obj._same_name_bool_var: false</span><br><span class="line">replaced_obj.bool_var: true</span><br><span class="line">replaced_obj._same_name_bool_var: true</span><br></pre></td></tr></table></figure>

<p>点击进入第四关</p>
<h1 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h1><p>第三关结束跳转到了<code>FridaActivity4</code></p>
<p>如下是第四关的源代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FridaActivity4</span> <span class="keyword">extends</span> <span class="title class_">BaseFridaActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// com.example.androiddemo.Activity.BaseFridaActivity</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNextCheckTitle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;当前第4关&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClasses</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check1</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check2</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check3</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check4</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check5</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check6</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">InnerClasses</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// com.example.androiddemo.Activity.BaseFridaActivity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCheck</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (InnerClasses.check1() &amp;&amp; InnerClasses.check2() &amp;&amp; InnerClasses.check3() &amp;&amp; InnerClasses.check4() &amp;&amp; InnerClasses.check5() &amp;&amp; InnerClasses.check6()) &#123;</span><br><span class="line">            CheckSuccess();</span><br><span class="line">            startActivity(<span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="built_in">this</span>, (Class&lt;?&gt;) FridaActivity5.class));</span><br><span class="line">            finishActivity(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.CheckFailed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里出现了内部类，需要把内部类中的方法返回值都设置为<code>true</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_activity4</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">InnerClasses</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.androiddemo.Activity.FridaActivity4$InnerClasses&quot;</span>);</span><br><span class="line">    <span class="title class_">InnerClasses</span>.<span class="property">check1</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">InnerClasses</span>.<span class="property">check2</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">InnerClasses</span>.<span class="property">check3</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">InnerClasses</span>.<span class="property">check4</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">InnerClasses</span>.<span class="property">check5</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">InnerClasses</span>.<span class="property">check6</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击进入第五关</p>
<h1 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h1><p>第四关结束跳转到了<code>FridaActivity5</code></p>
]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>AndroidDemo</tag>
      </tags>
  </entry>
  <entry>
    <title>ARM汇编</title>
    <url>/2024/12/16/ARM%E6%B1%87%E7%BC%96/</url>
    <content><![CDATA[<h1 id="ARM架构"><a href="#ARM架构" class="headerlink" title="ARM架构"></a>ARM架构</h1><p>ARM是一种精简指令集计算机架构（处理器架构）。</p>
<h2 id="ARMv8-A"><a href="#ARMv8-A" class="headerlink" title="ARMv8-A"></a>ARMv8-A</h2><p>Armv8-A架构支持处理器同时运行64位和32位程序，处理器在AArch64执行状态下运行64位程序，在AArch32执行状态下运行32位程序。</p>
<h2 id="指令集架构"><a href="#指令集架构" class="headerlink" title="指令集架构"></a>指令集架构</h2><h3 id="AArch64（64位模式）"><a href="#AArch64（64位模式）" class="headerlink" title="AArch64（64位模式）"></a>AArch64（64位模式）</h3><p>引入了新的指令集，<strong>A64指令集</strong>，由32位宽的指令组成。</p>
<h3 id="AArch32（32位模式）"><a href="#AArch32（32位模式）" class="headerlink" title="AArch32（32位模式）"></a>AArch32（32位模式）</h3><p>向后兼容32位的ARMv7-A指令集。</p>
<p>支持<strong>ARM指令集</strong>（固定32位指令长度）和<strong>Thumb指令集</strong>（16位和32位混合指令长度），称为<strong>A32</strong>和<strong>T32</strong>指令集	。</p>
<p>ARMv8-A的双模式设计实现了从32位到64位的过渡。</p>
<h2 id="AArch64执行状态"><a href="#AArch64执行状态" class="headerlink" title="AArch64执行状态"></a>AArch64执行状态</h2><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><ul>
<li><p>A64共有32个64位寄存器（X0到X30）。</p>
</li>
<li><p>每个寄存器均支持 64 位和 32 位访问（例如 <code>X0</code> 和 <code>W0</code> 分别表示寄存器的高 64 位和低 32 位部分）。</p>
</li>
</ul>
<p><strong>Arm架构程序调用标准</strong></p>
<ul>
<li>X0~X7是参数寄存器，传递参数并返回结果。</li>
<li>X8用于传递间接结果的地址位置。</li>
<li>X9~X15是调用者保存的临时寄存器。</li>
<li>X16~X18是子程序内调用临时寄存器。</li>
<li>X19~X28是被调用者保存的寄存器。</li>
<li>X29用作栈帧寄存器（FP），跟踪栈帧。</li>
<li>X30用作链接寄存器（LR），保存函数返回地址。</li>
</ul>
<h2 id><a href="#" class="headerlink" title></a></h2><table>
<thead>
<tr>
<th>寄存器</th>
<th>名称</th>
<th>寄存器宽度</th>
</tr>
</thead>
<tbody><tr>
<td>PC</td>
<td>程序计数器</td>
<td>64位</td>
</tr>
<tr>
<td>SP</td>
<td>栈指针寄存器</td>
<td>64位</td>
</tr>
<tr>
<td>WSP</td>
<td>栈指针寄存器</td>
<td>32位</td>
</tr>
<tr>
<td>XZR</td>
<td>零寄存器</td>
<td>64位</td>
</tr>
<tr>
<td>WZR</td>
<td>零寄存器</td>
<td>32位</td>
</tr>
<tr>
<td>LR（X30）</td>
<td>链接寄存器</td>
<td>64位</td>
</tr>
<tr>
<td>ELR</td>
<td>异常链接寄存器</td>
<td>64位</td>
</tr>
<tr>
<td>PSTATE</td>
<td>程序状态寄存器</td>
<td>64位</td>
</tr>
<tr>
<td>SPSR_ELx</td>
<td>保存进程状态寄存器</td>
<td>32位</td>
</tr>
</tbody></table>
<ul>
<li><strong>程序计数器</strong></li>
</ul>
<p>​	PC保存当前指令的地址。所有指令在加载之前都必须从PC引用的内存位置加载。</p>
<ul>
<li><strong>栈指针</strong></li>
</ul>
<p>​	SP用于跟踪当前线程的栈位置，通常指向该线程栈的逻辑“顶部”。</p>
<ul>
<li><strong>零寄存器</strong></li>
</ul>
<p>​	它被定义为始终保存0值。</p>
<ul>
<li><strong>链接寄存器</strong></li>
</ul>
<p>​	它主要用于存储调用函数时的返回地址。</p>
<ul>
<li><strong>栈帧指针</strong></li>
</ul>
<p>​	跟踪栈帧。</p>
<h2 id="AArch32执行状态"><a href="#AArch32执行状态" class="headerlink" title="AArch32执行状态"></a>AArch32执行状态</h2><h3 id="寄存器-1"><a href="#寄存器-1" class="headerlink" title="寄存器"></a>寄存器</h3><ul>
<li><p>16 个 32 位通用寄存器（<code>R0</code> 到 <code>R15</code>）。</p>
</li>
<li><p>PC（程序计数器）占用 <code>R15</code>，<code>R14</code> 通常作为链接寄存器（LR），<code>R13</code> 通常作为栈指针（SP）。</p>
</li>
</ul>
<h1 id="数据处理指令"><a href="#数据处理指令" class="headerlink" title="数据处理指令"></a>数据处理指令</h1><p><strong>指令的基本语法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;操作码&gt; &lt;目标寄存器&gt;, &lt;操作数1&gt;, &lt;操作数2&gt;</span><br><span class="line"></span><br><span class="line">&lt;操作码&gt;：指令的操作代码，决定了具体的功能（如加法、减法、逻辑操作等）。</span><br><span class="line">&lt;目标寄存器&gt;：结果存储的目标寄存器。</span><br><span class="line">&lt;操作数1&gt; 和 &lt;操作数2&gt;：参与运算的两个操作数，可以是寄存器或立即数。</span><br></pre></td></tr></table></figure>

<ul>
<li>在A32&#x2F;T32指令中目标寄存器表示为Rd</li>
<li>在A64指令中目标寄存器表示为Xd或Wd</li>
<li>在A32&#x2F;T32指令中输入寄存器表示为Rm、Rn或Ra</li>
<li>在A64指令中输入寄存器表示为Xn或Xm</li>
</ul>
<h2 id="条件标志位"><a href="#条件标志位" class="headerlink" title="条件标志位"></a>条件标志位</h2><ul>
<li><p><strong>N</strong>(Negative)：</p>
<p>结果为负数，则值为1；</p>
<p>结果是正数或零，则值为0。</p>
</li>
<li><p><strong>Z</strong>(Zero)：</p>
<p>结果为 0，则值为1。</p>
<p>否则，值为0。</p>
</li>
<li><p><strong>C</strong>(Carry)：</p>
<p>如果结果产生了进位条件，则值为1；</p>
<p>否则，值为0。</p>
</li>
<li><p><strong>V</strong>(Overflow)：</p>
<p>如果指令结果导致溢出条件，则值为1。</p>
</li>
</ul>
<h2 id="算术指令"><a href="#算术指令" class="headerlink" title="算术指令"></a>算术指令</h2><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p>加法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add x0,x1,x2  ;x0=x1+x2</span><br></pre></td></tr></table></figure>

<h3 id="adds"><a href="#adds" class="headerlink" title="adds"></a>adds</h3><p>加法运算并更新条件标志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adds x0,x1,x2  ;x0=x1+x2 and set flags</span><br></pre></td></tr></table></figure>

<h3 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h3><p>减法</p>
<h3 id="mul"><a href="#mul" class="headerlink" title="mul"></a>mul</h3><p>乘法</p>
<h3 id="sdiv-udiv"><a href="#sdiv-udiv" class="headerlink" title="sdiv&#x2F;udiv"></a>sdiv&#x2F;udiv</h3><p>除法</p>
<h2 id="移位和循环移位"><a href="#移位和循环移位" class="headerlink" title="移位和循环移位"></a>移位和循环移位</h2><h3 id="lsl（Logical-Shift-Left）"><a href="#lsl（Logical-Shift-Left）" class="headerlink" title="lsl（Logical Shift Left）"></a>lsl（Logical Shift Left）</h3><p>逻辑左移，左移后相当于乘以 2 的若干次方。</p>
<p>将一个值的二进制位整体向左移动，用 <strong>0</strong> 填充右边空出的位，丢弃左边溢出的位。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsl r0,r1,#2  ;r0 = r1 &lt;&lt; 2</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add r0,r1,r2,lsl #2  ;r0 = r1 + (r2&lt;&lt;2)</span><br></pre></td></tr></table></figure>



<h3 id="lsr（Logical-Shift-Right）"><a href="#lsr（Logical-Shift-Right）" class="headerlink" title="lsr（Logical Shift Right）"></a>lsr（Logical Shift Right）</h3><p>逻辑右移，逻辑右移后，每位的值变成原来数值的 <strong>1&#x2F;2</strong>。</p>
<p>左侧空出的位用 0 填充，右侧移出的位被丢弃。</p>
<h3 id="asr（Arithmetic-Shift-Left）"><a href="#asr（Arithmetic-Shift-Left）" class="headerlink" title="asr（Arithmetic Shift Left）"></a>asr（Arithmetic Shift Left）</h3><p>算术右移</p>
<p>将一个值的二进制位整体向右移动。它与逻辑右移的主要区别在于，左侧空出的位用符号位填充（最高位的值，0 或 1），以保持数值的符号不变。</p>
<h3 id="ror（ROtate-Right）"><a href="#ror（ROtate-Right）" class="headerlink" title="ror（ROtate Right）"></a>ror（ROtate Right）</h3><p>循环右移</p>
<p>将一个二进制数的位向右移动指定的位数，并将被“移出”的位重新填充到左侧。</p>
<h3 id="rrx"><a href="#rrx" class="headerlink" title="rrx"></a>rrx</h3><p>带扩展的循环右移</p>
<p>在普通 <code>ROR</code> 的基础上，利用 <strong>进位标志位（C）</strong> 的值作为循环右移的高位，右移后最右侧的位会填入进位标志位（<code>C</code>）</p>
<ul>
<li>始终右移 1 位</li>
<li>进位标志位参与操作</li>
</ul>
<h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><h3 id="and"><a href="#and" class="headerlink" title="and"></a>and</h3><p>位与</p>
<h3 id="orr"><a href="#orr" class="headerlink" title="orr"></a>orr</h3><p>位或</p>
<h3 id="eor-xor"><a href="#eor-xor" class="headerlink" title="eor&#x2F;xor"></a>eor&#x2F;xor</h3><p>位异或</p>
<h2 id="条件指令"><a href="#条件指令" class="headerlink" title="条件指令"></a>条件指令</h2><h3 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a>cmp</h3><p>比较</p>
<h3 id="tst"><a href="#tst" class="headerlink" title="tst"></a>tst</h3><p>测试位</p>
<h2 id="移动指令"><a href="#移动指令" class="headerlink" title="移动指令"></a>移动指令</h2><h3 id="mov"><a href="#mov" class="headerlink" title="mov"></a>mov</h3><p>用于将值从一个寄存器传递到另一个寄存器，或者将一个立即数加载到目标寄存器。</p>
<h3 id="movz"><a href="#movz" class="headerlink" title="movz"></a>movz</h3><p>将一个 16 位立即数 加载到目标寄存器的指定位置，并将其他位清零。</p>
<h3 id="movk"><a href="#movk" class="headerlink" title="movk"></a>movk</h3><p>将一个 16 位立即数 加载到目标寄存器的指定位置，但保持寄存器中其他位的原值不变。</p>
<h3 id="movn"><a href="#movn" class="headerlink" title="movn"></a>movn</h3><p>将一个 16 位立即数的按位取反值 加载到目标寄存器的指定位置，并将其他位清零。</p>
<h1 id="内存访问指令"><a href="#内存访问指令" class="headerlink" title="内存访问指令"></a>内存访问指令</h1><h2 id="加载和存储指令"><a href="#加载和存储指令" class="headerlink" title="加载和存储指令"></a>加载和存储指令</h2><h3 id="LDR"><a href="#LDR" class="headerlink" title="LDR"></a>LDR</h3><p>从内存地址加载一个字（通常是32位）到指定的寄存器中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LDR R0, [R1]      ; 将内存地址R1中的值加载到寄存器R0</span><br><span class="line">LDR R2, [R3, #4]  ; 将R3 + 4地址中的值加载到寄存器R2</span><br></pre></td></tr></table></figure>

<h3 id="STR"><a href="#STR" class="headerlink" title="STR"></a>STR</h3><p>将寄存器中的数据存储到内存地址中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STR R0, [R1]      ; 将寄存器R0的值存储到R1指向的内存地址</span><br><span class="line">STR R2, [R3, #8]  ; 将R2的值存储到R3 + 8的内存地址</span><br></pre></td></tr></table></figure>

<h1 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h1><h2 id="分支指令"><a href="#分支指令" class="headerlink" title="分支指令"></a>分支指令</h2><h3 id="BL"><a href="#BL" class="headerlink" title="BL"></a>BL</h3><p><code>BL</code> 指令的主要作用是跳转到目标地址（Branch），同时将当前指令的下一条指令地址（即返回地址）保存到链接寄存器 **<code>LR</code>**中。</p>
]]></content>
      <categories>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>ARM汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>Android系统相关命令</title>
    <url>/2025/01/11/Android%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="getprop"><a href="#getprop" class="headerlink" title="getprop"></a>getprop</h1><p><code>getprop</code> 是 Android 系统中常用的命令，用于获取设备的属性值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getprop [属性名]</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>无参数</strong>: 直接运行 <code>getprop</code>，会列出系统中所有的属性及其值。</p>
</li>
<li><p><strong>指定属性名</strong>: 指定某个属性名时，会返回该属性的值。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getprop ro.debuggable	# 检查当前 Android 设备是否处于可调试模式。（0为不可调试）</span><br><span class="line">getprop ro.serialno		# 获取设备的序列号</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android系统</category>
      </categories>
      <tags>
        <tag>Android系统相关命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Android启动流程分析</title>
    <url>/2024/12/19/Android%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>本篇以从按下开机键开始至设备桌面图标出现进行分析。</p>
<h1 id="Bootloader"><a href="#Bootloader" class="headerlink" title="Bootloader"></a>Bootloader</h1><p>&emsp;​&emsp;长按开机键，设备通电，从Boot ROM开始，Boot ROM是芯片上的一段只读存储器，存储设备的启动代码，一般是固定的，用于检测基本硬件的存在，验证 Bootloader 的完整性和安全性，并加载BootLoader到RAM，将控制权移交给BootLoader。</p>
<p>&emsp;​&emsp;​BootLoader对硬件进行基本初始化，从存储设备中读取Android系统Linux内核镜像，通常是boot.img文件，将内核加载到内存中，并将控制权移交给内核。</p>
<h1 id="Linux内核启动"><a href="#Linux内核启动" class="headerlink" title="Linux内核启动"></a>Linux内核启动</h1><p>&emsp;​&emsp;内核启动后会完成复杂的硬件初始化并挂载根文件系统，然后执行第一个用户空间进程<code>init</code>，将控制权移交给<code>init</code>。</p>
<h1 id="init进程"><a href="#init进程" class="headerlink" title="init进程"></a>init进程</h1><p>&emsp;​&emsp;<code>init</code>是Android的第一个用户空间进程，它的PID为1。<code>init</code>解析<code>init.rc</code>脚本文件，定义系统初始化的行为等。</p>
<p>&emsp;​&emsp;启动Zygote进程，<code>Zygote</code>在<code>init.rc</code>文件中定义并通过<code>init</code>启动。</p>
<p>&emsp;​&emsp;<code>init</code>调用<code>/system/bin/app_process</code>可执行文件启动 ART（Android Runtime）或 Dalvik 虚拟机，并执行 <code>ZygoteInit.main()</code>来启动<code>Zygote</code>。</p>
<p>&emsp;​&emsp;<code>init</code>把控制权移交给了<code>Zygote</code>。</p>
<h1 id="Zygote进程"><a href="#Zygote进程" class="headerlink" title="Zygote进程"></a>Zygote进程</h1><p>&emsp;​&emsp;Zygote 是 Android 应用运行时环境的核心，加载虚拟机、类、系统资源，启动SystemServer进程。SystemServer进程是Zygote进程孵化的第一个进程。</p>
<p><strong>Zygote的任务</strong></p>
<p>&emsp;​&emsp;等待应用启动请求，接收请求后，fork() 创建子进程，所有的App进程都是由Zygote孵化而来的。</p>
<h1 id="SystemServer"><a href="#SystemServer" class="headerlink" title="SystemServer"></a>SystemServer</h1><p>&emsp;​&emsp;SystemServer是一个很重要的进程，系统里面重要的服务都是在这个进程里面开启的，比如ActivityManagerService、PackageManagerService、WindowManagerService，负责管理应用程序和系统资源。</p>
<h1 id="Launcher"><a href="#Launcher" class="headerlink" title="Launcher"></a>Launcher</h1><p>&emsp;​&emsp;当 <code>SystemServer</code> 启动完成后，Android 系统会启动第一个前台进程：Launcher。</p>
<p>&emsp;​&emsp;<code>ActivityManagerService</code> 会根据 <code>AndroidManifest.xml</code> 中的配置，启动标记为 <code>MAIN</code> 和 <code>LAUNCHER</code> 的应用，Launcher 加载桌面布局和图标资源。</p>
<p>&emsp;​&emsp;Launcher进程是Zygote孵化出来的第一个App进程。</p>
<p>​	</p>
<p>​	</p>
<p>​	</p>
]]></content>
      <categories>
        <category>Android系统</category>
      </categories>
      <tags>
        <tag>Android启动流程</tag>
      </tags>
  </entry>
  <entry>
    <title>Android里的Java类</title>
    <url>/2025/01/05/Android%E9%87%8C%E7%9A%84Java%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="Pair"><a href="#Pair" class="headerlink" title="Pair"></a>Pair</h1><p><code>android.util.Pair</code> 是 Android 提供的一个简单的数据结构类，用于存储两个相关联的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pair</span>&lt;F, S&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> F first;  <span class="comment">// 第一个对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> S second; <span class="comment">// 第二个对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">(F first, S second)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.first = first;</span><br><span class="line">        <span class="built_in">this</span>.second = second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong><code>first</code></strong>: 存储第一个对象。</li>
<li><strong><code>second</code></strong>: 存储第二个对象。</li>
</ul>
<p>这两个字段都是 <code>final</code>，一旦赋值后就无法修改。</p>
]]></content>
      <categories>
        <category>Android系统</category>
      </categories>
      <tags>
        <tag>Java类</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言</title>
    <url>/2024/02/01/C%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h1 id="C语言基础编程"><a href="#C语言基础编程" class="headerlink" title="C语言基础编程"></a>C语言基础编程</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!&quot;</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul>
<li>char</li>
<li>unsigned char</li>
<li>short</li>
<li>unsigned short</li>
<li>int </li>
<li>unsigned int </li>
<li>long</li>
<li>unsigned long</li>
<li>float</li>
<li>double</li>
<li>void</li>
</ul>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">算术运算符</span><br><span class="line">+</span><br><span class="line">-</span><br><span class="line">*</span><br><span class="line">/</span><br><span class="line">%</span><br><span class="line">++</span><br><span class="line">--</span><br><span class="line">比较运算符</span><br><span class="line">==</span><br><span class="line">!=</span><br><span class="line">&gt;</span><br><span class="line">&lt;</span><br><span class="line">&gt;=</span><br><span class="line">&lt;=</span><br><span class="line">逻辑运算符</span><br><span class="line">&amp;&amp;</span><br><span class="line">||</span><br><span class="line">!</span><br><span class="line">位运算符</span><br><span class="line">&amp;</span><br><span class="line">|</span><br><span class="line">^</span><br><span class="line">~</span><br><span class="line">&lt;&lt;</span><br><span class="line">&gt;&gt;</span><br><span class="line">赋值运算符</span><br><span class="line">=</span><br><span class="line">+=</span><br><span class="line">-=</span><br><span class="line">*=</span><br><span class="line">/=</span><br><span class="line">%=</span><br><span class="line">&lt;&lt;=</span><br><span class="line">&gt;&gt;=</span><br><span class="line">&amp;=</span><br><span class="line">^=</span><br><span class="line">|=</span><br><span class="line">其他运算符</span><br><span class="line"><span class="keyword">sizeof</span>()  	<span class="comment">// 返回变量或数据类型的大小</span></span><br><span class="line">&amp;			<span class="comment">// 取地址</span></span><br><span class="line">*			<span class="comment">// 解引用</span></span><br><span class="line">?:			<span class="comment">// 三元运算符</span></span><br></pre></td></tr></table></figure>

<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(expression)&#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(expression)&#123;</span><br><span class="line">...;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      ...;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(expression)&#123;</span><br><span class="line">...;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(expression)&#123;</span><br><span class="line">...;</span><br><span class="line">  &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      ...;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">1</span>:</span><br><span class="line">        <span class="comment">// 语句块1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式<span class="number">2</span>:</span><br><span class="line">        <span class="comment">// 语句块2</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 默认语句块</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式);</span><br></pre></td></tr></table></figure>

<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句; 条件表达式; 更新语句) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">return_type <span class="title function_">function_name</span><span class="params">( parameter <span class="built_in">list</span> )</span></span><br><span class="line">&#123;</span><br><span class="line">   body of the function</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="内存分区"><a href="#内存分区" class="headerlink" title="内存分区"></a>内存分区</h1><h2 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a>栈（stack）</h2><p>用于存储局部变量和函数调用时的上下文（如返回地址与参数等）。</p>
<h2 id="堆（heap）"><a href="#堆（heap）" class="headerlink" title="堆（heap）"></a>堆（heap）</h2><p>动态分配的内存区域，用于存放程序运行时动态创建的数据。</p>
<h2 id="静态区（全局区）"><a href="#静态区（全局区）" class="headerlink" title="静态区（全局区）"></a>静态区（全局区）</h2><p>用于全局变量、静态变量和常量的存储。这部分内存的生命周期从程序开始直到程序结束。</p>
<h2 id="代码区"><a href="#代码区" class="headerlink" title="代码区"></a>代码区</h2><p>存放程序的机器指令，也就是程序的可执行代码。</p>
<h2 id="常量区"><a href="#常量区" class="headerlink" title="常量区"></a>常量区</h2><p>存储程序中常量数据的区域，它存放的是程序中不允许修改的常量值。</p>
<h1 id="stdio-h"><a href="#stdio-h" class="headerlink" title="stdio.h"></a>stdio.h</h1><h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">%d 十进制有符号整数</span><br><span class="line">%u 十进制无符号整数</span><br><span class="line">%f 浮点数</span><br><span class="line">%c 单个字符</span><br><span class="line">%s 字符串</span><br><span class="line">%x 十六进制无符号整数</span><br><span class="line">%X 大写十六进制无符号整数</span><br></pre></td></tr></table></figure>



<h2 id="库变量"><a href="#库变量" class="headerlink" title="库变量"></a>库变量</h2><h3 id="size-t"><a href="#size-t" class="headerlink" title="size_t"></a>size_t</h3><p>无符号整数类型，它是 sizeof 关键字的结果。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span></span><br></pre></td></tr></table></figure>

<h3 id="FILE"><a href="#FILE" class="headerlink" title="FILE"></a>FILE</h3><p>文件流类型，适合存储文件流信息的对象类型。</p>
<h3 id="fpos-t"><a href="#fpos-t" class="headerlink" title="fpos_t"></a>fpos_t</h3><p>文件位置类型，适合存储文件中任何位置的对象类型。</p>
<h2 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h2><h3 id="printf"><a href="#printf" class="headerlink" title="printf()"></a>printf()</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// format：格式化字符串，用于指定输出的内容和格式。</span></span><br><span class="line"><span class="comment">// ...：可变参数，表示要输出的数据，可以是变量或值。</span></span><br><span class="line"><span class="comment">// 返回值：返回成功打印的字符数量（不包括格式字符串中的额外字符，如 \n、% 等）。如果发生错误，通常返回 -1。</span></span><br></pre></td></tr></table></figure>



<h3 id="sprintf"><a href="#sprintf" class="headerlink" title="sprintf()"></a>sprintf()</h3><p>用于将格式化的数据写入字符串。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sprintf</span><span class="params">(<span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// str: 一个字符数组，用于存储格式化后的输出结果。</span></span><br><span class="line"><span class="comment">// format: 一个格式字符串，指定输出的格式。</span></span><br><span class="line"><span class="comment">// ...: 根据格式字符串提供的其他参数，用于格式化输出。</span></span><br><span class="line"><span class="comment">// 返回值：返回写入 str 中的字符数，不包括结尾的 \0 字符。如果发生错误，返回一个负值。</span></span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">100</span>];</span><br><span class="line">    <span class="type">int</span> n = <span class="number">42</span>;</span><br><span class="line">    <span class="type">float</span> pi = <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 sprintf 格式化数据并写入 buffer</span></span><br><span class="line">    <span class="type">int</span> written = <span class="built_in">sprintf</span>(buffer, <span class="string">&quot;The answer is %d and pi is approximately %.2f.&quot;</span>, n, pi);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Formatted string: %s\n&quot;</span>, buffer);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Number of characters written: %d\n&quot;</span>, written);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Formatted <span class="built_in">string</span>: The answer is <span class="number">42</span> and pi is approximately <span class="number">3.14</span>.</span><br><span class="line">Number of characters written: <span class="number">46</span></span><br></pre></td></tr></table></figure>

<h3 id="snprintf"><a href="#snprintf" class="headerlink" title="snprintf()"></a>snprintf()</h3><p>用于将格式化的数据写入字符串。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">snprintf</span><span class="params">(<span class="type">char</span> *str, <span class="type">size_t</span> size, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// str: 一个字符数组，用于存储格式化后的输出。</span></span><br><span class="line"><span class="comment">// size: 字符数组的大小，即 str 能容纳的最大字符数（包括终止的 \0 字符）。</span></span><br><span class="line"><span class="comment">// format: 一个格式字符串，指定输出的格式。</span></span><br><span class="line"><span class="comment">// ...: 依据格式字符串提供的其他参数。</span></span><br><span class="line"><span class="comment">// 返回值：返回写入 str 中的字符数，不包括结尾的 \0 字符。如果返回值大于或等于 size，说明输出被截断了。</span></span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> n = <span class="number">42</span>;</span><br><span class="line">    <span class="type">float</span> pi = <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 snprintf 格式化数据并写入 buffer</span></span><br><span class="line">    <span class="type">int</span> written = <span class="built_in">snprintf</span>(buffer, <span class="keyword">sizeof</span>(buffer), <span class="string">&quot;The answer is %d and pi is approximately %.2f.&quot;</span>, n, pi);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Formatted string: %s\n&quot;</span>, buffer);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Number of characters written: %d\n&quot;</span>, written);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Formatted <span class="built_in">string</span>: The answer is <span class="number">42</span> and pi is approximately <span class="number">3.14</span>.</span><br><span class="line">Number of characters written: <span class="number">46</span></span><br></pre></td></tr></table></figure>
<h3 id><a href="#" class="headerlink" title></a></h3><h1 id="time-h"><a href="#time-h" class="headerlink" title="time.h"></a>time.h</h1><h2 id="库变量-1"><a href="#库变量-1" class="headerlink" title="库变量"></a>库变量</h2><h3 id="size-t-1"><a href="#size-t-1" class="headerlink" title="size_t"></a>size_t</h3><p>无符号整型，sizeof运算符的结果。 </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span></span><br></pre></td></tr></table></figure>

<h3 id="clock-t"><a href="#clock-t" class="headerlink" title="clock_t"></a>clock_t</h3><p>表示处理器的时钟周期数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">clock_t</span>; <span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> <span class="type">clock_t</span>;</span><br></pre></td></tr></table></figure>

<h3 id="time-t"><a href="#time-t" class="headerlink" title="time_t"></a>time_t</h3><p>用于存储时间戳</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">time_t</span>; <span class="comment">//或者</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> <span class="type">time_t</span>;</span><br></pre></td></tr></table></figure>

<h3 id="struct-tm"><a href="#struct-tm" class="headerlink" title="struct tm"></a>struct tm</h3><p>tm 是一个结构体类型，用于表示具体的时间信息，通常是通过将时间戳（time_t）转换成更易于理解和操作的日期和时间格式。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> tm_sec;   <span class="comment">// 秒 (0-59)</span></span><br><span class="line">    <span class="type">int</span> tm_min;   <span class="comment">// 分 (0-59)</span></span><br><span class="line">    <span class="type">int</span> tm_hour;  <span class="comment">// 小时 (0-23)</span></span><br><span class="line">    <span class="type">int</span> tm_mday;  <span class="comment">// 一个月中的日期 (1-31)</span></span><br><span class="line">    <span class="type">int</span> tm_mon;   <span class="comment">// 月份 (0-11) -&gt; 0 表示 1 月，11 表示 12 月</span></span><br><span class="line">    <span class="type">int</span> tm_year;  <span class="comment">// 从 1900 年开始的年数 (例如，2024 年就是 124)</span></span><br><span class="line">    <span class="type">int</span> tm_wday;  <span class="comment">// 星期几 (0-6)，0 表示星期天</span></span><br><span class="line">    <span class="type">int</span> tm_yday;  <span class="comment">// 一年中的第几天 (0-365)，0 表示 1 月 1 日</span></span><br><span class="line">    <span class="type">int</span> tm_isdst; <span class="comment">// 夏令时标志，正值表示夏令时，0 表示非夏令时，负值表示信息不可用</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="库函数-1"><a href="#库函数-1" class="headerlink" title="库函数"></a>库函数</h2><h3 id="time"><a href="#time" class="headerlink" title="time()"></a>time()</h3><p><code>time()</code>函数用于获取当前时间戳。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">time_t</span> <span class="title function_">time</span><span class="params">(<span class="type">time_t</span> *timer)</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果参数为NULL或0，返回当前时间的time_t值。</li>
<li>如果传递一个有效指针，函数会将当前时间保存到指针所指向的变量中，并返回相同的值。</li>
</ul>
<h3 id="localtime"><a href="#localtime" class="headerlink" title="localtime()"></a>localtime()</h3><p>用于将 time_t 类型的时间值转换为结构化的本地时间格式（struct tm）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> tm* <span class="title function_">localtime</span><span class="params">(<span class="type">const</span> <span class="type">time_t</span>* timer)</span>;</span><br></pre></td></tr></table></figure>
<p>将 time_t 类型的时间转换为本地时间，返回一个 struct tm 结构，表示本地时间的各个组成部分（年、月、日、小时、分钟、秒等）。</p>
<h3 id="localtime-r"><a href="#localtime-r" class="headerlink" title="localtime_r()"></a>localtime_r()</h3><p>用于将 time_t 类型的时间值转换为结构化的本地时间格式（struct tm）。<br>由于它将结果存储在用户提供的缓冲区中，多个线程可以同时调用 localtime_r 而不会发生冲突，因此它是线程安全的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> tm* <span class="title function_">localtime_r</span><span class="params">(<span class="type">const</span> <span class="type">time_t</span>* timer, <span class="keyword">struct</span> tm* buf)</span>;</span><br></pre></td></tr></table></figure>
<h3 id="localtime-s"><a href="#localtime-s" class="headerlink" title="localtime_s()"></a>localtime_s()</h3><p>localtime_s 是 C11 标准引入的函数，功能和 localtime_r 类似。它将 time_t 转换为本地时间，并将结果存储在用户提供的缓冲区中。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> tm* <span class="title function_">localtime_s</span><span class="params">(<span class="type">const</span> <span class="type">time_t</span>* <span class="keyword">restrict</span> timer, <span class="keyword">struct</span> tm* <span class="keyword">restrict</span> buf)</span>;</span><br></pre></td></tr></table></figure>
<p>localtime_s 在 C11 标准中引入时，具有更严格的错误检查。如果出现错误（例如无效的时间值），通常会返回一个错误码，而不是直接返回 NULL。这增加了函数的安全性和可靠性。</p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>English Words Study</title>
    <url>/2025/01/14/English-Words-Study/</url>
    <content><![CDATA[<h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><h2 id="b"><a href="#b" class="headerlink" title="b"></a>b</h2><h3 id="abandon"><a href="#abandon" class="headerlink" title="abandon"></a>abandon</h3><p>v.放弃，抛弃</p>
<h2 id="t"><a href="#t" class="headerlink" title="t"></a>t</h2><h3 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h3><p>附加；贴上</p>
<h1 id="S"><a href="#S" class="headerlink" title="S"></a>S</h1><h2 id="p"><a href="#p" class="headerlink" title="p"></a>p</h2><h3 id="spawn"><a href="#spawn" class="headerlink" title="spawn"></a>spawn</h3><p>n.卵；菌丝；产物</p>
<p>v.产卵；启动；</p>
]]></content>
      <categories>
        <category>英语学习</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>C++</title>
    <url>/2024/02/01/Cpp/</url>
    <content><![CDATA[<h1 id="C-基础编程"><a href="#C-基础编程" class="headerlink" title="C++基础编程"></a>C++基础编程</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="std-string类"><a href="#std-string类" class="headerlink" title="std::string类"></a>std::string类</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li><p><strong>c_str()</strong></p>
<p>将 C++ 的 <code>std::string</code> 对象转换为 C 风格的字符串（即以空字符 <code>\0</code> 结尾的字符数组）。</p>
</li>
</ul>
<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h1 id="iostream"><a href="#iostream" class="headerlink" title="iostream"></a>iostream</h1><h2 id="cin"><a href="#cin" class="headerlink" title="cin"></a>cin</h2><p><code>cin</code> 使用流操作符（<code>&gt;&gt;</code>），一次可以读取多个变量，输入用空格或回车分隔。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    cin &gt;&gt; number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="cout"><a href="#cout" class="headerlink" title="cout"></a>cout</h2><p><code>cout</code> 使用流操作符（<code>&lt;&lt;</code>）可以连续输出多个变量。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    cin &gt;&gt; number;</span><br><span class="line">    cout &lt;&lt; number;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;换行&quot;</span> &lt;&lt; endl; <span class="comment">// endl 表示换行，相当于\n，同时会刷新缓冲区。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="cstring"><a href="#cstring" class="headerlink" title="cstring"></a>cstring</h1><h2 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h2>]]></content>
      <categories>
        <category>Cpp</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Android系统目录</title>
    <url>/2025/01/03/Android%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<p>主用户路径<code>/data/user/0</code></p>
<h1 id="data"><a href="#data" class="headerlink" title="data"></a>data</h1><h2 id="data-1"><a href="#data-1" class="headerlink" title="data"></a>data</h2><p><code>/data/data/&lt;package_name&gt;/</code>，在这个目录下，通常存储应用的数据。</p>
<h2 id="system"><a href="#system" class="headerlink" title="system"></a>system</h2><p><code>/data/system/</code>存储着与Android系统相关的配置文件和设置。</p>
<h2 id="app"><a href="#app" class="headerlink" title="app"></a>app</h2><p><code>data/app/</code>存储已安装应用的 APK 文件以及应用的私有数据。</p>
<h2 id="user"><a href="#user" class="headerlink" title="user"></a>user</h2><p>在 Android 系统中，<code>/data/user/</code> 目录是一个用于支持多用户环境的目录。它存储了与每个用户账户相关的数据。</p>
<p><code>/data/user/</code> 目录包含每个用户的私有数据，并为每个用户分配一个唯一的 ID（从 0 开始）。</p>
<h1 id="proc"><a href="#proc" class="headerlink" title="proc"></a>proc</h1><h2 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h2><h3 id="kernel"><a href="#kernel" class="headerlink" title="kernel"></a>kernel</h3><p><code>/proc/sys/kernel/random/uuid</code>是 Linux 系统中的一个伪文件，用于生成 UUID（Universally Unique Identifier，即全局唯一标识符）。</p>
<p><img src="/2025/01/03/Android%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95/1.jpg"></p>
]]></content>
      <categories>
        <category>Android系统</category>
      </categories>
      <tags>
        <tag>Android系统目录</tag>
      </tags>
  </entry>
  <entry>
    <title>FRIDA-JSAPI</title>
    <url>/2024/12/20/FRIDA-JSAPI/</url>
    <content><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="perform"><a href="#perform" class="headerlink" title="perform()"></a>perform()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This is Java.perform!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="use-className"><a href="#use-className" class="headerlink" title="use(className)"></a>use(className)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This is Java.perform!&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">class</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(className);</span><br><span class="line">    <span class="keyword">class</span>.<span class="property">method</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This is class.method!&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Java-choose-className-callbacks"><a href="#Java-choose-className-callbacks" class="headerlink" title="Java.choose(className, callbacks)"></a>Java.choose(className, callbacks)</h2><h2 id="Java-enumerateLoadedClasses-callbacks"><a href="#Java-enumerateLoadedClasses-callbacks" class="headerlink" title="Java.enumerateLoadedClasses(callbacks)"></a>Java.enumerateLoadedClasses(callbacks)</h2><h2 id="Java-enumerateLoadedClassesSync"><a href="#Java-enumerateLoadedClassesSync" class="headerlink" title="Java.enumerateLoadedClassesSync()"></a>Java.enumerateLoadedClassesSync()</h2><h2 id="Java-enumerateClassLoaders-callbacks"><a href="#Java-enumerateClassLoaders-callbacks" class="headerlink" title="Java.enumerateClassLoaders(callbacks)"></a>Java.enumerateClassLoaders(callbacks)</h2><h2 id="Java-enumerateClassLoadersSync"><a href="#Java-enumerateClassLoadersSync" class="headerlink" title="Java.enumerateClassLoadersSync()"></a>Java.enumerateClassLoadersSync()</h2><h2 id="Java-enumerateMethods-query"><a href="#Java-enumerateMethods-query" class="headerlink" title="Java.enumerateMethods(query)"></a>Java.enumerateMethods(query)</h2><h1 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h1><h2 id="pointerSize"><a href="#pointerSize" class="headerlink" title="pointerSize"></a>pointerSize</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Process.pointerSize</span><br></pre></td></tr></table></figure>

<p>以字节为单位获取指针的大小。</p>
<h2 id="getCurrentThreadId"><a href="#getCurrentThreadId" class="headerlink" title="getCurrentThreadId()"></a>getCurrentThreadId()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Process.getCurrentThreadId()</span><br></pre></td></tr></table></figure>

<p>获取当前线程Id。</p>
<h1 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h1><h2 id="Module属性"><a href="#Module属性" class="headerlink" title="Module属性"></a>Module属性</h2><ul>
<li><p><strong>name</strong></p>
<p>  模块名</p>
</li>
<li><p><strong>base</strong></p>
<p>  模块基地址</p>
</li>
<li><p><strong>size</strong></p>
<p>  模块的字节大小</p>
</li>
<li><p><strong>path</strong></p>
<p>  模块的路径</p>
</li>
</ul>
<h2 id="enumerateSymbols"><a href="#enumerateSymbols" class="headerlink" title="enumerateSymbols()"></a>enumerateSymbols()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var symbols = ModuleName.enumerateSymbols()</span><br></pre></td></tr></table></figure>

<p>枚举指定模块中的所以符号。</p>
<h3 id="枚举的符号的属性"><a href="#枚举的符号的属性" class="headerlink" title="枚举的符号的属性"></a>枚举的符号的属性</h3><ul>
<li><p><strong>isGlobal</strong></p>
</li>
<li><p><strong>type</strong></p>
</li>
<li><p><strong>section</strong></p>
</li>
<li><p><strong>name</strong></p>
<p>  符号的名字</p>
</li>
<li><p><strong>address</strong></p>
<p>  符号的地址，指针</p>
</li>
<li><p><strong>size</strong></p>
</li>
</ul>
<h2 id="findExportByName-exportName"><a href="#findExportByName-exportName" class="headerlink" title="findExportByName(exportName)"></a>findExportByName(exportName)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var addr = Module.findExportByName(moduleName|null,exportName)</span><br></pre></td></tr></table></figure>

<p>查找指定模块中导出的符号（通常是函数）的地址。</p>
<h2 id="findBaseAddress-name"><a href="#findBaseAddress-name" class="headerlink" title="findBaseAddress(name)"></a>findBaseAddress(name)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var addr = Module.findBaseAddress(name)</span><br></pre></td></tr></table></figure>

<p>获取指定模块的基地址。</p>
<h1 id="Native"><a href="#Native" class="headerlink" title="Native"></a>Native</h1><h2 id="NativeCallback"><a href="#NativeCallback" class="headerlink" title="NativeCallback"></a>NativeCallback</h2><ul>
<li><p><strong>new NativeCallback(func, returnType, argTypes)</strong></p>
<ul>
<li><code>func</code>: 创建一个新的由JavaScript function实现的NativeCallback</li>
<li><code>returnType</code>: 指定返回类型。</li>
<li><code>argTypes</code>: 数组，指定参数类型。</li>
</ul>
<p>返回的对象是<code>NativeFunction</code>，可以传递给<code>Interceptor.replace</code>。</p>
</li>
</ul>
<h1 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h1><h2 id="Interceptor-attach-target-callbacks"><a href="#Interceptor-attach-target-callbacks" class="headerlink" title="Interceptor.attach(target, callbacks)"></a>Interceptor.attach(target, callbacks)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> functionAddr = <span class="title function_">ptr</span>(<span class="number">0x7777</span>);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(functionAddr,&#123;</span><br><span class="line">    <span class="title class_">OnEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(args[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(args[<span class="number">2</span>]);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">OnLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>注意：在32位ARM架构中，地址参数target的最低有效位必须为0（对于ARM函数）或1（对于Thumb函数）。如果通过Frida API（例如Module.getExportByName()）获取地址，Frida会自动处理这个细节。</p>
<h2 id="Interceptor-replace-target-replacement"><a href="#Interceptor-replace-target-replacement" class="headerlink" title="Interceptor.replace(target, replacement)"></a>Interceptor.replace(target, replacement)</h2><p>使用 replacement 替换 target 处的函数。<br>可以使用 NativeCallback 在 JavaScript 中实现替换。</p>
]]></content>
      <categories>
        <category>Frida</category>
      </categories>
      <tags>
        <tag>FRIDA-JSAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask</title>
    <url>/2024/12/22/Flask/</url>
    <content><![CDATA[<h1 id="Flask安装"><a href="#Flask安装" class="headerlink" title="Flask安装"></a>Flask安装</h1><p>建议在Python虚拟环境中安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure>

<h1 id="第一个Flask程序"><a href="#第一个Flask程序" class="headerlink" title="第一个Flask程序"></a>第一个Flask程序</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__) 	<span class="comment"># 创建一个 Flask 应用对象，赋值给变量 app。</span></span><br><span class="line">					  	<span class="comment"># 参数 __name__ 表示当前模块的名称，Flask 使用它来确定应用程序的根路径。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>) 		</span><span class="comment"># 装饰器，用于定义路由。&quot;/&quot; 是 URL 路径的根（即网站的首页）。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():		<span class="comment"># 处理 / 路由的视图函数。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span> 	<span class="comment"># 视图函数的返回值是一个 HTML 字符串，表示返回给用户的内容。	</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>) <span class="comment"># 启动 Flask 的内置开发服务器，运行这个 Web 应用。</span></span><br><span class="line">    					<span class="comment"># 参数&#x27;debug=True&#x27;是开启调试模式，在代码有变更时，服务器会自动重启。</span></span><br></pre></td></tr></table></figure>

<p>在浏览器中访问<code>http://127.0.0.1:5000</code></p>
<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="route"><a href="#route" class="headerlink" title="route()"></a>route()</h2><p>使用<code>route()</code>装饰器来把函数绑定到 URL</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index Page&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h2><h3 id="路由参数-1"><a href="#路由参数-1" class="headerlink" title="&lt;variable_name&gt;路由参数"></a><code>&lt;variable_name&gt;</code>路由参数</h3><p>通过<code>&lt;&gt;</code>标记的变量作为参数传递给函数。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/user/&lt;name&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;name is:&quot;</span>+name</span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/22/Flask/1.jpg"></p>
<h3 id="converter-variable-name参数类型"><a href="#converter-variable-name参数类型" class="headerlink" title="converter:variable_name参数类型"></a><code>converter:variable_name</code>参数类型</h3><p>通过转换器<code>converter</code>为参数指定类型。默认类型为<code>string</code>即字符串。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/id/&lt;int:id&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bandid</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;id is: &quot;</span>+<span class="built_in">str</span>(<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/22/Flask/2.jpg"></p>
<p><strong>转换器类型</strong></p>
<table>
<thead>
<tr>
<th align="left">converter</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">string</td>
<td>文本</td>
</tr>
<tr>
<td align="left">int</td>
<td>整数</td>
</tr>
<tr>
<td align="left">float</td>
<td>浮点数</td>
</tr>
<tr>
<td align="left">path</td>
<td>路径</td>
</tr>
<tr>
<td align="left">uuid</td>
<td>UUID字符串</td>
</tr>
</tbody></table>
<h1 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h1><p>通过定义路由来指定请求方式，Flask默认将路由处理为<code>GET</code>请求。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/hello&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/submit&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Data Submitted!&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="Jinja2模板引擎"><a href="#Jinja2模板引擎" class="headerlink" title="Jinja2模板引擎"></a>Jinja2模板引擎</h1>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Frida工具系列</title>
    <url>/2025/01/01/Frida%E5%B7%A5%E5%85%B7%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h1 id="frida-exe"><a href="#frida-exe" class="headerlink" title="frida.exe"></a>frida.exe</h1><p><strong>frida的使用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage: frida [options] target</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --version             show program&#x27;s version number and exit</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -D ID, --device=ID    connect to device with the given ID</span><br><span class="line">  -U, --usb             connect to USB device</span><br><span class="line">  -R, --remote          connect to remote frida-server</span><br><span class="line">  -H HOST, --host=HOST  connect to remote frida-server on HOST</span><br><span class="line">  -f FILE, --file=FILE  spawn FILE</span><br><span class="line">  -F, --attach-frontmost</span><br><span class="line">                        attach to frontmost application</span><br><span class="line">  -n NAME, --attach-name=NAME</span><br><span class="line">                        attach to NAME</span><br><span class="line">  -p PID, --attach-pid=PID</span><br><span class="line">                        attach to PID</span><br><span class="line">  --stdio=inherit|pipe  stdio behavior when spawning (defaults to “inherit”)</span><br><span class="line">  --aux=option          set aux option when spawning, such as “uid=(int)42”</span><br><span class="line">                        (supported types are: string, bool, int)</span><br><span class="line">  --realm=native|emulated</span><br><span class="line">                        realm to attach in</span><br><span class="line">  --runtime=qjs|v8      script runtime to use</span><br><span class="line">  --debug               enable the Node.js compatible script debugger</span><br><span class="line">  --squelch-crash       if enabled, will not dump crash report to console</span><br><span class="line">  -O FILE, --options-file=FILE</span><br><span class="line">                        text file containing additional command line options</span><br><span class="line">  -l SCRIPT, --load=SCRIPT</span><br><span class="line">                        load SCRIPT</span><br><span class="line">  -P PARAMETERS_JSON, --parameters=PARAMETERS_JSON</span><br><span class="line">                        parameters as JSON, same as Gadget</span><br><span class="line">  -C CMODULE, --cmodule=CMODULE</span><br><span class="line">                        load CMODULE</span><br><span class="line">  --toolchain=any|internal|external</span><br><span class="line">                        CModule toolchain to use when compiling from source</span><br><span class="line">                        code</span><br><span class="line">  -c CODESHARE_URI, --codeshare=CODESHARE_URI</span><br><span class="line">                        load CODESHARE_URI</span><br><span class="line">  -e CODE, --eval=CODE  evaluate CODE</span><br><span class="line">  -q                    quiet mode (no prompt) and quit after -l and -e</span><br><span class="line">  --no-pause            automatically start main thread after startup</span><br><span class="line">  -o LOGFILE, --output=LOGFILE</span><br><span class="line">                        output to log file</span><br><span class="line">  --eternalize          eternalize the script before exit</span><br><span class="line">  --exit-on-error       exit with code 1 after encountering any exception in</span><br><span class="line">                        the SCRIPT</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>--version</code><br>显示 frida 的版本号并退出。</li>
<li><code>-h,--help</code><br>显示帮助信息，列出所有可用选项并退出。</li>
<li><code>-U, --usb</code><br>通过 USB 连接到设备。</li>
<li><code>-H HOST, --host=HOST</code><br>连接到指定 HOST 上的远程 frida-server。</li>
<li><code>-f FILE, --file=FILE</code><br>spawn模式，启动指定的文件（启动一个新的进程并挂起）。</li>
<li><code>-F, --attach-frontmost</code><br>attach模式，附加到前台运行的应用程序。</li>
<li><code>-n NAME, --attach-name=NAME</code><br>附加到指定名称的应用程序。</li>
<li><code>-p PID, --attach-pid=PID</code><br>附加到指定进程 ID 的应用程序。</li>
<li><code>-l SCRIPT, --load=SCRIPT</code><br>加载指定的脚本文件。</li>
<li><code>--no-pause</code><br>启动后自动启动主线程，通常配合-f选项使用。</li>
<li><code>-o LOGFILE, --output=LOGFILE</code><br>将输出记录到指定的日志文件中。</li>
</ul>
<h1 id="frida-server"><a href="#frida-server" class="headerlink" title="frida-server"></a>frida-server</h1><p><strong>frida-server的使用</strong></p>
<p><img src="/2025/01/01/Frida%E5%B7%A5%E5%85%B7%E7%B3%BB%E5%88%97/1.jpg"></p>
<ul>
<li><code>-l</code>：指定监听地址，设置主机IP和端口。</li>
<li><code>--version</code>：输出frida-server的版本信息。</li>
</ul>
<h1 id="frida-ps"><a href="#frida-ps" class="headerlink" title="frida-ps"></a>frida-ps</h1><p>列出当前正在运行的进程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida-ps -U</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Frida</category>
      </categories>
      <tags>
        <tag>Frida工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Frida检测</title>
    <url>/2024/11/01/Frida%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<h1 id="常见检测方式"><a href="#常见检测方式" class="headerlink" title="常见检测方式"></a>常见检测方式</h1><h2 id="进程名检测"><a href="#进程名检测" class="headerlink" title="进程名检测"></a>进程名检测</h2><p>使用如下命令查看进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef | gerp xxx</span><br></pre></td></tr></table></figure>
<p>这里我去官网下载一份frida-server<br>启动frida后，查看进程，会发现有frida-sever字样<br><strong>绕过方式</strong><br>修改文件名，把frida-server文件名字改掉<br>进程名字就会变成修改后的名字</p>
<h2 id="端口检测"><a href="#端口检测" class="headerlink" title="端口检测"></a>端口检测</h2><p>frida默认使用的端口是27042，有些app会检测是否开放了27042端口<br>可以通过如下命令查看端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 27042</span><br></pre></td></tr></table></figure>
<p>注意：以下方式需要手机和电脑互相能Ping通<br><strong>绕过方式</strong><br>更改端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./frida-server -l 0.0.0.0:7777</span><br></pre></td></tr></table></figure>
<p>在电脑上进行端口转发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb forward tcp:7777 tcp:7777</span><br></pre></td></tr></table></figure>
<p>脚本运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida -H 127.0.0.1:7777 -F -l xxx.js</span><br></pre></td></tr></table></figure>
<p><strong>另一种不需要端口转发的方式</strong><br>在更改端口前查看本机IP地址，然后更改端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./frida-server -l 192.168.xx.xx:7777</span><br></pre></td></tr></table></figure>
<p>脚本运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida -H 192.168.xx.xx:7777 -F -l xxx.js</span><br></pre></td></tr></table></figure>
<p><strong>对于Python脚本</strong><br>端口转发后</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str_host = <span class="string">&quot;127.0.0.1:7777&quot;</span></span><br><span class="line">manager = firda.get_device_manager()</span><br><span class="line">rdev = manager.add_remote_device(str_host)</span><br></pre></td></tr></table></figure>
<h2 id="D-Bus网络通信协议"><a href="#D-Bus网络通信协议" class="headerlink" title="D-Bus网络通信协议"></a>D-Bus网络通信协议</h2><p>frida-server使用D-Bus网络通信协议，有些app会遍历内部所有端口，向端口发送信息，如果回复了REJECT则表示此端口是frida-server，检测到正在使用frida进行调试。<br><strong>绕过方式</strong><br>hook系统中的 strstr &#x2F; strcmp 函数，如果出现”REJECT”字样，返回false。  </p>
<h2 id="maps文件"><a href="#maps文件" class="headerlink" title="maps文件"></a>maps文件</h2><p><code>maps</code> 文件通常与进程的内存映射有关。<br>它位于&#x2F;proc&#x2F;pid&#x2F;maps，其中pid是正在运行的进程的PID。<br>通如下命令查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /proc/pid/maps | grep frida</span><br></pre></td></tr></table></figure>
<p>会发现有frida-agent-64.so字样<br><strong>绕过方式</strong><br>hook系统中的 strstr &#x2F; strcmp 函数，如果出现”frida”，”frida-agent”，”tmp”等字样，返回false。</p>
<h2 id="task目录"><a href="#task目录" class="headerlink" title="task目录"></a>task目录</h2><p>&#x2F;proc&#x2F;pid&#x2F;task目录包含了有关进程中所有线程的信息。<br>task目录下的第一个tid是主线程，其他的是子线程。<br>子线程目录里有一个status文件，里面提供了详细的线程信息。<br>frida-server启动且frida附加到一个app后，在task目录下会生成frida的相关线程文件，包含相关线程信息。<br>查看status文件后发现，存在与frida有关的线程名，可能会被检测。  </p>
<ul>
<li>gmain</li>
<li>gdbus</li>
<li>gum-js-loop</li>
<li>pool-frida</li>
</ul>
<p><strong>绕过方式</strong><br>hook系统中的 strstr &#x2F; strcmp 函数，如果出现”gmain”，”gdbus”，”gum-js-loop”等字样，返回false。</p>
<h2 id="fd目录（旧版frida特征）"><a href="#fd目录（旧版frida特征）" class="headerlink" title="fd目录（旧版frida特征）"></a>fd目录（旧版frida特征）</h2><p><code>/proc/&lt;pid&gt;/fd</code> 目录是进程的文件描述符目录，存储了与进程相关的所有文件描述符（file descriptors）的符号链接。提供系统中运行进程的实时信息。<br>frida-server启动且frida附加到一个app后，在fd目录下可能会生成”linjector-1”这个文件，也可能会被检测。<br><strong>绕过方式</strong><br>hook系统中的 strstr &#x2F; strcmp 函数，如果出现”linjector”字样，返回false。</p>
<h2 id="frida目录（旧版frida特征）"><a href="#frida目录（旧版frida特征）" class="headerlink" title="frida目录（旧版frida特征）"></a>frida目录（旧版frida特征）</h2><p>frida-server运行起来之后，会自动在&#x2F;data&#x2F;local&#x2F;tmp（frida-server放在&#x2F;data&#x2F;local&#x2F;tmp目录下）目录下生成一个re.frida.server目录，在re.frida.server这个目录里就会有包含frida的特征的文件名如frida-agent-64.so、frida-agent-32.so、frida-helper-32、linjector-1<br><strong>绕过方式</strong><br>hook系统中的 strstr &#x2F; strcmp 函数，如果出现”tmp”字样，返回false。</p>
<h2 id="hook脚本"><a href="#hook脚本" class="headerlink" title="hook脚本"></a>hook脚本</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">replace_str</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pt_strstr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>,<span class="string">&quot;strstr&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> pt_strcmp = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>,<span class="string">&quot;strstr&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pt_strstr:&quot;</span>,pt_strstr);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pt_strcmp:&quot;</span>,pt_strcmp);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pt_strstr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args[<span class="number">0</span>].<span class="title function_">isNull</span>() || args[<span class="number">1</span>].<span class="title function_">isNull</span>()) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;strstr: One of the arguments is NULL&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> str1 = args[<span class="number">0</span>].<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="keyword">var</span> str2 = args[<span class="number">1</span>].<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="comment">// console.log(&quot;str2:&quot;, str2);</span></span><br><span class="line">            <span class="keyword">if</span> (str2.<span class="title function_">indexOf</span>(<span class="string">&quot;REJECT&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;frida&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;frida-agent&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;gmain&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;gum-js-loop&quot;</span>) &gt;= <span class="number">0</span> ||</span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;tmp&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;maps&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;gdbus&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;linjector&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;strstr--&gt;&quot;</span>, str1, str2);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">hook</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">hook</span>) &#123;</span><br><span class="line">                retval.<span class="title function_">replace</span>(<span class="number">0</span>); <span class="comment">// 也可以指向合法地址</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pt_strcmp, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args[<span class="number">0</span>].<span class="title function_">isNull</span>() || args[<span class="number">1</span>].<span class="title function_">isNull</span>()) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;strcmp: One of the arguments is NULL&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> str1 = args[<span class="number">0</span>].<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="keyword">var</span> str2 = args[<span class="number">1</span>].<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="keyword">if</span> (str2.<span class="title function_">indexOf</span>(<span class="string">&quot;REJECT&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;frida&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;frida-agent&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;gmain&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;gum-js-loop&quot;</span>) &gt;= <span class="number">0</span> ||</span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;tmp&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;maps&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;gdbus&quot;</span>) &gt;= <span class="number">0</span> || </span><br><span class="line">                str2.<span class="title function_">indexOf</span>(<span class="string">&quot;linjector&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;strcmp--&gt;&quot;</span>, str1, str2);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">hook</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">hook</span>) &#123;</span><br><span class="line">                retval.<span class="title function_">replace</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">replace_str</span>();</span><br></pre></td></tr></table></figure>
<h1 id="线程检测"><a href="#线程检测" class="headerlink" title="线程检测"></a>线程检测</h1><p>检测frida的线程通常不会是主线程，主线程与业务相关，通过创建子线程来检测frida，在此线程中循环检测。<br><strong>检测方式</strong><br>在C语言中有一个pthread_create函数，这个函数的作用是创建线程<br><strong>定位so</strong><br>首先定位检测frida的线程的是在哪个so里通过pthread_create函数创建的。（通过hook dlopen进行判断）<br><strong>替换线程中的函数实现绕过</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_pthread_create</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> pt_create_func = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>,<span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pt_create_func,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> so_name = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(args[<span class="number">2</span>]).<span class="property">name</span>;</span><br><span class="line">            <span class="keyword">if</span>(so_name.<span class="title function_">indexOf</span>(<span class="string">&quot;libxxx.so&quot;</span>)!= -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg2&quot;</span>,args[<span class="number">2</span>].<span class="title function_">sub</span>(<span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libxxx.so&quot;</span>)));</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(args[<span class="number">2</span>],<span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;replace success&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;,<span class="string">&#x27;void&#x27;</span>,[<span class="string">&quot;void&quot;</span>]));</span><br><span class="line">                &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_pthread_create</span>();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Frida</category>
      </categories>
      <tags>
        <tag>Frida</tag>
      </tags>
  </entry>
  <entry>
    <title>Frida逆向知识点总结</title>
    <url>/2025/01/01/Frida%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="Java层hook"><a href="#Java层hook" class="headerlink" title="Java层hook"></a>Java层hook</h1><h2 id="hook方法"><a href="#hook方法" class="headerlink" title="hook方法"></a>hook方法</h2><ul>
<li><p><strong>Java.perform</strong>: 用于在 Java 虚拟机中运行 Hook 代码。</p>
</li>
<li><p><strong>Java.use</strong>: 获取目标类的引用。</p>
</li>
<li><p><strong>implementation</strong>: hook 方法实现。</p>
</li>
<li><p><strong>Overloaded methods</strong>: 对于存在重载的方法，需要使用 <code>.overload()</code> 指定参数类型。</p>
</li>
</ul>
<h2 id="hook构造方法"><a href="#hook构造方法" class="headerlink" title="hook构造方法"></a>hook构造方法</h2><p>Java 构造方法的名称固定为 <code>$init</code>，因此需要 hook <code>$init</code> 方法。</p>
<h2 id="获取函数的参数和返回值"><a href="#获取函数的参数和返回值" class="headerlink" title="获取函数的参数和返回值"></a>获取函数的参数和返回值</h2><p>可以直接通过 <code>implementation</code> 中的参数获取函数的入参。</p>
<p>调用原始方法，返回值由原始方法的调用结果提供。</p>
<h2 id="修改函数参数和返回值"><a href="#修改函数参数和返回值" class="headerlink" title="修改函数参数和返回值"></a>修改函数参数和返回值</h2><p>在 Hook 的方法实现中，直接赋值给参数变量即可改变传入参数。</p>
<p>调用目标方法后，直接更改返回值，并返回新的结果给调用方。</p>
<h2 id="主动调用静态方法和非静态方法"><a href="#主动调用静态方法和非静态方法" class="headerlink" title="主动调用静态方法和非静态方法"></a>主动调用静态方法和非静态方法</h2><p><strong>静态方法调用</strong><br>直接通过类名调用静态方法，无需实例化对象。</p>
<p><strong>非静态方法调用</strong><br>必须先创建或获取目标类的实例对象，然后通过实例对象调用非静态方法。（可以通过Java.choose()获取实例）</p>
<h2 id="获取静态变量和成员变量"><a href="#获取静态变量和成员变量" class="headerlink" title="获取静态变量和成员变量"></a>获取静态变量和成员变量</h2><p>通过<code>.value</code>属性来访问变量的实际值。</p>
<p><strong>静态变量</strong><br>静态变量属于类本身，直接通过类访问。</p>
<p><strong>非静态变量</strong><br>非静态变量属于类的实例，必须通过实例对象来访问。</p>
<p>当变量的名字和类的方法名相同是，需要在变量的名字前面加上一个下划线<code>_</code>加以区分。</p>
<h2 id="hook内部类"><a href="#hook内部类" class="headerlink" title="hook内部类"></a>hook内部类</h2><p>外部类与内部类之间通过<code>$</code>符号分隔。</p>
<h2 id="hook匿名类"><a href="#hook匿名类" class="headerlink" title="hook匿名类"></a>hook匿名类</h2><p>匿名类没有直接的名称，通常包含外部类名并以<code>$数字</code>结尾。</p>
<h2 id="hook动态加载dex"><a href="#hook动态加载dex" class="headerlink" title="hook动态加载dex"></a>hook动态加载dex</h2><p><strong>枚举所有类加载器</strong><br>遍历 <code>ClassLoader</code> 的实例，列出每个类加载器加载的类。</p>
<p><strong>判断类加载器是否包含目标类</strong><br>检查类加载器中是否可以加载目标类。</p>
<p><strong>修改类加载器行为</strong><br>在找到目标类的类加载器后，动态 Hook 目标类的方法或属性。</p>
<p><strong>确保动态加载支持</strong><br>针对动态加载的类文件（如由 <code>DexClassLoader</code> 加载），在加载完成后再进行 Hook。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*] Starting enumeration of class loaders...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoaders</span>(&#123;</span><br><span class="line">        <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">loader</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*] Found ClassLoader: &quot;</span> + loader);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 尝试加载目标类</span></span><br><span class="line">                <span class="keyword">var</span> targetClass = loader.<span class="title function_">loadClass</span>(<span class="string">&#x27;com.example.target.MyClass&#x27;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*] Found target class in loader: &quot;</span> + loader);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Hook 目标类的方法</span></span><br><span class="line">                <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> <span class="title class_">MyClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.example.target.MyClass&#x27;</span>);</span><br><span class="line">                    </span><br><span class="line">                    <span class="title class_">MyClass</span>.<span class="property">myMethod</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*] Hooked myMethod of MyClass!&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">myMethod</span>(); <span class="comment">// 调用原始方法</span></span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[!] Target class not found in this loader.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*] Completed enumeration of class loaders.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="/2025/01/01/Frida%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/1.jpg" alt="image"></p>
<h2 id="通过spawn方式启动app"><a href="#通过spawn方式启动app" class="headerlink" title="通过spawn方式启动app"></a>通过spawn方式启动app</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida -U -f &lt;packageName&gt; -l hook.js</span><br></pre></td></tr></table></figure>

<h2 id="hook系统函数"><a href="#hook系统函数" class="headerlink" title="hook系统函数"></a>hook系统函数</h2><p><img src="/2025/01/01/Frida%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/2.jpg" alt="image"></p>
<h2 id="frida主动加载dex"><a href="#frida主动加载dex" class="headerlink" title="frida主动加载dex"></a>frida主动加载dex</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> ddexfile = <span class="title class_">Java</span>.<span class="title function_">openClassFile</span>(<span class="string">&quot;/data/local/tmp/ddex.dex&quot;</span>);</span><br><span class="line">        ddexfile.<span class="title function_">load</span>();</span><br><span class="line">        <span class="keyword">var</span> ddex = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.demo.ddex&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ddex:&quot;</span>,ddex)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="frida注册接口"><a href="#frida注册接口" class="headerlink" title="frida注册接口"></a>frida注册接口</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Registering MyCallback implementation...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟接口类的实现</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">MyCallbackImpl</span> = <span class="title class_">Java</span>.<span class="title function_">registerClass</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;com.example.MyCallbackImpl&#x27;</span>,</span><br><span class="line">        <span class="attr">implements</span>: [<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.example.MyCallback&#x27;</span>)], <span class="comment">// 实现的接口</span></span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">            <span class="attr">onEvent</span>: <span class="keyword">function</span> (<span class="params">message</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onEvent called with message: &quot;</span> + message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MyCallback implementation registered!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将模拟的实现注入目标应用逻辑</span></span><br><span class="line">    <span class="keyword">var</span> myObject = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.example.SomeClass&#x27;</span>);</span><br><span class="line">    myObject.<span class="title function_">setCallback</span>(<span class="title class_">MyCallbackImpl</span>.$new());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Callback set successfully!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="frida打印调用栈"><a href="#frida打印调用栈" class="headerlink" title="frida打印调用栈"></a>frida打印调用栈</h2><p><img src="/2025/01/01/Frida%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/3.jpg" alt="image"></p>
<h2 id="frida复杂参数打印"><a href="#frida复杂参数打印" class="headerlink" title="frida复杂参数打印"></a>frida复杂参数打印</h2><p>对于某些复杂参数类型，如数组或者对象，可能打印出来的结果是[Object object]。</p>
<ul>
<li><p><strong>Java层的对象</strong></p>
<p>  可以通过调用frida的<code>toString()</code>方法，或者调用Java对象的<code>toString()</code>方法，如果对象没有实现<code>toString()</code>方法，可以使用<code>JSON.stringify(arg)</code>方式。</p>
</li>
<li><p><strong>数组类型</strong></p>
<p>  手动迭代数组，或者将数组转化为字符串</p>
</li>
<li><p><strong>JSON对象</strong></p>
<p>  使用<code>JSON.stringify(arg)</code></p>
</li>
</ul>
<h1 id="Native层hook"><a href="#Native层hook" class="headerlink" title="Native层hook"></a>Native层hook</h1><h2 id="hook-RegisterNatives"><a href="#hook-RegisterNatives" class="headerlink" title="hook RegisterNatives"></a>hook RegisterNatives</h2><p>通过 JNI 动态注册的函数不会直接导出到符号表中，而是通过 <code>JNIEnv-&gt;RegisterNatives</code> 注册到 JVM 中。</p>
<p>hook <code>RegisterNatives</code> 函数的调用可以获取注册信息。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;RegisterNatives&quot;</span>), &#123;</span><br><span class="line">    <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">        <span class="comment">// 打印注册信息</span></span><br><span class="line">        <span class="keyword">var</span> env = args[<span class="number">0</span>]; <span class="comment">// JNIEnv</span></span><br><span class="line">        <span class="keyword">var</span> jclass = args[<span class="number">1</span>]; <span class="comment">// Java 类</span></span><br><span class="line">        <span class="keyword">var</span> methods = args[<span class="number">2</span>]; <span class="comment">// 函数注册表</span></span><br><span class="line">        <span class="keyword">var</span> method_count = args[<span class="number">3</span>].<span class="title function_">toInt32</span>(); <span class="comment">// 函数数量</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RegisterNatives called:&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Number of methods: &quot;</span> + method_count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历注册的每个函数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; method_count; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> method = methods.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span>); <span class="comment">// 每个方法结构体的偏移量</span></span><br><span class="line">            <span class="keyword">var</span> name = method.<span class="title function_">readPointer</span>().<span class="title function_">readUtf8String</span>(); <span class="comment">// 函数名</span></span><br><span class="line">            <span class="keyword">var</span> signature = method.<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span>).<span class="title function_">readPointer</span>().<span class="title function_">readUtf8String</span>(); <span class="comment">// 函数签名</span></span><br><span class="line">            <span class="keyword">var</span> fnPtr = method.<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">2</span>).<span class="title function_">readPointer</span>(); <span class="comment">// Native 函数指针</span></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Method &quot;</span> + i + <span class="string">&quot;: Name = &quot;</span> + name + <span class="string">&quot;, Signature = &quot;</span> + signature + <span class="string">&quot;, Function Address = &quot;</span> + fnPtr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RegisterNatives finished.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="hook-Native层函数"><a href="#hook-Native层函数" class="headerlink" title="hook Native层函数"></a>hook Native层函数</h2><p>hook Native层函数首先定位目标函数所在的动态库及其导出符号地址。</p>
<p>使用Interceptor.attach()对函数进行hook。</p>
<h2 id="打印Native层的调用栈"><a href="#打印Native层的调用栈" class="headerlink" title="打印Native层的调用栈"></a>打印Native层的调用栈</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(Thread.backtrace(this.contex,Backtracer.ACCURATE).map(DebugSymbol.fromAddress).join(&#x27;\n&#x27;)+&#x27;\n&#x27;)</span><br></pre></td></tr></table></figure>

<h2 id="通过frida读写文件"><a href="#通过frida读写文件" class="headerlink" title="通过frida读写文件"></a>通过frida读写文件</h2><h2 id="通过frida调用C函数"><a href="#通过frida调用C函数" class="headerlink" title="通过frida调用C函数"></a>通过frida调用C函数</h2><h2 id="打印内存地址的值"><a href="#打印内存地址的值" class="headerlink" title="打印内存地址的值"></a>打印内存地址的值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(hexdump(ptr))</span><br></pre></td></tr></table></figure>

<h2 id="jbyteArray类型打印"><a href="#jbyteArray类型打印" class="headerlink" title="jbyteArray类型打印"></a>jbyteArray类型打印</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function jbyteArray2Array(jbyteArray) &#123;</span><br><span class="line">    var ret;</span><br><span class="line">    Java.perform(function() &#123;</span><br><span class="line">        var b = Java.use(&#x27;[B&#x27;);</span><br><span class="line">        var buffer = Java.cast(jbyteArray, b);</span><br><span class="line">        ret = Java.array(&#x27;byte&#x27;, buffer);</span><br><span class="line">    &#125;);</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Frida</category>
      </categories>
      <tags>
        <tag>Frida知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/2024/12/23/HTML/</url>
    <content><![CDATA[<h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><h2 id="安装VSCode"><a href="#安装VSCode" class="headerlink" title="安装VSCode"></a>安装VSCode</h2><p><code>VSCode</code>是一个文本编辑器，使用它来编辑<code>HTML</code>代码。</p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><ul>
<li><p><strong>open in browser</strong></p>
<p>右键点击 HTML 文件，通过插件直接在浏览器中打开HTML文件。</p>
<p>快捷键：<code>Alt+B</code></p>
</li>
</ul>
<h2 id="安装谷歌浏览器"><a href="#安装谷歌浏览器" class="headerlink" title="安装谷歌浏览器"></a>安装谷歌浏览器</h2><p>通过浏览器预览和调试<code>HTML</code>文件。</p>
<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>HTML——HyperText Markup Language（超文本标记语言）</p>
<ul>
<li>超文本——链接</li>
<li>标记——标签</li>
</ul>
<h2 id="标签语法"><a href="#标签语法" class="headerlink" title="标签语法"></a>标签语法</h2><ul>
<li>标签成对出现，中间包裹内容</li>
<li><code>&lt;&gt;</code>存放标签名</li>
<li>结束标签的标签名前需要加<code>/</code></li>
</ul>
<h2 id="HTML的基本结构"><a href="#HTML的基本结构" class="headerlink" title="HTML的基本结构"></a>HTML的基本结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        网页主体</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>html</code>：整个网页</li>
<li><code>head</code>：网页头部</li>
<li><code>body</code>：网页主体</li>
<li><code>title</code>：网页标题</li>
</ul>
<p><strong>VSCode中生成HTML基本结构的快捷方式</strong></p>
<ul>
<li><p>英文状态下的<code>!</code>加上<code>Enter</code>或<code>Tab</code>键</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="标签之间的关系"><a href="#标签之间的关系" class="headerlink" title="标签之间的关系"></a>标签之间的关系</h2><ul>
<li><strong>嵌套</strong></li>
<li><strong>并列</strong></li>
</ul>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- xxx --&gt;</span></span><br></pre></td></tr></table></figure>

<p>注释标签可以通过快捷键<code>Ctrl+/</code>生成</p>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>这是五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>这是六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：段落独占一行，段落之间有间隙。</p>
<h3 id="换行和水平线"><a href="#换行和水平线" class="headerlink" title="换行和水平线"></a>换行和水平线</h3><p>换行和水平线标签都是单标签。</p>
<ul>
<li><p><strong>换行</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>水平线</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="文本格式标签"><a href="#文本格式标签" class="headerlink" title="文本格式标签"></a>文本格式标签</h3><ul>
<li><p><strong>加粗</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>这是加粗的内容<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>这是加粗的内容<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>倾斜</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>这是倾斜的内容<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>这是倾斜的内容<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>下划线</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>这是添加下划线的内容<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>这是添加下划线的内容<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除线</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>这是添加删除线的内容<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>这是添加删除线的内容<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h3><p><strong>基本语法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片的路径&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;替代文本&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"># src: 必需属性，用于指定图片的路径，可以是相对路径或绝对路径。</span><br><span class="line"># alt: 可选属性，用于在图片无法加载时显示替代文本。</span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<ul>
<li><p><code>width</code>和<code>height</code></p>
<p>用于设置图片的宽度和高度，可以是像素值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;example.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>title</code></p>
<p>为图片提供提示文本，当鼠标悬停在图片上时显示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;example.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是示例图片&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>loading</code></p>
<p>控制图片的加载方式，可选值有：</p>
<ul>
<li><p><code>lazy</code>（懒加载，仅当用户滚动到图片时才加载）</p>
</li>
<li><p><code>eager</code>（默认行为，立即加载）</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;example.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h3><p>超链接可以用于从一个页面跳转到另一个页面，也可以跳转到同一页面的特定位置、下载资源或触发其他行为。</p>
<p><strong>基本语法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;链接地址&quot;</span> &gt;</span>链接文本或内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># href：必须属性，指定超链接的目标地址。</span><br><span class="line"># 链接文本或内容：用户点击的内容，可以是文字、图片或其他元素。</span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<ul>
<li><p><strong>target</strong></p>
<p>定义链接的打开方式。</p>
<ul>
<li><code>_self</code>：在当前窗口打开（默认值）。</li>
<li><code>_blank</code>：在新窗口或标签页打开。</li>
</ul>
</li>
<li><p><strong>title</strong></p>
<p>提供额外信息，鼠标悬停时显示提示文本。</p>
</li>
<li><p><strong>download</strong></p>
<p>提供下载功能，将链接目标作为文件下载。</p>
</li>
</ul>
<p><strong>注意事项</strong></p>
<p><code>href</code> 属性不能为空：如果未指定值，链接会变为无效。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>点击无效链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签"></a>音频标签</h3><p>用于在网页中嵌入音频文件。</p>
<p><strong>基本语法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;audio.mp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># src： 指定音频文件的路径。</span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<ul>
<li><p><strong>controls</strong></p>
<p>添加音频播放器控件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;audio.mp3&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>autoplay</strong></p>
<p>自动播放（页面加载完成后）。</p>
<p>为了防止干扰用户体验，大多数浏览器会禁止自动播放，除非静音或用户交互后允许。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;audio.mp3&quot;</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>loop</strong></p>
<p>循环播放。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;audio.mp3&quot;</span> <span class="attr">loop</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h3><p>用于在网页中嵌入视频文件。</p>
<p><strong>基本语法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># src：指定视频文件的路径。</span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<ul>
<li><p><strong>controls</strong></p>
<p>显示视频控件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>loop</strong></p>
<p>循环播放。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">loop</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>muted</strong></p>
<p>默认静音播放。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">muted</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>autoplay</strong></p>
<p>自动播放（页面加载完成后）。</p>
<p>注意：大多数浏览器要求视频自动播放时必须静音。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">muted</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>使用<code>&lt;ul&gt;</code>标签定义无序列表，使用<code>&lt;li&gt;</code>标签定义每个列表项。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>橙子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>使用<code>&lt;ol&gt;</code>标签定义有序列表，使用<code>&lt;li&gt;</code>标签定义每个列表项。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>修改序号样式</strong></p>
<p>可以通过<code>type</code>属性修改有序列表的样式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">type=&quot;1&quot;：数字（默认）</span><br><span class="line">type=&quot;A&quot;：大写字母</span><br><span class="line">type=&quot;a&quot;：小写字母</span><br><span class="line">type=&quot;I&quot;：大写罗马数字</span><br><span class="line">type=&quot;i&quot;：小写罗马数字</span><br></pre></td></tr></table></figure>

<h3 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h3><p>使用 <code>&lt;dl&gt;</code>标签定义列表，使用<code>&lt;dt&gt;</code>标签定义标题，使用<code>&lt;dd&gt;</code>标签定义描述。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>超文本标记语言<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>层叠样式表<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>一种脚本语言，用于开发动态交互的网页。<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ul>
<li><code>&lt;dl&gt;</code>里面只能包含<code>&lt;dl&gt;</code>和<code>&lt;dd&gt;</code>。</li>
<li><code>&lt;dl&gt;</code>和<code>&lt;dd&gt;</code>里面可以包含任意内容。</li>
</ul>
<h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><p><strong>基本表格结构</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>职业<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>工程师<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>30<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>设计师<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;table&gt;</code>定义表格，<code>&lt;tr&gt;</code>定义行，<code>th</code>定义表头单元格，<code>&lt;td&gt;</code>定义数据单元格。</p>
<p>在网页中，表格默认没有边框线，使用<strong>border</strong>属性可以为表格添加边框线。</p>
<p><strong>表格结构标签</strong></p>
<ul>
<li><code>&lt;thead&gt;</code>：定义表格头部。</li>
<li><code>&lt;tbody&gt;</code>：定义表格主体。</li>
<li><code>&lt;tfoot&gt;</code>：定义表格尾部。</li>
</ul>
<h3 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h3><p><strong>合并行</strong>（纵向合并）</p>
<p>使用 <code>rowspan</code> 属性，合并的单元格数由 <code>rowspan</code> 的值决定。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李华<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>19<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>97<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;td&gt;97&lt;/td&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/23/HTML/1.jpg"></p>
<p><strong>合并列</strong>（横向合并）</p>
<p>使用<code>colspan</code>属性，合并的单元格数由 <code>colspan</code> 的值决定。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李华<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>19<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>97<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;td&gt;97&lt;/td&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>总结<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/23/HTML/2.jpg"></p>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="type属性"><a href="#type属性" class="headerlink" title="type属性"></a>type属性</h4><p>通过<code>type</code>属性定义输入框的类型</p>
<ul>
<li><p><strong>text</strong></p>
<p>文本输入框 (<code>type=&quot;text&quot;</code>)</p>
</li>
<li><p><strong>password</strong></p>
<p>密码输入框 (<code>type=&quot;password&quot;</code>)</p>
<p>输入的内容会被掩盖（通常显示为星号或圆点）。</p>
</li>
<li><p><strong>radio</strong></p>
<p>单选按钮 (<code>type=&quot;radio&quot;</code>)</p>
<p>同一组单选按钮的 <code>name</code> 必须相同，用户只能选择一个。</p>
</li>
<li><p><strong>checkbox</strong></p>
<p>复选框 (<code>type=&quot;checkbox&quot;</code>)</p>
</li>
<li><p><strong>file</strong></p>
<p>文件上传框 (<code>type=&quot;file&quot;</code>)</p>
</li>
</ul>
<h4 id="placeholder属性"><a href="#placeholder属性" class="headerlink" title="placeholder属性"></a>placeholder属性</h4><p>通过<code>placeholder</code>属性作为输入框的占位提示信息，用户未输入时显示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="name属性"><a href="#name属性" class="headerlink" title="name属性"></a>name属性</h4><p>主要用于标识表单字段的名称，在表单提交时，<code>name</code> 属性的值会作为键，输入的值作为对应的值提交。</p>
<h4 id="checked属性"><a href="#checked属性" class="headerlink" title="checked属性"></a>checked属性</h4><p><code>checked</code> 属性是 HTML 表单元素中专门用于 <strong>单选按钮（<code>&lt;input type=&quot;radio&quot;&gt;</code>）</strong> 和 <strong>复选框（<code>&lt;input type=&quot;checkbox&quot;&gt;</code>）</strong> 的布尔属性。它用来预先设置某个选项为“选中”状态。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;group_name&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;field_name&quot;</span> <span class="attr">checked</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="multiple属性"><a href="#multiple属性" class="headerlink" title="multiple属性"></a>multiple属性</h4><p><code>multiple</code> 属性允许用户在某些输入元素中选择多个值。它通常用于文件上传、选择框和电子邮件地址输入。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h3><p>使用<code>&lt;select&gt;</code>定义下拉菜单，使用<code>&lt;option&gt;</code>定义下拉菜单中的每个选项，在 <code>&lt;option&gt;</code> 中添加 <code>selected</code> 属性可以设置默认选中值，如果未设置则默认第一个选项是默认选中值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;field_name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;field_id&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;option1&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;option2&quot;</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;option3&quot;</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文本域标签"><a href="#文本域标签" class="headerlink" title="文本域标签"></a>文本域标签</h3><p>文本域标签用于创建多行的文本输入框，用户可以在其中输入较长的文本内容，如留言、评论等。</p>
<p>使用<code>&lt;textarea&gt;</code>定义文本域，标签之间的内容是默认显示的初始文本。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;field_name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;field_id&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;行数&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;列数&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h3><p><code>&lt;label&gt;</code> 标签用于为 HTML 表单元素定义标签。它可以通过 <code>for</code> 属性绑定到一个表单控件，或者直接将表单控件嵌套在 <code>&lt;label&gt;</code> 标签内。</p>
<p><strong>基本语法</strong></p>
<ul>
<li><p><strong>使用for属性绑定控件</strong></p>
<p><code>for</code> 属性的值需要与目标表单控件的 <code>id</code> 一致。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>嵌套控件</strong></p>
<p>直接将表单控件嵌套在 <code>&lt;label&gt;</code> 标签内。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">  密码：</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p>按钮主要用于用户交互，可以触发表单提交、运行 JavaScript 脚本，或者执行其他操作。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>普通按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<ul>
<li><p><strong>button</strong></p>
<p>普通按钮，默认没有功能，配合JavaScript使用。</p>
</li>
<li><p><strong>submit</strong></p>
<p>点击后提交数据到后台。</p>
</li>
<li><p><strong>reset</strong></p>
<p>重置按钮，点击后将表单控件恢复默认值。</p>
</li>
</ul>
<h3 id="form标签"><a href="#form标签" class="headerlink" title="form标签"></a>form标签</h3><p><code>&lt;form&gt;</code> 标签是用于创建 HTML 表单的容器。表单用于收集用户输入，并通过提交将数据发送到服务器进行处理。</p>
<p><strong>基本语法</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;提交地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;请求方法&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 表单控件，例如文本框、按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>常用属性</strong></p>
<ul>
<li><p><strong>action</strong></p>
<p>表单提交时的目标 URL，表示数据提交到的服务器地址。</p>
</li>
<li><p><strong>method</strong></p>
<p>表单数据提交的方法，常用值为 <code>GET</code> 和 <code>POST</code>。</p>
</li>
</ul>
<h2 id="布局标签"><a href="#布局标签" class="headerlink" title="布局标签"></a>布局标签</h2><h3 id="div标签"><a href="#div标签" class="headerlink" title="div标签"></a>div标签</h3><p>通用的块级容器，用于分组 HTML 元素，没有语义，占据一行。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  这是一个 div 容器。</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="span标签"><a href="#span标签" class="headerlink" title="span标签"></a>span标签</h3><p>通用的行内容器，用于分组文本或其他行内元素，没有语义，不会独占一行。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  这是一个<span class="tag">&lt;<span class="name">span</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 的单词。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h2><table>
<thead>
<tr>
<th>显示结果</th>
<th>描述</th>
<th>实体名称</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>空格</td>
<td><code>&amp;nbsp;</code></td>
</tr>
<tr>
<td>&lt;</td>
<td>小于号</td>
<td><code>&amp;lt;</code></td>
</tr>
<tr>
<td>&gt;</td>
<td>大于号</td>
<td><code>&amp;gt</code></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言基础</title>
    <url>/2024/12/31/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><h2 id="安装Go"><a href="#安装Go" class="headerlink" title="安装Go"></a>安装Go</h2><p>打开Go的官网进行下载安装。</p>
<p>在终端输入命令<code>go version</code>可查看Go的版本，输入<code>go env</code>可查看Go的环境配置。</p>
<p>可以通过<code>go build</code>命令编译代码并生成可执行文件。</p>
<p>可以通过<code>go run</code>命令在终端运行Go文件。</p>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>下载安装GoLand开发工具</p>
<h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明这是一个属于 main 包的程序。Go 的可执行程序必须包含一个名为 main 的包。</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入 Go 的标准库 fmt 包，用于格式化输出</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义程序的入口函数 main。每个 Go 程序的执行都会从 main 函数开始。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello World!&quot;</span>) <span class="comment">// Hello World!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Go语言的注释和C和C++一样，单行注释是<code>//</code>和多行注释<code>/* */</code></p>
<h2 id="程序入口"><a href="#程序入口" class="headerlink" title="程序入口"></a>程序入口</h2><p>可执行程序需要声明<code>main</code>包。</p>
<p><code>main</code>函数是程序的入口函数。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Go语言通过var关键字来声明变量。</p>
<p>Go语言声明变量的方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var &lt;变量名&gt; &lt;数据类型&gt;</span><br></pre></td></tr></table></figure>

<h3 id="匿名变量"><a href="#匿名变量" class="headerlink" title="匿名变量"></a>匿名变量</h3><p>在Go语言中，匿名变量（也称为”空白标识符”）使用<code>_</code>来表示，用来占位但忽略其值。</p>
<p>匿名变量不会占用内存，也不会引发编译错误，因此在不需要某个返回值或变量时，可以使用匿名变量代替。</p>
<h3 id="短变量声明"><a href="#短变量声明" class="headerlink" title="短变量声明"></a>短变量声明</h3><p>在Go语言中可以通过<code>:=</code>操作符在函数体内声明和初始化变量，它是Go中常用的一种语法糖（语法糖是一种语法优化，程序的功能和逻辑不会因为语法糖而发生改变）。（不能用于全局变量）</p>
<p><code>:=</code>可以自动推断变量的类型并简化语法，提高代码简洁性。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">num := <span class="number">10</span> <span class="comment">//  等价于 var num int = 10</span></span><br><span class="line">name := <span class="string">&quot;Bileton&quot;</span> <span class="comment">// 等价于 var name string = &quot;Bileton&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h3><p>在生命变量的时候，省略数据类型，编译器可以根据上下文或赋值语句，自动推导出变量或常量的类型而不需要显式的指定类型。</p>
<h3 id="未初始化变量"><a href="#未初始化变量" class="headerlink" title="未初始化变量"></a>未初始化变量</h3><p>没有明确初始化的变量声明会被赋予对应类型的 <strong>零值</strong>。</p>
<ul>
<li>数值类型为 <code>0</code>，</li>
<li>布尔类型为 <code>false</code>，</li>
<li>字符串为 <code>&quot;&quot;</code>（空字符串）。</li>
</ul>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>在Go语言中通过<code>const</code>关键字来声明常量。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> NAME <span class="type">string</span> = <span class="string">&quot;Bileton&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h3><p><code>iota</code>是<code>go</code>语言的常量计数器，只能在常量的表达式中使用。</p>
<p><code>iota</code>在<code>const</code>关键字出现时将被重置为<code>0</code>。</p>
<p><code>const</code>中每新增一行常量声明将使<code>iota</code>计数一次(<code>iota</code>可理解为<code>const</code>语句块中的行索引)。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        A = <span class="literal">iota</span> <span class="comment">// A = 0</span></span><br><span class="line">        B        <span class="comment">// B = 1</span></span><br><span class="line">        C        <span class="comment">// C = 2</span></span><br><span class="line">    )</span><br><span class="line">    fmt.Println(A, B, C) <span class="comment">// 输出: 0 1 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><ul>
<li><p><strong>自定义类型</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Age <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> myAge Age = <span class="number">25</span> <span class="comment">// myAge的类型是Age，而不是int了</span></span><br><span class="line">    fmt.Println(myAge)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>类型别名</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> AliasInt = <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x AliasInt = <span class="number">10</span> <span class="comment">//AliasInt和int是一样的</span></span><br><span class="line">    fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>定义结构体</strong></p>
</li>
<li><p><strong>定义接口</strong></p>
</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p>整型分为以下两个大类： 按长度分为：<code>int8</code>、<code>int16</code>、<code>int32</code>、<code>int64</code>对应的无符号整型：<code>uint8</code>、<code>uint16</code>、<code>uint32</code>、<code>uint64</code>。</p>
<p><code>uint8</code>也就是<code>byte</code>类型。</p>
<p><code>rune</code>是<code>int32</code>类型</p>
<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p>Go语言支持两种浮点型数：<code>float32</code>和<code>float64</code>。</p>
<h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p>布尔型数据只有<code>true（真）</code>和<code>false（假）</code>两个值。</p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>Go语言中字符串是<code>string</code>类型，以原生数据类型出现。</p>
<p>Go 语言里的字符串的内部实现使用UTF-8编码。</p>
<h3 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h3><p>空</p>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><table>
<thead>
<tr>
<th>转义字符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>\r</td>
<td>回车符（返回行首）</td>
</tr>
<tr>
<td>\n</td>
<td>换行符（跳转到下一行同列位置）</td>
</tr>
<tr>
<td>\t</td>
<td>制表符</td>
</tr>
<tr>
<td>\‘</td>
<td>单引号</td>
</tr>
<tr>
<td>\“</td>
<td>双引号</td>
</tr>
<tr>
<td>\</td>
<td>反斜杠</td>
</tr>
</tbody></table>
<h3 id="数值类型之间的转换"><a href="#数值类型之间的转换" class="headerlink" title="数值类型之间的转换"></a>数值类型之间的转换</h3><p>形式为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">T(value)</span><br><span class="line"></span><br><span class="line">其中 T 是目标类型，value 是要转换的值。</span><br></pre></td></tr></table></figure>

<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+</span><br><span class="line">-</span><br><span class="line">*</span><br><span class="line">/</span><br><span class="line">%</span><br></pre></td></tr></table></figure>

<p>注意： <code>++</code>（自增）和<code>--</code>（自减）在Go语言中是单独的语句，并不是运算符。</p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;&amp;</span><br><span class="line">||</span><br><span class="line">！</span><br></pre></td></tr></table></figure>

<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;</span><br><span class="line">|</span><br><span class="line">^</span><br><span class="line">&lt;&lt;</span><br><span class="line">&gt;&gt;</span><br><span class="line">~</span><br></pre></td></tr></table></figure>

<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 表达式&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 表达式&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> var1 &#123;</span><br><span class="line">    <span class="keyword">case</span> val1:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> val2:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p><strong>基本语法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 初始化语句; 条件表达式; 循环后语句 &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>条件判断的for循环，相当于while</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 条件表达式 &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>无限循环</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>for range循环</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    nums := []<span class="type">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> index, value := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Index: %d, Value: %d\n&quot;</span>, index, value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Index: <span class="number">0</span>, Value: <span class="number">10</span></span><br><span class="line">Index: <span class="number">1</span>, Value: <span class="number">20</span></span><br><span class="line">Index: <span class="number">2</span>, Value: <span class="number">30</span></span><br><span class="line">Index: <span class="number">3</span>, Value: <span class="number">40</span></span><br><span class="line">Index: <span class="number">4</span>, Value: <span class="number">50</span></span><br></pre></td></tr></table></figure>

<h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p><code>range</code> 是一个关键字，常用来迭代数组、切片、映射（map）、字符串和通道（channel）。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> collection &#123;</span><br><span class="line">    <span class="comment">// 在这里处理 index 和 value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// collection 是可以迭代的集合（如数组、切片、map 等）。</span></span><br><span class="line"><span class="comment">// index 是迭代过程中的索引（对于数组、切片、字符串）或键（对于 map）。</span></span><br><span class="line"><span class="comment">// value 是当前迭代的值。</span></span><br></pre></td></tr></table></figure>



<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数名<span class="params">(参数列表)</span></span> 返回值类型&#123;</span><br><span class="line">	函数体</span><br><span class="line">	<span class="keyword">return</span> 返回值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数名<span class="params">(参数列表)</span></span> 返回值列表&#123;</span><br><span class="line">	函数体</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>可以传递可变参数，用<code>...</code>表示</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myfunc</span><span class="params">(args ...<span class="type">int</span>)</span></span> &#123;    <span class="comment">//0个或多个参数</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>args</code>是一个<code>[]int</code>切片，可以遍历和操作。</p>
<h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>在函数的定义中调用自身的函数称为递归函数。</p>
<p><strong>递归通常有两个主要部分：</strong></p>
<ul>
<li>定义递归的停止条件，避免无限递归。</li>
<li>在函数内部调用自身，并逐步接近基准情况。</li>
</ul>
<h3 id="延迟调用"><a href="#延迟调用" class="headerlink" title="延迟调用"></a>延迟调用</h3><p>通过<code>defer</code>关键字实现延迟调用。</p>
<p>延迟调用的特点是：无论函数正常执行还是因为 <code>return</code> 或异常退出，<code>defer</code> 注册的语句都会在函数返回之前执行。</p>
<p><code>defer</code> 通常用于资源清理、文件关闭、解锁互斥锁等场景。</p>
<p><strong>简单示例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;defer 1&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="keyword">defer</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>如果有多个<code>defer</code>语句，会按照后进先出的顺序执行。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;defer 1&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;defer 3&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;defer 5&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;6&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="keyword">defer</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">defer</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">defer</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="函数的数据类型"><a href="#函数的数据类型" class="headerlink" title="函数的数据类型"></a>函数的数据类型</h3><p>函数的数据类型描述了它的参数列表和返回值列表，包括参数的数量、顺序以及类型，以及返回值的数量和类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func1</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;This is func1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func2</span><span class="params">(num <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, func1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, func2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span></span><br></pre></td></tr></table></figure>

<h3 id="函数可以赋值给变量"><a href="#函数可以赋值给变量" class="headerlink" title="函数可以赋值给变量"></a>函数可以赋值给变量</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">func1</span><span class="params">(num <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> func2 <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span></span><br><span class="line">	func2 = func1</span><br><span class="line">	fmt.Println(func2(<span class="number">100</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure>

<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p><strong>基本用法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;This is a func&quot;</span>)</span><br><span class="line">	&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">This is a <span class="function"><span class="keyword">func</span></span></span><br></pre></td></tr></table></figure>

<p><strong>匿名函数赋值给变量，通过变量调用函数</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	func1 := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;This is a func&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	func1()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">This is a <span class="function"><span class="keyword">func</span></span></span><br></pre></td></tr></table></figure>

<p><strong>匿名函数的返回值赋值给变量</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ret := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a * b</span><br><span class="line">	&#125;(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">	fmt.Println(ret)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>

<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>回调函数可以在一个函数中动态调用另一个函数。函数作为参数传递给另一个函数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">operate</span><span class="params">(a, b <span class="type">int</span>, fun <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">	ret := fun(a, b)</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(operate(<span class="number">1</span>, <span class="number">2</span>, add))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p><strong>回调函数调用匿名函数</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">operate</span><span class="params">(a, b <span class="type">int</span>, fun <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">	ret := fun(a, b)</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	add := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a + b</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(operate(<span class="number">1</span>, <span class="number">2</span>, add))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p><strong>在回调函数中直接传递匿名函数</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">operate</span><span class="params">(a, b <span class="type">int</span>, fun <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">	ret := fun(a, b)</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(operate(<span class="number">1</span>, <span class="number">2</span>, <span class="function"><span class="keyword">func</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a + b</span><br><span class="line">	&#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包（Closure）是指一个函数包含了它外部作用域中的变量，即使在外部作用域结束后，这些变量依然可以被内部函数访问和修改。闭包使得函数可以“记住”外部作用域的状态，这种状态在函数调用之间是保持的。</p>
<p>闭包是一个函数与其外部环境变量的组合。</p>
<p>闭包的核心概念是<strong>函数内部可以引用外部作用域的变量</strong>，即使在函数内部外部作用域已经结束。</p>
<p><strong>简单的闭包示例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	counter := <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		counter++</span><br><span class="line">		<span class="keyword">return</span> counter</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	func1 := test()</span><br><span class="line">	fmt.Println(<span class="string">&quot;func1:&quot;</span>, func1())</span><br><span class="line">	fmt.Println(<span class="string">&quot;func1:&quot;</span>, func1())</span><br><span class="line">	fmt.Println(<span class="string">&quot;func1:&quot;</span>, func1())</span><br><span class="line">	func2 := test()</span><br><span class="line">	fmt.Println(<span class="string">&quot;func2:&quot;</span>, func2())</span><br><span class="line">	fmt.Println(<span class="string">&quot;func2:&quot;</span>, func2())</span><br><span class="line">	fmt.Println(<span class="string">&quot;func2:&quot;</span>, func2())</span><br><span class="line">	fmt.Println(<span class="string">&quot;func1:&quot;</span>, func1())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">func1: <span class="number">1</span></span><br><span class="line">func1: <span class="number">2</span></span><br><span class="line">func1: <span class="number">3</span></span><br><span class="line">func2: <span class="number">1</span></span><br><span class="line">func2: <span class="number">2</span></span><br><span class="line">func2: <span class="number">3</span></span><br><span class="line">func1: <span class="number">4</span></span><br></pre></td></tr></table></figure>





<h3 id="Go语言内置函数"><a href="#Go语言内置函数" class="headerlink" title="Go语言内置函数"></a>Go语言内置函数</h3><h4 id="len"><a href="#len" class="headerlink" title="len"></a>len</h4><p>用于返回特定数据类型的长度或大小。</p>
<h4 id="cap"><a href="#cap" class="headerlink" title="cap"></a>cap</h4><p>用于获取切片、数组或通道（channel）的容量。</p>
<h4 id="make"><a href="#make" class="headerlink" title="make"></a>make</h4><p>为slice、map或chan初始化并返回引用。make仅仅用于创建slice、map和channel，并返回它们的实例。</p>
<p><strong>函数签名</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">make</span><span class="params">(t Type, size ...IntegerType)</span></span> Type</span><br><span class="line"></span><br><span class="line"><span class="comment">// t	slice, map或channel类型。</span></span><br><span class="line"><span class="comment">// size	整数类型切片，面对不同类型时意义也不同。是否可省略跟创建类型有关。</span></span><br></pre></td></tr></table></figure>

<p><strong>创建slice</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span>([]Type, <span class="built_in">len</span>, <span class="built_in">cap</span>)</span><br></pre></td></tr></table></figure>

<h4 id="append"><a href="#append" class="headerlink" title="append"></a>append</h4><p><code>append</code> 用于向切片中添加元素。</p>
<p><code>append</code> 可以将一个或多个元素添加到现有的切片中，并返回一个新的切片。</p>
<p>如果切片的容量不足以容纳新元素，<code>append</code> 会自动分配一个新的、更大的底层数组，并返回一个新的切片。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">slice = <span class="built_in">append</span>(slice, elements...)</span><br></pre></td></tr></table></figure>

<p>容量每次成倍增加。</p>
<p>每次扩容后，切片的地址就会发生改变。</p>
<h4 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h4><p>用于从一个切片复制元素到另一个切片中。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">copy</span><span class="params">(dst, src []Type)</span></span> <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dst: 目标切片，复制的内容会放到这个切片中。</span></span><br><span class="line"><span class="comment">// src: 源切片，数据会从这个切片中读取。</span></span><br></pre></td></tr></table></figure>

<p>append扩容的底层是通过copy实现的。</p>
<p><strong>示例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	fmt.Println(s)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, s)</span><br><span class="line">	fmt.Println(<span class="built_in">len</span>(s))</span><br><span class="line">	fmt.Println(<span class="built_in">cap</span>(s))</span><br><span class="line">	s = <span class="built_in">append</span>(s, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">	fmt.Println(s)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, s)</span><br><span class="line">	fmt.Println(<span class="built_in">len</span>(s))</span><br><span class="line">	fmt.Println(<span class="built_in">cap</span>(s))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"><span class="number">0xc0000081b0</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"><span class="number">0xc0000081b0</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>…</strong></p>
<p><code>...</code> 在 Go 中用于扩展切片，将其元素展开为单独的参数传递给函数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	s = <span class="built_in">append</span>(s, s...) <span class="comment">// </span></span><br><span class="line">	fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><p>用于从 <code>map</code> 中删除指定的键值对。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">delete</span>(<span class="keyword">map</span>, key)</span><br><span class="line"></span><br><span class="line"><span class="comment">// map：表示目标映射（map 类型）。</span></span><br><span class="line"><span class="comment">// key：表示要删除的键。</span></span><br></pre></td></tr></table></figure>

<h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ptr := new(T)</span><br></pre></td></tr></table></figure>

<p>new用于为指定的类型分配内存，并返回指向该类型的指针。</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>在Go语言中数组是值类型，而不是引用类型。</p>
<p><strong>基本使用</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> arry [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">		arry[i] = i * <span class="number">100</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(arry)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%T&quot;</span>, array)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;arry[<span class="number">0</span>])</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;arry[<span class="number">1</span>])</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;arry[<span class="number">2</span>])</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;arry[<span class="number">3</span>])</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;arry[<span class="number">4</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">0</span> <span class="number">100</span> <span class="number">200</span> <span class="number">300</span> <span class="number">400</span>]</span><br><span class="line">[<span class="number">5</span>]<span class="type">int</span></span><br><span class="line"><span class="number">0xc000010330</span></span><br><span class="line"><span class="number">0xc000010338</span></span><br><span class="line"><span class="number">0xc000010340</span></span><br><span class="line"><span class="number">0xc000010348</span></span><br><span class="line"><span class="number">0xc000010350</span></span><br></pre></td></tr></table></figure>

<p><strong>数组的初始化</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种方式</span></span><br><span class="line"><span class="keyword">var</span> array [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">array = [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种方式</span></span><br><span class="line">array := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第四种方式</span></span><br><span class="line">array := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组的值传递"><a href="#数组的值传递" class="headerlink" title="数组的值传递"></a>数组的值传递</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	array1 := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;array1:&quot;</span>, array1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;array1:%p\n&quot;</span>, &amp;array1)</span><br><span class="line">	array2 := array1 <span class="comment">// 将array1赋值给array2</span></span><br><span class="line">	array2[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;array2:&quot;</span>, array2)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;array2:%p\n&quot;</span>, &amp;array2)</span><br><span class="line">	fmt.Println(<span class="string">&quot;array1:&quot;</span>, array1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;array1:%p\n&quot;</span>, &amp;array1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">array1: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">array1:<span class="number">0xc00012e000</span></span><br><span class="line">array2: [<span class="number">100</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">array2:<span class="number">0xc00012e060</span></span><br><span class="line">array1: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">array1:<span class="number">0xc00012e000</span></span><br></pre></td></tr></table></figure>

<p><strong>利用函数传递数组参数</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(array2 [5]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	array2[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;array2:&quot;</span>, array2)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;array2:%p\n&quot;</span>, &amp;array2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	array1 := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;array1:&quot;</span>, array1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;array1:%p\n&quot;</span>, &amp;array1)</span><br><span class="line">	update(array1)</span><br><span class="line">	fmt.Println(<span class="string">&quot;array1:&quot;</span>, array1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;array1:%p\n&quot;</span>, &amp;array1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">array1: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">array1:<span class="number">0xc000010330</span></span><br><span class="line">array2: [<span class="number">100</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">array2:<span class="number">0xc000010390</span></span><br><span class="line">array1: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">array1:<span class="number">0xc000010330</span> <span class="comment">// 数组是值传递</span></span><br></pre></td></tr></table></figure>

<h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> array = [<span class="number">4</span>][<span class="number">3</span>]<span class="type">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;, &#123;<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;&#125;</span><br><span class="line">	fmt.Println(array)</span><br><span class="line">	fmt.Println(array[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>] [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>] [<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>] [<span class="number">10</span> <span class="number">11</span> <span class="number">12</span>]]</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="切片Slice"><a href="#切片Slice" class="headerlink" title="切片Slice"></a>切片Slice</h2><p>在 Go 语言中，切片（<strong>slice</strong>）是一个动态数组，是对数组的抽象。它比数组更加灵活，因为切片的长度可以动态调整，而数组的长度是固定的。</p>
<p><strong>引用类型</strong>：切片本质是一个对底层数组的引用。</p>
<ul>
<li>切片本身不存储数据，底层指向的是数组。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s []<span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> a [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;Slice:%T\n&quot;</span>, s)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Slice:%T\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Slice:[]<span class="type">int</span>（切片）</span><br><span class="line">Slice:[<span class="number">5</span>]<span class="type">int</span>（数组）</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s []<span class="type">int</span> = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T&quot;</span>, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[]<span class="type">int</span> <span class="comment">// 切片打印的类型里不包含长度</span></span><br></pre></td></tr></table></figure>

<h3 id="通过数组创建切片"><a href="#通过数组创建切片" class="headerlink" title="通过数组创建切片"></a>通过数组创建切片</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	array := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">	s1 := array[<span class="number">0</span>:<span class="number">9</span>]</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, s1)</span><br><span class="line">	fmt.Println(s1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[]<span class="type">int</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br></pre></td></tr></table></figure>

<p>这种方式创建的切片的长度和容量的关系</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	array := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">	s1 := array[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">	fmt.Println(s1)</span><br><span class="line">	fmt.Println(<span class="string">&quot;s1--len:&quot;</span>, <span class="built_in">len</span>(s1), <span class="string">&quot;cap:&quot;</span>, <span class="built_in">cap</span>(s1))</span><br><span class="line">	s2 := array[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line">	fmt.Println(s2)</span><br><span class="line">	fmt.Println(<span class="string">&quot;s2--len:&quot;</span>, <span class="built_in">len</span>(s2), <span class="string">&quot;cap:&quot;</span>, <span class="built_in">cap</span>(s2))</span><br><span class="line">	s3 := array[<span class="number">3</span>:<span class="number">10</span>]</span><br><span class="line">	fmt.Println(s3)</span><br><span class="line">	fmt.Println(<span class="string">&quot;s3--len:&quot;</span>, <span class="built_in">len</span>(s3), <span class="string">&quot;cap:&quot;</span>, <span class="built_in">cap</span>(s3))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">s1--<span class="built_in">len</span>: <span class="number">5</span> <span class="built_in">cap</span>: <span class="number">10</span></span><br><span class="line">[<span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">s2--<span class="built_in">len</span>: <span class="number">4</span> <span class="built_in">cap</span>: <span class="number">9</span></span><br><span class="line">[<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span>]</span><br><span class="line">s3--<span class="built_in">len</span>: <span class="number">7</span> <span class="built_in">cap</span>: <span class="number">7</span></span><br></pre></td></tr></table></figure>

<p>切片的容量是从切片起始位置到<strong>底层数组末尾</strong>的元素个数。</p>
<h3 id="使用make创建切片"><a href="#使用make创建切片" class="headerlink" title="使用make创建切片"></a>使用make创建切片</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	map1 := <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>, <span class="number">5</span>) <span class="comment">//使用make创建切片，需要初始化长度，容量可选。</span></span><br><span class="line">	fmt.Println(map1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T&quot;</span>, map1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="keyword">map</span>[] <span class="keyword">map</span>[] <span class="keyword">map</span>[] <span class="keyword">map</span>[] <span class="keyword">map</span>[]]</span><br><span class="line">[]<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span></span><br></pre></td></tr></table></figure>



<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>在Go语言中Map是一种无序的键值对结构。</p>
<h3 id="map的声明"><a href="#map的声明" class="headerlink" title="map的声明"></a>map的声明</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> map1 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">	fmt.Println(map1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="keyword">map</span>[] <span class="comment">//map是一种引用数据类型，未初始化值为nil（空）</span></span><br></pre></td></tr></table></figure>

<p><strong>使用make创建map</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	map1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>)</span><br><span class="line">	fmt.Println(map1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T&quot;</span>, map1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="keyword">map</span>[]</span><br><span class="line"><span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span></span><br></pre></td></tr></table></figure>

<p><strong>向map中添加元素</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> map1 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">	map1 = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>, <span class="string">&quot;two&quot;</span>: <span class="number">2</span>, <span class="string">&quot;three&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line">	fmt.Println(map1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="keyword">map</span>[one:<span class="number">1</span> three:<span class="number">3</span> two:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> map1 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">	map1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)  <span class="comment">// 在使用前进行初始化，未初始化的 map 是 nil，不能直接用于存储键值对。</span></span><br><span class="line">	map1[<span class="string">&quot;one&quot;</span>] = <span class="number">1</span></span><br><span class="line">	map1[<span class="string">&quot;two&quot;</span>] = <span class="number">2</span></span><br><span class="line">	map1[<span class="string">&quot;three&quot;</span>] = <span class="number">3</span></span><br><span class="line">	fmt.Println(map1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="keyword">map</span>[one:<span class="number">1</span> three:<span class="number">3</span> two:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<h3 id="遍历map"><a href="#遍历map" class="headerlink" title="遍历map"></a>遍历map</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> map1 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line"></span><br><span class="line">	map1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">	map1[<span class="string">&quot;one&quot;</span>] = <span class="number">1</span></span><br><span class="line">	map1[<span class="string">&quot;two&quot;</span>] = <span class="number">2</span></span><br><span class="line">	map1[<span class="string">&quot;three&quot;</span>] = <span class="number">3</span></span><br><span class="line">	<span class="keyword">for</span> key, value := <span class="keyword">range</span> map1 &#123;</span><br><span class="line">		fmt.Println(key, value)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">three <span class="number">3</span></span><br><span class="line">one <span class="number">1</span></span><br><span class="line">two <span class="number">2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>map是无序的，遍历时结果的顺序不一样</li>
<li>map的长度不固定，是引用类型</li>
<li>可以用len查看map的长度，但不能使用cap查看map的容量</li>
<li>map的key可以是所以可以比较的类型。</li>
</ul>
<h3 id="map结合切片进行使用"><a href="#map结合切片进行使用" class="headerlink" title="map结合切片进行使用"></a>map结合切片进行使用</h3><p>1.使用map存储学生信息</p>
<p>2.每个map保存一个学生的信息</p>
<p>3.将这些map存储到切片里</p>
<p>4.打印这些学生的信息</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	stu1 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;stu1&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="string">&quot;17&quot;</span>, <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line">	stu2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">	stu2[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;stu2&quot;</span></span><br><span class="line">	stu2[<span class="string">&quot;gender&quot;</span>] = <span class="string">&quot;female&quot;</span></span><br><span class="line">	stu2[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;18&quot;</span></span><br><span class="line">	<span class="keyword">var</span> stu3 = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;stu3&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="string">&quot;17&quot;</span>, <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line">	s := <span class="built_in">append</span>(<span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">0</span>), stu1, stu2, stu3)</span><br><span class="line">	fmt.Println(s)</span><br><span class="line">	<span class="keyword">for</span> _, value := <span class="keyword">range</span> s &#123;</span><br><span class="line">		fmt.Println(value)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, value := <span class="keyword">range</span> s &#123;</span><br><span class="line">		fmt.Print(<span class="string">&quot;name\t&quot;</span>, value[<span class="string">&quot;name&quot;</span>], <span class="string">&quot;\t&quot;</span>)</span><br><span class="line">		fmt.Print(<span class="string">&quot;gender\t&quot;</span>, value[<span class="string">&quot;gender&quot;</span>], <span class="string">&quot;\t&quot;</span>)</span><br><span class="line">		fmt.Println(<span class="string">&quot;age&quot;</span>, value[<span class="string">&quot;age&quot;</span>])</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="keyword">map</span>[age:<span class="number">17</span> gender:male name:stu1] <span class="keyword">map</span>[age:<span class="number">18</span> gender:female name:stu2] <span class="keyword">map</span>[age:<span class="number">17</span> gender:male name:stu3]]</span><br><span class="line"><span class="keyword">map</span>[age:<span class="number">17</span> gender:male name:stu1]</span><br><span class="line"><span class="keyword">map</span>[age:<span class="number">18</span> gender:female name:stu2]</span><br><span class="line"><span class="keyword">map</span>[age:<span class="number">17</span> gender:male name:stu3]</span><br><span class="line">name	stu1	gender	male	age <span class="number">17</span></span><br><span class="line">name	stu2	gender	female	age <span class="number">18</span></span><br><span class="line">name	stu3	gender	male	age <span class="number">17</span></span><br></pre></td></tr></table></figure>

<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>指针是存储变量地址的变量。</p>
<h3 id="指针的声明"><a href="#指针的声明" class="headerlink" title="指针的声明"></a>指针的声明</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> ptr *<span class="type">int</span></span><br><span class="line">	fmt.Println(ptr)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T&quot;</span>, ptr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&lt;<span class="literal">nil</span>&gt;</span><br><span class="line">*<span class="type">int</span></span><br></pre></td></tr></table></figure>

<h3 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h3><p>存储数组地址的指针</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> arr = [<span class="number">4</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">var</span> ptr = &amp;arr</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;arr)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, ptr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">0xc0000161c0</span></span><br><span class="line"><span class="number">0xc0000161c0</span></span><br></pre></td></tr></table></figure>

<p><strong>通过数组指针来修改数组</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> arr = [<span class="number">4</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> ptr = &amp;arr</span><br><span class="line">	(*ptr)[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">	fmt.Println(*ptr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">5</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br></pre></td></tr></table></figure>

<p><strong>数组指针语法糖</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> arr = [<span class="number">4</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> ptr = &amp;arr</span><br><span class="line">	ptr[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">	fmt.Println(*ptr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">5</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br></pre></td></tr></table></figure>

<h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><p>一个数组，数组里面的元素是指针</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">1</span></span><br><span class="line">	b := <span class="number">2</span></span><br><span class="line">	c := <span class="number">3</span></span><br><span class="line">	d := <span class="number">4</span></span><br><span class="line">	arr := [<span class="number">4</span>]*<span class="type">int</span>&#123;&amp;a, &amp;b, &amp;c, &amp;d&#125;</span><br><span class="line">	fmt.Println(arr)</span><br><span class="line">	*arr[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">	fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">0xc00010c098</span> <span class="number">0xc00010c0b0</span> <span class="number">0xc00010c0b8</span> <span class="number">0xc00010c0c0</span>]</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure>

<h3 id="指针函数"><a href="#指针函数" class="headerlink" title="指针函数"></a>指针函数</h3><p>指针函数是一个函数，返回值是指针。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ptr := pointer()</span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, ptr)</span><br><span class="line">	fmt.Println(*ptr)</span><br><span class="line">	fmt.Println(ptr[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pointer</span><span class="params">()</span></span> *[<span class="number">4</span>]<span class="type">int</span> &#123;</span><br><span class="line">	arr := [<span class="number">4</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	<span class="keyword">return</span> &amp;arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">0xc000122040</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="指针作为函数的参数"><a href="#指针作为函数的参数" class="headerlink" title="指针作为函数的参数"></a>指针作为函数的参数</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x *<span class="type">int</span>, y *<span class="type">int</span>, z *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	*z = *x + *y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	x := <span class="number">100</span></span><br><span class="line">	y := <span class="number">200</span></span><br><span class="line">	<span class="keyword">var</span> z <span class="type">int</span></span><br><span class="line">	add(&amp;x, &amp;y, &amp;z) <span class="comment">//add函数的参数是三个指针</span></span><br><span class="line">	fmt.Println(z)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">300</span></span><br></pre></td></tr></table></figure>

<h2 id="type-1"><a href="#type-1" class="headerlink" title="type"></a>type</h2><p><strong>type</strong>关键字用于自定义新的类型或为现有类型创建别名。</p>
<h3 id="自定义新的类型"><a href="#自定义新的类型" class="headerlink" title="自定义新的类型"></a>自定义新的类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type 新类型名 基础类型</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Myint <span class="type">int</span>  <span class="comment">// 定义了一个新类型Myint</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> myint Myint</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, myint)</span><br><span class="line">	myint = <span class="number">10</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d&quot;</span>, myint)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">main.Myint</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<h3 id="为现有类型创建别名"><a href="#为现有类型创建别名" class="headerlink" title="为现有类型创建别名"></a>为现有类型创建别名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type 新类型名 = 已有类型</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Myint = <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> myint Myint</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, myint)</span><br><span class="line">	myint = <span class="number">10</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d&quot;</span>, myint)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>



<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h3><p>结构体是一种自定义数据类型，可以封装多个基本数据类型。</p>
<p>可以通过<code>struct</code>来定义自己的类型。</p>
  <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> 类型名 <span class="keyword">struct</span> &#123;</span><br><span class="line">    字段名 字段类型</span><br><span class="line">    字段名 字段类型</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>示例：Person类</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义结构体</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name   <span class="type">string</span></span><br><span class="line">	age    <span class="type">int</span></span><br><span class="line">	gender <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> person Person  <span class="comment">// 结构体实例化</span></span><br><span class="line">	person.name = <span class="string">&quot;Bileton&quot;</span></span><br><span class="line">	person.age = <span class="number">21</span></span><br><span class="line">	person.gender = <span class="string">&quot;male&quot;</span></span><br><span class="line">	fmt.Println(person)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;Bileton <span class="number">21</span> male&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建对象的方式"><a href="#创建对象的方式" class="headerlink" title="创建对象的方式"></a>创建对象的方式</h3><p>这里以Person结构体为例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种，先声明，然后初始化</span></span><br><span class="line"><span class="keyword">var</span> person Person  </span><br><span class="line">person.name = <span class="string">&quot;Bileton&quot;</span></span><br><span class="line">person.age = <span class="number">21</span></span><br><span class="line">person.gender = <span class="string">&quot;male&quot;</span></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line">person := Person&#123;&#125;</span><br><span class="line">person.name = <span class="string">&quot;Bileton&quot;</span></span><br><span class="line">person.age = <span class="number">21</span></span><br><span class="line">person.gender = <span class="string">&quot;male&quot;</span></span><br><span class="line"><span class="comment">// 第三种</span></span><br><span class="line">person :=Person&#123;name: <span class="string">&quot;Bileton&quot;</span>, age: <span class="number">30</span>, gender: <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line"><span class="comment">// 第四种，这种方式需要参数顺序与结构体中的参数顺序匹配</span></span><br><span class="line">person := Person&#123;<span class="string">&quot;Bileton&quot;</span>, <span class="number">30</span>, <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h3><p><strong>结构体是值类型</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name   <span class="type">string</span></span><br><span class="line">	age    <span class="type">int</span></span><br><span class="line">	gender <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	person := Person&#123;<span class="string">&quot;Bileton&quot;</span>, <span class="number">30</span>, <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line">	personc := person</span><br><span class="line">	personc.gender = <span class="string">&quot;female&quot;</span></span><br><span class="line">	fmt.Println(person)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;Bileton <span class="number">30</span> male&#125; <span class="comment">// 修改personc不影响person</span></span><br></pre></td></tr></table></figure>



<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name   <span class="type">string</span></span><br><span class="line">	age    <span class="type">int</span></span><br><span class="line">	gender <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	person := Person&#123;<span class="string">&quot;Bileton&quot;</span>, <span class="number">30</span>, <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line">	personc := &amp;person <span class="comment">// personc是指针</span></span><br><span class="line">	(*personc).gender = <span class="string">&quot;female&quot;</span></span><br><span class="line">	fmt.Println(person)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;Bileton <span class="number">30</span> female&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结构体指针语法糖</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name   <span class="type">string</span></span><br><span class="line">	age    <span class="type">int</span></span><br><span class="line">	gender <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	person := Person&#123;<span class="string">&quot;Bileton&quot;</span>, <span class="number">30</span>, <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line">	personc := &amp;person <span class="comment">// personc是指针</span></span><br><span class="line">	personc.gender = <span class="string">&quot;female&quot;</span>  <span class="comment">// 语法糖写法</span></span><br><span class="line">	fmt.Println(person)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;Bileton <span class="number">30</span> female&#125;</span><br></pre></td></tr></table></figure>

<h3 id="匿名结构体"><a href="#匿名结构体" class="headerlink" title="匿名结构体"></a>匿名结构体</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 匿名结构体</span></span><br><span class="line">	per := <span class="keyword">struct</span> &#123;</span><br><span class="line">		name <span class="type">string</span></span><br><span class="line">		age  <span class="type">int</span></span><br><span class="line">	&#125;&#123;</span><br><span class="line">		name: <span class="string">&quot;Bileton&quot;</span>,</span><br><span class="line">		age:  <span class="number">30</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(per)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;Bileton <span class="number">30</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结构体匿名字段"><a href="#结构体匿名字段" class="headerlink" title="结构体匿名字段"></a>结构体匿名字段</h3><p>结构体的字段没有名字，但是不能有重复的数据类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="type">string</span></span><br><span class="line">	<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	per := Person&#123;<span class="string">&quot;Bileton&quot;</span>,<span class="number">21</span>&#125;</span><br><span class="line">	fmt.Println(per)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;Bileton <span class="number">21</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结构体嵌套"><a href="#结构体嵌套" class="headerlink" title="结构体嵌套"></a>结构体嵌套</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name   <span class="type">string</span></span><br><span class="line">	age    <span class="type">int</span></span><br><span class="line">	gender <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Person</span><br><span class="line">	school <span class="type">string</span></span><br><span class="line">	grade  <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	stu1 := <span class="built_in">new</span>(Student)</span><br><span class="line">	stu1.Person = Person&#123;<span class="string">&quot;JetBrains&quot;</span>, <span class="number">20</span>, <span class="string">&quot;M&quot;</span>&#125;</span><br><span class="line">	stu1.school = <span class="string">&quot;yangguangxiaoyuan&quot;</span></span><br><span class="line">	stu1.grade = <span class="string">&quot;2&quot;</span></span><br><span class="line">	fmt.Println(*stu1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;&#123;JetBrains <span class="number">20</span> M&#125; yangguangxiaoyuan <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结构体导出"><a href="#结构体导出" class="headerlink" title="结构体导出"></a>结构体导出</h3><p>在Go语言中，结构体的导出指的是如何让结构体及其字段在包（package）外部访问。Go 使用 <strong>大小写</strong> 来决定标识符的可见性：</p>
<ul>
<li><p><strong>大写开头的标识符</strong>（包括结构体、字段、函数、方法等）是<strong>导出的</strong>，可以被其他包访问。</p>
</li>
<li><p><strong>小写开头的标识符</strong>是<strong>未导出的</strong>，只能在当前包中使用。</p>
</li>
</ul>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>Go语言不是面向对象的语言，它采用了一种“简化版”的面向对象模型，强调组合而非继承，接口而非类型层次。</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>在Go语言中通过<strong>结构体嵌套</strong>以及匿名字段，字段提升来实现继承的。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name   <span class="type">string</span></span><br><span class="line">	age    <span class="type">int</span></span><br><span class="line">	gender <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Person <span class="comment">// 匿名字段</span></span><br><span class="line">	school <span class="type">string</span></span><br><span class="line">	grade  <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	stu1 := <span class="built_in">new</span>(Student)</span><br><span class="line">	stu1.name= <span class="string">&quot;JetBrains&quot;</span> <span class="comment">// 字段提升</span></span><br><span class="line">	stu1.age = <span class="number">20</span> <span class="comment">// 字段提升</span></span><br><span class="line">	stu1.gender = <span class="string">&quot;M&quot;</span></span><br><span class="line">	stu1.school = <span class="string">&quot;yangguangxiaoyuan&quot;</span></span><br><span class="line">	stu1.grade = <span class="string">&quot;2&quot;</span></span><br><span class="line">	fmt.Println(*stu1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;&#123;JetBrains <span class="number">20</span> M&#125; yangguangxiaoyuan <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>在Go语言中定义方法需要有一个额外的接受者，用于指定方法属于哪个类型。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为结构体定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span></span> SayHello() &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Hello, my name is %s and I am %d years old.\n&quot;</span>, p.Name, p.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := Person&#123;Name: <span class="string">&quot;Alice&quot;</span>, Age: <span class="number">25</span>&#125;</span><br><span class="line">    p.SayHello() <span class="comment">// 调用方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法与函数的区别"><a href="#方法与函数的区别" class="headerlink" title="方法与函数的区别"></a>方法与函数的区别</h4><p><strong>函数</strong>：独立存在，不依附于任何类型。</p>
<p><strong>方法</strong>：绑定到某个具体类型，通过类型的实例调用。</p>
<h4 id="方法的继承"><a href="#方法的继承" class="headerlink" title="方法的继承"></a>方法的继承</h4><p>通过嵌套结构体，可以复用嵌套结构体的方法。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套结构体的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a Animal)</span></span> Speak() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;I am an animal.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    Animal <span class="comment">// 嵌套</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    d := Dog&#123;&#125;</span><br><span class="line">    d.Speak() <span class="comment">// 调用嵌套结构体的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h4><p>结构体嵌套和同名方法覆盖来实现方法的重写。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套结构体的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a Animal)</span></span> Speak() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;I am an animal.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">    Animal <span class="comment">// 嵌套</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外层结构体定义了与嵌套结构体同名的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Dog)</span></span> Speak() &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;I am a dog.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    d := Dog&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用外层结构体的方法</span></span><br><span class="line">    d.Speak() <span class="comment">// 输出: I am a dog.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用嵌套结构体的方法</span></span><br><span class="line">    d.Animal.Speak() <span class="comment">// 输出: I am an animal.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口是方法的集合。</p>
<p>接口只定义方法的签名，不实现具体的逻辑。</p>
<p>只要一个类型实现了接口中的所有方法，该类型就自动实现了接口。</p>
<p>在Go语言中，接口是引用类型。</p>
<p><strong>接口示例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> USB <span class="keyword">interface</span> &#123;</span><br><span class="line">	input() <span class="type">string</span></span><br><span class="line">	output(data <span class="type">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Mouse <span class="keyword">struct</span> &#123;</span><br><span class="line">	data <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Keyboard <span class="keyword">struct</span> &#123;</span><br><span class="line">	data <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Mouse)</span></span> input() <span class="type">string</span> &#123;</span><br><span class="line">	fmt.Print(<span class="string">&quot;Mouse input:&quot;</span>)</span><br><span class="line">	<span class="keyword">var</span> data <span class="type">string</span></span><br><span class="line">	_, err := fmt.Scanln(&amp;data)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Mouse)</span></span> output(data <span class="type">string</span>) &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;this is a Mouse&quot;</span>)</span><br><span class="line">	fmt.Println(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keyboard)</span></span> input() <span class="type">string</span> &#123;</span><br><span class="line">	fmt.Print(<span class="string">&quot;Keyboard input:&quot;</span>)</span><br><span class="line">	<span class="keyword">var</span> data <span class="type">string</span></span><br><span class="line">	_, err := fmt.Scanln(&amp;data)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(k Keyboard)</span></span> output(data <span class="type">string</span>) &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;this is a Keyboard&quot;</span>)</span><br><span class="line">	fmt.Println(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	mouse := <span class="built_in">new</span>(Mouse)</span><br><span class="line">	mouse.data = mouse.input()</span><br><span class="line">	mouse.output(mouse.data)</span><br><span class="line">	keyboard := <span class="built_in">new</span>(Keyboard)</span><br><span class="line">	keyboard.data = keyboard.input()</span><br><span class="line">	keyboard.output(keyboard.data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>在Go语言中，多态是通过接口实现的。</p>
<p>接口可以让不同类型以统一的方式进行操作，从而实现了行为上的多态。</p>
<p>任何实现了接口的类型都可以作为接口类型的值，具体的实现行为由接口变量中存储的具体类型决定。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">interface</span> &#123;</span><br><span class="line">	eat()</span><br><span class="line">	sleep()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="type">string</span></span><br><span class="line">	age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cat Cat)</span></span> eat() &#123;</span><br><span class="line">	fmt.Println(cat.name, <span class="string">&quot;is eating&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cat Cat)</span></span> sleep() &#123;</span><br><span class="line">	fmt.Println(cat.name, <span class="string">&quot;is sleeping&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span></span> eat() &#123;</span><br><span class="line">	fmt.Println(dog.name, <span class="string">&quot;is eating&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dog Dog)</span></span> sleep() &#123;</span><br><span class="line">	fmt.Println(dog.name, <span class="string">&quot;is sleeping&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	cat := <span class="built_in">new</span>(Cat)</span><br><span class="line">	cat.name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">	test(*cat)</span><br><span class="line">	dog := <span class="built_in">new</span>(Dog)</span><br><span class="line">	dog.name = <span class="string">&quot;Jack&quot;</span></span><br><span class="line">	test(*dog)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(a Animal)</span></span> &#123;</span><br><span class="line">	a.eat()</span><br><span class="line">	a.sleep()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Tom is eating</span><br><span class="line">Tom is sleeping</span><br><span class="line">Jack is eating</span><br><span class="line">Jack is sleeping</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h3><p>在Go语言中，空接口是一个非常特殊的接口类型，表示可以存储任何类型的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type interface&#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>空接口没有任何方法，因此所有类型都实现了空接口。</p>
</li>
<li><p>换句话说，任何类型的值都可以赋值给空接口。</p>
</li>
</ul>
<h4 id="any"><a href="#any" class="headerlink" title="any"></a>any</h4><p>any是空接口的别名，可以用来替代<code>interface&#123;&#125;</code>。</p>
<p><code>any</code> 的本质是一个简单的语法糖，表示空接口<code>interface&#123;&#125;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type any = interface&#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="接口类型断言"><a href="#接口类型断言" class="headerlink" title="接口类型断言"></a>接口类型断言</h4><p>在 Go 语言中，类型断言（Type Assertion）用于将接口类型的变量转换为具体的类型，从而访问存储在接口中的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">value, ok := x.(T)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>x</code> 是一个接口类型的变量。</p>
</li>
<li><p><code>T</code> 是要断言的具体类型。</p>
</li>
<li><p><code>value</code> 是转换后的具体类型值。</p>
</li>
<li><p><code>ok</code> 是一个布尔值，表示断言是否成功。</p>
<ul>
<li><p>如果成功，<code>ok</code> 为 <code>true</code>，并且 <code>value</code> 是断言后的值。</p>
</li>
<li><p>如果失败，<code>ok</code> 为 <code>false</code>，<code>value</code> 为零值。</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125; = <span class="string">&quot;Hello, Go!&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 尝试将 i 转换为字符串类型</span></span><br><span class="line">	<span class="keyword">if</span> str, ok := i.(<span class="type">string</span>); ok &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;The value is a string: %s\n&quot;</span>, str)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;The value is not a string&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">The value is a <span class="type">string</span>: Hello, Go!</span><br></pre></td></tr></table></figure>

<p><strong>类型断言与switch搭配使用</strong></p>
<p><code>.(type)</code>只能出现在<code>switch</code>语句中</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkType</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;The value is a string: %s\n&quot;</span>, v)</span><br><span class="line">	<span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;The value is an integer: %d\n&quot;</span>, v)</span><br><span class="line">	<span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;The value is a boolean: %t\n&quot;</span>, v)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Unknown type: %T\n&quot;</span>, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	checkType(<span class="string">&quot;Hello, Go!&quot;</span>)</span><br><span class="line">	checkType(<span class="number">123</span>)</span><br><span class="line">	checkType(<span class="literal">true</span>)</span><br><span class="line">	checkType(<span class="number">3.14</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">The value is a <span class="type">string</span>: Hello, Go!</span><br><span class="line">The value is an integer: <span class="number">123</span></span><br><span class="line">The value is a boolean: <span class="literal">true</span></span><br><span class="line">Unknown <span class="keyword">type</span>: <span class="type">float64</span></span><br></pre></td></tr></table></figure>



<h4 id="接口嵌套"><a href="#接口嵌套" class="headerlink" title="接口嵌套"></a>接口嵌套</h4><p>在 Go 语言中，接口嵌套是一种将多个接口组合为一个更大的接口的方式。</p>
<p>如果一个类型要实现嵌套接口，必须显式实现嵌套接口中包含的所有方法。</p>
<p><strong>示例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口 AA 和 BB</span></span><br><span class="line"><span class="keyword">type</span> AA <span class="keyword">interface</span> &#123;</span><br><span class="line">	testAA()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> BB <span class="keyword">interface</span> &#123;</span><br><span class="line">	testBB()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口CC，组合AA和BB</span></span><br><span class="line"><span class="keyword">type</span> CC <span class="keyword">interface</span> &#123;</span><br><span class="line">	AA</span><br><span class="line">	BB</span><br><span class="line">	testCC()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义结构体 Test，嵌套接口CC</span></span><br><span class="line"><span class="keyword">type</span> Test <span class="keyword">struct</span> &#123;</span><br><span class="line">	CC</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(test Test)</span></span> testAA() &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;This is testAA&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(test Test)</span></span> testBB() &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;This is testBB&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(test Test)</span></span> testCC() &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;This is testCC&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	test := <span class="built_in">new</span>(Test)</span><br><span class="line">	test.testAA()</span><br><span class="line">	test.testBB()</span><br><span class="line">	test.testCC()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> ttt AA = test <span class="comment">// 接口转换</span></span><br><span class="line">	ttt.testAA()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">This is testAA</span><br><span class="line">This is testBB</span><br><span class="line">This is testCC</span><br><span class="line">This is testAA</span><br></pre></td></tr></table></figure>

<h4 id="嵌套接口中出现同名方法"><a href="#嵌套接口中出现同名方法" class="headerlink" title="嵌套接口中出现同名方法"></a>嵌套接口中出现同名方法</h4><p>在 Go 语言中，如果嵌套的多个接口中定义了同名的方法，这种情况下，嵌套接口本身不会报错，但实现嵌套接口的类型需要对该同名方法提供唯一的实现。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Engine <span class="keyword">interface</span> &#123;</span><br><span class="line">	Start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Transmission <span class="keyword">interface</span> &#123;</span><br><span class="line">	Start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vehicle <span class="keyword">interface</span> &#123;</span><br><span class="line">	Engine</span><br><span class="line">	Transmission</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Car <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Car)</span></span> Start() &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Car is starting...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> v Vehicle = Car&#123;&#125;</span><br><span class="line">	v.Start() <span class="comment">// 调用 Start 方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Car is starting...</span><br></pre></td></tr></table></figure>

<h2 id="error错误"><a href="#error错误" class="headerlink" title="error错误"></a>error错误</h2><p>在 Go 语言中，<code>error</code> 是内置接口，专门用于表示和处理错误。</p>
<p>Go 语言提倡将错误作为普通值处理，通过显式返回错误对象来提高代码的安全性和健壮性。</p>
<p><strong>error的定义</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">error</span> <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	file, err := os.Open(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(file.Name())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">open test.txt: The system cannot find the file specified.</span><br></pre></td></tr></table></figure>

<p><strong>error示例</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;errors&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	age_err := printAge(<span class="number">-1</span>)</span><br><span class="line">	<span class="keyword">if</span> age_err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(age_err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printAge</span><span class="params">(age <span class="type">int</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> age &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> errors.New(<span class="string">&quot;age must be greater than zero&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;age:&quot;</span>, age)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">age must be greater than zero</span><br></pre></td></tr></table></figure>

<h3 id="自实现error接口"><a href="#自实现error接口" class="headerlink" title="自实现error接口"></a>自实现error接口</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">type myError struct &#123;</span><br><span class="line">	code int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (e *myError) Error() string &#123;</span><br><span class="line">	return fmt.Sprintf(&quot;myError:%d&quot;, e.code)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	i, err := test(1)</span><br><span class="line">	if err != nil &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(i)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func test(i int) (int, error) &#123;</span><br><span class="line">	switch i &#123;</span><br><span class="line">	case 1:</span><br><span class="line">		return 1, &amp;myError&#123;code: 1&#125;</span><br><span class="line">	case 2:</span><br><span class="line">		return 2, &amp;myError&#123;code: 2&#125;</span><br><span class="line">	case 3:</span><br><span class="line">		return 3, &amp;myError&#123;code: 3&#125;</span><br><span class="line">	case 4:</span><br><span class="line">		return 4, &amp;myError&#123;code: 4&#125;</span><br><span class="line">	default:</span><br><span class="line">		return 777, nil</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">myError:1    </span><br></pre></td></tr></table></figure>



<h1 id="Go语言小练习"><a href="#Go语言小练习" class="headerlink" title="Go语言小练习"></a>Go语言小练习</h1><h2 id="简单的-计算器"><a href="#简单的-计算器" class="headerlink" title="简单的+-*&#x2F;计算器"></a>简单的+-*&#x2F;计算器</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;This is a Calc Application&quot;</span>)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> num1, num2 <span class="type">int</span></span><br><span class="line">		fmt.Print(<span class="string">&quot;Please input your first num:&quot;</span>)</span><br><span class="line">		fmt.Scan(&amp;num1)</span><br><span class="line">		fmt.Print(<span class="string">&quot;Please input your second num:&quot;</span>)</span><br><span class="line">		fmt.Scan(&amp;num2)</span><br><span class="line">		fmt.Print(<span class="string">&quot;Please input your operation (+, -, *, /, exit):&quot;</span>)</span><br><span class="line">		<span class="keyword">var</span> operation <span class="type">string</span></span><br><span class="line">		fmt.Scan(&amp;operation)</span><br><span class="line">		<span class="keyword">switch</span> operation &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">			fmt.Printf(<span class="string">&quot;Result: %d\n&quot;</span>, num1+num2)</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">			fmt.Printf(<span class="string">&quot;Result: %d\n&quot;</span>, num1-num2)</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">			fmt.Printf(<span class="string">&quot;Result: %d\n&quot;</span>, num1*num2)</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">			<span class="keyword">if</span> num2 == <span class="number">0</span> &#123;</span><br><span class="line">				fmt.Println(<span class="string">&quot;Error: Division by zero is not allowed. Please try again.&quot;</span>)</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			result := <span class="type">float64</span>(num1) / <span class="type">float64</span>(num2)</span><br><span class="line">			fmt.Printf(<span class="string">&quot;Result: %.2f\n&quot;</span>, result)</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Println(<span class="string">&quot;Invalid operation. Please enter +, -, *, /, or exit.&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-9乘法表"><a href="#9-9乘法表" class="headerlink" title="9*9乘法表"></a>9*9乘法表</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= i; j++ &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;%d * %d = %d\t&quot;</span>, j, i, i*j)</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="打印菱形"><a href="#打印菱形" class="headerlink" title="打印菱形"></a>打印菱形</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CIR = <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Prt</span><span class="params">(xing, blank <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; blank; i++ &#123;</span><br><span class="line">		fmt.Print(<span class="string">&quot; &quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; xing; j++ &#123;</span><br><span class="line">		fmt.Print(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; blank; i++ &#123;</span><br><span class="line">		fmt.Print(<span class="string">&quot; &quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> xing = <span class="number">1</span></span><br><span class="line">	<span class="keyword">var</span> blank = (CIR - xing) / <span class="number">2</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= CIR; i++ &#123;</span><br><span class="line">		Prt(xing, blank)</span><br><span class="line">		<span class="keyword">if</span> i &lt; <span class="type">int</span>(CIR/<span class="number">2</span>)+<span class="number">1</span> &#123;</span><br><span class="line">			xing = xing + <span class="number">2</span></span><br><span class="line">			blank = blank - <span class="number">1</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			xing = xing - <span class="number">2</span></span><br><span class="line">			blank = blank + <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">   *   </span><br><span class="line">  ***  </span><br><span class="line"> ***** </span><br><span class="line">*******</span><br><span class="line"> ***** </span><br><span class="line">  ***  </span><br><span class="line">   *</span><br></pre></td></tr></table></figure>

<h2 id="递归求和"><a href="#递归求和" class="headerlink" title="递归求和"></a>递归求和</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSum</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> getSum(n<span class="number">-1</span>) + n</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(getSum(<span class="number">3</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="递归实现斐波那契数列"><a href="#递归实现斐波那契数列" class="headerlink" title="递归实现斐波那契数列"></a>递归实现斐波那契数列</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FBI</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> FBI(n<span class="number">-1</span>) + FBI(n<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(FBI(<span class="number">4</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> array = [<span class="number">10</span>]<span class="type">int</span>&#123;<span class="number">23</span>, <span class="number">45</span>, <span class="number">67</span>, <span class="number">12</span>, <span class="number">89</span>, <span class="number">34</span>, <span class="number">56</span>, <span class="number">78</span>, <span class="number">90</span>, <span class="number">11</span>&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">9</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">9</span>-i; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> array[j] &gt; array[j+<span class="number">1</span>] &#123;</span><br><span class="line">				array[j], array[j+<span class="number">1</span>] = array[j+<span class="number">1</span>], array[j]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(array)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">11</span> <span class="number">12</span> <span class="number">23</span> <span class="number">34</span> <span class="number">45</span> <span class="number">56</span> <span class="number">67</span> <span class="number">78</span> <span class="number">89</span> <span class="number">90</span>]</span><br></pre></td></tr></table></figure>

<h2 id="通过map和slice写一个简单的图书数据库，并可以通过书名或书号来查询书的位置"><a href="#通过map和slice写一个简单的图书数据库，并可以通过书名或书号来查询书的位置" class="headerlink" title="通过map和slice写一个简单的图书数据库，并可以通过书名或书号来查询书的位置"></a>通过map和slice写一个简单的图书数据库，并可以通过书名或书号来查询书的位置</h2><p>一个map存放一本书的信息和书的位置</p>
<p>一个切片存放一组书</p>
<p>一个切片存放所有的书</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	book1 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;wangluo&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;001&quot;</span>, <span class="string">&quot;position&quot;</span>: <span class="string">&quot;floor1&quot;</span>&#125;</span><br><span class="line">	book2 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;shujuku&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;002&quot;</span>, <span class="string">&quot;position&quot;</span>: <span class="string">&quot;floor1&quot;</span>&#125;</span><br><span class="line">	book3 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;mimaxue&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;003&quot;</span>, <span class="string">&quot;position&quot;</span>: <span class="string">&quot;floor2&quot;</span>&#125;</span><br><span class="line">	book4 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;C&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;004&quot;</span>, <span class="string">&quot;position&quot;</span>: <span class="string">&quot;floor2&quot;</span>&#125;</span><br><span class="line">	book5 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;005&quot;</span>, <span class="string">&quot;position&quot;</span>: <span class="string">&quot;floor3&quot;</span>&#125;</span><br><span class="line">	book6 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;006&quot;</span>, <span class="string">&quot;position&quot;</span>: <span class="string">&quot;floor3&quot;</span>&#125;</span><br><span class="line">	floor1 := <span class="built_in">append</span>(<span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">0</span>), book1, book2)</span><br><span class="line">	floor2 := <span class="built_in">append</span>(<span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">0</span>), book3, book4)</span><br><span class="line">	floor3 := <span class="built_in">append</span>(<span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">0</span>), book5, book6)</span><br><span class="line">	database := <span class="built_in">append</span>(<span class="built_in">make</span>([][]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, <span class="number">0</span>), floor1, floor2, floor3)</span><br><span class="line">	fmt.Println(<span class="string">&quot;Please select your query_style: (name or id)&quot;</span>)</span><br><span class="line">	<span class="keyword">var</span> queryStyle <span class="type">string</span></span><br><span class="line">	find_it := <span class="number">0</span></span><br><span class="line">	fmt.Scan(&amp;queryStyle)</span><br><span class="line">	<span class="keyword">if</span> queryStyle == <span class="string">&quot;name&quot;</span> &#123;</span><br><span class="line">		fmt.Print(<span class="string">&quot;input book name:&quot;</span>)</span><br><span class="line">		<span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line">		fmt.Scanln(&amp;name)</span><br><span class="line">		<span class="keyword">for</span> _, floor := <span class="keyword">range</span> database &#123;</span><br><span class="line">			<span class="keyword">for</span> _, book := <span class="keyword">range</span> floor &#123;</span><br><span class="line">				<span class="keyword">if</span> name == book[<span class="string">&quot;name&quot;</span>] &#123;</span><br><span class="line">					find_it = <span class="number">1</span></span><br><span class="line">					fmt.Println(<span class="string">&quot;You have the name of book [&quot;</span> + book[<span class="string">&quot;name&quot;</span>] + <span class="string">&quot;]&quot;</span>)</span><br><span class="line">					fmt.Print(<span class="string">&quot;name\t&quot;</span>, book[<span class="string">&quot;name&quot;</span>], <span class="string">&quot;\t&quot;</span>)</span><br><span class="line">					fmt.Print(<span class="string">&quot;id\t&quot;</span>, book[<span class="string">&quot;id&quot;</span>], <span class="string">&quot;\t&quot;</span>)</span><br><span class="line">					fmt.Print(<span class="string">&quot;position\t&quot;</span>, book[<span class="string">&quot;position&quot;</span>], <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">					<span class="keyword">break</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> find_it == <span class="number">1</span> &#123;</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> find_it == <span class="number">0</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;no this book!&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> queryStyle == <span class="string">&quot;id&quot;</span> &#123;</span><br><span class="line">		fmt.Print(<span class="string">&quot;input book id:&quot;</span>)</span><br><span class="line">		<span class="keyword">var</span> id <span class="type">string</span></span><br><span class="line">		fmt.Scanln(&amp;id)</span><br><span class="line">		<span class="keyword">for</span> _, floor := <span class="keyword">range</span> database &#123;</span><br><span class="line">			<span class="keyword">for</span> _, book := <span class="keyword">range</span> floor &#123;</span><br><span class="line">				<span class="keyword">if</span> id == book[<span class="string">&quot;id&quot;</span>] &#123;</span><br><span class="line">					find_it = <span class="number">1</span></span><br><span class="line">					fmt.Println(<span class="string">&quot;You have the name of book [&quot;</span> + book[<span class="string">&quot;name&quot;</span>] + <span class="string">&quot;]&quot;</span>)</span><br><span class="line">					fmt.Print(<span class="string">&quot;name\t&quot;</span>, book[<span class="string">&quot;name&quot;</span>], <span class="string">&quot;\t&quot;</span>)</span><br><span class="line">					fmt.Print(<span class="string">&quot;id\t&quot;</span>, book[<span class="string">&quot;id&quot;</span>], <span class="string">&quot;\t&quot;</span>)</span><br><span class="line">					fmt.Print(<span class="string">&quot;position\t&quot;</span>, book[<span class="string">&quot;position&quot;</span>], <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">					<span class="keyword">break</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> find_it == <span class="number">1</span> &#123;</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> find_it == <span class="number">0</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;no this book!&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Yout select is invalid!&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h1><h2 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h2><p>标准库包，用于格式化输入和输出。</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><ul>
<li><p><strong>Print</strong></p>
<p>直接输出内容。</p>
</li>
<li><p><strong>Printf</strong></p>
<p>格式化输出字符串</p>
</li>
<li><p><strong>Println</strong></p>
<p>会在输出内容末尾自动添加一个换行符。</p>
</li>
<li><p><strong>Errorf</strong></p>
<p>创建带格式的错误对象，返回一个 <code>error</code> 类型的值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Errorf</span><span class="params">(format <span class="type">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">error</span></span><br><span class="line"></span><br><span class="line">format：格式化字符串，与 fmt.Sprintf 的工作方式相同。</span><br><span class="line">a ...<span class="keyword">interface</span>&#123;&#125;：可变参数列表，用于插入格式化字符串中的占位符。</span><br><span class="line"><span class="type">error</span>：返回一个实现了 <span class="type">error</span> 接口的错误对象。</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Sprintf</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func Sprintf(format string, a ...interface&#123;&#125;) string</span><br><span class="line"></span><br><span class="line">format：格式化字符串，支持占位符（即格式化动词）。</span><br><span class="line">a ...interface&#123;&#125;：可变参数，用于替换占位符。</span><br><span class="line">string：返回一个格式化后的字符串。</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>获取用户的输入。</p>
<ul>
<li><p><strong>Scan</strong></p>
<p>从标准输入扫描文本，读取由空白符分隔的值保存到传递给本函数的参数中，换行符视为空白符。</p>
</li>
<li><p><strong>Scanf</strong></p>
<p>根据format参数指定的格式去读取由空白符分隔的值保存到传递给本函数的参数中。</p>
</li>
<li><p><strong>Scanln</strong></p>
<p>用于按行读取用户输入，并且按空白字符分隔输入数据，在读取到换行符（回车）时停止。</p>
</li>
</ul>
<h3 id="格式化占位符"><a href="#格式化占位符" class="headerlink" title="格式化占位符"></a>格式化占位符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%T  //数据类型</span><br><span class="line">%t 	//true或false</span><br><span class="line">%b	//二进制</span><br><span class="line">%d	//十进制</span><br><span class="line">%x	//十六进制</span><br><span class="line">%f	//浮点数</span><br><span class="line">%s	//字符串或[]byte</span><br><span class="line">%p	//指针</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go语言基础</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON</title>
    <url>/2024/12/15/JSON/</url>
    <content><![CDATA[<p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，易于人和机器阅读和解析。它基于JavaScript的对象表示法，但被广泛用于多种编程语言。</p>
<h2 id="JSON中的数据类型"><a href="#JSON中的数据类型" class="headerlink" title="JSON中的数据类型"></a>JSON中的数据类型</h2><ul>
<li>字符串（String）：用双引号包围，如 “Hello, World!”。</li>
<li>数字（Number）：如 123、3.14，无引号。</li>
<li>布尔值（Boolean）：true 或 false。</li>
<li>数组（Array）：如 [1, 2, “abc”, true]。</li>
<li>对象（Object）：如 {“name”: “Alice”, “age”: 30}。</li>
<li>空值（Null）：表示空，如 null。</li>
</ul>
<h2 id="JSON的基本语法"><a href="#JSON的基本语法" class="headerlink" title="JSON的基本语法"></a>JSON的基本语法</h2><ul>
<li>数据在键值对中：每个键值对由键和值组成，格式为 “key”: value。</li>
<li>数据由逗号分隔：多个键值对之间使用逗号分隔。</li>
<li>对象由花括号 {} 包围：表示一个无序的键值对集合。</li>
<li>数组由方括号 [] 包围：表示一个有序的值的集合。</li>
<li>键 必须是字符串（用双引号包裹），值 可以是字符串、数字、布尔值、数组、对象或 null。</li>
</ul>
<h2 id="JSON示例"><a href="#JSON示例" class="headerlink" title="JSON示例"></a>JSON示例</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Accept&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Accept-Encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gzip, deflate, br, zstd&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Accept-Language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;www.httpbin.org&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Priority&quot;</span><span class="punctuation">:</span> <span class="string">&quot;u=0, i&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Sec-Ch-Ua&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\&quot;Chromium\&quot;;v=\&quot;130\&quot;, \&quot;Microsoft Edge\&quot;;v=\&quot;130\&quot;, \&quot;Not?A_Brand\&quot;;v=\&quot;99\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Sec-Ch-Ua-Mobile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;?0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Sec-Ch-Ua-Platform&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\&quot;Windows\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Sec-Fetch-Dest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;document&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Sec-Fetch-Mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;navigate&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Sec-Fetch-Site&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Sec-Fetch-User&quot;</span><span class="punctuation">:</span> <span class="string">&quot;?1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Upgrade-Insecure-Requests&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;User-Agent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36 Edg/130.0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;X-Amzn-Trace-Id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Root=1-672db183-55e0183d3ee3822d699e15c5&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;origin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;45.32.145.117&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.httpbin.org/get&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="load"><a href="#load" class="headerlink" title="load()"></a>load()</h2><ul>
<li>从文件对象读取 JSON 格式的数据并将其解析为 Python 对象。</li>
<li>用于直接从文件中加载 JSON 数据。<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = json.load(file)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="loads"><a href="#loads" class="headerlink" title="loads()"></a>loads()</h2><ul>
<li>从字符串中解析 JSON 格式的数据并将其转换为 Python 对象。</li>
<li>用于从 JSON 字符串中加载数据。<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">json_string = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25&#125;&#x27;</span></span><br><span class="line">data = json.loads(json_string)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="dump"><a href="#dump" class="headerlink" title="dump()"></a>dump()</h2><ul>
<li>将 Python 对象转换为 JSON 格式，并将其写入到文件中。</li>
<li>用于将 JSON 数据保存到文件。<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="string">&quot;isStudent&quot;</span>: <span class="literal">True</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json.dump(data, file, indent=<span class="number">4</span>)  <span class="comment"># 使用 indent 参数使输出美观</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="dumps"><a href="#dumps" class="headerlink" title="dumps()"></a>dumps()</h2><ul>
<li>将 Python 对象转换为 JSON 格式的字符串。</li>
<li>用于在程序中将 Python 对象转换为 JSON 字符串以便于传输或输出。<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Charlie&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="string">&quot;isStudent&quot;</span>: <span class="literal">False</span></span><br><span class="line">&#125;</span><br><span class="line">json_string = json.dumps(data, indent=<span class="number">4</span>)  <span class="comment"># 使用 indent 参数格式化输出</span></span><br><span class="line"><span class="built_in">print</span>(json_string)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>Jadx使用指南</title>
    <url>/2024/12/28/Jadx%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>IDA使用指南</title>
    <url>/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h1><h2 id="工具栏（Toolbars）"><a href="#工具栏（Toolbars）" class="headerlink" title="工具栏（Toolbars）"></a>工具栏（Toolbars）</h2><p>工具栏包含常用操作工具。<br>可在<code>View-&gt;Toobars</code>里显示或隐藏工具栏。</p>
<h2 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h2><p>导航栏是被加载⽂件地址空间的线性视图。</p>
<h1 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h1><h2 id="反汇编窗口（IDA-View）"><a href="#反汇编窗口（IDA-View）" class="headerlink" title="反汇编窗口（IDA-View）"></a>反汇编窗口（IDA-View）</h2><p>反汇编窗口有两种显示模式，文本模式和图形模式，通过<code>空格键</code>来切换。  </p>
<ul>
<li><strong>文本模式</strong><br>显示指令地址、机器码。  </li>
<li><strong>图形模式</strong><br>观察控制流。<br>可通过<code>Ctrl+鼠标滚轮</code>进行缩放。</li>
</ul>
<h2 id="伪代码窗口（Pseudocode）"><a href="#伪代码窗口（Pseudocode）" class="headerlink" title="伪代码窗口（Pseudocode）"></a>伪代码窗口（Pseudocode）</h2><ul>
<li>将反汇编代码转换为伪代码，按下<code>Tab键</code>或<code>F5</code>。</li>
<li>将伪代码转换为反汇编代码，按下<code>Tab键</code>。</li>
<li>在伪代码中根据光标位置按下<code>Tab键</code>可以快速定位到对应语句的汇编代码。</li>
</ul>
<h2 id="函数窗口（Functions）"><a href="#函数窗口（Functions）" class="headerlink" title="函数窗口（Functions）"></a>函数窗口（Functions）</h2><p>显示了当前分析的二进制文件中被识别的所有函数。</p>
<h2 id="输出窗口（Output）"><a href="#输出窗口（Output）" class="headerlink" title="输出窗口（Output）"></a>输出窗口（Output）</h2><p>显⽰的是 IDA 输出的信息。</p>
<ul>
<li><code>Ctrl+X</code>：这个快捷键在<code>output</code>窗口中的作用是清空当前窗口的内容。</li>
</ul>
<h2 id="字符串表（Strings）"><a href="#字符串表（Strings）" class="headerlink" title="字符串表（Strings）"></a>字符串表（Strings）</h2><p>字符串表会显示IDA所识别出的字符串。</p>
<ul>
<li>打开字符串表窗口的快捷键<code>Shift+F12</code>。</li>
<li>在菜单中打开 <code>View</code>-&gt;<code>Open Subviews</code>-&gt;<code>Strings</code>。</li>
<li>双击字符串会跳转到字符串所在的数据窗口的位置或反汇编窗口的位置（取决于上一步打开的窗口）。</li>
</ul>
<h2 id="数据窗口（Hex-View）"><a href="#数据窗口（Hex-View）" class="headerlink" title="数据窗口（Hex View）"></a>数据窗口（Hex View）</h2><p>以hexdump形式显示程序的数据。</p>
<ul>
<li>菜单中的位置 <code>View</code>-&gt;<code>Open subviews</code>-&gt;<code>Hex dump</code>。</li>
<li>通过<code>F2</code>可以进入编辑模式修改数据，再次按下<code>F2</code>退出编辑模式。</li>
</ul>
<h2 id="交叉引用（XREF）"><a href="#交叉引用（XREF）" class="headerlink" title="交叉引用（XREF）"></a>交叉引用（XREF）</h2><p>交叉引用（XREF，Cross Reference）是一个非常重要的工具，用于追踪某个地址、变量或函数在程序中的使用情况。它可以帮助我们快速找到某个符号、数据或函数是如何以及在何处被引用的。</p>
<ul>
<li>将光标定位到要进行交叉引用的符号，按下<code>x</code>键打开交叉引用的窗口。</li>
</ul>
<p><strong>交叉引用分类</strong></p>
<ul>
<li>代码交叉引用  </li>
<li>数据交叉引用</li>
</ul>
<h2 id="Xref-Graph"><a href="#Xref-Graph" class="headerlink" title="Xref Graph"></a>Xref Graph</h2><p>函数调用关系及引用流向</p>
<h3 id="Xref-graph-to"><a href="#Xref-graph-to" class="headerlink" title="Xref graph to"></a>Xref graph to</h3><ul>
<li>显示当前函数或地址 “被哪些位置调用或引用” 的关系图。</li>
<li>用于追踪调用者（Callers），即谁调用了当前函数或谁引用了该地址。</li>
</ul>
<p><strong>使用方式</strong><br>选中一个函数或地址后，右键在菜单中选择<code>Xrefs graph to...</code>。</p>
<h3 id="Xref-graph-from"><a href="#Xref-graph-from" class="headerlink" title="Xref graph from"></a>Xref graph from</h3><ul>
<li>显示当前函数或地址 “调用或引用了哪些目标” 的关系图。</li>
<li>用于追踪被调用者（Callees），即当前函数或代码引用了哪些其他函数或地址。</li>
</ul>
<p><strong>使用方式</strong><br>选中一个函数或地址后，右键在菜单中选择 <code>Xrefs graph from...</code>。</p>
<h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><ul>
<li><code>F5</code>：生成伪代码，刷新伪代码</li>
<li><code>ESC</code>：后退，回到上一步操作的视图</li>
</ul>
<h2 id="窗口打开"><a href="#窗口打开" class="headerlink" title="窗口打开"></a>窗口打开</h2><ul>
<li><code>x</code>：交叉引用窗口</li>
<li><code>Shift + f12</code>：字符串窗口</li>
<li><code>alt + T</code>：文本搜索窗口（速度慢）</li>
<li><code>G</code>：地址跳转窗口</li>
<li><code>Alt + I</code>：快速查找二进制文件中与某个特定值相关的指令或数据</li>
<li><code>Alt + B</code>：直接在二进制文件中查找特定的字节序列</li>
<li><code>Ctrl+S</code>：打开<code>Segments</code>窗口</li>
</ul>
<h2 id="代码转换"><a href="#代码转换" class="headerlink" title="代码转换"></a>代码转换</h2><ul>
<li><code>N</code>：修改变量名</li>
<li><code>Y</code>：修改变量的类型</li>
<li><code>Shift + Del</code>： 删除返回值</li>
<li><code>\</code> ：隐藏与显示casts（类型）</li>
<li><code>-</code> ：代码折叠（Collapse declarations）</li>
<li><code>+</code> ：代码展开（Collapse declarations）</li>
<li><code>/</code> ：行注释</li>
<li><code>Ctrl+Alt+num</code>：Lock highlight，添加高亮标记（注意：<code>num</code>是一个数字）</li>
</ul>
<h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><ul>
<li><p><code>A</code>：把数据转换为<code>&quot;\0&quot;</code>结尾的字符串</p>
</li>
<li><p><code>U</code>：取消定义（Undefine）<br>可取消函数、代码或数据的定义。取消定义后，其基础字节将作为原始字节值重新格式化。</p>
</li>
<li><p><code>C</code>：反汇编一组未定义的字节</p>
</li>
<li><p><code>D</code>：将代码转换为数据  </p>
<p><strong>整数的数据类型</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db // 1字节</span><br><span class="line">dw // 2字节</span><br><span class="line">dd // 4字节</span><br><span class="line">dq // 8字节</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>P</code>：在代码数据起始位置，按下<code>P</code>键，识别函数（注意光标需要位于起始位置）。</p>
</li>
<li><p><code>H</code>：在十进制数据和十六进制数据之间切换</p>
</li>
<li><p><code>R</code>：将数据切换为char类型</p>
</li>
</ul>
<h1 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h1><h2 id="调试器"><a href="#调试器" class="headerlink" title="调试器"></a>调试器</h2><h3 id="配置调试信息"><a href="#配置调试信息" class="headerlink" title="配置调试信息"></a>配置调试信息</h3><p>调试器选择完毕，打开Debugger菜单，选择<code>Process options</code><br>配置调试器在加载目标程序时的运行参数和环境  </p>
<ul>
<li><code>Application</code>：指定要调试的目标程序路径</li>
<li><code>Input file</code>：指定程序运行时需要的输入文件路径</li>
<li><code>Parameters</code>：为目标程序提供运行时的命令行参数。</li>
<li><code>Hostname</code>和<code>Port</code>：填写主机名和端口</li>
</ul>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/5.jpg"></p>
<h3 id="Win本地调试"><a href="#Win本地调试" class="headerlink" title="Win本地调试"></a>Win本地调试</h3><p>本地调试无需配置server文件。</p>
<h3 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h3><p>在IDA的安装目录下，有一个dbgsrv文件夹，里面是各个系统架构的远程调试server文件。</p>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/3.jpg"></p>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>把linux_server拷贝到Linux主机上，添加可执行权限，然后启动</p>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/4.jpg"></p>
<h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><p>把android_server远程调试文件push到手机上的&#x2F;data&#x2F;local&#x2F;tmp目录下，改名字为as  </p>
<ul>
<li><p>添加可执行权限</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x as</span><br></pre></td></tr></table></figure></li>
<li><p>启动as</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./as -p 1234  //-p选项用于设置端口</span><br></pre></td></tr></table></figure>
<p>  <img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/6.jpg"></p>
</li>
<li><p>端口转发</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb forward tcp:1234 tcp:1234</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h2><h3 id="Start-Process"><a href="#Start-Process" class="headerlink" title="Start Process"></a>Start Process</h3><p>Start Process 是指直接从 IDA 中启动一个可执行文件（如 .exe 程序）进行调试。IDA 会加载目标文件，并启动一个新的调试会话。</p>
<h3 id="Attach-to-Process"><a href="#Attach-to-Process" class="headerlink" title="Attach to Process"></a>Attach to Process</h3><p>Attach to Process 是指将调试器附加到一个已经运行的进程。IDA 不会启动新的程序，而是连接到当前运行中的目标进程，实时分析其运行状态。</p>
<h2 id="调试窗口"><a href="#调试窗口" class="headerlink" title="调试窗口"></a>调试窗口</h2><h3 id="General-registers窗口（寄存器）"><a href="#General-registers窗口（寄存器）" class="headerlink" title="General registers窗口（寄存器）"></a>General registers窗口（寄存器）</h3><p>&emsp;&emsp;寄存器内容在相关寄存器右边显示，后面显示对每个寄存器的说明，最右边的列中显示CPU标志位。  </p>
<ul>
<li>鼠标右键单击一个寄存器或标志位，会出现一个modify选项，可以更改寄存器或CPU标志位的值。  </li>
<li>如果一个寄存器指向一个有效的地址，那么该寄存器值右侧会出现一个直角箭头并有突出显示，单击箭头，会跳转到相应的内存位置。<br><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/2.jpg"></li>
</ul>
<h3 id="Modules窗口（模块）"><a href="#Modules窗口（模块）" class="headerlink" title="Modules窗口（模块）"></a>Modules窗口（模块）</h3><p>Modules窗⼝显⽰所有加载到进程内存空间中的可执⾏⽂件和动态链接库。  </p>
<ul>
<li>双击任何模块名称，将打开该模块导出的符号列表，双击符号，进行跳转。</li>
</ul>
<h3 id="Threads窗口（线程）"><a href="#Threads窗口（线程）" class="headerlink" title="Threads窗口（线程）"></a>Threads窗口（线程）</h3><p>Threads 窗口会列出当前进程中所有活动的线程，并显示每个线程的详细信息。</p>
<h3 id="Stack-view窗口（堆栈）"><a href="#Stack-view窗口（堆栈）" class="headerlink" title="Stack view窗口（堆栈）"></a>Stack view窗口（堆栈）</h3><p>显示当前线程调用堆栈的内容，用于观察函数调用之间的堆栈数据变化。</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li><code>F2</code>：设置断点</li>
<li><code>F7</code>：步入</li>
<li><code>F8</code>：步过</li>
<li><code>F9</code>：启动调试，及运行至下一断点</li>
<li><code>Ctrl+F7</code>：指定到当前函数的返回后位置</li>
<li><code>F4</code>：运行至光标处</li>
<li><code>Ctrl+N</code>：set IP，可以直接修改程序的执行路径。强制代码从光标位置开始执行</li>
</ul>
<h2 id="硬件断点"><a href="#硬件断点" class="headerlink" title="硬件断点"></a>硬件断点</h2><p>&emsp;&emsp;硬件断点用于在调试过程中实时监控内存区域的访问，硬件断点不会修改目标程序的代码，而是通过硬件的调试功能直接监控特定的内存地址或代码区域。</p>
<h3 id="设置硬件断点"><a href="#设置硬件断点" class="headerlink" title="设置硬件断点"></a>设置硬件断点</h3><p>先设置普通断点，右键选择<code>Breakpoint settints</code>，勾选<code>Hardware</code>，选择硬件断点模式，勾选<code>Execute</code></p>
<p>硬件断点模式</p>
<ul>
<li><code>Read</code>：断点地址被读取时命中</li>
<li><code>Write</code>：断点地址被写入时命中</li>
<li><code>Execute</code>：断点地址被执行时命中</li>
<li><code>Size</code>：地址范围的大小</li>
</ul>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/7.jpg"></p>
<h2 id="内存断点"><a href="#内存断点" class="headerlink" title="内存断点"></a>内存断点</h2><p>&emsp;&emsp;内存断点（也称为 <strong>memory breakpoint</strong> 或数据断点）是用于监控特定内存区域访问的工具。它可以捕获对目标内存地址的 <strong>读取</strong>、<strong>写入</strong> 或 <strong>执行</strong> 操作。</p>
<h3 id="设置内存断点"><a href="#设置内存断点" class="headerlink" title="设置内存断点"></a>设置内存断点</h3><p>设置普通断点，右键选择<code>Breakpoint settints</code>，勾选<code>Hardware</code>，选择硬件断点模式，勾选<code>Read</code>和<code>Write</code></p>
<h2 id="API-断点"><a href="#API-断点" class="headerlink" title="API 断点"></a>API 断点</h2><p>&emsp;&emsp;API 断点是设置在目标程序调用的 API 函数入口或关键位置的断点，目的是拦截程序调用该函数时的执行流程。</p>
<h3 id="设置API断点"><a href="#设置API断点" class="headerlink" title="设置API断点"></a>设置API断点</h3><p>设置方式与设置普通断点一致。</p>
<h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><p>用于记录程序在运行过程中执行的指令、访问的内存、调用的函数或其他关键事件。</p>
<h3 id="启用trace"><a href="#启用trace" class="headerlink" title="启用trace"></a>启用trace</h3><p>打开<code>Debugger-&gt;Tracing-&gt;Tracing Options</code>，配置trace选项。</p>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/9.jpg"></p>
<p>选择trace方式</p>
<ul>
<li>Instruction tracing：跟踪指令执行。</li>
<li>Function tracing：跟踪函数调用。</li>
<li>Basic block tracing：跟踪基本块。</li>
</ul>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/10.jpg"></p>
<p>打开Tracing window，可查看trace到的内容。</p>
<h1 id="IDA插件"><a href="#IDA插件" class="headerlink" title="IDA插件"></a>IDA插件</h1><h2 id="LazyIDA-py"><a href="#LazyIDA-py" class="headerlink" title="LazyIDA.py"></a>LazyIDA.py</h2><p><a href="https://github.com/P4nda0s/LazyIDA">https://github.com/P4nda0s/LazyIDA</a>  </p>
<h3 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h3><ul>
<li>将数据转换为python&#x2F;C的数组形式</li>
<li>选中数据后，右键，选择Convert，然后选择相应的格式。（注意：这里选中的地址要包含所需地址范围的下一地址）</li>
</ul>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/1.jpg"></p>
<h3 id="Paste-Data"><a href="#Paste-Data" class="headerlink" title="Paste Data"></a>Paste Data</h3><p>插件修改数据，光标定位到数据窗口中要修改的数据的位置，右键，选择<code>Paste Data</code>，然后输入要修改的内容。</p>
<h3 id="dump内存"><a href="#dump内存" class="headerlink" title="dump内存"></a>dump内存</h3><p>将光标定位到需要dump的数据的起始地址，右键，选择<code>Lazy Dumper</code></p>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/8.jpg"></p>
<h1 id="IDA脚本编程"><a href="#IDA脚本编程" class="headerlink" title="IDA脚本编程"></a>IDA脚本编程</h1><h2 id="脚本智能提示，自动补全"><a href="#脚本智能提示，自动补全" class="headerlink" title="脚本智能提示，自动补全"></a>脚本智能提示，自动补全</h2><p>在环境变量里添加<code>IDAPYTHONPATH</code>，值为IDA的python目录的完整路径</p>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/11.jpg"></p>
<p>添加到环境变量</p>
<p><img src="/2024/12/01/IDA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/12.jpg"></p>
<h2 id="IDA-Python"><a href="#IDA-Python" class="headerlink" title="IDA Python"></a>IDA Python</h2><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">idc.get_reg_value(<span class="string">&#x27;rax&#x27;</span>)</span><br><span class="line">idaapi.set_reg_val(<span class="string">&quot;rax&quot;</span>,<span class="number">1234</span>)</span><br></pre></td></tr></table></figure>

<h3 id="调试内存"><a href="#调试内存" class="headerlink" title="调试内存"></a>调试内存</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">idc.read_dbg_byte(addr)</span><br><span class="line">idc.read_dbg_dword(addr)</span><br><span class="line">idc.read_dbg_qword(addr)</span><br><span class="line">idc.read_dbg_memory(addr, size)</span><br><span class="line">idc.patch_dbg_byte(addr, val)  <span class="comment"># 只能单字节patch，可对这个api进行封装</span></span><br></pre></td></tr></table></figure>



<p><strong>封装idc.patch_dbg_byte(addr, val)</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">patch_dbg_mem</span>(<span class="params">addr, data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">  		idc.patch_dbg_byte(addr + i, data[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_dbg_mem</span>(<span class="params">addr, size</span>):</span><br><span class="line">    dd = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">    	dd.append(idc.read_dbg_byte(addr + i))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(dd)</span><br></pre></td></tr></table></figure>

<h3 id="本地内存"><a href="#本地内存" class="headerlink" title="本地内存"></a>本地内存</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">idc.get_qword(addr)</span><br><span class="line">idc.patch_qword(addr, val)</span><br><span class="line">idc.patch_dword(addr, val)</span><br><span class="line">idc.patch_word(addr, val)</span><br><span class="line">idc.patch_byte(addr, val)</span><br><span class="line">idc.get_db_byte(addr)</span><br><span class="line">idc.get_bytes(addr, size)</span><br></pre></td></tr></table></figure>

<h3 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">GetDisasm(addr) <span class="comment"># 获取反汇编文本</span></span><br><span class="line">idc.next_head(ea) <span class="comment"># 获取下一条指令地址</span></span><br></pre></td></tr></table></figure>

<h3 id="交叉引用"><a href="#交叉引用" class="headerlink" title="交叉引用"></a>交叉引用</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ref <span class="keyword">in</span> idautils.XrefsTo(ea):</span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">hex</span>(ref.frm)) <span class="comment"># frm是交叉引用的来源地址</span></span><br></pre></td></tr></table></figure>

<h3 id="其他常用接口"><a href="#其他常用接口" class="headerlink" title="其他常用接口"></a>其他常用接口</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">idc.add_bpt(addr) <span class="comment"># 添加断点</span></span><br><span class="line">idaapi.get_imagebase() <span class="comment"># 获取基地址</span></span><br><span class="line">idc.create_insn(addr) <span class="comment"># C, Make Code</span></span><br><span class="line">ida_funcs.add_func(addr) <span class="comment"># P , create function</span></span><br><span class="line">ida_bytes.create_strlit(addr) <span class="comment"># 创建字符串，A键效果</span></span><br></pre></td></tr></table></figure>

<h3 id="函数遍历"><a href="#函数遍历" class="headerlink" title="函数遍历"></a>函数遍历</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> func <span class="keyword">in</span> idautils.Functions():</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;0x%x,%s&quot;</span> % (func,idc.get_func_name(func)))</span><br></pre></td></tr></table></figure>

<h3 id="基本块的遍历"><a href="#基本块的遍历" class="headerlink" title="基本块的遍历"></a>基本块的遍历</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">fn = addr</span><br><span class="line">f_blocks = idaapi.FlowChart(idaapi.get_func(fn), flags = idaapi.FC_PREDS)</span><br><span class="line"><span class="keyword">for</span> block <span class="keyword">in</span> f_blocks:</span><br><span class="line">	<span class="built_in">print</span> <span class="built_in">hex</span>(block.start_ea)</span><br></pre></td></tr></table></figure>

<h3 id="基本块的前驱"><a href="#基本块的前驱" class="headerlink" title="基本块的前驱"></a>基本块的前驱</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> pred <span class="keyword">in</span> block.preds():</span><br><span class="line">	<span class="built_in">print</span> <span class="built_in">hex</span>(pred.start_ea)</span><br></pre></td></tr></table></figure>

<h3 id="基本块的后继"><a href="#基本块的后继" class="headerlink" title="基本块的后继"></a>基本块的后继</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> succ <span class="keyword">in</span> block.succs():</span><br><span class="line">	<span class="built_in">print</span> <span class="built_in">hex</span>(succ.start_ea)</span><br></pre></td></tr></table></figure>

<h3 id="指令遍历"><a href="#指令遍历" class="headerlink" title="指令遍历"></a>指令遍历</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ins <span class="keyword">in</span> idautils.FuncItems(addr):</span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">hex</span>(ins))</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>逆向工具集</category>
      </categories>
      <tags>
        <tag>IDA</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2024/12/04/JavaScript/</url>
    <content><![CDATA[<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><p>在JavaScript中，使用<code>var</code>关键字来声明变量，声明块级作用域变量使用<code>let</code>。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li><p><strong>null</strong></p>
<p>空值。</p>
</li>
<li><p><strong>undefined</strong></p>
<p>未定义，即变量在声明时没有被初始化。</p>
</li>
<li><p><strong>boolean</strong></p>
<p><code>true</code>表示真，<code>false</code>表示假。</p>
</li>
<li><p><strong>number</strong></p>
<p>整数和浮点数。</p>
</li>
<li><p><strong>string</strong></p>
<p>字符串。</p>
</li>
<li><p><strong>object</strong></p>
<p>在JavaScript中，object是一种用于存储键值对（属性和方法）的集合。</p>
</li>
<li><p><strong>function</strong></p>
<p>函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is a function!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul>
<li><p><strong>&#x3D;&#x3D;</strong></p>
<p>相等运算符</p>
<p>如果两个值不是同一类型，相等运算符（<code>==</code>）会将它们转换成同一个类型，再用严格相等运算符进行比较。</p>
</li>
<li><p><strong>&#x3D;&#x3D;&#x3D;</strong></p>
<p>严格相等运算符</p>
<p>比较两个值是否为“同一个值”。如果两个值不是同一类型，严格相等运算符（<code>===</code>）直接返回<code>false</code>。</p>
</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function FuncName()&#123;</span><br><span class="line">	//函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h1><h2 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aaa = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;123&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aaa)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aaa.<span class="title function_">valueOf</span>())</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="title class_">String</span>: <span class="string">&#x27;123&#x27;</span>]</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>



<h3 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h3><ul>
<li><p><strong>length</strong></p>
<p>字符串的长度。</p>
</li>
</ul>
<h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><ul>
<li><p><strong>concat()</strong></p>
<p>连接两个字符串，返回一个新字符串，不改变原字符串。</p>
</li>
<li><p><strong>indexOf()</strong></p>
<p>用于确定一个字符串在另一个字符串中第一次出现的位置，返回结果是匹配开始的位置。如果返回<code>-1</code>，就表示不匹配。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>) <span class="comment">// 4</span></span><br><span class="line"><span class="string">&#x27;JavaScript&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;script&#x27;</span>) <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;o&#x27;</span>, <span class="number">6</span>) <span class="comment">// 7，可以接受第二个参数，表示从该位置开始向后匹配。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>split()</strong></p>
<p>按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;a|b|c&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;|&#x27;</span>) <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;a|b|c&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">// [&quot;a&quot;, &quot;|&quot;, &quot;b&quot;, &quot;|&quot;, &quot;c&quot;]，如果分割规则为空字符串，则返回数组的成员是原字符串的每一个字符。</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;a|b|c&#x27;</span>.<span class="title function_">split</span>() <span class="comment">// [&quot;a|b|c&quot;]，如果省略参数，则返回数组的唯一成员就是原字符串。</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>LSPosed开发</title>
    <url>/2024/12/19/LSPosed%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="LSP前传Xposed介绍"><a href="#LSP前传Xposed介绍" class="headerlink" title="LSP前传Xposed介绍"></a>LSP前传Xposed介绍</h1><p>&emsp;&emsp;Xposed 框架是一个强大的 Android 逆向工程工具，它允许开发者在不修改应用程序源代码的情况下，动态地注入和修改Android 应用程序的行为。</p>
<h2 id="Xposed原理"><a href="#Xposed原理" class="headerlink" title="Xposed原理"></a>Xposed原理</h2><p>&emsp;&emsp;Android 系统运行的核心和起点是 Zygote 进程，所有应用都是通过它 fork 子进程产生的，当系统开始运行时由 <code>init.rc</code> 脚本调用<code>/system/bin/app_process</code> 程序启动Zygote，加载所需的类并调用初始化方法。</p>
<p>&emsp;&emsp;Xposed 使用 <strong>zygote</strong> 进程来注入代码，它会替换<code>/system/bin/app_process</code>，使其加载Xposed的核心模块<code>XposedBridge.jar</code>，导致所有从 Zygote fork 出来的子进程（包括应用进程和系统服务进程）都会继承 Xposed 的 Hook 环境。</p>
<h2 id="图解分析"><a href="#图解分析" class="headerlink" title="图解分析"></a>图解分析</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[init 进程]</span><br><span class="line">   |</span><br><span class="line">   v</span><br><span class="line">[/system/bin/app_process] -- 启动 Zygote</span><br><span class="line">   |</span><br><span class="line">   v</span><br><span class="line">[ZygoteInit.main()] -- 加载核心类和资源</span><br><span class="line">   |</span><br><span class="line">   v</span><br><span class="line">[fork 子进程]</span><br><span class="line">   |</span><br><span class="line">   +--&gt; [系统服务] (如 system_server)</span><br><span class="line">   |</span><br><span class="line">   +--&gt; [应用进程] (如 com.example.app)</span><br><span class="line"></span><br><span class="line">[Xposed 框架]</span><br><span class="line">   |</span><br><span class="line">   +--&gt; 替换 app_process</span><br><span class="line">   |</span><br><span class="line">   +--&gt; 劫持 ZygoteInit，加载 XposedBridge</span><br><span class="line">   |</span><br><span class="line">   +--&gt; 影响所有子进程，进行 Hook</span><br></pre></td></tr></table></figure>

<h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><p>在 Android 9 及更高版本中，安全限制增加，Xposed 原框架不支持。</p>
<h1 id="第一个LSPosed模块"><a href="#第一个LSPosed模块" class="headerlink" title="第一个LSPosed模块"></a>第一个LSPosed模块</h1><p>&emsp;&emsp;LSPosed 是一个基于 <strong>Xposed</strong> 框架的增强工具，专注于模块化的安卓应用定制。</p>
<ul>
<li>基于Riru框架，使用 Riru 技术直接注入到 <code>zygote</code> 进程，避免直接修改系统文件。</li>
</ul>
<h2 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h2><ul>
<li>面具安装LSPosed模块</li>
<li>Xposed API（XposedBridgeAPI-82.jar，XposedBridgeAPI-89.jar）</li>
</ul>
<h2 id="开发一个简单模块"><a href="#开发一个简单模块" class="headerlink" title="开发一个简单模块"></a>开发一个简单模块</h2><h3 id="Android-Studio新建空项目"><a href="#Android-Studio新建空项目" class="headerlink" title="Android Studio新建空项目"></a>Android Studio新建空项目</h3><p>&emsp;&emsp;在app目录下新建一个libs目录（若已有该目录则无需新建），把XposedBridgeAPI.jar放到libs目录下，右击jar包，选择add as library，这一步会在build.gradle里新增一个依赖<code>implementation(files(&quot;libs/XposedBridgeAPI-89.jar&quot;))</code>，我们需要把<code>implementation</code>改为<code>compileOnly</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation 使用该方式依赖的库将会参与编译和打包</span><br><span class="line">compileOnly 只在编译时有效，不会参与打包</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;修改AndroidManifest.xml文件配置，在<code>&lt;application&gt;</code>标签内添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 是否是xposed模块，xposed根据这个来判断是否是模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;xposedmodule&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 模块描述，显示在xposed模块列表那里第二行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;xposeddescription&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:value</span>=<span class="string">&quot;这是一个Xposed模块&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最低xposed版本号(lib文件名可知) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;xposedminversion&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:value</span>=<span class="string">&quot;82&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;在main目录下新建一个assets Folder目录，右击main，<code>new-&gt;Folder-&gt;Assets Folder</code>。在assets目录下新建一个xposed_init文件（无后缀），用来说明入口类。</p>
<p>&emsp;&emsp;在项目包名目录下新建一个模块类lsptest1，然后向xposed_init文件里添加一行代码，lsptest1类的全类名<code>com.example.lsposedtest.lsptest1</code>。</p>
<h3 id="实现IXposedHookLoadPackage接口"><a href="#实现IXposedHookLoadPackage接口" class="headerlink" title="实现IXposedHookLoadPackage接口"></a>实现<code>IXposedHookLoadPackage</code>接口</h3><p>在lsptest1类中实现<code>IXposedHookLoadPackage</code>接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lsptest1</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加Hook逻辑"><a href="#添加Hook逻辑" class="headerlink" title="添加Hook逻辑"></a>添加Hook逻辑</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lsptest1</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        XposedBridge.log(<span class="string">&quot;Bileton-&gt;package&quot;</span>+loadPackageParam.packageName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>&emsp;&emsp;安装成功后，打开LSPosed，点击模块</p>
<p><img src="/2024/12/19/LSPosed%E5%BC%80%E5%8F%91/1.jpg"></p>
<p>&emsp;&emsp;点击我们开发的模块，然后勾选要Hook的app，勾选完成之后，不要直接退出，通过返回键，返回到桌面，然后启动勾选的app，可以在Android Studio里面的日志里看到打印出来的App的包名。</p>
<p><strong>日志打印</strong></p>
<p><img src="/2024/12/19/LSPosed%E5%BC%80%E5%8F%91/2.jpg"></p>
<h1 id="hook构造函数和普通函数"><a href="#hook构造函数和普通函数" class="headerlink" title="hook构造函数和普通函数"></a>hook构造函数和普通函数</h1><h2 id="hookdemo编写"><a href="#hookdemo编写" class="headerlink" title="hookdemo编写"></a>hookdemo编写</h2><h3 id="Person类"><a href="#Person类" class="headerlink" title="Person类"></a>Person类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.lsphookdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=<span class="string">&quot;Bileton&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name);</span><br><span class="line">        age = age2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        Person.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;Bileton&quot;</span>, <span class="string">&quot;Person的属性为:&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot; &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="布局修改"><a href="#布局修改" class="headerlink" title="布局修改"></a>布局修改</h3><p>在布局文件里添加一个按钮<code>button_getname</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_getname&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;getname&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="MainActivity类"><a href="#MainActivity类" class="headerlink" title="MainActivity类"></a>MainActivity类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.lsphookdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.activity.EdgeToEdge;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.core.graphics.Insets;</span><br><span class="line"><span class="keyword">import</span> androidx.core.view.ViewCompat;</span><br><span class="line"><span class="keyword">import</span> androidx.core.view.WindowInsetsCompat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        EdgeToEdge.enable(<span class="built_in">this</span>);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; &#123;</span><br><span class="line">            <span class="type">Insets</span> <span class="variable">systemBars</span> <span class="operator">=</span> insets.getInsets(WindowInsetsCompat.Type.systemBars());</span><br><span class="line">            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);</span><br><span class="line">            <span class="keyword">return</span> insets;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.button_getname).setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(v.getId()==R.id.button_getname)&#123;</span><br><span class="line">            <span class="comment">// 这里调用了一个构造方法和一个普通方法</span></span><br><span class="line">            Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;GetName:&quot;</span>+<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bileton&quot;</span>,<span class="number">21</span>).getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="LSPosed模块编写"><a href="#LSPosed模块编写" class="headerlink" title="LSPosed模块编写"></a>LSPosed模块编写</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.lsposedtest;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lsptest1</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.example.lsphookdemo&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        XposedHelpers.findAndHookConstructor(<span class="string">&quot;com.example.lsphookdemo.Person&quot;</span>, loadPackageParam.classLoader, String.class, <span class="type">int</span>.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="built_in">super</span>.beforeHookedMethod(param);</span><br><span class="line">                Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;before hook param:&quot;</span>+param.args[<span class="number">0</span>]+<span class="string">&quot;---&quot;</span>+param.args[<span class="number">1</span>]);</span><br><span class="line">                param.args[<span class="number">0</span>]=<span class="string">&quot;blttttt&quot;</span>;</span><br><span class="line">                param.args[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">clazzLoader</span> <span class="operator">=</span> loadPackageParam.classLoader;</span><br><span class="line">        Class&lt;?&gt; clazz = clazzLoader.loadClass(<span class="string">&quot;com.example.lsphookdemo.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        XposedHelpers.findAndHookMethod(clazz,<span class="string">&quot;getName&quot;</span>,<span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="built_in">super</span>.afterHookedMethod(param);</span><br><span class="line">                Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;ret:&quot;</span>+param.getResult());</span><br><span class="line">                param.setResult(<span class="string">&quot;bileton&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出日志</strong></p>
<p><img src="/2024/12/19/LSPosed%E5%BC%80%E5%8F%91/3.jpg"></p>
<h1 id="hook内部类"><a href="#hook内部类" class="headerlink" title="hook内部类"></a>hook内部类</h1><h2 id="hookdemo扩展"><a href="#hookdemo扩展" class="headerlink" title="hookdemo扩展"></a>hookdemo扩展</h2><p><strong>添加内部类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;blttttt&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    People(String name)&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;Bileton&quot;</span>, <span class="string">&quot;People的属性为:&quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>布局修改</strong></p>
<p>布局文件里添加按钮<code>button_innerclass</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_innerclass&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">&quot;innerclass&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@+id/button_getname&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>调用内部类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnClickListener&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        EdgeToEdge.enable(<span class="built_in">this</span>);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; &#123;</span><br><span class="line">            <span class="type">Insets</span> <span class="variable">systemBars</span> <span class="operator">=</span> insets.getInsets(WindowInsetsCompat.Type.systemBars());</span><br><span class="line">            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);</span><br><span class="line">            <span class="keyword">return</span> insets;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.button_getname).setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">        findViewById(R.id.button_innerclass).setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(v.getId()==R.id.button_getname)&#123;</span><br><span class="line">            Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;GetName:&quot;</span>+<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bileton&quot;</span>,<span class="number">21</span>).getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(v.getId()==R.id.button_innerclass)&#123;  <span class="comment">// 内部类调用位置</span></span><br><span class="line">            <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bileton&quot;</span>,<span class="number">21</span>);</span><br><span class="line">            Person.<span class="type">People</span> <span class="variable">people</span> <span class="operator">=</span> person.<span class="keyword">new</span> <span class="title class_">People</span>(<span class="string">&quot;Blttttt&quot;</span>);</span><br><span class="line">            people.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="LSPosed模块编写-1"><a href="#LSPosed模块编写-1" class="headerlink" title="LSPosed模块编写"></a>LSPosed模块编写</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.lsposedtest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lsptest3</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.example.lsphookdemo&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> loadPackageParam.classLoader;</span><br><span class="line">        Class&lt;?&gt; person_clazz = classLoader.loadClass(<span class="string">&quot;com.example.lsphookdemo.Person&quot;</span>);</span><br><span class="line">        XposedHelpers.findAndHookConstructor(<span class="string">&quot;com.example.lsphookdemo.Person$People&quot;</span>, classLoader, person_clazz, String.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="built_in">super</span>.beforeHookedMethod(param);</span><br><span class="line">                Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;before hook param:&quot;</span>+param.args[<span class="number">0</span>]+<span class="string">&quot;---&quot;</span>+param.args[<span class="number">1</span>]);</span><br><span class="line">                param.args[<span class="number">1</span>]=<span class="string">&quot;blttt&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="built_in">super</span>.afterHookedMethod(param);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="struggle"><a href="#struggle" class="headerlink" title="struggle"></a>struggle</h2><p>这段内部类的hook挣扎了好久，后来弄清楚了，原因如下：</p>
<p>通过Jadx的反编译查看People类的构造方法，转为smali语言</p>
<p><strong>空参构造</strong></p>
<p>如下看到这个构造方法里面有一个参数，是Person类。</p>
<p><img src="/2024/12/19/LSPosed%E5%BC%80%E5%8F%91/4.jpg"></p>
<p><strong>有参构造</strong></p>
<p>查看有参数的构造方法，这个构造方法本来是一个参数，但是通过Smali代码看到还是多了一个参数，还是Person类</p>
<p><img src="/2024/12/19/LSPosed%E5%BC%80%E5%8F%91/5.jpg"></p>
<p>然后不断的试错，才明白了在Xposed里还要传递这个参数。</p>
<h1 id="hook匿名类"><a href="#hook匿名类" class="headerlink" title="hook匿名类"></a>hook匿名类</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="hook-修改属性"><a href="#hook-修改属性" class="headerlink" title="hook 修改属性"></a>hook 修改属性</h1><h2 id="hookdemo扩展-1"><a href="#hookdemo扩展-1" class="headerlink" title="hookdemo扩展"></a>hookdemo扩展</h2><p>添加了几个属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&quot;None&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">mark</span> <span class="operator">=</span> <span class="string">&quot;Null&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="获取非静态属性"><a href="#获取非静态属性" class="headerlink" title="获取非静态属性"></a>获取非静态属性</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.lsposedtest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lsptest1</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span>(!loadPackageParam.packageName.equals(<span class="string">&quot;com.example.lsphookdemo&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;hooked successful!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        XposedHelpers.findAndHookMethod(<span class="string">&quot;com.example.lsphookdemo.Person&quot;</span>, loadPackageParam.classLoader, <span class="string">&quot;print&quot;</span>, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="built_in">super</span>.beforeHookedMethod(param);</span><br><span class="line">                <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> loadPackageParam.classLoader;</span><br><span class="line">                Class&lt;?&gt; person_clazz = classLoader.loadClass(<span class="string">&quot;com.example.lsphookdemo.Person&quot;</span>);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">Object_person</span> <span class="operator">=</span> XposedHelpers.newInstance(person_clazz);</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) XposedHelpers.getObjectField(Object_person,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                Log.d(<span class="string">&quot;Bileton&quot;</span>,<span class="string">&quot;attribute: &quot;</span>+name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/19/LSPosed%E5%BC%80%E5%8F%91/6.jpg"></p>
<h2 id="修改非静态属性"><a href="#修改非静态属性" class="headerlink" title="修改非静态属性"></a>修改非静态属性</h2>]]></content>
      <categories>
        <category>LSPosed</category>
      </categories>
      <tags>
        <tag>LSPosed开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java</title>
    <url>/2024/05/01/Java/</url>
    <content><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="interface（接口）"><a href="#interface（接口）" class="headerlink" title="interface（接口）"></a>interface（接口）</h2><h1 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h1><h2 id="getBytes"><a href="#getBytes" class="headerlink" title="getBytes()"></a>getBytes()</h2><p><code>getBytes()</code> 方法用于将字符串转换为一个字节数组。</p>
<p>它将字符串的每个字符按照指定的编码格式转换为字节。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public byte[] getBytes()</span><br></pre></td></tr></table></figure>

<h1 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h1><h2 id="getenv"><a href="#getenv" class="headerlink" title="getenv()"></a>getenv()</h2><p>获取操作系统的环境变量。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令</title>
    <url>/2024/08/09/Linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><p>命令基础格式<br><code>command [-options] [parameter]</code></p>
<ul>
<li><code>command</code> : 命令本身。  </li>
<li><code>[]</code> : 可选，非必填。  </li>
<li><code>options</code> : 命令的一些选项。  </li>
<li><code>parameter</code> : 命令的参数。</li>
</ul>
<h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p><code>ls [-a -l -h] [Linux路径]</code></p>
<ul>
<li><code>[-a -l -h]</code> 是可选的选项。</li>
<li><code>Linux路径</code>是此命令的可选参数。</li>
<li><code>-a</code>表示<code>all</code>的意思，即列出全部文件（包含隐藏的文件&#x2F;文件夹），以<code>.</code>开头的文件夹就是Linux系统中隐藏的文件&#x2F;文件夹。</li>
<li><code>-l</code>表示以列表（竖向排列）的形式展示内容，并展示更多信息。</li>
<li><code>-h</code>表示以易于阅读的形式，列出文件大小，需要和-l搭配使用。</li>
</ul>
<h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><p>cd来自英文：Change Directory  </p>
<p><code>cd [Linux路径]</code></p>
<ul>
<li><code>cd</code>命令无需选项，只有参数，切换目录。</li>
<li><code>cd</code>命令直接执行，不写参数，表示回到用户的HOME目录&#x2F;系统的根目录。</li>
</ul>
<h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h2><p>查看当前所在的工作目录（Print Work Directory）。  </p>
<p><code>pwd</code>命令，无选项，无参数，直接输入<code>pwd</code>即可。</p>
<h2 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h2><p><code>.</code>：表示当前目录<br><code>.</code>.：表示上一级目录<br><code>~</code>：表示HOME目录<br><code>/</code>:根目录  </p>
<h2 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h2><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>可以创建新的目录文件夹<br>mkdir来自英文：Make Directory<br><code>mkdir [-p] Linux路径</code>  </p>
<ul>
<li>参数必填，表示Linux路径，就是要创建的文件夹的路径。</li>
<li><code>-p</code>选项可选，表示自动创建不存在的父目录，适用于创建连续多层级的目录，如<code>mkdir -p dir1/dir2/dir3</code>。</li>
</ul>
<h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>创建文件<br><code>touch Linux路径</code></p>
<ul>
<li>touch命令无选项，参数必填</li>
</ul>
<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>查看文件的内容<br><code>cat Linux路径</code></p>
<ul>
<li>cat同样没有选项，只有必填参数</li>
</ul>
<h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>也可以查看文件内容，不同的是：</p>
<ul>
<li>cat直接将内容全部显示出来  </li>
<li>more支持翻页，如果文件内容过多，可以一页一页显示</li>
</ul>
<p><code>more Linux路径</code>  </p>
<ul>
<li>没有选项，只有必填参数</li>
<li>在查看的过程中，通过空格翻页</li>
<li>通过q退出查看</li>
</ul>
<h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>复制文件&#x2F;文件夹<br><code>cp [-r] 源文件 目标文件</code></p>
<ul>
<li><code>-r</code>：选项，可选，用于复制文件夹使用</li>
<li><code>源文件</code>：Linux路径，表示被复制的文件或文件夹</li>
<li><code>目标文件</code>：Linux路径，表示要复制去的地方</li>
</ul>
<h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>用于移动文件&#x2F;文件夹<br><code>mv 源文件 目标文件</code></p>
<ul>
<li><code>源文件</code>：Linux路径，表示被移动的文件或文件夹</li>
<li><code>目标文件</code>：Linux路径，表示要移动去的地方，如果目标不存在，则进行改名，确保目标存在</li>
</ul>
<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>删除文件、文件夹<br><code>rm [-r -f] 参数1 参数2 ... 参数n</code></p>
<ul>
<li><code>-r</code>：选项用于删除文件夹</li>
<li><code>-f</code>表示force，强制删除（不会弹出提示确认信息）<br>普通用户删除内容不会弹出提示，只有root管理员用户删除内容会有提示<br>所以一般普通用户用不到-f选项</li>
<li><code>参数1、参数2…参数n</code>：表示要删除的文件或文件夹路径，按照空格隔开</li>
</ul>
<p>rm命令支持通配符<code>*</code>，用来做模糊匹配</p>
<ul>
<li>符号<code>*</code>表示通配符，即匹配任意内容（包含空）  </li>
<li><code>test*</code>，表示匹配任何以test开头的内容  </li>
<li><code>*test</code>，表示匹配任何以test结尾的内容  </li>
<li><code>*test*</code>，表示匹配任何包含test的内容</li>
</ul>
<p>以下命令慎用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -f *</span><br><span class="line">rm -rf *</span><br><span class="line">rm -rf /*</span><br></pre></td></tr></table></figure>
<h2 id="which"><a href="#which" class="headerlink" title="which"></a>which</h2><p>搜索系统的环境变量 $PATH 中列出的目录，以找到对应的可执行文件。<br><code>which xxx</code></p>
<ul>
<li>which 命令只能查找在 $PATH 环境变量中列出的目录里的可执行文件。</li>
</ul>
<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>从文件中通过关键字过滤文件的行<br><code>grep [-n] &quot;关键字&quot; 文件路径</code></p>
<ul>
<li><code>-n</code>：表示在结果中显示匹配的行的行号</li>
<li><code>&quot;关键字&quot;</code>：必填，表示过滤的关键字。</li>
<li><code>参数文件路径</code>：必填，表示要过滤的文件的文件路径，可作为内容输入端口。</li>
</ul>
<h2 id><a href="#" class="headerlink" title="|"></a>|</h2><p>管道符，将管道符左边命令的结果作为右边命令的输入</p>
<h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><p>在命令行内输出指定内容<br><code>echo &quot;输出的内容&quot;</code></p>
<ul>
<li>无需选项，只有一个参数，表示要输出的内容</li>
</ul>
<h2 id="反引号"><a href="#反引号" class="headerlink" title="反引号 &#96;"></a>反引号 &#96;</h2><p>被&#96;包围的内容，会被当做命令执行，而非普通字符</p>
<p><img src="/2024/08/09/Linux%E5%91%BD%E4%BB%A4/1.png"></p>
<h2 id="重定向符-和"><a href="#重定向符-和" class="headerlink" title="重定向符&gt;和&gt;&gt;"></a>重定向符<code>&gt;</code>和<code>&gt;&gt;</code></h2><p><code>&gt;</code>将左侧命令的结果，覆盖 写入到符号右侧指定的的文件中<br><code>&gt;&gt;</code>将左侧命令的结果，追加 写入到符号右侧指定的文件中</p>
<p><img src="/2024/08/09/Linux%E5%91%BD%E4%BB%A4/2.png"></p>
<h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p>查看文件尾部内容，跟踪文件的最新更改<br><code>tail [-f -num] Linux路径</code></p>
<ul>
<li><code>Linux路径</code>：表示被跟踪的文件路径</li>
<li><code>-f</code>：表示持续跟踪</li>
<li><code>-num</code>：表示查看尾部多少行，不填默认10行</li>
</ul>
<h2 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h2><p>以树状图的形式列出目录的内容。</p>
<h2 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h2><p>显示当前用户名的命令。</p>
<h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><p>查看一个文件的类型<br><code>file filename</code></p>
<h2 id="关机命令"><a href="#关机命令" class="headerlink" title="关机命令"></a>关机命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown -h now # 关闭系统</span><br><span class="line">reboot # 重启</span><br><span class="line">logout # 注销</span><br></pre></td></tr></table></figure>

<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>每台联网的电脑都会有一个地址，用于和其他计算机进行通讯<br>可以通过：<code>ifconfig</code>命令查看本机的ip</p>
<h2 id="特殊IP地址"><a href="#特殊IP地址" class="headerlink" title="特殊IP地址"></a>特殊IP地址</h2><ul>
<li><p><code>127.0.0.1</code>指代本机</p>
</li>
<li><pre><code>0.0.0.0
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  特殊IP</span><br><span class="line"></span><br><span class="line">  - 可以用于指代本机</span><br><span class="line">  - 可以在端口绑定中来确定绑定关系</span><br><span class="line">  - 在一些IP地址限制中，表示所有IP的意思，表示允许任意IP访问</span><br><span class="line"></span><br><span class="line">## 主机名</span><br><span class="line"></span><br><span class="line">每台电脑除了IP地址外，还可以有一个名字，称为主机名</span><br><span class="line">Windows系统和Linux都可以给系统设置主机名</span><br><span class="line"></span><br><span class="line">- Windows查看系统设备名称</span><br><span class="line">- Linux可以用命令`hostname`</span><br><span class="line"></span><br><span class="line">## 在Linux中修改主机名</span><br><span class="line"></span><br><span class="line">可以使用命令：`hostnamectl set-hostname &quot;主机名&quot;`</span><br><span class="line">重新登陆即可看到更改</span><br><span class="line"></span><br><span class="line">## 域名解析</span><br><span class="line"></span><br><span class="line">先查看本机的记录（通过主机名找到对应计算机的IP地址）</span><br><span class="line"></span><br><span class="line">- `Windows：C:\Windows\System32\drivers\etc\hosts`</span><br><span class="line">- `Linux: /etc/hosts`</span><br><span class="line"></span><br><span class="line">再联网去DNS服务器询问</span><br><span class="line"></span><br><span class="line">## 网络传输</span><br><span class="line"></span><br><span class="line">### 使用ping命令检查服务器是否可联通</span><br><span class="line"></span><br></pre></td></tr></table></figure>
ping [-c num] ip或主机名
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- `-c`，检查的次数，不使用`-c`选项，将无限次持续检查</span><br><span class="line">- `ip或主机名`，被检查的服务器的IP地址或主机名地址</span><br><span class="line"></span><br><span class="line">### 使用wget命令下载文件</span><br><span class="line"></span><br><span class="line">wget是一个非交互式的文件下载器，可以在命令行内下载网络文件</span><br><span class="line">`wget [-b] url`</span><br><span class="line"></span><br><span class="line">- `-b`，可选，后台下载，会将日志写入到当前工作目录的wget-log文件</span><br><span class="line">- `url` ,下载链接</span><br><span class="line"></span><br><span class="line">### 使用curl命令发起网络请求</span><br><span class="line"></span><br><span class="line">发送http网络请求，可用于下载文件、获取信息等</span><br><span class="line">`curl [-O] url`</span><br><span class="line"></span><br><span class="line">- `-O`，用于下载文件，当url是下载链接时，可以使用此选项保存文件</span><br><span class="line">- `url`，要发起请求的网络地址</span><br><span class="line"></span><br><span class="line">### 端口</span><br><span class="line"></span><br><span class="line">端口是设备与外界通讯交流的出入口。</span><br><span class="line"></span><br><span class="line">- 物理端口：又可以称之为接口，是可见端口，如USB接口，HDMI端口等</span><br><span class="line">- 虚拟端口：指计算机内部的端口，不可见，是用来操作系统和外部进行交互使用的</span><br><span class="line">  - 通过IP只能锁定计算机，但是无法锁定具体的程序。</span><br><span class="line">  - 通过端口可以锁定计算机上具体的应用程序，确保程序之间进行沟通。</span><br><span class="line"></span><br><span class="line">IP地址相当于小区地址，而端口相当于门牌号了。</span><br><span class="line"></span><br><span class="line">Linux系统可以支持65535个端口，这么多端口可以分为3类进行使用：</span><br><span class="line"></span><br><span class="line">- 公认端口：1~1023，通常用于一些系统内置或知名程序的预留使用，如SSH服务的22端口，HTTPS服务的443端口，非特殊需要，不能占用这个范围的端口</span><br><span class="line">- 注册端口：1024~49151，通常可以随意使用，用于松散的绑定一些程序\服务</span><br><span class="line">- 动态端口：49152~65535，通常不会固定绑定程序，而是当时程序对外网进行网络链接时，临时使用</span><br><span class="line"></span><br><span class="line">### 查看端口占用情况</span><br><span class="line"></span><br><span class="line">可以使用nmap命令</span><br><span class="line">`nmap 被查看的IP地址`</span><br><span class="line">**netstat**</span><br><span class="line">可以通过netstat命令，查看指定端口的占用情况</span><br><span class="line">`netstat -anp|grep 端口号`</span><br><span class="line">常用选项</span><br><span class="line"></span><br><span class="line">- `-a`: 列出所有端口</span><br><span class="line">- `-l`: 只显示监听端口</span><br><span class="line">- `-t`: 显示 TCP 传输协议的连线状况</span><br><span class="line">- `-u`: 显示 UDP 传输协议的连线状况</span><br><span class="line"></span><br><span class="line"># 进程管理</span><br><span class="line"></span><br><span class="line">程序运行在操作系统中，是被操作系统所管理的。</span><br><span class="line">每一个程序在运行的时候，便被操作系统注册为系统中的一个`进程`。</span><br><span class="line">并为每一个进程都分配一个独有的：进程ID（进程号）。</span><br><span class="line"></span><br><span class="line">### 查看进程ps</span><br><span class="line"></span><br><span class="line">通过PS命令查看Linux系统中的进程信息</span><br><span class="line">`ps [options]`</span><br><span class="line"></span><br><span class="line">- `-A`，显示所有终端进程</span><br><span class="line">- `-e`，显示出全部的进程</span><br><span class="line">- `-f`，以完全格式化的形式展示信息（展示全部信息）</span><br><span class="line"></span><br><span class="line">`ps -ef` 列出全部进程的全部信息</span><br><span class="line"></span><br></pre></td></tr></table></figure>
UID     :进程所属的用户ID
PID     :进程的进程号ID
PPID    :进程的父ID（启动此进程的其他进程）
C       :此进程的CPU占用率（百分比）
</code></pre>
</li>
</ul>
<p>STIME   :进程的启动时间<br>TTY     :启动此进程的终端序号，如显示？，表示非终端启动<br>TIME    :进程占用CPU时间<br>CMD     :进程对应的名称或启动路径或启动命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 关闭进程kill</span><br><span class="line"></span><br><span class="line">通过kill命令关闭进程。</span><br><span class="line">`kill [-9] 进程ID`</span><br><span class="line"></span><br><span class="line">- `-9`，表示强制关闭进程。不使用此选项会向进程发送信号要求其关闭，但是否关闭看进程自身的处理机制。</span><br><span class="line"></span><br><span class="line">### pidof</span><br><span class="line"></span><br><span class="line">查找正在运行的特定程序的进程 ID（PID）。</span><br><span class="line">`pidof [options] programName`</span><br><span class="line"></span><br><span class="line"># 压缩和解压</span><br><span class="line"></span><br><span class="line">## 压缩格式</span><br><span class="line"></span><br><span class="line">- zip格式：Linux、Windows、MacOS常用</span><br><span class="line">- 7zip：Windows常用</span><br><span class="line">- rar：Windows常用</span><br><span class="line">- tar：Linux、MacOS常用</span><br><span class="line">- gzip：Linux、MacOS常用</span><br><span class="line"></span><br><span class="line">## tar命令</span><br><span class="line"></span><br><span class="line">有两种常见压缩格式，后缀名分别是：</span><br><span class="line"></span><br><span class="line">- .tar，称之为tarball，归档文件，简单的将文件组装到一个.tar的文件内，仅仅是简单的封装。</span><br><span class="line">- .gz，常见为.tar.gz，gzip格式压缩文件，即使用gzip压缩算法将文件压缩到一个文件内，极大减少压缩后的体积</span><br><span class="line"></span><br><span class="line">对于这两种格式，可以用tar命令进行压缩和解压操作：</span><br><span class="line">`tar [-c -v -x -f -z -C] 参数1 参数2 ... 参数N`</span><br><span class="line"></span><br><span class="line">- `-c`，创建压缩文件，用于压缩模式</span><br><span class="line">- `-v`显示压缩、解压过程，用于查看进度</span><br><span class="line">- `-x`，解压模式</span><br><span class="line">- `-f`，要创建的文件，或解压的文件，-f选项必须在所有选项中位置处于最后一个</span><br><span class="line">- `-z`，gzip模式，不使用就是tarball格式</span><br><span class="line">- `-C`，选择解压的目的地，用于解压模式</span><br><span class="line"></span><br><span class="line">### tar命令压缩</span><br><span class="line"></span><br><span class="line">tar常用压缩组合有两种：</span><br><span class="line"></span><br><span class="line">- tar -cvf test.tar 1.txt 2.txt 3.txt</span><br><span class="line">  将1.txt 2.txt 3.txt压缩到test.tar文件内</span><br><span class="line">- tar -zcvf test.tar.gz 1.txt 2.txt 3.txt</span><br><span class="line">  将1.txt 2.txt 3.txt压缩到test.tar.gz文件内，使用gzip模式</span><br><span class="line"></span><br><span class="line">要注意的是：</span><br><span class="line"></span><br><span class="line">- -z选项要使用的话，一般处于选项第一个</span><br><span class="line">- -f选项，必须在选项位最后一个</span><br><span class="line"></span><br><span class="line">### tar命令解压</span><br><span class="line"></span><br><span class="line">tar常用解压组合有：</span><br><span class="line"></span><br><span class="line">- `tar -xvf test.tar`</span><br><span class="line">  解压test.tar，将文件解压至当前目录</span><br><span class="line">- `tar -xvf test.tar -C /home/itheima`</span><br><span class="line">  解压test.tar，解压至`/home/itheima`</span><br><span class="line">- `tar -zxvf test.tar.gz -C /home/itheima`</span><br><span class="line">  以gzip模式解压test.tar.gz，将文件解压至指定目录（/home/itheima）</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line"></span><br><span class="line">- `-f`选项必须在最后一位</span><br><span class="line">- `-z`选项，建议在开头位置</span><br><span class="line">- `-C`单独使用，和解压的其他参数分开</span><br><span class="line"></span><br><span class="line">## zip命令</span><br><span class="line"></span><br><span class="line">### zip压缩</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>zip [-r] 参数1 参数2 … 参数N</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- `-r`，被压缩的文件包含文件夹的时候，需要使用`-r`选项</span><br><span class="line"></span><br><span class="line">### unzip解压</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>unzip 参数 [-d]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- `-d`，指定要解压去的位置，同tar的-C选项</span><br><span class="line">- `参数`，被解压的zip压缩包文件</span><br><span class="line"></span><br><span class="line">## dpkg命令</span><br><span class="line"></span><br><span class="line">`dpkg --help`</span><br><span class="line">`dpkg --version`</span><br><span class="line">管理deb包，可以对其安装、卸载、deb打包、deb解压等操作</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>-i: 安装软件包<br>-r: 删除软件包<br>-P: 删除软件包的同时删除其配置文件<br>-L: 显示与软件包关联的文件<br>-l: 显示已安装软件包列表<br>-s: 查看软件包（已安装）的详细信息<br>-S: 查询一个文件属于哪个软件包<br>–unpack:   解开软件包<br>-c: 显示软件包内文件列表<br>–configure:    配置软件包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 7z命令</span><br><span class="line"></span><br><span class="line">### 解压</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>7z x [-r -o]</p>
<pre><code>
- `x`，代表解压文件，按原始目录解压
- `-r`，表示递归解压所有的子文件夹
- `-o`，指定解压到的目录，`-o`后面没有空格直接跟目录

# 系统目录

## /etc

- /etc/hostname

  这个文件里存放着主机名，可以进行修改
</code></pre>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法</title>
    <url>/2025/01/11/Markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>Markdown是一种轻量级标记语言，使用易读易写的纯文本格式编写文档。</p>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">#		一级标题</span></span><br><span class="line"><span class="section">##		二级标题</span></span><br><span class="line"><span class="section">###		三级标题</span></span><br><span class="line"><span class="section">####	四级标题</span></span><br><span class="line"><span class="section">#####	五级标题</span></span><br><span class="line"><span class="section">######	六级标题</span></span><br></pre></td></tr></table></figure>

<h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>使用空白行来进行段落分隔。</p>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>在一行的末尾添加两个空格，然后按回车键,即可创建一个换行。</p>
<h2 id="加粗文本"><a href="#加粗文本" class="headerlink" title="加粗文本"></a>加粗文本</h2><p>在文本的前后各添加两个星号或下划线。</p>
<h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><p>在文本前后添加一个星号或下划线。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在段落前添加一个 <code>&gt;</code> 符号。</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><strong>有序列表</strong></p>
<p>在每个列表项前添加数字并紧跟一个英文句点。</p>
<p><strong>无序列表</strong></p>
<p>在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。</p>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>要将单词或短语表示为代码，将其包裹在反引号 &#96;&#96;&#96; 中。</p>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>在单独一行上使用三个或多个星号 (<code>***</code>)、破折号 (<code>---</code>) 或下划线 (<code>___</code>) ，并且不能包含其他内容。</p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[超链接显示名](超链接地址 &quot;超链接title&quot;)</span><br></pre></td></tr></table></figure>

<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![图片alt](图片链接 &quot;图片title&quot;)</span><br></pre></td></tr></table></figure>

<h1 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h1><ul>
<li><p><strong>行内公式：</strong> 使用<code>$</code>包裹公式</p>
</li>
<li><p><strong>独立公式：</strong> 使用<code>$$</code>包裹公式</p>
</li>
</ul>
<h2 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h2><p>上下标分别使用^和_表示。例如：</p>
<p><code>$x^2$</code> $\rightarrow$ $x^2$</p>
<p><code>$x_2$</code> $ \rightarrow$$x_2$</p>
<h2 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h2><ul>
<li><p>第一种</p>
<p>  <code>$\frac &#123;a&#125;&#123;b&#125;$</code>$ \rightarrow$$\frac {a}{b}$</p>
</li>
<li><p>第二种</p>
<p>  <code>$\over$</code> $ \rightarrow$ $a+1 \over b+1$</p>
</li>
</ul>
<h2 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h2><p><code>$\sum$</code> $ \rightarrow$ $\sum$</p>
<h2 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h2><p><code>$\hat&#123;x&#125;$</code>  $ \rightarrow$ $\hat{x}$</p>
]]></content>
      <categories>
        <category>Markdown语法</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础</title>
    <url>/2024/12/15/Python%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><p>使用<code>+</code>运算符可以将多个字符串拼接起来</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">str2 = <span class="string">&quot; &quot;</span></span><br><span class="line">str3 = <span class="string">&quot;World!&quot;</span></span><br><span class="line"></span><br><span class="line">result = str1 + str2 + str3</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: Hello World!</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">string.join(iterable)</span><br><span class="line"></span><br><span class="line"><span class="comment"># string：要连接的字符串，即连接其他元素的分隔符。</span></span><br><span class="line"><span class="comment"># iterable：一个可迭代对象，比如列表、元组等，其元素会被 str 连接。</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">result = <span class="string">&#x27;, &#x27;</span>.join([<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: Hello, World</span></span><br></pre></td></tr></table></figure>

<h3 id="lower"><a href="#lower" class="headerlink" title="lower"></a>lower</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">string.lower()</span><br><span class="line"></span><br><span class="line">转换 string 中所有大写字符为小写</span><br></pre></td></tr></table></figure>

<h3 id="upper"><a href="#upper" class="headerlink" title="upper"></a>upper</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">string.upper()</span><br><span class="line"></span><br><span class="line">转换 string 中的小写字母为大写</span><br></pre></td></tr></table></figure>



<h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><h2 id="字典的创建方式"><a href="#字典的创建方式" class="headerlink" title="字典的创建方式"></a>字典的创建方式</h2><ul>
<li><p>直接定义</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">mydict = &#123;&#125; <span class="comment"># 创建空字典</span></span><br><span class="line">my_dict = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_dict)    <span class="comment"># &#123;&#x27;key1&#x27;: &#x27;value1&#x27;, &#x27;key2&#x27;: &#x27;value2&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>dict()</code>构造函数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">mydict = <span class="built_in">dict</span>() <span class="comment"># 空字典</span></span><br><span class="line">my_dict = <span class="built_in">dict</span>(key1=<span class="string">&#x27;value1&#x27;</span>,key2=<span class="string">&#x27;value2&#x27;</span>,key3=<span class="string">&#x27;value3&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_dict) <span class="comment"># &#123;&#x27;key1&#x27;: &#x27;value1&#x27;, &#x27;key2&#x27;: &#x27;value2&#x27;, &#x27;key3&#x27;: &#x27;value3&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>键值对序列</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">tuple1 = (<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>)</span><br><span class="line">tuple2 = (<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>)</span><br><span class="line">tuple3 = (<span class="string">&quot;key3&quot;</span>,<span class="string">&quot;value3&quot;</span>)</span><br><span class="line">my_list = <span class="built_in">list</span>()</span><br><span class="line">my_list.append(tuple1)</span><br><span class="line">my_list.append(tuple2)</span><br><span class="line">my_list.append(tuple3)</span><br><span class="line">my_dict = <span class="built_in">dict</span>(my_list)</span><br><span class="line"><span class="built_in">print</span>(my_dict) <span class="comment"># &#123;&#x27;key1&#x27;: &#x27;value1&#x27;, &#x27;key2&#x27;: &#x27;value2&#x27;, &#x27;key3&#x27;: &#x27;value3&#x27;&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="访问字典"><a href="#访问字典" class="headerlink" title="访问字典"></a>访问字典</h2><ul>
<li><p>通过key来获取value</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;value3&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_dict[<span class="string">&quot;key1&quot;</span>]) <span class="comment"># value1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加元素</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">mydict = &#123;&#125;</span><br><span class="line">mydict[<span class="string">&quot;key1&quot;</span>]=<span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="built_in">print</span>(mydict) <span class="comment"># &#123;&#x27;key1&#x27;: &#x27;value1&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改元素</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">mydict = &#123;&#125;</span><br><span class="line">mydict[<span class="string">&quot;key1&quot;</span>]=<span class="string">&quot;value1&quot;</span></span><br><span class="line">mydict[<span class="string">&quot;key1&quot;</span>]=<span class="string">&quot;new_value1&quot;</span></span><br><span class="line"><span class="built_in">print</span>(mydict) <span class="comment"># &#123;&#x27;key1&#x27;: &#x27;new_value1&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除元素</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">mydict = &#123;&#125;</span><br><span class="line">mydict[<span class="string">&quot;key1&quot;</span>]=<span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="keyword">del</span> mydict[<span class="string">&quot;key1&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(mydict) <span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除字典</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">mydict = &#123;&#125;</span><br><span class="line">mydict[<span class="string">&quot;key1&quot;</span>]=<span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="keyword">del</span> mydict</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="字典方法"><a href="#字典方法" class="headerlink" title="字典方法"></a>字典方法</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><p>清空字典，使之变成一个空字典。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>.clear()</span><br></pre></td></tr></table></figure>

<h3 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h3><p>返回一个包含字典中所有键的对象</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;value3&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_dict.keys())</span><br><span class="line">keyslist = <span class="built_in">list</span>(my_dict.keys())</span><br><span class="line"><span class="built_in">print</span>(keyslist)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">dict_keys([<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>])</span><br><span class="line">[<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>.values()</span><br></pre></td></tr></table></figure>

<p>返回一个包含字典中所有值的对象</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;value3&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_dict.values())</span><br><span class="line">valueslist = <span class="built_in">list</span>(my_dict.values())</span><br><span class="line"><span class="built_in">print</span>(valueslist)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">dict_values([<span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;value3&#x27;</span>])</span><br><span class="line">[<span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;value3&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="items"><a href="#items" class="headerlink" title="items()"></a>items()</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>.values()</span><br></pre></td></tr></table></figure>

<p>返回一个包含字典中所以键值对的对象</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;value3&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_dict.items())</span><br><span class="line">itemslist = <span class="built_in">list</span>(my_dict.items())</span><br><span class="line"><span class="built_in">print</span>(ietmslist)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">dict_items([(<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;value1&#x27;</span>), (<span class="string">&#x27;key2&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>), (<span class="string">&#x27;key3&#x27;</span>, <span class="string">&#x27;value3&#x27;</span>)])</span><br><span class="line">[(<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;value1&#x27;</span>), (<span class="string">&#x27;key2&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>), (<span class="string">&#x27;key3&#x27;</span>, <span class="string">&#x27;value3&#x27;</span>)]</span><br></pre></td></tr></table></figure>

<h3 id="update"><a href="#update" class="headerlink" title="update()"></a>update()</h3><p>将一个字典的键值对更新到另一个字典中。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>.update([other])</span><br><span class="line"></span><br><span class="line"><span class="comment"># other:要更新到当前字典的键值对来源，可以是另一个字典、键值对列表或键值对元组序列。</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<p>字典</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;key1&quot;</span>:<span class="string">&quot;value1&quot;</span>&#125;</span><br><span class="line">dict2 = &#123;<span class="string">&quot;key2&quot;</span>:<span class="string">&quot;value2&quot;</span>&#125;</span><br><span class="line">dict1.update(dict2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dict1&quot;</span>,dict1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dict2&quot;</span>,dict2)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>元组列表</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;key1&quot;</span>:<span class="string">&quot;value1&quot;</span>&#125;</span><br><span class="line">list2= [(<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>)]</span><br><span class="line">dict1.update(list2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dict1&quot;</span>,dict1)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">dict1 &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>键值对列表</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&quot;key1&quot;</span>:<span class="string">&quot;value1&quot;</span>&#125;</span><br><span class="line">list2= [[<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>]]</span><br><span class="line">dict1.update(list2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dict1&quot;</span>,dict1)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">dict1 &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><p>移除字典中的一个元素，并返回该元素的值。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>.pop(key)</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>: <span class="string">&#x27;value3&#x27;</span>&#125;</span><br><span class="line">popvalue = my_dict.pop(<span class="string">&quot;key3&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(popvalue)</span><br><span class="line"><span class="built_in">print</span>(my_dict)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">value3</span><br><span class="line">&#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy</title>
    <url>/2025/01/08/Numpy/</url>
    <content><![CDATA[<h1 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pip install numpy</span><br></pre></td></tr></table></figure>

<h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><h3 id="array"><a href="#array" class="headerlink" title="array()"></a>array()</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numpy.array(<span class="built_in">object</span>, dtype=<span class="literal">None</span>, copy=<span class="literal">True</span>, order=<span class="string">&#x27;K&#x27;</span>, subok=<span class="literal">False</span>, ndmin=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong><code>object</code></strong>: 必需。输入数据，例如列表、元组、嵌套列表等。</p>
</li>
<li><p><strong><code>dtype</code></strong>: 数据类型（如 <code>int</code>, <code>float</code>, <code>complex</code> 等）。默认为自动推断。</p>
</li>
<li><p><strong><code>copy</code></strong>: 是否复制输入数据，默认为 <code>True</code>。</p>
</li>
<li><p><strong><code>order</code></strong>: 内存存储顺序：</p>
<ul>
<li><p><code>&#39;C&#39;</code>：按行优先（C-style，默认）。</p>
</li>
<li><p><code>&#39;F&#39;</code>：按列优先（Fortran-style）。</p>
</li>
</ul>
</li>
<li><p><strong><code>subok</code></strong>: 如果为 <code>True</code>，生成的数组会继承输入数据的子类，否则始终返回基础类 <code>ndarray</code>。</p>
</li>
<li><p><strong><code>ndmin</code></strong>: 指定返回数组的最小维度。</p>
</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;numpy.ndarray&#x27;</span>&gt;</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br></pre></td></tr></table></figure>



<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">b = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]]</span><br></pre></td></tr></table></figure>

<h3 id="shape"><a href="#shape" class="headerlink" title="shape"></a>shape</h3><p><strong><code>shape</code></strong> 是一个属性，用于返回数组的形状（即各维度的大小）。</p>
<p>它以元组的形式表示，元组中的每个值表示数组在该维度的大小。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">b = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"><span class="built_in">print</span>(b.shape)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">(<span class="number">2</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="arange"><a href="#arange" class="headerlink" title="arange()"></a>arange()</h3><p><code>arange()</code> 函数用于生成一个指定范围内的等差数列数组。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numpy.arange([start, ]stop, [step, ]dtype=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong><code>start</code></strong>: 范围的起始值（可选）。默认是 <code>0</code>。</p>
</li>
<li><p><strong><code>stop</code></strong>: 范围的结束值（不包括该值）。</p>
</li>
<li><p><strong><code>step</code></strong>: 步长（可选）。默认为 <code>1</code>。可以是浮点数。</p>
</li>
<li><p><strong><code>dtype</code></strong>: 返回数组的数据类型（可选）。默认会根据输入类型推断。</p>
</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 0 到 9 的整数数组</span></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出: [0 1 2 3 4 5 6 7 8 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 1 到 9 的整数数组</span></span><br><span class="line">b = np.arange(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(b)  <span class="comment"># 输出: [1 2 3 4 5 6 7 8 9]</span></span><br></pre></td></tr></table></figure>



<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从 1 到 9，步长为 2</span></span><br><span class="line">c = np.arange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># 输出: [1 3 5 7 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 10 到 0，步长为 -2</span></span><br><span class="line">d = np.arange(<span class="number">10</span>, <span class="number">0</span>, -<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># 输出: [10 8 6 4 2]</span></span><br></pre></td></tr></table></figure>

<h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><p>numpy的random模块提供了多种功能，用于生成随机数和进行随机操作。</p>
<h4 id="rand"><a href="#rand" class="headerlink" title="rand()"></a>rand()</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">numpy.random.rand(d0, d1, ..., dn)</span><br></pre></td></tr></table></figure>

<p><code>rand()</code> 函数用于生成 [0, 1) 之间均匀分布的随机浮点数。它接受一个或多个整数参数，这些参数指定了输出数组的形状。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = np.random.rand(1,2,3)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[[[0.10311541 0.37724536 0.0200087 ]</span><br><span class="line">  [0.68078737 0.54724305 0.73788641]]]</span><br></pre></td></tr></table></figure>

<h4 id="random-1"><a href="#random-1" class="headerlink" title="random()"></a>random()</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numpy.random.random(size=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">size：指定输出数组的形状，可以是整数或元组。如果为 <span class="literal">None</span>，则返回一个标量。</span><br></pre></td></tr></table></figure>

<p><code>random()</code>函数用于生成 [0, 1) 之间的均匀分布随机数。它不接受维度参数，而是直接返回一个形状由参数决定的数组。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.random.random(size=(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[[<span class="number">0.27557538</span> <span class="number">0.78651989</span> <span class="number">0.21555761</span>]</span><br><span class="line"> [<span class="number">0.07048964</span> <span class="number">0.05920274</span> <span class="number">0.36977286</span>]]</span><br></pre></td></tr></table></figure>



<h4 id="randint"><a href="#randint" class="headerlink" title="randint()"></a>randint()</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numpy.random.randint(low, high=<span class="literal">None</span>, size=<span class="literal">None</span>, dtype=<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong><code>low</code></strong>: 生成随机整数的下界（包含）。</p>
</li>
<li><p><strong><code>high</code></strong>: 生成随机整数的上界（不包含）。如果未提供 <code>high</code>，则默认生成 0 到 <code>low</code> 的随机整数。</p>
</li>
<li><p><strong><code>size</code></strong>: 输出数组的形状。如果是整数，返回一个该形状的数组；如果是元组，返回对应维度的数组。</p>
</li>
<li><p><strong><code>dtype</code></strong>: 输出数组的数据类型，默认为 <code>int</code>。</p>
</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个长度为 5 的一维数组，值范围在 [10, 50) 之间</span></span><br><span class="line">e = np.random.randint(<span class="number">10</span>, <span class="number">50</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(e)  <span class="comment"># 输出类似: [28 31 11 45 39]</span></span><br></pre></td></tr></table></figure>

<h4 id="randn"><a href="#randn" class="headerlink" title="randn()"></a>randn()</h4><p><code>numpy.random.randn()</code> 是一个用于生成标准正态分布（均值为 0，标准差为 1）的随机数的函数。与其他生成随机数的函数不同，<code>randn()</code> 生成的数值并不受指定范围的限制，而是符合标准正态分布。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">numpy.random.randn(d0, d1, ..., dn)</span><br></pre></td></tr></table></figure>

<p><strong><code>d0, d1, ..., dn</code></strong>: 指定输出数组的形状。如果没有传入任何参数，则生成一个标量（单个值）。</p>
<h4 id="normal"><a href="#normal" class="headerlink" title="normal()"></a>normal()</h4><p><code>numpy.random.normal()</code> 是一个用于生成正态分布（高斯分布）随机数的函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">numpy.random.normal(loc=0.0, scale=1.0, size=None)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong><code>loc</code></strong>: 正态分布的均值（默认为 0.0）。</p>
</li>
<li><p><strong><code>scale</code></strong>: 正态分布的标准差（默认为 1.0）。标准差决定了数据的分布宽度。</p>
</li>
<li><p><strong><code>size</code></strong>: 输出数组的形状。如果是单个整数，则生成一个具有该长度的一维数组；如果是元组，则生成一个形状为元组的多维数组。</p>
</li>
</ul>
<h3 id="copy"><a href="#copy" class="headerlink" title="copy()"></a>copy()</h3><p><code>copy()</code> 函数用于创建数组的副本。</p>
<p>这是一个深拷贝操作，它会分配一个全新的内存空间，并复制原数组的所有数据。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numpy.ndarray.copy(order=<span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong><code>order</code></strong>: 决定数组在内存中的存储顺序（可选，默认值为 <code>&#39;C&#39;</code>）。</p>
<ul>
<li><code>&#39;C&#39;</code>: 按行存储（C 风格）。</li>
<li><code>&#39;F&#39;</code>: 按列存储（Fortran 风格）。</li>
<li><code>&#39;A&#39;</code>: 如果原数组是按行存储，则返回按行存储的副本；如果是按列存储，则返回按列存储的副本。</li>
<li><code>&#39;K&#39;</code>: 尽可能保留原数组的存储顺序。</li>
</ul>
<h2 id="ndarray对象"><a href="#ndarray对象" class="headerlink" title="ndarray对象"></a>ndarray对象</h2><p><code>ndarray</code> 是 NumPy 中的核心对象，它是一个多维数组，能够高效地存储和操作同类型的数据。</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="shape-1"><a href="#shape-1" class="headerlink" title="shape"></a>shape</h4><p>数组的维度</p>
<h4 id="ndim"><a href="#ndim" class="headerlink" title="ndim"></a>ndim</h4><p>数组的维度数</p>
<h4 id="size"><a href="#size" class="headerlink" title="size"></a>size</h4><p>数组的元素总数</p>
<h4 id="dtype"><a href="#dtype" class="headerlink" title="dtype"></a>dtype</h4><p>数组的元素类型</p>
<h4 id="itemsize"><a href="#itemsize" class="headerlink" title="itemsize"></a>itemsize</h4><p>数组中每个元素的大小，以字节为单位</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="reshape"><a href="#reshape" class="headerlink" title="reshape()"></a>reshape()</h4><p>通过 <code>reshape</code>方法，可以将一个数组转换成任意指定的形状，只要新形状与原数组的元素总数相同。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ndarray.reshape(shape, order=&#x27;C&#x27;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong><code>shape</code></strong>: 指定新的形状，必须是一个整数元组，形状的各个维度大小的乘积需要与原数组的总元素数一致。</p>
</li>
<li><p><strong><code>order</code></strong>: 表示读取和写入元素的顺序，默认是行优先（<code>C</code> 风格）。</p>
<ul>
<li><p><code>&#39;C&#39;</code>: 按行（C 风格）读取数据。</p>
</li>
<li><p><code>&#39;F&#39;</code>: 按列（Fortran 风格）读取数据。</p>
</li>
<li><p><code>&#39;A&#39;</code>: 如果数组存储在内存中是按行顺序，等同于 <code>&#39;C&#39;</code>；如果是按列顺序，等同于 <code>&#39;F&#39;</code>。</p>
</li>
</ul>
</li>
</ul>
<p><code>reshape</code> 不会修改原数组，它返回的是一个新的数组。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一维数组</span></span><br><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为二维数组</span></span><br><span class="line">reshaped_arr = arr.reshape((<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(reshaped_arr)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># [[1 2 3]</span></span><br><span class="line"><span class="comment">#  [4 5 6]]</span></span><br></pre></td></tr></table></figure>

<h4 id="ravel"><a href="#ravel" class="headerlink" title="ravel()"></a>ravel()</h4><p><code>ravel()</code> 方法用于将多维数组展平为一维数组。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ndarray.ravel(order=&#x27;C&#x27;)</span><br></pre></td></tr></table></figure>

<p><strong><code>order</code></strong>: 指定展平的顺序（可选，默认值为 <code>&#39;C&#39;</code>）。</p>
<ul>
<li><code>&#39;C&#39;</code>: 按行优先（C 风格）展平数据。</li>
<li><code>&#39;F&#39;</code>: 按列优先（Fortran 风格）展平数据。</li>
<li><code>&#39;A&#39;</code>: 如果数组是按行存储，等同于 <code>&#39;C&#39;</code>；如果是按列存储，等同于 <code>&#39;F&#39;</code>。</li>
<li><code>&#39;K&#39;</code>: 尽可能保留原数组的存储顺序。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建二维数组</span></span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展平数组</span></span><br><span class="line">flattened_arr = arr.ravel()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original Array:\n&quot;</span>, arr)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># [[1 2 3]</span></span><br><span class="line"><span class="comment">#  [4 5 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flattened Array:&quot;</span>, flattened_arr)</span><br><span class="line"><span class="comment"># 输出: Flattened Array: [1 2 3 4 5 6]</span></span><br></pre></td></tr></table></figure>

<h4 id="flatten"><a href="#flatten" class="headerlink" title="flatten()"></a>flatten()</h4><p><code>flatten()</code> 是一种将多维数组展平为一维数组的方法。</p>
<p>与 <code>ravel()</code> 不同，<code>flatten()</code> 总是返回数组的<strong>深拷贝</strong>，即它会创建一个全新的数组对象，因此对返回结果的修改不会影响原始数组。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建二维数组</span></span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 ravel</span></span><br><span class="line">ravel_arr = arr.ravel()</span><br><span class="line">ravel_arr[<span class="number">0</span>] = <span class="number">99</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Modified ravel Array:&quot;</span>, ravel_arr)</span><br><span class="line"><span class="comment"># 输出: [99  2  3  4  5  6]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original Array:\n&quot;</span>, arr)  <span class="comment"># 原数组被修改</span></span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># [[99  2  3]</span></span><br><span class="line"><span class="comment">#  [ 4  5  6]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 flatten</span></span><br><span class="line">flatten_arr = arr.flatten()</span><br><span class="line">flatten_arr[<span class="number">0</span>] = <span class="number">88</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Modified flatten Array:&quot;</span>, flatten_arr)</span><br><span class="line"><span class="comment"># 输出: [88  2  3  4  5  6]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original Array:\n&quot;</span>, arr)  <span class="comment"># 原数组未被修改</span></span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># [[99  2  3]</span></span><br><span class="line"><span class="comment">#  [ 4  5  6]]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="切片和索引"><a href="#切片和索引" class="headerlink" title="切片和索引"></a>切片和索引</h4> <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.arange(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">arr_r=arr.reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(arr_r)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arr_r:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr_r[<span class="number">1</span>:<span class="number">3</span>,<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line">[<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">[[<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">8</span> <span class="number">9</span>]]</span><br></pre></td></tr></table></figure>

<h2 id="数组的拼接"><a href="#数组的拼接" class="headerlink" title="数组的拼接"></a>数组的拼接</h2><h3 id="hstack"><a href="#hstack" class="headerlink" title="hstack()"></a>hstack()</h3><p><code>np.hstack()</code>是一个水平拼接（按列方向）函数。</p>
<p>它将多个数组沿水平方向（即列方向，<code>axis=1</code>）进行拼接，所有输入数组的行数（第一维大小）必须相同。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numpy.hstack((arr1, arr2, ...))</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<p>**<code>arr1, arr2, ...</code>**：需要拼接的数组（可以是列表、元组或其他数组）。</p>
<ul>
<li>输入数组的<strong>行数必须相同</strong>。</li>
</ul>
<p><strong>返回值</strong></p>
<ul>
<li>返回一个新数组，表示输入数组沿水平方向的拼接结果。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义两个二维数组</span></span><br><span class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">arr2 = np.array([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 水平拼接</span></span><br><span class="line">result = np.hstack((arr1, arr2))</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># [[1 2 5 6]</span></span><br><span class="line"><span class="comment">#  [3 4 7 8]]</span></span><br></pre></td></tr></table></figure>

<h3 id="vstack"><a href="#vstack" class="headerlink" title="vstack()"></a>vstack()</h3><p><code>np.vstack()</code>用于垂直拼接（按行方向）的函数。</p>
<p>它将多个数组沿垂直方向（即行方向，<code>axis=0</code>）进行堆叠。所有输入数组的列数（第二维大小）必须相同。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">numpy.vstack((arr1, arr2, ...))</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<p><code>arr1, arr2, ...</code>需要拼接的数组（可以是列表、元组或其他数组）。</p>
<ul>
<li>输入数组的<strong>列数必须相同</strong>。</li>
</ul>
<p><strong>返回值</strong></p>
<ul>
<li>返回一个新数组，表示输入数组沿垂直方向堆叠的结果。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义两个二维数组</span></span><br><span class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">arr2 = np.array([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 垂直拼接</span></span><br><span class="line">result = np.vstack((arr1, arr2))</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># [[1 2]</span></span><br><span class="line"><span class="comment">#  [3 4]</span></span><br><span class="line"><span class="comment">#  [5 6]</span></span><br><span class="line"><span class="comment">#  [7 8]]</span></span><br></pre></td></tr></table></figure>

<h3 id="concatenate"><a href="#concatenate" class="headerlink" title="concatenate()"></a>concatenate()</h3><p><code>np.concatenate()</code>函数用于将多个数组沿指定轴（行或者列）进行拼接。它比 <code>vstack</code> 和 <code>hstack</code> 更加灵活，因为它可以拼接任意维度的数组，并且通过指定 <code>axis</code> 参数来决定拼接的方向。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numpy.concatenate((arr1, arr2, ...), axis=<span class="number">0</span>, out=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a><strong>参数</strong></h4><ul>
<li>**<code>arr1, arr2, ...</code>**：要拼接的数组（可以是多个数组）。</li>
<li>**<code>axis</code>**：拼接的轴。默认为 <code>0</code>，表示沿行方向拼接。如果为 <code>1</code>，则表示沿列方向拼接。</li>
<li>**<code>out</code>**：可选参数，用于指定输出数组的存放位置。</li>
</ul>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a><strong>返回值</strong></h4><ul>
<li>返回一个拼接后的新数组。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])  <span class="comment"># 第一块数组</span></span><br><span class="line">arr2 = np.array([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]])  <span class="comment"># 第二块数组</span></span><br><span class="line"></span><br><span class="line">result = np.concatenate((arr1, arr2), axis=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">8</span>]]</span><br></pre></td></tr></table></figure>



<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])  <span class="comment"># 第一块数组</span></span><br><span class="line">arr2 = np.array([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]])  <span class="comment"># 第二块数组</span></span><br><span class="line"></span><br><span class="line">result = np.concatenate((arr1, arr2), axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span> <span class="number">7</span> <span class="number">8</span>]]</span><br></pre></td></tr></table></figure>

<h2 id="数组的拆分"><a href="#数组的拆分" class="headerlink" title="数组的拆分"></a>数组的拆分</h2><h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><p> <code>np.split</code> 是用于拆分数组的函数。</p>
<p>它将一个数组按照指定的分割点拆成多个子数组。</p>
<p>可以选择按照沿着哪个轴拆分数组，并指定拆分点的位置。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numpy.split(ary, indices_or_sections, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<ul>
<li>**<code>ary</code>**：要拆分的数组。</li>
<li><code>indices_or_sections</code>：<ul>
<li><strong>整数</strong>：表示将数组分成多少个部分。比如，<code>3</code> 就表示将数组均匀拆分成 3 个部分。</li>
<li><strong>数组</strong>：表示在指定的索引位置进行拆分。如果传入的是一个数组，数组中的每个元素就是一个拆分点。</li>
</ul>
</li>
<li>**<code>axis</code>**：拆分的轴，默认为 0，即沿着行方向拆分。如果指定 <code>axis=1</code>，则表示沿着列方向拆分。</li>
</ul>
<p><strong>返回值</strong></p>
<ul>
<li>返回一个列表，包含拆分后的多个子数组。</li>
</ul>
<p><strong>行方向拆分</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line">result = np.split(arr, <span class="number">3</span>, axis=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]), array([[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]), array([[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])]</span><br></pre></td></tr></table></figure>



<p><strong>列方向拆分</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line">result = np.split(arr, <span class="number">3</span>, axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[array([[<span class="number">1</span>],</span><br><span class="line">       [<span class="number">4</span>],</span><br><span class="line">       [<span class="number">7</span>]]), array([[<span class="number">2</span>],</span><br><span class="line">       [<span class="number">5</span>],</span><br><span class="line">       [<span class="number">8</span>]]), array([[<span class="number">3</span>],</span><br><span class="line">       [<span class="number">6</span>],</span><br><span class="line">       [<span class="number">9</span>]])]</span><br></pre></td></tr></table></figure>

<h2 id="数组的转置"><a href="#数组的转置" class="headerlink" title="数组的转置"></a>数组的转置</h2><h3 id="transpose"><a href="#transpose" class="headerlink" title="transpose()"></a>transpose()</h3><p><code>np.transpose()</code> 函数用于对数组进行转置操作。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"><span class="built_in">print</span>(np.transpose(arr))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[[<span class="number">1</span> <span class="number">4</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">5</span> <span class="number">8</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">6</span> <span class="number">9</span>]]</span><br></pre></td></tr></table></figure>

<h2 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h2><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode使用指南</title>
    <url>/2024/12/24/VSCode%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="高效率设置"><a href="#高效率设置" class="headerlink" title="高效率设置"></a>高效率设置</h1><h2 id="自动保存"><a href="#自动保存" class="headerlink" title="自动保存"></a>自动保存</h2><p>打开设置搜索<code>Auto Save</code>，将选项改为<code>afterDelay</code></p>
<h2 id="鼠标滚轮缩放"><a href="#鼠标滚轮缩放" class="headerlink" title="鼠标滚轮缩放"></a>鼠标滚轮缩放</h2><p>打开设置搜索<code>Mouse Wheel Zoom</code>，勾选相应的选项即可。</p>
<h1 id="自定义背景"><a href="#自定义背景" class="headerlink" title="自定义背景"></a>自定义背景</h1><p>安装插件<code>background</code></p>
<p>打开设置，搜索<code>background</code>，找到<code>Background: Fullscreen</code>，进行编辑</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;background.fullscreen&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;images&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;file:///C:/Users/blttttt/Desktop/shuimo.png&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;opacity&quot;</span><span class="punctuation">:</span> <span class="number">0.2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cover&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="string">&quot;center&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;interval&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;random&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;workbench.colorTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Default High Contrast&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><h2 id="Ctrl-B"><a href="#Ctrl-B" class="headerlink" title="Ctrl+B"></a>Ctrl+B</h2><p>切换侧边栏的显示&#x2F;隐藏状态</p>
]]></content>
      <categories>
        <category>高效率工具合集</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>adb: Android调试桥</title>
    <url>/2024/12/07/adb-Android%E8%B0%83%E8%AF%95%E6%A1%A5/</url>
    <content><![CDATA[<p>Android Debug Bridge调试桥 (adb) 是一种功能多样的命令行工具，可以通过命令行与设备进行通信。</p>
<h1 id="查询设备"><a href="#查询设备" class="headerlink" title="查询设备"></a>查询设备</h1><ul>
<li><code>adb devices</code><br>adb 会创建一个字符串，用于通过端口号唯一标识设备。</li>
<li><code>adb devices -l</code><br>加入 -l 选项，devices 命令会告知设备是什么。当连接了多个设备时，此信息会很有用，方便区分这些设备。</li>
</ul>
<h2 id="设备状态"><a href="#设备状态" class="headerlink" title="设备状态"></a>设备状态</h2><ul>
<li><code>offline</code>：设备未连接到 adb 或没有响应。</li>
<li><code>device</code>：设备已连接到 adb 服务器。<br>请注意，此状态并不表示 Android 系统已完全启动并可正常运行，因为在设备连接到 adb 时系统仍在启动。系统完成启动后，设备通常处于此运行状态。</li>
<li><code>no device</code>：未连接任何设备。</li>
<li><code>unauthorized</code>：电脑与安卓设备之间的调试授权未完成。</li>
</ul>
<h2 id="指定目标设备（-s选项）"><a href="#指定目标设备（-s选项）" class="headerlink" title="指定目标设备（-s选项）"></a>指定目标设备（-s选项）</h2><ul>
<li>如果有多个设备在运行，必须指定目标设备 。  </li>
<li>使用 devices 命令获取目标设备的序列号。  </li>
<li>获得序列号后，结合使用-s选项与 adb 命令来指定序列号。</li>
</ul>
<h1 id="安装应用"><a href="#安装应用" class="headerlink" title="安装应用"></a>安装应用</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb install path_to_apk</span><br></pre></td></tr></table></figure>

<h1 id="卸载应用"><a href="#卸载应用" class="headerlink" title="卸载应用"></a>卸载应用</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb uninstall &lt;package_name&gt;</span><br></pre></td></tr></table></figure>

<h1 id="端口转发（forward）"><a href="#端口转发（forward）" class="headerlink" title="端口转发（forward）"></a>端口转发（forward）</h1><p>可以使用 forward 命令设置任意端口转发，将特定主机端口上的请求转发到设备上的其他端口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb forward tcp:6100 tcp:7100</span><br></pre></td></tr></table></figure>
<h1 id="push与pull"><a href="#push与pull" class="headerlink" title="push与pull"></a>push与pull</h1><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p>如需将某个文件或目录（及其子目录）从PC端复制到Android端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb push local remote</span><br></pre></td></tr></table></figure>
<h2 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h2><p>从Android端复制某个文件或目录（及其子目录）到PC端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb pull remote local</span><br></pre></td></tr></table></figure>
<h1 id="停止-adb-服务器"><a href="#停止-adb-服务器" class="headerlink" title="停止 adb 服务器"></a>停止 adb 服务器</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb kill-server</span><br></pre></td></tr></table></figure>

<p>停止 adb 服务器，可以通过发出其他任何 adb 命令来重启服务器。</p>
<h1 id="shell-命令"><a href="#shell-命令" class="headerlink" title="shell 命令"></a>shell 命令</h1><p>可以使用 shell 命令通过 adb 发出设备命令，也可以使用该命令启动交互式 shell。</p>
<h1 id="软件包管理器"><a href="#软件包管理器" class="headerlink" title="软件包管理器"></a>软件包管理器</h1><ul>
<li>列出所有已安装应用  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell pm list packages</span><br></pre></td></tr></table></figure></li>
<li>列出安卓设备上的所有系统应用  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell pm list packages -s</span><br></pre></td></tr></table></figure></li>
<li>列出所有用户应用（非系统应用）  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell pm list packages -3</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h1><p>在shell中，进入<code>/sdcard</code>目录下，使用命令<code>screencap filename</code><br>在PC端，从命令行使用 screencap，使用命令<code>adb shell screencap /sdcard/filename</code></p>
<h1 id="logcat"><a href="#logcat" class="headerlink" title="logcat"></a>logcat</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb logcat [options]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb logcat --help</span><br><span class="line">Usage: logcat [options] [filterspecs]</span><br><span class="line">options include:</span><br><span class="line">  -s              Set default filter to silent. Equivalent to filterspec &#x27;*:S&#x27;</span><br><span class="line">  -f &lt;file&gt;, --file=&lt;file&gt;               Log to file. Default is stdout</span><br><span class="line">  -r &lt;kbytes&gt;, --rotate-kbytes=&lt;kbytes&gt;</span><br><span class="line">                  Rotate log every kbytes. Requires -f option</span><br><span class="line">  -n &lt;count&gt;, --rotate-count=&lt;count&gt;</span><br><span class="line">                  Sets max number of rotated logs to &lt;count&gt;, default 4</span><br><span class="line">  --id=&lt;id&gt;       If the signature id for logging to file changes, then clear</span><br><span class="line">                  the fileset and continue</span><br><span class="line">  -v &lt;format&gt;, --format=&lt;format&gt;</span><br><span class="line">                  Sets log print format verb and adverbs, where &lt;format&gt; is:</span><br><span class="line">                    brief help long process raw tag thread threadtime time</span><br><span class="line">                  and individually flagged modifying adverbs can be added:</span><br><span class="line">                    color descriptive epoch monotonic printable uid</span><br><span class="line">                    usec UTC year zone</span><br><span class="line">                  Multiple -v parameters or comma separated list of format and</span><br><span class="line">                  format modifiers are allowed.</span><br><span class="line">  -D, --dividers  Print dividers between each log buffer</span><br><span class="line">  -c, --clear     Clear (flush) the entire log and exit</span><br><span class="line">                  if Log to File specified, clear fileset instead</span><br><span class="line">  -d              Dump the log and then exit (don&#x27;t block)</span><br><span class="line">  -e &lt;expr&gt;, --regex=&lt;expr&gt;</span><br><span class="line">                  Only print lines where the log message matches &lt;expr&gt;</span><br><span class="line">                  where &lt;expr&gt; is a Perl-compatible regular expression</span><br><span class="line">  -m &lt;count&gt;, --max-count=&lt;count&gt;</span><br><span class="line">                  Quit after printing &lt;count&gt; lines. This is meant to be</span><br><span class="line">                  paired with --regex, but will work on its own.</span><br><span class="line">  --print         Paired with --regex and --max-count to let content bypass</span><br><span class="line">                  regex filter but still stop at number of matches.</span><br><span class="line">  -t &lt;count&gt;      Print only the most recent &lt;count&gt; lines (implies -d)</span><br><span class="line">  -t &#x27;&lt;time&gt;&#x27;     Print most recent lines since specified time (implies -d)</span><br><span class="line">  -T &lt;count&gt;      Print only the most recent &lt;count&gt; lines (does not imply -d)</span><br><span class="line">  -T &#x27;&lt;time&gt;&#x27;     Print most recent lines since specified time (not imply -d)</span><br><span class="line">                  count is pure numerical, time is &#x27;MM-DD hh:mm:ss.mmm...&#x27;</span><br><span class="line">                  &#x27;YYYY-MM-DD hh:mm:ss.mmm...&#x27; or &#x27;sssss.mmm...&#x27; format</span><br><span class="line">  -g, --buffer-size                      Get the size of the ring buffer.</span><br><span class="line">  -G &lt;size&gt;, --buffer-size=&lt;size&gt;</span><br><span class="line">                  Set size of log ring buffer, may suffix with K or M.</span><br><span class="line">  -L, --last      Dump logs from prior to last reboot</span><br><span class="line">  -b &lt;buffer&gt;, --buffer=&lt;buffer&gt;         Request alternate ring buffer, &#x27;main&#x27;,</span><br><span class="line">                  &#x27;system&#x27;, &#x27;radio&#x27;, &#x27;events&#x27;, &#x27;crash&#x27;, &#x27;default&#x27; or &#x27;all&#x27;.</span><br><span class="line">                  Multiple -b parameters or comma separated list of buffers are</span><br><span class="line">                  allowed. Buffers interleaved. Default -b main,system,crash.</span><br><span class="line">  -B, --binary    Output the log in binary.</span><br><span class="line">  -S, --statistics                       Output statistics.</span><br><span class="line">  -p, --prune     Print prune white and ~black list. Service is specified as</span><br><span class="line">                  UID, UID/PID or /PID. Weighed for quicker pruning if prefix</span><br><span class="line">                  with ~, otherwise weighed for longevity if unadorned. All</span><br><span class="line">                  other pruning activity is oldest first. Special case ~!</span><br><span class="line">                  represents an automatic quicker pruning for the noisiest</span><br><span class="line">                  UID as determined by the current statistics.</span><br><span class="line">  -P &#x27;&lt;list&gt; ...&#x27;, --prune=&#x27;&lt;list&gt; ...&#x27;</span><br><span class="line">                  Set prune white and ~black list, using same format as</span><br><span class="line">                  listed above. Must be quoted.</span><br><span class="line">  --pid=&lt;pid&gt;     Only prints logs from the given pid.</span><br><span class="line">  --wrap          Sleep for 2 hours or when buffer about to wrap whichever</span><br><span class="line">                  comes first. Improves efficiency of polling by providing</span><br><span class="line">                  an about-to-wrap wakeup.</span><br><span class="line"></span><br><span class="line">filterspecs are a series of</span><br><span class="line">  &lt;tag&gt;[:priority]</span><br><span class="line"></span><br><span class="line">where &lt;tag&gt; is a log component tag (or * for all) and priority is:</span><br><span class="line">  V    Verbose (default for &lt;tag&gt;)</span><br><span class="line">  D    Debug (default for &#x27;*&#x27;)</span><br><span class="line">  I    Info</span><br><span class="line">  W    Warn</span><br><span class="line">  E    Error</span><br><span class="line">  F    Fatal</span><br><span class="line">  S    Silent (suppress all output)</span><br><span class="line"></span><br><span class="line">&#x27;*&#x27; by itself means &#x27;*:D&#x27; and &lt;tag&gt; by itself means &lt;tag&gt;:V.</span><br><span class="line">If no &#x27;*&#x27; filterspec or -s on command line, all filter defaults to &#x27;*:V&#x27;.</span><br><span class="line">eg: &#x27;*:S &lt;tag&gt;&#x27; prints only &lt;tag&gt;, &#x27;&lt;tag&gt;:S&#x27; suppresses all &lt;tag&gt; log messages.</span><br><span class="line"></span><br><span class="line">If not specified on the command line, filterspec is set from ANDROID_LOG_TAGS.</span><br><span class="line"></span><br><span class="line">If not specified with -v on command line, format is set from ANDROID_PRINTF_LOG</span><br><span class="line">or defaults to &quot;threadtime&quot;</span><br></pre></td></tr></table></figure>

<h1 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb reboot 				重启设备</span><br><span class="line">adb reboot bootloader 	进入引导加载模式</span><br><span class="line">adb reboot recovery 	进入恢复模式</span><br></pre></td></tr></table></figure>

<h1 id="fastboot"><a href="#fastboot" class="headerlink" title="fastboot"></a>fastboot</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastboot devices		列出当前连接的设备及其序列号</span><br><span class="line">fastboot reboot			退出 fastboot 模式并正常重启设备。</span><br><span class="line">fastboot flashing unlock	解锁bl锁</span><br><span class="line">fastboot flashing lock		锁定bl锁</span><br><span class="line">fastboot flash boot boot.img	刷写镜像文件</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>逆向工具集</category>
      </categories>
      <tags>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>frida_rpc</title>
    <url>/2025/01/14/frida-rpc/</url>
    <content><![CDATA[<h1 id="枚举所有进程及其进程ID"><a href="#枚举所有进程及其进程ID" class="headerlink" title="枚举所有进程及其进程ID"></a>枚举所有进程及其进程ID</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Connected to device&quot;</span>)</span><br><span class="line"></span><br><span class="line">processes = device.enumerate_processes()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Listing all processes:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> process <span class="keyword">in</span> processes:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;process.name&#125;</span> (PID: <span class="subst">&#123;process.pid&#125;</span>)&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="注入进程"><a href="#注入进程" class="headerlink" title="注入进程"></a>注入进程</h1><h2 id="附加进程注入"><a href="#附加进程注入" class="headerlink" title="附加进程注入"></a>附加进程注入</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">process = frida.get_usb_device().attach(ProcessName/PID)</span><br><span class="line"></span><br><span class="line">jsCode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    console.log(&quot;frida hooked!&quot;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line">script.load()</span><br></pre></td></tr></table></figure>

<h2 id="spawn方式注入"><a href="#spawn方式注入" class="headerlink" title="spawn方式注入"></a>spawn方式注入</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">pid = device.spawn([PackageName])</span><br><span class="line">process = device.attach(pid)</span><br><span class="line"></span><br><span class="line">jsCode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    console.log(&quot;frida hooked!&quot;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">device.resume(pid) 	<span class="comment"># 恢复进程</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Script loaded&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="非标准端口注入"><a href="#非标准端口注入" class="headerlink" title="非标准端口注入"></a>非标准端口注入</h2><p>需要进行端口转发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb forword tcp:27042 tcp:27042</span><br></pre></td></tr></table></figure>

<h3 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">device = frida.get_device_manager().add_remote_device(<span class="string">&quot;127.0.0.1:7788&quot;</span>)	<span class="comment"># 指定IP地址</span></span><br><span class="line">process = device.attach(ProcessName/PID)</span><br><span class="line"></span><br><span class="line">jsCode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    console.log(&quot;frida hooked!&quot;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line">script.load()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Script loaded&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="spawn"><a href="#spawn" class="headerlink" title="spawn"></a>spawn</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">device = frida.get_device_manager().add_remote_device(<span class="string">&quot;127.0.0.1:7788&quot;</span>)	<span class="comment"># 指定IP地址</span></span><br><span class="line">pid = device.spawn(PackageName)</span><br><span class="line">process = device.attach(pid)</span><br><span class="line"></span><br><span class="line">jsCode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    console.log(&quot;frida hooked!&quot;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">device.resume(pid)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Script loaded&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="send"><a href="#send" class="headerlink" title="send"></a>send</h1><p><code>send</code> 是用于在 Frida 脚本和主机 Python 程序之间通信的函数。</p>
<h2 id="JS端"><a href="#JS端" class="headerlink" title="JS端"></a>JS端</h2><p><code>send</code> 是 Frida 的全局函数，用于向Python程序发送字符串、对象或其他序列化数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">send</span>(<span class="string">&quot;Hello from Frida!&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Python端"><a href="#Python端" class="headerlink" title="Python端"></a>Python端</h2><p>通过 <code>script.on(&quot;message&quot;, callback)</code> 监听 JavaScript 脚本发送的消息。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Received message: <span class="subst">&#123;message&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>, on_message)  <span class="comment"># 注册消息回调</span></span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">device = frida.get_device_manager().add_remote_device(<span class="string">&quot;127.0.0.1:7788&quot;</span>)</span><br><span class="line">pid = device.spawn(PackageName)</span><br><span class="line">process = device.attach(pid)</span><br><span class="line"></span><br><span class="line">jsCode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    console.log(&quot;frida hooked!&quot;);</span></span><br><span class="line"><span class="string">    send(&quot;Hello from Frida!&quot;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message,data</span>):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;send&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Received from JavaScript: <span class="subst">&#123;message&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>,on_message)</span><br><span class="line"></span><br><span class="line">script.load()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Script loaded&quot;</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">frida hooked!</span><br><span class="line">Received <span class="keyword">from</span> JavaScript: &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;send&#x27;</span>, <span class="string">&#x27;payload&#x27;</span>: <span class="string">&#x27;Hello from Frida!&#x27;</span>&#125;</span><br><span class="line">Script loaded</span><br></pre></td></tr></table></figure>



<h2 id="双向通信"><a href="#双向通信" class="headerlink" title="双向通信"></a>双向通信</h2><h3 id="JS端-1"><a href="#JS端-1" class="headerlink" title="JS端"></a>JS端</h3><p>通过&#96;&#96;send<code>发送，</code>recv&#96;来接收。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">send</span>(<span class="string">&quot;Requesting data from Python&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收来自 Python 的消息</span></span><br><span class="line"><span class="title function_">recv</span>(<span class="keyword">function</span> (<span class="params">message</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received from Python:&quot;</span>, message.<span class="property">payload</span>);</span><br><span class="line">&#125;).<span class="title function_">wait</span>();</span><br></pre></td></tr></table></figure>

<h3 id="Python端-1"><a href="#Python端-1" class="headerlink" title="Python端"></a>Python端</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;send&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Received from JavaScript: <span class="subst">&#123;message[<span class="string">&#x27;payload&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 回复消息给 JavaScript</span></span><br><span class="line">        script.post(&#123;<span class="string">&quot;response&quot;</span>: <span class="string">&quot;Data received!&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>, on_message)</span><br></pre></td></tr></table></figure>

<h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">device = frida.get_device_manager().add_remote_device(<span class="string">&quot;127.0.0.1:7788&quot;</span>)</span><br><span class="line">pid = device.spawn(PackageName)</span><br><span class="line">process = device.attach(pid)</span><br><span class="line"></span><br><span class="line">jsCode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    console.log(&quot;frida hooked!&quot;);</span></span><br><span class="line"><span class="string">    send(&quot;Hello from Frida!&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    recv(function (message)&#123;</span></span><br><span class="line"><span class="string">        console.log(&quot;Received from Python:&quot;, message)</span></span><br><span class="line"><span class="string">    &#125;).wait();</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">script = process.create_script(jsCode)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message,data</span>):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;send&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Received from JavaScript: <span class="subst">&#123;message&#125;</span>&quot;</span>)</span><br><span class="line">    script.post(<span class="string">&quot;message from Python&quot;</span>)</span><br><span class="line"></span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>,on_message)</span><br><span class="line">script.load()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Script loaded&quot;</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">frida hooked!</span><br><span class="line">Received <span class="keyword">from</span> JavaScript: &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;send&#x27;</span>, <span class="string">&#x27;payload&#x27;</span>: <span class="string">&#x27;Hello from Frida!&#x27;</span>&#125;</span><br><span class="line">Received <span class="keyword">from</span> Python: message <span class="keyword">from</span> Python</span><br><span class="line">Script loaded</span><br></pre></td></tr></table></figure>

<h1 id="rpc"><a href="#rpc" class="headerlink" title="rpc"></a>rpc</h1><h2 id="JS端定义rpc函数"><a href="#JS端定义rpc函数" class="headerlink" title="JS端定义rpc函数"></a>JS端定义rpc函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rpc.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">hello</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello from Frida!&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>rpc.exports</code> 是一个对象，暴露的函数作为其属性。</p>
<h2 id="Python端调用rpc方法"><a href="#Python端调用rpc方法" class="headerlink" title="Python端调用rpc方法"></a>Python端调用rpc方法</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到目标设备和应用</span></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">pid = device.spawn([<span class="string">&quot;com.example.app&quot;</span>])</span><br><span class="line">session = device.attach(pid)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 JavaScript 脚本</span></span><br><span class="line">js_code = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">rpc.exports = &#123;</span></span><br><span class="line"><span class="string">    hello: function () &#123;</span></span><br><span class="line"><span class="string">        return &quot;Hello from Frida!&quot;;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    add: function (a, b) &#123;</span></span><br><span class="line"><span class="string">        return a + b;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">script = session.create_script(js_code)</span><br><span class="line">script.load()</span><br><span class="line">device.resume(pid)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 RPC 方法</span></span><br><span class="line"><span class="built_in">print</span>(script.exports.hello())  <span class="comment"># 输出: Hello from Frida!</span></span><br><span class="line"><span class="built_in">print</span>(script.exports.add(<span class="number">3</span>, <span class="number">5</span>))  <span class="comment"># 输出: 8</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Frida</category>
      </categories>
      <tags>
        <tag>frida_rpc</tag>
      </tags>
  </entry>
  <entry>
    <title>Python语言</title>
    <url>/2024/02/01/Python%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h1 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h1><h2 id="request"><a href="#request" class="headerlink" title="request()"></a>request()</h2><p>requests.request() 是一个通用的函数，它接受 HTTP 方法（如 “get”、”post”、”put” 等）和各种可选参数来构造请求，并返回 Response 对象。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">request</span>(<span class="params">method, url, **kwargs</span>):</span><br></pre></td></tr></table></figure>
<h2 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h2><p>get请求</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">url, params=<span class="literal">None</span>, **kwargs</span>):</span><br><span class="line">    <span class="keyword">return</span> request(<span class="string">&quot;get&quot;</span>, url, params=params, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># url：请求的目标 URL。这个是必需的参数。</span></span><br><span class="line"><span class="comment"># params：可选参数，表示要发送的查询字符串数据。可以是字典、元组列表或字节流。默认值为 None，表示没有查询参数。</span></span><br><span class="line"><span class="comment"># kwargs：其他可选的关键字参数，传递给 requests 库的 request 函数。这些参数可以包括 headers、cookies、timeout 等。</span></span><br><span class="line"><span class="comment"># 返回值：返回一个Response对象。</span></span><br></pre></td></tr></table></figure>
<h2 id="post"><a href="#post" class="headerlink" title="post()"></a>post()</h2><p>post请求</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">url, data=<span class="literal">None</span>, json=<span class="literal">None</span>, **kwargs</span>):</span><br><span class="line">    <span class="keyword">return</span> request(<span class="string">&quot;post&quot;</span>, url, data=data, json=json, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># url：请求的目标 URL，必须提供。</span></span><br><span class="line"><span class="comment"># data：可选参数，用于发送的数据。它可以是一个字典、元组列表、字节流或者文件对象。默认值是 None。</span></span><br><span class="line"><span class="comment"># json：可选参数，如果要发送 JSON 数据，可以传递一个 Python 对象（如字典、列表等），它将会被序列化为 JSON 格式。默认值是 None。</span></span><br><span class="line"><span class="comment"># kwargs：其他的可选参数，这些参数将传递给 requests.request() 函数，包括 headers、timeout、auth 等。</span></span><br><span class="line"><span class="comment"># 返回值：返回一个 Response 对象，它包含了来自服务器的响应数据。</span></span><br></pre></td></tr></table></figure>
<h2 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="content"><a href="#content" class="headerlink" title="content"></a>content</h4><p>返回响应内容，以字节为单位</p>
<h4 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h4><p>返回一个CookieJar对象，其中包含从服务器发回的cookie。</p>
<h4 id="encoding"><a href="#encoding" class="headerlink" title="encoding"></a>encoding</h4><p>返回用于解码的编码</p>
<h4 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h4><p>返回响应头的字典</p>
<h4 id="status-code"><a href="#status-code" class="headerlink" title="status_code"></a>status_code</h4><p>返回状态码</p>
<h4 id="text"><a href="#text" class="headerlink" title="text"></a>text</h4><p>以unicode形式返回响应的内容</p>
<h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><p>返回响应的URL</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="json"><a href="#json" class="headerlink" title="json()"></a>json()</h4><p>返回JSON对象结果。</p>
<h4 id="close"><a href="#close" class="headerlink" title="close()"></a>close()</h4><p>关闭与服务器的连接</p>
<h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><p><strong>正则表达式</strong></p>
<h2 id="常用匹配规则"><a href="#常用匹配规则" class="headerlink" title="常用匹配规则"></a>常用匹配规则</h2><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td>匹配任意单个字符（除换行符）。</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串的开头。</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串的结尾。</td>
</tr>
<tr>
<td>*</td>
<td>匹配前一个字符0次或多次。</td>
</tr>
<tr>
<td>+</td>
<td>匹配前一个字符1次或多次。</td>
</tr>
<tr>
<td>?</td>
<td>匹配前一个字符0次或1次。</td>
</tr>
<tr>
<td>{n}</td>
<td>精确匹配前一个字符 n 次。</td>
</tr>
<tr>
<td>{n,}</td>
<td>匹配前一个字符至少 n 次。</td>
</tr>
<tr>
<td>{n,m}</td>
<td>匹配前一个字符 n 到 m 次。</td>
</tr>
</tbody></table>
<h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>[abc]</code></td>
<td>匹配字符 “a”、”b” 或 “c”。</td>
</tr>
<tr>
<td><code>[a-z]</code></td>
<td>匹配所有小写字母。</td>
</tr>
<tr>
<td><code>[^abc]</code></td>
<td>匹配除 “a”、”b” 和 “c” 之外的任意字符。</td>
</tr>
</tbody></table>
<h3 id="预定义字符类"><a href="#预定义字符类" class="headerlink" title="预定义字符类"></a>预定义字符类</h3><table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>\d</code></td>
<td>匹配任意数字，等价于 [0-9]。</td>
</tr>
<tr>
<td><code>\D</code></td>
<td>匹配任意非数字。</td>
</tr>
<tr>
<td><code>\w</code></td>
<td>匹配字母、数字或下划线，等价于 [a-zA-Z0-9_]。</td>
</tr>
<tr>
<td><code>\W</code></td>
<td>匹配非字母、数字和下划线。</td>
</tr>
<tr>
<td><code>\s</code></td>
<td>匹配空白字符，包括空格、制表符等。</td>
</tr>
<tr>
<td><code>\S</code></td>
<td>匹配非空白字符。</td>
</tr>
</tbody></table>
<h3 id="分组和引用"><a href="#分组和引用" class="headerlink" title="分组和引用"></a>分组和引用</h3><table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>()</td>
<td>用于分组，可以将一部分模式看作一个整体</td>
</tr>
<tr>
<td>|</td>
<td>匹配左边或右边的表达式。</td>
</tr>
<tr>
<td>\1, \2,…</td>
<td>反向引用，用于引用分组匹配的内容。</td>
</tr>
</tbody></table>
<h2 id="match-object（匹配对象）"><a href="#match-object（匹配对象）" class="headerlink" title="match object（匹配对象）"></a>match object（匹配对象）</h2><p>匹配对象是 re.Match 类型的实例，可以通过该对象访问有关匹配的信息。</p>
<h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><h4 id="lastindex"><a href="#lastindex" class="headerlink" title="lastindex"></a>lastindex</h4><p>返回正则表达式中最后一个分组的索引。如果没有分组，则返回 None。</p>
<h4 id="lastgroup"><a href="#lastgroup" class="headerlink" title="lastgroup"></a>lastgroup</h4><p>返回最后一个匹配的分组名称（如果正则表达式使用了命名分组）。如果没有使用命名分组，则返回 None。</p>
<h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><h4 id="group"><a href="#group" class="headerlink" title="group()"></a>group()</h4><ul>
<li>返回整个匹配的字符串（即正则表达式匹配到的内容）。  </li>
<li>如果正则表达式包含分组（用圆括号 () 包围的部分），可以通过 group() 方法传入一个数字来返回特定分组的匹配内容。</li>
</ul>
<h4 id="start"><a href="#start" class="headerlink" title="start()"></a>start()</h4><p>返回匹配的起始位置（索引），即匹配字符串的第一个字符在原始字符串中的位置。</p>
<h4 id="end"><a href="#end" class="headerlink" title="end()"></a>end()</h4><p>返回匹配的结束位置（索引），即匹配字符串的最后一个字符后面的索引。注意，这个位置是匹配的结束位置的下一个位置。</p>
<h4 id="span"><a href="#span" class="headerlink" title="span()"></a>span()</h4><p>返回一个元组 (start, end)，分别表示匹配的起始位置和结束位置。</p>
<h4 id="groups"><a href="#groups" class="headerlink" title="groups()"></a>groups()</h4><p>返回所有分组的元组（不包括整个匹配的字符串），如果正则表达式没有分组，则返回一个空元组 ()。</p>
<h4 id="groupdict"><a href="#groupdict" class="headerlink" title="groupdict()"></a>groupdict()</h4><p>如果正则表达式使用了命名分组，groupdict() 会返回一个字典，键为分组名称，值为对应分组的匹配内容。否则，返回一个空字典。</p>
<h2 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h2><p>从字符串的起始位置开始匹配正则表达式 pattern，如果匹配成功，返回一个匹配对象；如果不匹配，返回 None。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">re.<span class="keyword">match</span>(pattern, string)</span><br></pre></td></tr></table></figure>
<h2 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h2><p>在整个字符串中搜索匹配正则表达式 pattern 的部分，只要找到了第一个匹配项就返回匹配对象，否则返回 None。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">re.search(pattern, string)</span><br></pre></td></tr></table></figure>
<h2 id="findall"><a href="#findall" class="headerlink" title="findall()"></a>findall()</h2><p>查找所有匹配 pattern 的部分，并返回一个列表。如果没有匹配项，则返回空列表。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">re.findall(pattern, string)</span><br></pre></td></tr></table></figure>
<h2 id="finditer"><a href="#finditer" class="headerlink" title="finditer()"></a>finditer()</h2><p>与 findall 类似，但是返回的是一个迭代器，每个元素是一个匹配对象。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">re.finditer(pattern, string)</span><br></pre></td></tr></table></figure>
<h2 id="sub"><a href="#sub" class="headerlink" title="sub()"></a>sub()</h2><p>用 repl 替换字符串中所有匹配 pattern 的部分，返回替换后的新字符串。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">re.sub(pattern, repl, string)</span><br></pre></td></tr></table></figure>
<h2 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h2><p>根据正则表达式 pattern 将字符串分割成多个部分，返回一个列表。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">re.split(pattern, string)</span><br></pre></td></tr></table></figure>

<h1 id="多进程multiprocessing"><a href="#多进程multiprocessing" class="headerlink" title="多进程multiprocessing"></a>多进程multiprocessing</h1><p>在多进程模型中，操作系统会分配多个进程，每个进程拥有独立的内存空间和资源。</p>
<h2 id="Process类"><a href="#Process类" class="headerlink" title="Process类"></a>Process类</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a><strong>构造方法</strong></h3><p>创建子进程<br>    <figure class="highlight py"><table><tr><td class="code"><pre><span class="line">process = Process(target=<span class="literal">None</span>, name=<span class="literal">None</span>, args=(), kwargs=&#123;&#125;)</span><br><span class="line"><span class="comment"># target: 指定要在新进程中执行的目标函数。</span></span><br><span class="line"><span class="comment"># name: 设置进程的名称。</span></span><br><span class="line"><span class="comment"># args: 传递给目标函数的参数，以元组的形式提供。</span></span><br><span class="line"><span class="comment"># kwargs: 传递给目标函数的关键字参数，以字典的形式提供。</span></span><br></pre></td></tr></table></figure></p>
<h3 id="run-方法"><a href="#run-方法" class="headerlink" title="run() 方法"></a><strong>run() 方法</strong></h3><p>run() 方法定义了进程执行的任务。通常我们不直接调用 run()，而是通过 start() 来启动进程，start() 方法会在子进程中自动调用 run()。</p>
<h3 id="start-方法"><a href="#start-方法" class="headerlink" title="start() 方法"></a><strong>start() 方法</strong></h3><p>start() 方法用于启动子进程。调用 start() 后，进程会被创建并在后台运行，接着会自动调用 run() 方法来执行进程中的任务。</p>
<h3 id="join-方法"><a href="#join-方法" class="headerlink" title="join() 方法"></a><strong>join() 方法</strong></h3><p>join() 方法用于等待子进程完成。它会阻塞主进程，直到被调用的子进程执行完毕。</p>
<h3 id="name-属性"><a href="#name-属性" class="headerlink" title="name 属性"></a><strong>name 属性</strong></h3><p>name 属性用于获取或设置进程的名称。</p>
<h3 id="pid-属性"><a href="#pid-属性" class="headerlink" title="pid 属性"></a><strong>pid 属性</strong></h3><p>pid 属性用于获取子进程的进程 ID。进程 ID 是操作系统为每个进程分配的唯一标识符。  </p>
<p><strong>一个简单的例子</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test started&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">testOO</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test00 started&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Name:&quot;</span>,name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test00 finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target=test)</span><br><span class="line">    pOO = Process(target=testOO,args=(<span class="string">&#x27;Bileton&#x27;</span>,))</span><br><span class="line"></span><br><span class="line">    p.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;PID:&quot;</span>, p.pid)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ProcNAME:&quot;</span>, p.name)</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line">    pOO.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;PID:&quot;</span>, pOO.pid)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ProcNAME:&quot;</span>, pOO.name)</span><br><span class="line">    pOO.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Process finished&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">PID: <span class="number">41268</span></span><br><span class="line">ProcNAME: Process-<span class="number">1</span></span><br><span class="line">test started</span><br><span class="line">test finished</span><br><span class="line">PID: <span class="number">24348</span></span><br><span class="line">ProcNAME: Process-<span class="number">2</span></span><br><span class="line">test00 started</span><br><span class="line">Name: Bileton</span><br><span class="line">test00 finished</span><br><span class="line">Process finished</span><br></pre></td></tr></table></figure>
<h2 id="Queue类（队列）"><a href="#Queue类（队列）" class="headerlink" title="Queue类（队列）"></a>Queue类（队列）</h2><p>Queue用于在不同进程之间传递数据。<br>Queue类是基于先进先出（FIFO）原则实现的，允许多个进程在队列中安全地放入和取出数据。</p>
<h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a><strong>构造方法</strong></h3><p>创建队列<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">queue = Queue(maxsize=0)</span><br><span class="line"># maxsize：指定队列的最大容量。默认值为 0，表示队列大小不限制。</span><br></pre></td></tr></table></figure></p>
<h3 id="put-item"><a href="#put-item" class="headerlink" title="put(item)"></a><strong>put(item)</strong></h3><p>将 item 放入队列。<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">queue.put(item, block=True, timeout=None)</span><br><span class="line"># item：要放入队列的对象。</span><br><span class="line"># block：是否阻塞，默认为 True。如果为 False，则如果队列满了，put() 会抛出 Full 异常。</span><br><span class="line"># timeout：如果设置为一个非零的数字，当 block 为 True 时，put() 将在等待指定时间后抛出异常。如果设置为 None（默认），则会无限期阻塞。</span><br></pre></td></tr></table></figure></p>
<h3 id="get-1"><a href="#get-1" class="headerlink" title="get()"></a><strong>get()</strong></h3><p>从队列中取出一个对象。如果队列为空，默认情况下会阻塞直到队列有数据。<br>    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get(block=True, timeout=None)</span><br><span class="line"># block：是否阻塞，默认为 True。如果为 False，且队列为空，会抛出 Empty 异常。</span><br><span class="line"># timeout：如果设置了超时，get() 方法将在超时后抛出 Empty 异常。</span><br></pre></td></tr></table></figure></p>
<h3 id="empty"><a href="#empty" class="headerlink" title="empty()"></a><strong>empty()</strong></h3><p>返回队列是否为空。如果队列为空，返回 True；否则返回 False。</p>
<h3 id="full"><a href="#full" class="headerlink" title="full()"></a><strong>full()</strong></h3><p>返回队列是否已满。如果队列已满，返回 True；否则返回 False。  </p>
<p><strong>一个简单的例子</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Queue</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">producer</span>(<span class="params">queue</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Producing <span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">        queue.put(i)  <span class="comment"># 将数据放入队列</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">consumer</span>(<span class="params">queue</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        item = queue.get()  <span class="comment"># 从队列中取出数据</span></span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">&quot;STOP&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Consuming <span class="subst">&#123;item&#125;</span>&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    queue = Queue()</span><br><span class="line">    <span class="comment"># 创建生产者和消费者进程</span></span><br><span class="line">    process_producer = Process(target=producer, args=(queue,),name=<span class="string">&#x27;producer&#x27;</span>)</span><br><span class="line">    consumer_process = Process(target=consumer, args=(queue,),name=<span class="string">&#x27;consumer&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动进程</span></span><br><span class="line">    process_producer.start()</span><br><span class="line">    consumer_process.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待生产者进程完成</span></span><br><span class="line">    process_producer.join()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 &quot;STOP&quot; 标志告诉消费者停止</span></span><br><span class="line">    queue.put(<span class="string">&quot;STOP&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;queue put \&quot;STOP\&quot;&quot;</span>)</span><br><span class="line">    <span class="comment"># 等待消费者进程完成</span></span><br><span class="line">    consumer_process.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;All Process Done&quot;</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Producing <span class="number">0</span></span><br><span class="line">Consuming <span class="number">0</span></span><br><span class="line">Producing <span class="number">1</span></span><br><span class="line">Producing <span class="number">2</span></span><br><span class="line">Consuming <span class="number">1</span></span><br><span class="line">Producing <span class="number">3</span></span><br><span class="line">Producing <span class="number">4</span></span><br><span class="line">Consuming <span class="number">2</span></span><br><span class="line">queue put <span class="string">&quot;STOP&quot;</span></span><br><span class="line">Consuming <span class="number">3</span></span><br><span class="line">Consuming <span class="number">4</span></span><br><span class="line">All Process Done</span><br></pre></td></tr></table></figure>
<h2 id="Manage类"><a href="#Manage类" class="headerlink" title="Manage类"></a>Manage类</h2><p>Manager类能够创建可以在多个进程之间共享的对象，并提供多进程之间同步和管理共享数据的功能。<br>通过Manager类可以创建如列表、字典、Namespace、Value、Array 等对象，并允许不同进程对其进行操作。</p>
<h3 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a><strong>构造方法</strong></h3><p>创建Manager对象<br>    <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager</span><br><span class="line">manager = Manager()</span><br></pre></td></tr></table></figure></p>
<h3 id="Manager-dict"><a href="#Manager-dict" class="headerlink" title="Manager.dict()"></a><strong>Manager.dict()</strong></h3><p>返回一个共享字典，允许多个进程修改和访问字典的键值对。</p>
<h3 id="Manager-list"><a href="#Manager-list" class="headerlink" title="Manager.list()"></a><strong>Manager.list()</strong></h3><p>返回一个共享列表，允许多个进程修改和访问列表中的元素。</p>
<h3 id="共享字典和列表示例"><a href="#共享字典和列表示例" class="headerlink" title="共享字典和列表示例"></a>共享字典和列表示例</h3><p>使用 Manager 类创建共享字典和列表，并在多个进程中操作它们。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Manager</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_dict</span>(<span class="params">shared_dict</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        shared_dict[i] = i * i</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_list</span>(<span class="params">shared_list</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        shared_list.append(i*i)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    manager = Manager()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建共享字典和共享列表</span></span><br><span class="line">    shared_dict = manager.<span class="built_in">dict</span>()</span><br><span class="line">    shared_list = manager.<span class="built_in">list</span>()</span><br><span class="line">    <span class="comment"># 创建进程</span></span><br><span class="line">    process_dict = Process(target=update_dict, args=(shared_dict,), name=<span class="string">&#x27;process_dict&#x27;</span>)</span><br><span class="line">    process_list = Process(target=update_list, args=(shared_list,), name=<span class="string">&#x27;process_list&#x27;</span>)</span><br><span class="line">    <span class="comment"># 启动进程</span></span><br><span class="line">    process_list.start()</span><br><span class="line">    process_dict.start()</span><br><span class="line">    <span class="comment"># 等待进程完成</span></span><br><span class="line">    process_list.join()</span><br><span class="line">    process_dict.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Shared dict: &quot;</span>, shared_dict)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Shared list: &quot;</span>, shared_list)</span><br></pre></td></tr></table></figure>
<h2 id="Pool"><a href="#Pool" class="headerlink" title="Pool"></a>Pool</h2><p>Pool是一个用于进程池管理的类，允许你通过并行化任务来高效地利用多核 CPU，自动管理多个进程的创建和销毁。</p>
<h3 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a><strong>构造方法</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pool = Pool(processes=None, initializer=None, initargs=(), maxtasksperchild=None, context=None)</span><br><span class="line"># processes：指定池中进程的数量。如果为 None，则默认使用系统的 CPU 核心数。</span><br><span class="line"># initializer：一个可选的函数，在进程池中的每个工作进程启动时调用一次。</span><br><span class="line"># maxtasksperchild：指定每个进程处理的最大任务数，处理完这些任务后，进程将会被重启。这对于避免内存泄漏或处理长时间运行的进程非常有用。</span><br><span class="line"># context：指定启动新进程时使用的上下文。一般情况下不需要指定。</span><br></pre></td></tr></table></figure>
<h3 id="apply-func-args-kwds"><a href="#apply-func-args-kwds" class="headerlink" title="apply(func, args&#x3D;(), kwds&#x3D;{})"></a><strong>apply(func, args&#x3D;(), kwds&#x3D;{})</strong></h3><p>阻塞式方法，调用目标函数 func，并传递参数 args 和关键字参数 kwds。<br>该方法会等待任务执行完成，并返回结果。</p>
<h3 id="apply-async-func-args-kwds-callback-None-error-callback-None"><a href="#apply-async-func-args-kwds-callback-None-error-callback-None" class="headerlink" title="apply_async(func, args&#x3D;(), kwds&#x3D;{}, callback&#x3D;None, error_callback&#x3D;None)"></a><strong>apply_async(func, args&#x3D;(), kwds&#x3D;{}, callback&#x3D;None, error_callback&#x3D;None)</strong></h3><p>非阻塞式方法，调用目标函数 func，并传递参数 args 和 kwds。<br>apply_async 不会等待任务完成，而是立即返回一个 AsyncResult 对象，你可以通过该对象检查任务的状态、等待结果，或者在任务完成时获取回调。<br>callback：任务完成后调用的函数。<br>error_callback：任务出现异常时调用的函数。<br>    <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_result</span>(<span class="params">result</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Result:&quot;</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pool = Pool(<span class="number">4</span>)</span><br><span class="line">    async_result = pool.apply_async(square, (<span class="number">10</span>,), callback=on_result)</span><br><span class="line">    async_result.wait()  <span class="comment"># 等待任务完成</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Result: <span class="number">100</span></span><br></pre></td></tr></table></figure></p>
<h3 id="map-func-iterable-chunksize-None"><a href="#map-func-iterable-chunksize-None" class="headerlink" title="map(func, iterable, chunksize&#x3D;None)"></a><strong>map(func, iterable, chunksize&#x3D;None)</strong></h3><p>阻塞式方法，将 iterable 中的每个元素传递给目标函数 func。<br>map 会将任务并行化处理，并返回一个包含每个任务结果的列表。<br>chunksize：可选，指定将 iterable 切分为的任务块大小。  </p>
<h3 id="map-async-func-iterable-chunksize-None-callback-None-error-callback-None"><a href="#map-async-func-iterable-chunksize-None-callback-None-error-callback-None" class="headerlink" title="map_async(func, iterable, chunksize&#x3D;None, callback&#x3D;None, error_callback&#x3D;None)"></a><strong>map_async(func, iterable, chunksize&#x3D;None, callback&#x3D;None, error_callback&#x3D;None)</strong></h3><p>非阻塞式方法，类似于 map，但返回一个 AsyncResult 对象。<br>callback：任务完成后调用的函数。<br>error_callback：任务出错时调用的函数。  </p>
<h3 id="starmap-func-iterable-chunksize-None"><a href="#starmap-func-iterable-chunksize-None" class="headerlink" title="starmap(func, iterable, chunksize&#x3D;None)"></a><strong>starmap(func, iterable, chunksize&#x3D;None)</strong></h3><p>starmap()是 map() 方法的扩展，用于将多个参数传递给目标函数进行并行计算。<br>    <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pool = Pool(<span class="number">4</span>)  <span class="comment"># 创建一个包含4个进程的进程池</span></span><br><span class="line">    numbers = [(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">5</span>), (<span class="number">5</span>, <span class="number">6</span>)]  <span class="comment"># 每个元组包含两个参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 starmap 函数并行计算</span></span><br><span class="line">    result = pool.starmap(multiply, numbers)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Results: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    pool.close()  <span class="comment"># 关闭进程池，防止接受新任务</span></span><br><span class="line">    pool.join()   <span class="comment"># 等待所有进程完成</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Results: [<span class="number">2</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br></pre></td></tr></table></figure></p>
<h3 id="close-1"><a href="#close-1" class="headerlink" title="close()"></a><strong>close()</strong></h3><p>关闭进程池，不再接受新任务。<br>close() 后调用 join() 来等待所有进程完成。</p>
<h3 id="join"><a href="#join" class="headerlink" title="join()"></a><strong>join()</strong></h3><p>等待进程池中的所有进程完成任务后再退出。<br><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Process ID: <span class="subst">&#123;os.getpid()&#125;</span> processing <span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pool = Pool(processes=<span class="number">4</span>)  <span class="comment"># 创建一个包含4个进程的进程池</span></span><br><span class="line">    numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 map 函数并行计算</span></span><br><span class="line">    result = pool.<span class="built_in">map</span>(square, numbers)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Results: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">    pool.close()  <span class="comment"># 关闭进程池，防止接受新任务</span></span><br><span class="line">    pool.join()   <span class="comment"># 等待所有进程完成</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">Process ID: <span class="number">12345</span> processing <span class="number">1</span></span><br><span class="line">Process ID: <span class="number">12346</span> processing <span class="number">2</span></span><br><span class="line">Process ID: <span class="number">12347</span> processing <span class="number">3</span></span><br><span class="line">Process ID: <span class="number">12348</span> processing <span class="number">4</span></span><br><span class="line">Results: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br></pre></td></tr></table></figure>
<h1 id="多线程threading"><a href="#多线程threading" class="headerlink" title="多线程threading"></a>多线程threading</h1><h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><h3 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h3><p>创建一个线程对象。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">thread = Thread(target=<span class="literal">None</span>, name=<span class="literal">None</span>, args=(), kwargs=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># target：要在线程中调用的目标函数。</span></span><br><span class="line"><span class="comment"># name：线程的名称，用于标识线程。如果未指定，系统会自动分配一个唯一的名称。</span></span><br><span class="line"><span class="comment"># args：传递给目标函数的参数元组</span></span><br><span class="line"><span class="comment"># kwargs：传递给目标函数的关键字参数字典。</span></span><br></pre></td></tr></table></figure>
<h3 id="start-1"><a href="#start-1" class="headerlink" title="start()"></a>start()</h3><p>start() 用于启动一个线程，让线程开始执行它的目标函数。<br>调用 start() 后，线程会进入 就绪状态，等待操作系统调度执行。</p>
<h3 id="join-1"><a href="#join-1" class="headerlink" title="join()"></a>join()</h3><p>join() 用于阻塞主线程，直到目标线程完成任务后才继续执行主线程的代码。  </p>
<h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><h3 id="线程竞争问题"><a href="#线程竞争问题" class="headerlink" title="线程竞争问题"></a>线程竞争问题</h3><p>如下一部分代码，两个线程同时访问和修改全局变量<code>i</code>，会导致结果数据混乱。<br>由于线程的执行顺序和调度是由操作系统控制的，不同运行时，两个线程对 i 的操作可能以不同的顺序发生。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">global</span> i</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        i+=x</span><br><span class="line">        i-=x</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test1:&quot;</span>,i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="keyword">global</span> i</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        i+=x</span><br><span class="line">        i-=x</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test2:&quot;</span>,i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    thd1 = Thread(target=test1)</span><br><span class="line">    thd2 = Thread(target=test2)</span><br><span class="line">    thd1.start()</span><br><span class="line">    thd2.start()</span><br><span class="line">    thd1.join()</span><br><span class="line">    thd2.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h3><p>为了确保共享资源的访问是线程安全的，可以使用线程锁（Lock）。</p>
<h3 id="构造方法-5"><a href="#构造方法-5" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">lock = Lock()</span><br><span class="line">```  </span><br><span class="line"><span class="comment">### acquire()</span></span><br><span class="line">获取锁。如果锁已被其他线程占用，当前线程会阻塞直到锁释放。</span><br><span class="line"><span class="comment">### release()</span></span><br><span class="line">释放锁。释放后，其他等待锁的线程可以继续执行。</span><br><span class="line"><span class="comment">### locked()</span></span><br><span class="line">检查锁是否已被某个线程获取，返回 <span class="literal">True</span> 或 <span class="literal">False</span>。  </span><br><span class="line"></span><br><span class="line">**示例**</span><br><span class="line">```py</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Lock</span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">lock = Lock()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">global</span> i</span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        i+=x</span><br><span class="line">        i-=x</span><br><span class="line">    lock.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test1:&quot;</span>,i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="keyword">global</span> i</span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        i+=x</span><br><span class="line">        i-=x</span><br><span class="line">    lock.release()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test2:&quot;</span>,i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    thd1 = Thread(target=test1)</span><br><span class="line">    thd2 = Thread(target=test2)</span><br><span class="line">    thd1.start()</span><br><span class="line">    thd2.start()</span><br><span class="line">    thd1.join()</span><br><span class="line">    thd2.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">test1: <span class="number">0</span></span><br><span class="line">test2: <span class="number">0</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h3 id="使用-with-语句管理锁"><a href="#使用-with-语句管理锁" class="headerlink" title="使用 with 语句管理锁"></a>使用 with 语句管理锁</h3><p>with 语句可以自动获取和释放锁，避免忘记调用 release() 导致死锁问题。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Lock</span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">lock = Lock()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">global</span> i</span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">            i+=x</span><br><span class="line">            i-=x</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test1:&quot;</span>,i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="keyword">global</span> i</span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">            i+=x</span><br><span class="line">            i-=x</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test2:&quot;</span>,i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    thd1 = Thread(target=test1)</span><br><span class="line">    thd2 = Thread(target=test2)</span><br><span class="line">    thd1.start()</span><br><span class="line">    thd2.start()</span><br><span class="line">    thd1.join()</span><br><span class="line">    thd2.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">test1: <span class="number">0</span></span><br><span class="line">test2: <span class="number">0</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h2 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h2><p>定时执行任务</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">threading.Timer(interval, function, args=<span class="literal">None</span>, kwargs=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># interval: 延迟的时间（单位：秒）。</span></span><br><span class="line"><span class="comment"># function: 延迟后执行的函数。</span></span><br><span class="line"><span class="comment"># args: 传递给函数的位置参数（可选）。</span></span><br><span class="line"><span class="comment"># kwargs: 传递给函数的关键字参数（可选）。</span></span><br></pre></td></tr></table></figure>

<h3 id="start-2"><a href="#start-2" class="headerlink" title="start()"></a>start()</h3><p>启动定时器。</p>
<h3 id="join-2"><a href="#join-2" class="headerlink" title="join()"></a>join()</h3><p>阻塞主线程，直到定时器线程完成任务后再继续执行。<br><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Lock,Timer</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">t</span>):</span><br><span class="line">    time.sleep(t)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;wait&quot;</span>,t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    timer = Timer(<span class="number">5</span>,run,(<span class="number">5</span>,))</span><br><span class="line">    timer.start()</span><br><span class="line">    timer.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><h3 id="构造方法-6"><a href="#构造方法-6" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">concurrent.futures.ThreadPoolExecutor(</span><br><span class="line">    max_workers=<span class="literal">None</span>, </span><br><span class="line">    thread_name_prefix=<span class="string">&#x27;&#x27;</span>, </span><br><span class="line">    initializer=<span class="literal">None</span>, </span><br><span class="line">    initargs=()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># max_workers: 池中最大线程数量。如果为 None，默认值是系统的 CPU 核心数。</span></span><br><span class="line"><span class="comment"># thread_name_prefix: 创建线程时线程名的前缀。便于调试和日志分析。</span></span><br><span class="line"><span class="comment"># initializer: 每个线程启动时调用的函数。可以用于线程的初始化操作。</span></span><br><span class="line"><span class="comment"># initargs: 传递给 initializer 的参数。如果指定了 initializer，则可以通过此参数为其提供初始参数。</span></span><br></pre></td></tr></table></figure>
<h3 id="submit"><a href="#submit" class="headerlink" title="submit()"></a>submit()</h3><p>使用 submit 提交任务</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">ThreadPoolExecutor.submit(fn, *args, **kwargs)</span><br><span class="line"><span class="comment"># fn: 任务函数（可调用对象），即要执行的任务。</span></span><br><span class="line"><span class="comment"># *args: 传递给 fn 的位置参数。</span></span><br><span class="line"><span class="comment"># **kwargs: 传递给 fn 的关键字参数。</span></span><br><span class="line"><span class="comment"># 返回值: 返回一个 Future 对象。Future 用于表示一个异步执行的操作，并且可以通过它获取任务的返回值或异常。</span></span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Task <span class="subst">&#123;n&#125;</span> completed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程池</span></span><br><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">3</span>) <span class="keyword">as</span> executor:</span><br><span class="line">    <span class="comment"># 提交多个任务</span></span><br><span class="line">    futures = [executor.submit(task, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取结果</span></span><br><span class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> futures:</span><br><span class="line">        <span class="built_in">print</span>(future.result())</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Task <span class="number">0</span> completed</span><br><span class="line">Task <span class="number">1</span> completed</span><br><span class="line">Task <span class="number">2</span> completed</span><br><span class="line">Task <span class="number">3</span> completed</span><br><span class="line">Task <span class="number">4</span> completed</span><br></pre></td></tr></table></figure>
<h3 id="future"><a href="#future" class="headerlink" title="future"></a>future</h3><p>Future 是提交任务后返回的对象，通常通过 submit() 方法获得。它可以在任务完成之前就开始获取任务的状态或结果，提供了一种同步与异步混合编程的方式。</p>
<h4 id="result"><a href="#result" class="headerlink" title="result()"></a>result()</h4><p><code>result(timeout=None)</code><br>如果任务已经完成，返回任务的结果。如果任务抛出异常，则会抛出相应的异常。<br>timeout 参数指定最大等待时间，超时后会抛出 TimeoutError。</p>
<h4 id="exception"><a href="#exception" class="headerlink" title="exception()"></a>exception()</h4><p><code>exception(timeout=None)</code><br>如果任务抛出了异常，返回异常。如果任务未抛出异常，则返回 None。<br>timeout 参数指定最大等待时间，超时后会抛出 TimeoutError。</p>
<h4 id="done"><a href="#done" class="headerlink" title="done()"></a>done()</h4><p>如果任务已经完成（无论成功或失败），返回 True，否则返回 False。</p>
<h4 id="cancel"><a href="#cancel" class="headerlink" title="cancel()"></a>cancel()</h4><p>尝试取消任务。如果任务已经开始执行，则无法取消，返回 False。如果任务还没有开始执行，则返回 True。</p>
<h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p>使用 map 提交批量任务</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">ThreadPoolExecutor.<span class="built_in">map</span>(func, *iterables, timeout=<span class="literal">None</span>, chunksize=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># func: 任务函数</span></span><br><span class="line"><span class="comment"># *iterables: 一个或多个可迭代对象（如列表、元组等）。</span></span><br><span class="line"><span class="comment"># timeout: 可选的最大等待时间（秒）。</span></span><br><span class="line"><span class="comment"># chunksize: 可选，指定每次提交给工作线程的任务数量，默认为 1。</span></span><br><span class="line"><span class="comment"># 返回值: 返回一个迭代器，该迭代器可以用于获取各个任务的结果。</span></span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Task <span class="subst">&#123;n&#125;</span> completed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程池</span></span><br><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">3</span>) <span class="keyword">as</span> executor:</span><br><span class="line">    <span class="comment"># 使用 map 提交任务</span></span><br><span class="line">    results = executor.<span class="built_in">map</span>(task, <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(results))  <span class="comment"># 输出: [&#x27;Task 0 completed&#x27;, &#x27;Task 1 completed&#x27;, &#x27;Task 2 completed&#x27;, &#x27;Task 3 completed&#x27;, &#x27;Task 4 completed&#x27;]</span></span><br></pre></td></tr></table></figure>
<p><strong>多参数处理</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程池</span></span><br><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">3</span>) <span class="keyword">as</span> executor:</span><br><span class="line">    <span class="comment"># 使用 map 提交多个可迭代对象</span></span><br><span class="line">    results = executor.<span class="built_in">map</span>(add, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(results))  <span class="comment"># 输出: [5, 7, 9]</span></span><br></pre></td></tr></table></figure>

<h3 id="as-completed"><a href="#as-completed" class="headerlink" title="as_completed()"></a>as_completed()</h3><p>as_completed() 是 Python 中 concurrent.futures 模块的一个方法，提供了在任务完成时立即获取结果的功能。与 map() 方法不同，as_completed() 按照任务完成的顺序返回结果，而不是提交顺序。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">concurrent.futures.as_completed(futures, timeout=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># futures: 可迭代对象，通常是由 submit() 方法返回的 Future 对象集合。</span></span><br><span class="line"><span class="comment"># timeout: 可选，指定最大等待时间（秒）。如果超出此时间，as_completed() 会抛出TimeoutError，不再等待未完成的任务。</span></span><br><span class="line"><span class="comment"># 返回值：返回一个迭代器，按任务完成的顺序逐个返回任务的结果或异常。每次返回一个 Future 对象，您可以使用 future.result() 获取其结果，或使用 future.exception() 获取任务异常。</span></span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Task <span class="subst">&#123;n&#125;</span> completed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程池</span></span><br><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">3</span>) <span class="keyword">as</span> executor:</span><br><span class="line">    <span class="comment"># 提交多个任务</span></span><br><span class="line">    futures = [executor.submit(task, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用 as_completed 按照任务完成顺序获取结果</span></span><br><span class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> as_completed(futures):</span><br><span class="line">        <span class="built_in">print</span>(future.result())  <span class="comment"># 获取每个任务的结果</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Task <span class="number">0</span> completed</span><br><span class="line">Task <span class="number">1</span> completed</span><br><span class="line">Task <span class="number">2</span> completed</span><br><span class="line">Task <span class="number">3</span> completed</span><br><span class="line">Task <span class="number">4</span> completed</span><br></pre></td></tr></table></figure>
<h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><p>协程是一种用户态的轻量级线程。</p>
<h2 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h2><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><ul>
<li>按照顺序依次执行每个任务，当前任务完成后再执行下一个任务。</li>
<li>阻塞：当前任务必须等待前一个任务完成。</li>
<li>适合计算密集型任务，简单的操作流程。</li>
<li>在I&#x2F;O操作时会造成性能瓶颈，整体效率较低。</li>
</ul>
<h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><ul>
<li>任务可以并行执行，等待的任务不会阻塞其他任务。</li>
<li>非阻塞：任务可以在等待时进行其他操作。</li>
<li>适合I&#x2F;O密集型任务，高并发请求，网络和文件I&#x2F;O操作。</li>
<li>提高了程序的并发性和效率，尤其在I&#x2F;O密集型任务中尤为有效。</li>
</ul>
<h2 id="asyncio"><a href="#asyncio" class="headerlink" title="asyncio"></a>asyncio</h2><h3 id="coroutine"><a href="#coroutine" class="headerlink" title="coroutine"></a>coroutine</h3><p>协程是用来表示异步任务的函数，在 Python 中是通过 async def 声明的异步函数。它们通常与 await 配合使用，以暂停和恢复任务的执行。</p>
<h3 id="event-loop"><a href="#event-loop" class="headerlink" title="event_loop"></a>event_loop</h3><p>事件循环是一个运行异步任务的机制，它负责调度和运行协程。事件循环会从任务队列中取出任务并执行它们，执行期间若遇到 await，会暂停当前任务并转去执行其他任务，直到任务完成。</p>
<h4 id="get-event-loop"><a href="#get-event-loop" class="headerlink" title="get_event_loop()"></a>get_event_loop()</h4><p><code>asyncio.get_event_loop()</code>，获取当前的事件循环。</p>
<h4 id="run-until-complete"><a href="#run-until-complete" class="headerlink" title="run_until_complete()"></a>run_until_complete()</h4><p>用于运行指定的协程直到它完成，并返回协程的结果。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">loop.run_until_complete(future)</span><br><span class="line"></span><br><span class="line"><span class="comment"># future：传入的 future 对象通常是一个协程（Coroutine），run_until_complete 会等待这个协程执行完成，并返回协程的结果。</span></span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task started&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 模拟耗时操作</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task finished&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Task result&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前线程的事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 run_until_complete 来运行协程并等待其完成</span></span><br><span class="line">result = loop.run_until_complete(task())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭事件循环</span></span><br><span class="line">loop.close()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Task started</span><br><span class="line">Task finished</span><br><span class="line">Result: Task result  </span><br></pre></td></tr></table></figure>
<h3 id="await"><a href="#await" class="headerlink" title="await"></a>await</h3><p>await用于暂停当前协程的执行，直到某个异步操作（通常是协程、Future 或 Task）完成并返回结果。<br>await 只能在异步函数（用 async 定义的函数）中使用，它使得 Python 的异步代码更加简洁、易读。</p>
<h3 id="task"><a href="#task" class="headerlink" title="task"></a>task</h3><p>任务是通过事件循环调度的协程。通过 asyncio.create_task() 可以创建一个任务，并提交给事件循环运行。</p>
<h3 id="run"><a href="#run" class="headerlink" title="run()"></a>run()</h3><p><code>asyncio.run()</code> 是运行协程的简化方法，它负责启动事件循环并执行协程，通常用来启动程序的入口协程。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">test_sleep</span>():  <span class="comment"># 定义异步函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start sleeping&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;End sleeping&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cor = test_sleep()</span><br><span class="line">    asyncio.run(cor) <span class="comment"># 启动时间循环并运行test_sleep()协程</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Start sleeping</span><br><span class="line">End sleeping</span><br></pre></td></tr></table></figure>
<h3 id="gather"><a href="#gather" class="headerlink" title="gather()"></a>gather()</h3><p><code>asyncio.gather()</code> 可以同时执行多个协程，等待它们全部完成后返回结果。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task_A</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task A started&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task A finished&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task_B</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task B started&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task B finished&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 并发执行两个任务</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(task_A(), task_B())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cor = main()</span><br><span class="line">    asyncio.run(cor)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Task A started</span><br><span class="line">Task B started</span><br><span class="line">Task B finished</span><br><span class="line">Task A finished</span><br></pre></td></tr></table></figure>
<h3 id="create-task"><a href="#create-task" class="headerlink" title="create_task()"></a>create_task()</h3><p>通过 <code>asyncio.create_task()</code> 创建任务，任务会自动调度到事件循环中执行。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task_A</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task A started&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task A finished&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task_B</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task B started&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Task B finished&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建任务</span></span><br><span class="line">    task1 = asyncio.create_task(task_A())</span><br><span class="line">    task2 = asyncio.create_task(task_B())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待任务完成</span></span><br><span class="line">    <span class="keyword">await</span> task1</span><br><span class="line">    <span class="keyword">await</span> task2</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cor = main()</span><br><span class="line">    asyncio.run(cor)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">Task A started</span><br><span class="line">Task B started</span><br><span class="line">Task B finished</span><br><span class="line">Task A finished</span><br></pre></td></tr></table></figure>
<h3 id="wait"><a href="#wait" class="headerlink" title="wait()"></a>wait()</h3><p>它用于等待一组协程或任务的完成。当有多个异步任务需要等待时，能够在所有任务完成后再继续执行。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">asyncio.wait(</span><br><span class="line">    fs,                     </span><br><span class="line">    timeout=<span class="literal">None</span>,            </span><br><span class="line">    return_when=ALL_COMPLETED  </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fs：一个包含 Future 或 Task 对象的可迭代对象（如列表、集合等）。</span></span><br><span class="line"><span class="comment"># timeout：一个可选的超时时间，单位是秒。如果为 None，则会无限期等待。</span></span><br><span class="line"><span class="comment"># return_when：指定什么时候返回，可以取以下值：</span></span><br><span class="line">    <span class="comment"># asyncio.FIRST_COMPLETED：任意一个任务完成时返回。</span></span><br><span class="line">    <span class="comment"># asyncio.FIRST_EXCEPTION：任意一个任务异常时返回。</span></span><br><span class="line">    <span class="comment"># asyncio.ALL_COMPLETED：所有任务完成时返回。</span></span><br><span class="line"><span class="comment"># 返回值：</span></span><br><span class="line">    <span class="comment"># done：一个 Future 或 Task 对象的集合，表示已经完成的任务。</span></span><br><span class="line">    <span class="comment"># pending：一个 Future 或 Task 对象的集合，表示尚未完成的任务。</span></span><br></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task_1</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务 1 完成&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task_2</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务 2 完成&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">task_3</span>():</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;任务 3 完成&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    tasks = [task_1(), task_2(), task_3()]</span><br><span class="line">    </span><br><span class="line">    done, pending = <span class="keyword">await</span> asyncio.wait(tasks, return_when=asyncio.ALL_COMPLETED)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> done:</span><br><span class="line">        <span class="built_in">print</span>(task.result())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行主函数</span></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">任务 <span class="number">1</span> 完成</span><br><span class="line">任务 <span class="number">2</span> 完成</span><br><span class="line">任务 <span class="number">3</span> 完成</span><br></pre></td></tr></table></figure>

<h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h3><p><code>asyncio.sleep()</code> 是一个非阻塞的休眠方法，它不会阻塞事件循环，适用于模拟延时操作。</p>
<h3 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore()"></a>Semaphore()</h3><p>Semaphore 对象维护一个内部计数器，这个计数器表示当前可用的“许可”。每当一个协程想要访问某个资源时，它需要获取一个许可（即递减计数器）。  </p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line">sem = asyncio.Semaphore(value)</span><br></pre></td></tr></table></figure>
<p><strong>使用示例</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个最大并发数为2的信号量</span></span><br><span class="line">sem = asyncio.Semaphore(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">limited_task</span>(<span class="params">task_id</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> sem:  <span class="comment"># 在执行任务前，先获取信号量</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;任务 <span class="subst">&#123;task_id&#125;</span> 开始执行&quot;</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 模拟长时间运行的任务</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;任务 <span class="subst">&#123;task_id&#125;</span> 执行完毕&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    tasks = [asyncio.create_task(limited_task(i)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行主函数</span></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">任务 <span class="number">0</span> 开始执行</span><br><span class="line">任务 <span class="number">1</span> 开始执行</span><br><span class="line">任务 <span class="number">0</span> 执行完毕</span><br><span class="line">任务 <span class="number">1</span> 执行完毕</span><br><span class="line">任务 <span class="number">2</span> 开始执行</span><br><span class="line">任务 <span class="number">3</span> 开始执行</span><br><span class="line">任务 <span class="number">2</span> 执行完毕</span><br><span class="line">任务 <span class="number">3</span> 执行完毕</span><br><span class="line">任务 <span class="number">4</span> 开始执行</span><br><span class="line">任务 <span class="number">4</span> 执行完毕</span><br></pre></td></tr></table></figure>
<h1 id="aiohttp"><a href="#aiohttp" class="headerlink" title="aiohttp"></a>aiohttp</h1><p>aiohttp专为异步 HTTP 请求设计，支持异步 HTTP 客户端和服务器功能。</p>
<h2 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h2><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步函数，用于发送 GET 请求并获取响应</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch</span>(<span class="params">session, url</span>):</span><br><span class="line">    <span class="comment"># 使用异步上下文管理器发送 GET 请求</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        <span class="comment"># 等待并返回响应内容</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> response.text()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建一个 aiohttp 客户端会话，用于管理连接池</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="comment"># 调用 fetch 函数，异步获取网页内容</span></span><br><span class="line">        data = <span class="keyword">await</span> fetch(session, <span class="string">&quot;https://www.httpbin.org/headers&quot;</span>)</span><br><span class="line">        <span class="comment"># 打印获取到的响应内容</span></span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行事件循环并执行主函数</span></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;www.httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Python/3.13 aiohttp/3.11.10&quot;</span>, </span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-6754315d-47b2a5f425b27f9c291a1d25&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建一个 aiohttp 客户端会话，用于管理连接池</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="comment"># 定义 GET 请求的参数</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span> : <span class="string">&quot;bileton&quot;</span>  <span class="comment"># 参数 name 的值为 &#x27;bileton&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 使用异步上下文管理器发送 GET 请求，携带查询参数</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(<span class="string">&quot;https://www.httpbin.org/get&quot;</span>, params=params) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="comment"># 打印并等待返回的响应内容</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="keyword">await</span> response.text())  <span class="comment"># 返回响应的文本内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行事件循环并执行主函数</span></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;bileton&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;www.httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Python/3.13 aiohttp/3.11.10&quot;</span>, </span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-675445c7-26e8b0e703e73a524d319146&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;219.156.133.197&quot;</span>, </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://www.httpbin.org/get?name=bileton&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch</span>(<span class="params">session, url</span>):</span><br><span class="line">    <span class="comment"># 异步请求</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.post(url,data=<span class="string">&quot;Bileton&quot;</span>) <span class="keyword">as</span> response:</span><br><span class="line">        <span class="comment"># 返回响应</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> response.text()</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        data = <span class="keyword">await</span> fetch(session, <span class="string">&quot;https://www.httpbin.org/post&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;data&quot;</span>: <span class="string">&quot;Bileton&quot;</span>, </span><br><span class="line">  <span class="string">&quot;files&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;form&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;7&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain; charset=utf-8&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;www.httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Python/3.13 aiohttp/3.11.10&quot;</span>, </span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-675439c8-4dc6dcb32d0fe49e1686cd1a&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;json&quot;</span>: null, </span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;219.156.133.197&quot;</span>, </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://www.httpbin.org/post&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="aiofiles"><a href="#aiofiles" class="headerlink" title="aiofiles"></a>aiofiles</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> aiofiles</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiofiles.<span class="built_in">open</span>(<span class="string">&quot;filename&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data =  <span class="keyword">await</span> f.readlines()</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>frida环境搭建</title>
    <url>/2024/05/01/frida%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="安装frida"><a href="#安装frida" class="headerlink" title="安装frida"></a>安装frida</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用如下命令安装frida，默认安装最新版的frida</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install frida </span><br></pre></td></tr></table></figure>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip uninstall frida</span><br></pre></td></tr></table></figure>
<h2 id="指定版本"><a href="#指定版本" class="headerlink" title="指定版本"></a>指定版本</h2><p>安装指定版本的frida</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install frida==xx.xx.xx</span><br></pre></td></tr></table></figure>
<h2 id="frida-tools（安装frida-tools会自动安装frida）"><a href="#frida-tools（安装frida-tools会自动安装frida）" class="headerlink" title="frida-tools（安装frida-tools会自动安装frida）"></a>frida-tools（安装frida-tools会自动安装frida）</h2><h3 id="安装frida-tools"><a href="#安装frida-tools" class="headerlink" title="安装frida-tools"></a>安装frida-tools</h3><p>使用如下命令安装frida-tools，默认安装最新版的frida-tools</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install frida-tools</span><br></pre></td></tr></table></figure>
<h3 id="安装指定版本的frida-tools"><a href="#安装指定版本的frida-tools" class="headerlink" title="安装指定版本的frida-tools"></a>安装指定版本的frida-tools</h3><p>frida 与 frida-tools 版本的对应关系可在github项目处查看或者直接baidu搜索</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install frida-tools==xx.xx.xx</span><br></pre></td></tr></table></figure>
<h3 id="卸载frida-tools"><a href="#卸载frida-tools" class="headerlink" title="卸载frida-tools"></a>卸载frida-tools</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip uninstall frida-tools</span><br></pre></td></tr></table></figure>
<h1 id="配置frida-server"><a href="#配置frida-server" class="headerlink" title="配置frida-server"></a>配置frida-server</h1><p>frida-server的版本需要与frida的版本相匹配，同时frida-server的运行平台要与自己的设备和架构相匹配。</p>
<h2 id="下载frida-server"><a href="#下载frida-server" class="headerlink" title="下载frida-server"></a>下载frida-server</h2><p>在github上下载frida-server。<br>将下载的压缩包解压后通过<code>adb push</code>推送到测试机的&#x2F;data&#x2F;local&#x2F;tmp目录下（需要通过USB连接手机）。  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb push frida-server /data/local/tmp</span><br></pre></td></tr></table></figure>
<p>通过chmod命令为其赋予可执行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 frida-sever</span><br></pre></td></tr></table></figure>
<h1 id="安装frida脚本代码自动补全包"><a href="#安装frida脚本代码自动补全包" class="headerlink" title="安装frida脚本代码自动补全包"></a>安装frida脚本代码自动补全包</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save @types/frida-gum</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Frida</category>
      </categories>
      <tags>
        <tag>frida环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>hook脚本大全</title>
    <url>/2024/11/29/hook%E8%84%9A%E6%9C%AC%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="Java层"><a href="#Java层" class="headerlink" title="Java层"></a>Java层</h1><h2 id="PrintMap"><a href="#PrintMap" class="headerlink" title="PrintMap"></a>PrintMap</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printMap</span>(<span class="params">param_map</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">HashMap</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.TreeMap&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> arg_map = <span class="title class_">Java</span>.<span class="title function_">cast</span>(param_map,<span class="title class_">HashMap</span>);</span><br><span class="line">    <span class="keyword">return</span> arg_map.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="打印调用栈"><a href="#打印调用栈" class="headerlink" title="打印调用栈"></a>打印调用栈</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showStacks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>)</span><br><span class="line">            .<span class="title function_">getStackTraceString</span>(</span><br><span class="line">                <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()</span><br><span class="line">            )</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="消息摘要算法通杀"><a href="#消息摘要算法通杀" class="headerlink" title="消息摘要算法通杀"></a>消息摘要算法通杀</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">showStacks</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">            <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>)</span><br><span class="line">                .<span class="title function_">getStackTraceString</span>(</span><br><span class="line">                    <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">ByteString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">toBase64</span>(<span class="params">tag, data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(tag + <span class="string">&quot; Base64: &quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(data).<span class="title function_">base64</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params">tag, data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(tag + <span class="string">&quot; Hex: &quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(data).<span class="title function_">hex</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">toUtf8</span>(<span class="params">tag, data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(tag + <span class="string">&quot; Utf8: &quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(data).<span class="title function_">utf8</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">var</span> messageDigest = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.MessageDigest&quot;</span>);</span><br><span class="line">    messageDigest.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;byte&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MessageDigest.update(&#x27;byte&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    messageDigest.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.nio.ByteBuffer&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MessageDigest.update(&#x27;java.nio.ByteBuffer&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    messageDigest.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MessageDigest.update(&#x27;[B&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; update data&quot;</span>;</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, data);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, data);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, data);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    messageDigest.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data, start, length</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MessageDigest.update(&#x27;[B&#x27;, &#x27;int&#x27;, &#x27;int&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; update data&quot;</span>;</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, data);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, data);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, data);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>, start, length);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(data, start, length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    messageDigest.<span class="property">digest</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MessageDigest.digest() is called!&quot;</span>);</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">digest</span>();</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; digest result&quot;</span>;</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, result);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, result);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, result);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    messageDigest.<span class="property">digest</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MessageDigest.digest(&#x27;[B&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; digest data&quot;</span>;</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, data);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, data);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, data);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">digest</span>(data);</span><br><span class="line">        <span class="keyword">var</span> tags = algorithm + <span class="string">&quot; digest result&quot;</span>;</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, result);</span><br><span class="line">        <span class="title function_">toHex</span>(tags, result);</span><br><span class="line">        <span class="title function_">toBase64</span>(tags, result);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    messageDigest.<span class="property">digest</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data, start, length</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MessageDigest.digest(&#x27;[B&#x27;, &#x27;int&#x27;, &#x27;int&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="title function_">showStacks</span>();</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; digest data&quot;</span>;</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, data);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, data);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, data);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">digest</span>(data, start, length);</span><br><span class="line">        <span class="keyword">var</span> tags = algorithm + <span class="string">&quot; digest result&quot;</span>;</span><br><span class="line">        <span class="title function_">toHex</span>(tags, result);</span><br><span class="line">        <span class="title function_">toBase64</span>(tags, result);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>, start, length);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mac = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.crypto.Mac&quot;</span>);</span><br><span class="line">    mac.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.spec.AlgorithmParameterSpec&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">key, AlgorithmParameterSpec</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.init(&#x27;java.security.Key&#x27;, &#x27;java.security.spec.AlgorithmParameterSpec&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">init</span>(key, <span class="title class_">AlgorithmParameterSpec</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.security.Key&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.init(&#x27;java.security.Key&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; init Key&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> keyBytes = key.<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, keyBytes);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, keyBytes);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, keyBytes);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">init</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;byte&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.update(&#x27;byte&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.nio.ByteBuffer&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.update(&#x27;java.nio.ByteBuffer&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.update(&#x27;[B&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; update data&quot;</span>;</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, data);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, data);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, data);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data, start, length</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.update(&#x27;[B&#x27;, &#x27;int&#x27;, &#x27;int&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; update data&quot;</span>;</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, data);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, data);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, data);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>, start, length);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(data, start, length);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">doFinal</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.doFinal() is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">doFinal</span>();</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; doFinal result&quot;</span>;</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, result);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, result);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, result);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">doFinal</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.doFinal.overload(&#x27;[B&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">doFinal</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">doFinal</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">output, outOffset</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.doFinal.overload(&#x27;[B&#x27;, &#x27;int&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">doFinal</span>(output, outOffset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>





<h1 id="so层hook"><a href="#so层hook" class="headerlink" title="so层hook"></a>so层hook</h1><h2 id="hook-dlopen"><a href="#hook-dlopen" class="headerlink" title="hook_dlopen"></a>hook_dlopen</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 在Android8.0之前加载so通过dlopen函数</span></span><br><span class="line">    <span class="keyword">var</span> dlopen = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;dlopen&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_dlopen&quot;</span>,dlopen);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(dlopen,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dlopen:&quot;</span>,path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;leave!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Android8.0之后加载so通过android_dlopen_ext函数</span></span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;leave!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_dlopen</span>()</span><br></pre></td></tr></table></figure>
<h3 id="指定so的dlopen"><a href="#指定so的dlopen" class="headerlink" title="指定so的dlopen"></a><strong>指定so的dlopen</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;SoName&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_dlopen</span>()</span><br></pre></td></tr></table></figure>





<h2 id="hook-pthread"><a href="#hook-pthread" class="headerlink" title="hook_pthread"></a>hook_pthread</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_pthread</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pth_create = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[pth_create]&quot;</span>, pth_create);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pth_create, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(args[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address&quot;</span>, <span class="variable language_">module</span>.<span class="property">name</span>, args[<span class="number">2</span>].<span class="title function_">sub</span>(<span class="variable language_">module</span>.<span class="property">base</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hook-dlopen配合pthread"><a href="#hook-dlopen配合pthread" class="headerlink" title="hook_dlopen配合pthread"></a>hook_dlopen配合pthread</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                    <span class="title function_">hook_pthread</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_pthread</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pth_create = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[pth_create]&quot;</span>, pth_create);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pth_create, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(args[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address&quot;</span>, <span class="variable language_">module</span>.<span class="property">name</span>, args[<span class="number">2</span>].<span class="title function_">sub</span>(<span class="variable language_">module</span>.<span class="property">base</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hook_dlopen</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>



<h2 id="hook-RegisterNatives"><a href="#hook-RegisterNatives" class="headerlink" title="hook_RegisterNatives"></a>hook_RegisterNatives</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_RegisterNatives</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">RegisterNatives</span>_addr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libart.so&quot;</span>).<span class="title function_">enumerateSymbols</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i].<span class="property">name</span>;</span><br><span class="line">        <span class="keyword">if</span> ((symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) == -<span class="number">1</span>) &amp;&amp; (symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;RegisterNatives&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="title class_">RegisterNatives</span>_addr = symbols[i].<span class="property">address</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RegisterNatives_addr: &quot;</span>, <span class="title class_">RegisterNatives</span>_addr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">RegisterNatives</span>_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> env = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> jclass = args[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> class_name = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>().<span class="title function_">getClassName</span>(jclass);</span><br><span class="line">            <span class="keyword">var</span> methods_ptr = <span class="title function_">ptr</span>(args[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">var</span> method_count = args[<span class="number">3</span>].<span class="title function_">toInt32</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RegisterNatives method counts: &quot;</span>, method_count);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; method_count; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> name = methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span>).<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">var</span> sig = methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span>).<span class="title function_">readPointer</span>().<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">var</span> fnPtr_ptr = methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">2</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">                <span class="keyword">var</span> find_module = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(fnPtr_ptr);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ClasssName: &quot;</span>, class_name, <span class="string">&quot;MethodName: &quot;</span>, name, <span class="string">&quot;Sig: &quot;</span>, sig, <span class="string">&quot;Function_addr: &quot;</span>, fnPtr_ptr, <span class="string">&quot;ModuleName: &quot;</span>, find_module.<span class="property">name</span>, <span class="string">&quot;Fun_Offset: &quot;</span>, <span class="title function_">ptr</span>(fnPtr_ptr).<span class="title function_">sub</span>(find_module.<span class="property">base</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_RegisterNatives</span>()</span><br></pre></td></tr></table></figure>
<h2 id="hook-dlsym"><a href="#hook-dlsym" class="headerlink" title="hook_dlsym"></a>hook_dlsym</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlsym</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 获取dlsym函数的地址</span></span><br><span class="line">    <span class="keyword">let</span> dlsymAddr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libdl.so&quot;</span>,<span class="string">&quot;dlsym&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dlsymAddr);</span><br><span class="line">    <span class="comment">// hook dlsym</span></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(dlsymAddr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">args1</span> = args[<span class="number">1</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable language_">module</span>= <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(retval);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">module</span>==<span class="literal">null</span>)<span class="keyword">return</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数：&quot;</span>+<span class="variable language_">this</span>.<span class="property">args1</span>.<span class="title function_">readCString</span>(),<span class="string">&quot;模块：&quot;</span>+<span class="variable language_">module</span>.<span class="property">name</span>,<span class="string">&quot;地址：&quot;</span>+retval,<span class="string">&quot;偏移：&quot;</span>+retval.<span class="title function_">sub</span>(<span class="variable language_">module</span>.<span class="property">base</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_dlsym</span>()</span><br></pre></td></tr></table></figure>

<h2 id="hook-call-constructors"><a href="#hook-call-constructors" class="headerlink" title="hook_call_constructors()"></a>hook_call_constructors()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_call_constructors</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> linker = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;linker64&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> symbols = linker.<span class="title function_">enumerateSymbols</span>();</span><br><span class="line">    <span class="keyword">var</span> addr_call_constructors = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbol = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> index =<span class="number">0</span>;index&lt;symbols.<span class="property">length</span>;index++)&#123;</span><br><span class="line">        symbol = symbols[index];</span><br><span class="line">        <span class="keyword">if</span>(symbol.<span class="property">name</span>===<span class="string">&quot;__dl__ZN6soinfo17call_constructorsEv&quot;</span>)&#123;</span><br><span class="line">            addr_call_constructors = symbol.<span class="property">address</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr_call_constructors,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hooked call_constructors!&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_call_constructors</span>()</span><br></pre></td></tr></table></figure>

<h3 id="配合dlopen使用hook-call-constructors"><a href="#配合dlopen使用hook-call-constructors" class="headerlink" title="配合dlopen使用hook_call_constructors()"></a>配合dlopen使用hook_call_constructors()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                    <span class="title function_">hook_call_constructors</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_pthread</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pth_create = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[pth_create]&quot;</span>, pth_create);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pth_create, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(args[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address&quot;</span>, <span class="variable language_">module</span>.<span class="property">name</span>, args[<span class="number">2</span>].<span class="title function_">sub</span>(<span class="variable language_">module</span>.<span class="property">base</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_call_constructors</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> linker = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;linker64&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> symbols = linker.<span class="title function_">enumerateSymbols</span>();</span><br><span class="line">    <span class="keyword">var</span> addr_call_constructors = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbol = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> index =<span class="number">0</span>;index&lt;symbols.<span class="property">length</span>;index++)&#123;</span><br><span class="line">        symbol = symbols[index];</span><br><span class="line">        <span class="keyword">if</span>(symbol.<span class="property">name</span>===<span class="string">&quot;__dl__ZN6soinfo17call_constructorsEv&quot;</span>)&#123;</span><br><span class="line">            addr_call_constructors = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> listener = <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr_call_constructors,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hooked call_constructors&quot;</span>)</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x175f8</span>), <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0x175f8:替换成功&quot;</span>)</span><br><span class="line">                &#125;, <span class="string">&quot;void&quot;</span>, []))</span><br><span class="line">                <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x16d30</span>), <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0x16d30:替换成功&quot;</span>)</span><br><span class="line">                &#125;, <span class="string">&quot;void&quot;</span>, []))</span><br><span class="line">                listener.<span class="title function_">detach</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hook_dlopen</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>

<h2 id="hook-JNI-OnLoad"><a href="#hook-JNI-OnLoad" class="headerlink" title="hook_JNI_OnLoad()"></a>hook_JNI_OnLoad()</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_JNI_OnLoad</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Addr</span>_JNI_OnLoad = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>,<span class="string">&quot;JNI_OnLoad&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Addr</span>_JNI_OnLoad,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hooked JNI_OnLoad!&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;JNI_OnLoad over!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>hook JNI_OnLoad需要一个时机，就是在指定的so刚加载完成的时候进行hook</strong></p>
<p>以下是一个示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="keyword">var</span> ismsaoaidsec = <span class="literal">false</span>;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    ismsaoaidsec = <span class="literal">true</span>;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                    <span class="title function_">hook_call_constructors</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ismsaoaidsec)&#123;</span><br><span class="line">                <span class="title function_">hook_JNI_OnLoad</span>();</span><br><span class="line">                ismsaoaidsec = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_call_constructors</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> linker = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;linker64&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> symbols = linker.<span class="title function_">enumerateSymbols</span>();</span><br><span class="line">    <span class="keyword">var</span> addr_call_constructors = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> symbol = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> index =<span class="number">0</span>;index&lt;symbols.<span class="property">length</span>;index++)&#123;</span><br><span class="line">        symbol = symbols[index];</span><br><span class="line">        <span class="keyword">if</span>(symbol.<span class="property">name</span>===<span class="string">&quot;__dl__ZN6soinfo17call_constructorsEv&quot;</span>)&#123;</span><br><span class="line">            addr_call_constructors = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> listener = <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr_call_constructors,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hooked call_constructors&quot;</span>)</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x175f8</span>), <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0x175f8:替换成功&quot;</span>)</span><br><span class="line">                &#125;, <span class="string">&quot;void&quot;</span>, []))</span><br><span class="line">                <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x16d30</span>), <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0x16d30:替换成功&quot;</span>)</span><br><span class="line">                &#125;, <span class="string">&quot;void&quot;</span>, []))</span><br><span class="line">                listener.<span class="title function_">detach</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_JNI_OnLoad</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Addr</span>_JNI_OnLoad = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>,<span class="string">&quot;JNI_OnLoad&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Addr</span>_JNI_OnLoad,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hooked JNI_OnLoad!&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;JNI_OnLoad over!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hook_dlopen</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Spawning `com.aikucun.akapp`...</span><br><span class="line">addr_android_dlopen_ext 0x7948380fb8</span><br><span class="line">Spawned `com.aikucun.akapp`. Resuming main thread!</span><br><span class="line">[Pixel 3::com.aikucun.akapp ]-&gt; android_dlopen_ext: /data/app/com.aikucun.akapp-iXBvsC3z_B5WSdWF_YXDcw==/lib/arm64/libmsaoaidsec.so</span><br><span class="line">hooked call_constructors</span><br><span class="line">0x175f8:替换成功</span><br><span class="line">0x16d30:替换成功</span><br><span class="line">hooked JNI_OnLoad!</span><br><span class="line">JNI_OnLoad over!</span><br><span class="line"></span><br><span class="line">Thank you for using Frida!</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Frida</category>
      </categories>
      <tags>
        <tag>Frida</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+github从0到1博客环境搭建</title>
    <url>/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul>
<li>操作系统：Windows</li>
<li>VSCode（进行文本编辑）</li>
<li>Node.js</li>
<li>Git</li>
<li>Github账号和github仓库（部署到github）</li>
<li>Hexo（博客框架）</li>
</ul>
<h2 id="安装VSCode"><a href="#安装VSCode" class="headerlink" title="安装VSCode"></a>安装VSCode</h2><p>无脑下载安装</p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p><a href="https://nodejs.org/en/download/">Node.js</a><br>无脑下载安装<br>打开终端，输入<code>node -v</code>，可以看到版本信息，则安装成功。<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1.jpg"></p>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><a href="https://git-scm.com/download/win">Git</a><br>无脑下载安装</p>
<h3 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h3><p>常用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config -l  //查看所有配置</span><br><span class="line"></span><br><span class="line">git config --system --list //查看系统配置</span><br><span class="line"></span><br><span class="line">git config --global --list //查看用户（全局）配置</span><br></pre></td></tr></table></figure>
<p>配置用户名和邮箱</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br><span class="line"></span><br><span class="line">输入后没有报错代表设置成功</span><br></pre></td></tr></table></figure>
<p>通过git config -l检查配置是否成功<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2.jpg"><br>git配置完成。</p>
<h2 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h2><p>先创建一个自己的Github账号。<br>然后去创建仓库<br>仓库名的格式必须为：&lt;用户名&gt;.github.io<br>Destricption：为仓库描述<br>勾选：Initialize this respository with:Add a README file初始化一个README.md文件<br>点击Creat repository 进行创建<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/3.jpg"></p>
<h2 id="连接Github"><a href="#连接Github" class="headerlink" title="连接Github"></a>连接Github</h2><p>生成ssh公钥<br>打开终端，执行如下命令，如果提示输入一直回车就好</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure>
<p>然后找到在c盘用户文件夹下的.ssh文件夹，会看到id_rsa.pub,这是公钥<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/4.jpg">  </p>
<p>用记事本打开id_rsa.pub，复制里面的内容，然后在GitHub中配置ssh密钥<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/5.jpg">  </p>
<p>进入GitHub，右上角点击头像选择settings<br>进入设置页选择SSH and GPG keys<br>然后点 New SSH key<br>title可以随便可以取，把key粘过去<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/6.jpg"><br>然后点<code>Add SSH KEY</code></p>
<h3 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/7.jpg"><br>可以正常连接！</p>
<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>自己选定一个目录，新建一个文件夹，可以命名MyBlog（自己起个名字，后面的博客项目都在这个文件夹里了）<br>从MyBlog目录下打开终端，执行如下命令，安装hexo</p>
<blockquote>
<p>npm换源<br>npm 官方注册表在国内访问可能受限，会导致下载速度很慢。<br>如果接下来的npm命令报错，可以改为国内镜像源，也可以使用cnmp来代替nmp<br>cnpm 是淘宝镜像的命令行工具，速度比默认的 npm 快<br>npm install -g cnpm –registry&#x3D;<a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a></p>
</blockquote>
<p><strong>安装hexo</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>安装完成，输入<code>hexo -v</code>验证是否安装成功。<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/8.jpg"> </p>
<h2 id="初始化Hexo项目"><a href="#初始化Hexo项目" class="headerlink" title="初始化Hexo项目"></a>初始化Hexo项目</h2><p>从MyBlog目录下打开终端，执行<code>hexo init</code>命令初始化项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/9.jpg"><br>在文件夹中可以看到有了这些文件<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/10.jpg"><br>继续执行npm i ，安装依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure>
<p><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/11.jpg">   </p>
<p>打开终端，在终端输入hexo sever或者hexo s<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/12.jpg">  </p>
<p>Ctrl键+鼠标左键单击网址，打开链接<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/13.jpg">  </p>
<p>这就成功在本地部署了</p>
<h2 id="将静态博客部署到GitHub-Pages"><a href="#将静态博客部署到GitHub-Pages" class="headerlink" title="将静态博客部署到GitHub Pages"></a>将静态博客部署到GitHub Pages</h2><p>安装<code>npm install hexo-deployer-git --save</code><br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/14.jpg"><br>修改_config.yml文件<br>将博客目录下的_config.yml，也就是整个Hexo框架的配置文件了，可以在里面修改大部分配置。<br>修改最后一行的配置，将repository修改为自己的github项目地址。<br>项目地址可以到github仓库复制过来。<br><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/15.jpg"><br>设置分支为：main</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:Bileton/Bileton.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<h1 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h1><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;文章标题&quot;</span><br></pre></td></tr></table></figure>
<p>就会创建一个md文件，就可以在vscode里面写文章了。<br>Ctrl+k + (大写锁定下的)V，可以打开侧边预览实时看到预览效果。</p>
<h2 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h2><p>在终端输入hexo sever或者hexo s<br>输出信息会包含一个链接，打开链接即可在浏览器预览效果。</p>
<h2 id="部署项目到github"><a href="#部署项目到github" class="headerlink" title="部署项目到github"></a>部署项目到github</h2><p>在终端执行如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>hexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令，可用hexo cl。<br>hexo generate：生成静态文章，可以用hexo g缩写<br>hexo deploy：部署文章，可以用hexo d缩写<br>出现 Deploy done，则说明部署成功。<br>打开浏览器访问：<a href="https://bileton.github.io/">https://Bileton.github.io</a>，就可以看到博客内容了。</p>
<h2 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h2><p>在博客目录下的<code>_config.yml文件里</code>，可以进行修改</p>
<h3 id="站点信息"><a href="#站点信息" class="headerlink" title="站点信息"></a>站点信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: &#x27;&#x27; # 标题</span><br><span class="line">subtitle: &#x27;&#x27; # 副标题</span><br><span class="line">description: &#x27;&#x27; # 描述</span><br><span class="line">keywords:</span><br><span class="line">author: &#x27;&#x27; # 作者</span><br><span class="line">language: zh-CN # 语言</span><br><span class="line">timezone: &#x27;&#x27;</span><br></pre></td></tr></table></figure>

<h1 id="托管Cloudflare加速访问"><a href="#托管Cloudflare加速访问" class="headerlink" title="托管Cloudflare加速访问"></a>托管Cloudflare加速访问</h1><p>进入Cloudflare官网注册账号</p>
<p>进入<code>Workers 和 Pages</code>新建一个<code>Pages</code></p>
<p><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/16.jpg"></p>
<p>点击<code>Connect to Git</code></p>
<p><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/17.jpg"></p>
<p>点击<code>Begin setup</code></p>
<p><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/18.jpg"></p>
<p>点击<code>Save and Deploy</code>进行部署</p>
<p>部署成功可查看子域名</p>
<p><img src="/2024/01/01/hexo-github%E4%BB%8E0%E5%88%B01%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/19.jpg"></p>
<p>可通过<code>bileton-github-io.pages.dev</code>进行访问。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>selenium</title>
    <url>/2024/12/05/selenium/</url>
    <content><![CDATA[<p>Selenium 是一个自动化测试工具，利用它我们可以驱动浏览器执行特定的动作。</p>
<h1 id="安装ChromeDriver"><a href="#安装ChromeDriver" class="headerlink" title="安装ChromeDriver"></a>安装ChromeDriver</h1><p>Selenium的使用需要配合Chrome浏览器，需要额外安装ChromeDriver 和 Chrome 浏览器。<br>安装好Chrome 浏览器并可以正常运行之后，点击 Chrome 的菜单，帮助 -&gt; 关于 Chrome，查看 Chrome 的版本号，然后到ChromeDriver 的官方网站<a href="https://sites.google.com/chromium.org/driver/downloads">https://sites.google.com/chromium.org/driver/downloads</a>下载对应的ChromeDriver 版本。</p>
<h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><p>Windows建议直接将 chromedriver.exe 文件拖到 Python 的 Scripts 目录下。<br>也可以单独将其所在路径配置到环境变量。<br>配置完成之后，就可以在命令行下直接执行 chromedriver 命令了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chromedriver</span><br></pre></td></tr></table></figure>
<h1 id="安装Selenium"><a href="#安装Selenium" class="headerlink" title="安装Selenium"></a>安装Selenium</h1><p>使用pip直接安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure>
<p><strong>可以运行一个脚本测试</strong><br>弹出一个 Chrome 浏览器并加载了百度页面，10 秒之后就关闭。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">sleep(<span class="number">10</span>)</span><br><span class="line">browser.close() </span><br></pre></td></tr></table></figure>
<h1 id="常用浏览器操作"><a href="#常用浏览器操作" class="headerlink" title="常用浏览器操作"></a>常用浏览器操作</h1><h2 id="打开页面"><a href="#打开页面" class="headerlink" title="打开页面"></a>打开页面</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">driver.get(<span class="string">&quot;https://xxx.com&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="获取URL"><a href="#获取URL" class="headerlink" title="获取URL"></a>获取URL</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">url = driver.current_url</span><br></pre></td></tr></table></figure>
<h2 id="获取标题"><a href="#获取标题" class="headerlink" title="获取标题"></a>获取标题</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">title = driver.title</span><br></pre></td></tr></table></figure>

<h2 id="页面元素定位"><a href="#页面元素定位" class="headerlink" title="页面元素定位"></a>页面元素定位</h2><p>使用By类型（需要导入By）  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium.webdriver.common.by import By</span><br></pre></td></tr></table></figure>
<h3 id="通过ID定位"><a href="#通过ID定位" class="headerlink" title="通过ID定位"></a>通过ID定位</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">element = driver.find_element(By.ID, <span class="string">&quot;xxx&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="通过"><a href="#通过" class="headerlink" title="通过"></a>通过</h3>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT主题美化</title>
    <url>/2024/01/02/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h1 id="NexT主题"><a href="#NexT主题" class="headerlink" title="NexT主题"></a>NexT主题</h1><p>从博客目录打开终端，执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>下载好了之后会在themes目录下生成一个next目录，里面是next主题的配置文件。<br>修改主题只需要在博客根目录下的_config.yml配置文件里找到theme，将其修改为next即可。<br><img src="/2024/01/02/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/1.png"></p>
<h2 id="修改布局"><a href="#修改布局" class="headerlink" title="修改布局"></a>修改布局</h2><p>在next目录下的_config.yml文件里搜索<code>Scheme</code>，有四种默认局部<br><img src="/2024/01/02/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/2.png"></p>
<h3 id="主题颜色"><a href="#主题颜色" class="headerlink" title="主题颜色"></a>主题颜色</h3><p>白色模式和黑色模式<br><img src="/2024/01/02/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/3.png"><br>false为白色模式，true为黑色模式</p>
<h2 id="增加标签页和分类页"><a href="#增加标签页和分类页" class="headerlink" title="增加标签页和分类页"></a>增加标签页和分类页</h2><p>在next目录下的_config.yml文件里搜索<code>menu</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  #about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br><span class="line"></span><br><span class="line"># Enable / Disable menu icons / item badges.</span><br><span class="line">menu_settings:</span><br><span class="line">  icons: true</span><br><span class="line">  badges: true</span><br></pre></td></tr></table></figure>
<p>把tags和categories前面的<code>#</code>去掉<br><strong>进一步配置</strong><br>创建两个文件，一个是tags，一个是categories</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n page tags</span><br><span class="line">hexo n page categories</span><br></pre></td></tr></table></figure>
<p>文件内容稍作修改<br><img src="/2024/01/02/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/4.jpg"><br><img src="/2024/01/02/%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/5.jpg"></p>
<h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>把menu下的about前面的<code>#</code>去掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  #schedule: /schedule/ || fa fa-calendar</span><br><span class="line">  #sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  #commonweal: /404/ || fa fa-heartbeat</span><br></pre></td></tr></table></figure>
<p>新建页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>
<p>在source目录下生成了一个about文件夹，里面有一个index.md文件，可以对about页面进行修改。</p>
<h2 id="侧边栏位置"><a href="#侧边栏位置" class="headerlink" title="侧边栏位置"></a>侧边栏位置</h2><p>侧边栏中包含多种配置，可通过修改主题<code>_config.yml</code>实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  # Sidebar Position.</span><br><span class="line">  position: left</span><br><span class="line">  #position: right</span><br></pre></td></tr></table></figure>

<h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line">  url: /images/android.svg</span><br><span class="line">  # If true, the avatar will be dispalyed in circle.</span><br><span class="line">  rounded: true</span><br><span class="line">  # If true, the avatar will be rotated with the cursor.</span><br><span class="line">  rotated: true</span><br></pre></td></tr></table></figure>
<ul>
<li><code>url</code>：图像地址。默认为<code>NexT</code>包下<code>/source/images/avatar.gif</code>，也可放置在站点路径<code>/source/uploads</code>文件夹内</li>
<li><code>rounded</code>：是否显示为圆形图标</li>
<li><code>rotated</code>：光标移动到图标是否旋转</li>
</ul>
<h2 id="返回顶部"><a href="#返回顶部" class="headerlink" title="返回顶部"></a>返回顶部</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line">  # Back to top in sidebar.</span><br><span class="line">  sidebar: true</span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></table></figure>
<ul>
<li><code>enable</code>：默认为<code>true</code>。在右下角显示返回顶部图标</li>
<li><code>sidebar</code>：默认为<code>false</code>。在侧边栏显示</li>
<li><code>scrollpercent</code>：默认为<code>false</code>。是否显示进度</li>
</ul>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span><br><span class="line">  # See: https://github.com/chriskempson/tomorrow-theme</span><br><span class="line">  highlight_theme: normal</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Show text copy result.</span><br><span class="line">    show_result: true</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style: mac</span><br></pre></td></tr></table></figure>

<h2 id="自定义主页"><a href="#自定义主页" class="headerlink" title="自定义主页"></a>自定义主页</h2><ul>
<li>在根目录的source目录下，新建一个index.md文档<br>这个source目录下的index.md文档即是我们自定义的主页。在文档中做出的任何修改均会体现在自定义主页中。  </li>
<li>修改根目录下的_config.yml文件的index_generator项<br>打开根目录下的 <code>_config.yml</code> 文件，将 <code>index_generator</code> 项下的 <code>path</code> 项的值修改为一个无效值，例如：我将这一项修改为了default-index。目的是使Hexo框架的默认主页指向一个无效值。</li>
<li>启用home（默认已启用）<br>打开 <code>themes/next/</code> 目录下的 <code>_config.yml</code> 文件，将 <code>menu</code> 项下的 <code>home</code> 项的值修改为<code>/ || fa fa-home</code> 。使得点击页面中的Home菜单时，可以返回自定义主页。</li>
</ul>
<h2 id="添加网站运行时间"><a href="#添加网站运行时间" class="headerlink" title="添加网站运行时间"></a>添加网站运行时间</h2><p>在<code>\themes\next\layout\_partials</code>目录下，找到footer.swig文件，添加如下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var now = new Date();</span><br><span class="line">    function createtime() &#123;</span><br><span class="line">        var grt= new Date(&quot;7/18/2023 10:00:00&quot;); //修改为你的网站开始运行的时间</span><br><span class="line">        now.setTime(now.getTime()+250);</span><br><span class="line">        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);</span><br><span class="line">        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);</span><br><span class="line">        if(String(hnum).length ==1 )&#123;hnum = &quot;0&quot; + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);</span><br><span class="line">        mnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = &quot;0&quot; + mnum;&#125;</span><br><span class="line">        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line">        snum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = &quot;0&quot; + snum;&#125;</span><br><span class="line">        document.getElementById(&quot;timeDate&quot;).innerHTML = &quot;本站已安全运行 &quot;+dnum+&quot; 天 &quot;;</span><br><span class="line">        document.getElementById(&quot;times&quot;).innerHTML = hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">setInterval(&quot;createtime()&quot;,250);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="去除文章底部带-的标签"><a href="#去除文章底部带-的标签" class="headerlink" title="去除文章底部带#的标签"></a>去除文章底部带<code>#</code>的标签</h2><p>文章底部的标签前会有一个#,我们可以将其修改<br>根据路径找到这个文件<code>\MyBlog\themes\next\layout\_macro\post.swig</code>，<br>找到对应文件后全文搜索<code>footer</code>，原内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &lt;footer class=&quot;post-footer&quot;&gt;</span><br><span class="line">    &#123;%- if post.tags and post.tags.length %&#125;</span><br><span class="line">      &#123;%- if theme.tag_icon %&#125;</span><br><span class="line">        &#123;%- set tag_indicate = &#x27;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;&#x27; %&#125;</span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">        &#123;%- set tag_indicate = &#x27;#&#x27; %&#125;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">      &lt;div class=&quot;post-tags&quot;&gt;</span><br><span class="line">        &#123;%- for tag in post.tags.toArray() %&#125;</span><br><span class="line">          &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">        &#123;%- endfor %&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; partial(&#x27;_partials/post/post-footer.swig&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; post_nav(post) &#125;&#125;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">  &lt;footer class=&quot;post-footer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;post-eof&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>
<p>修改后的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &lt;footer class=&quot;post-footer&quot;&gt;</span><br><span class="line">    &#123;%- if post.tags and post.tags.length %&#125;</span><br><span class="line">      &#123;%- if theme.tag_icon %&#125;</span><br><span class="line">        &#123;%- set tag_indicate = &#x27;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;&#x27; %&#125;</span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">        &#123;%- set tag_indicate = &#x27;&#x27; %&#125;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">      &lt;div class=&quot;post-tags&quot;&gt;</span><br><span class="line">        &#123;%- for tag in post.tags.toArray() %&#125;</span><br><span class="line">          &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">        &#123;%- endfor %&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; partial(&#x27;_partials/post/post-footer.swig&#x27;, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">    &#123;&#123; post_nav(post) &#125;&#125;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">  &lt;footer class=&quot;post-footer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;post-eof&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>

<h1 id="字数统计及阅读时长"><a href="#字数统计及阅读时长" class="headerlink" title="字数统计及阅读时长"></a>字数统计及阅读时长</h1><p>安装插件hexo-wordcount</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>
<h2 id="配置NexT目录下的-config-yml"><a href="#配置NexT目录下的-config-yml" class="headerlink" title="配置NexT目录下的_config.yml"></a>配置NexT目录下的_config.yml</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span><br><span class="line">symbols_count_time:</span><br><span class="line">    separated_meta: true</span><br><span class="line">    item_text_post: true</span><br><span class="line">    item_text_total: false</span><br><span class="line">    awl: 2</span><br><span class="line">    wpm: 275</span><br></pre></td></tr></table></figure>
<h1 id="自定义文件的路径"><a href="#自定义文件的路径" class="headerlink" title="自定义文件的路径"></a>自定义文件的路径</h1><p>修改主题配置文件 custom_file_path 部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  head: source/_data/head.swig #添加自定义内容在 head</span><br><span class="line">  #header: source/_data/header.swig #添加自定义内容在顶栏</span><br><span class="line">  #sidebar: source/_data/sidebar.swig #添加自定义内容在边栏</span><br><span class="line">  #postMeta: source/_data/post-meta.swig #添加自定义文章的 meta 信息</span><br><span class="line">  postBodyEnd: source/_data/post-body-end.swig #添加自定义内容在文章尾部</span><br><span class="line">  footer: source/_data/footer.swig #添加自定义内容在页脚</span><br><span class="line">  #bodyEnd: source/_data/body-end.swig</span><br><span class="line">  #variable: source/_data/variables.styl</span><br><span class="line">  #mixin: source/_data/mixins.styl</span><br><span class="line">  style: source/_data/styles.styl #添加自定义css</span><br></pre></td></tr></table></figure>
<h2 id="文章图片圆角"><a href="#文章图片圆角" class="headerlink" title="文章图片圆角"></a>文章图片圆角</h2><p>添加以下内容到 source&#x2F;_data&#x2F;styles.styl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 图片圆角</span><br><span class="line">.post-body img &#123;</span><br><span class="line">  border-radius: 1em </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="首页文章阴影-卡片化-效果"><a href="#首页文章阴影-卡片化-效果" class="headerlink" title="首页文章阴影(卡片化)效果"></a>首页文章阴影(卡片化)效果</h2><p>添加以下内容到source&#x2F;_data&#x2F;styles.styl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line">.post-block &#123;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="鼠标点击出现小红心"><a href="#鼠标点击出现小红心" class="headerlink" title="鼠标点击出现小红心"></a>鼠标点击出现小红心</h2><p>将如下内容保存到source&#x2F;js&#x2F;love.js（没有这个文件就自己创建）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;use strict&quot;;!function(e,r,t)&#123;function a()&#123;for(var e=0;e&lt;i.length;e++)i[e].alpha&lt;=0?(r.body.removeChild(i[e].el),i.splice(e,1)):(i[e].y--,i[e].scale+=.004,i[e].alpha-=.013,i[e].el.style.cssText=&quot;left:&quot;+i[e].x+&quot;px;top:&quot;+i[e].y+&quot;px;opacity:&quot;+i[e].alpha+&quot;;transform:scale(&quot;+i[e].scale+&quot;,&quot;+i[e].scale+&quot;) rotate(45deg);background:&quot;+i[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(a)&#125;var o,i=[];e.requestAnimationFrame=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;,function(t)&#123;var a=r.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(r.createTextNode(t))&#125;catch(e)&#123;a.styleSheet.cssText=t&#125;r.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick,e.onclick=function(e)&#123;var t,a;o&amp;&amp;o(),t=e,(a=r.createElement(&quot;div&quot;)).className=&quot;heart&quot;,i.push(&#123;el:a,x:t.clientX-5,y:t.clientY-5,scale:1,alpha:1,color:&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;),r.body.appendChild(a)&#125;,a()&#125;(window,document);</span><br></pre></td></tr></table></figure>
<p>在 source&#x2F;_data&#x2F;head.swig 添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/love.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="自定义背景"><a href="#自定义背景" class="headerlink" title="自定义背景"></a>自定义背景</h2><p>把想设置的背景放入.&#x2F;themes&#x2F;next&#x2F;source&#x2F;images中，命名为background.jpg。在根目录的source文件夹下新建source&#x2F;_data&#x2F;styles.styl，添加如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 整体背景设置</span><br><span class="line">body &#123;</span><br><span class="line">	background:url(/images/background.png);// 设定背景图片,images同处于source文件夹下</span><br><span class="line">	background-repeat: no-repeat;// 设定背景图片非重复填充</span><br><span class="line">	background-attachment:fixed;// 设置背景图片不随页面滚动</span><br><span class="line">	background-position:50% 50%;// 设置背景图片位置</span><br><span class="line">	background-size: cover// 设置保持图像的纵横比并将图像缩放成将完全覆盖背景定位区域的最小大小</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设置透明度</span><br><span class="line">.main-inner&#123;</span><br><span class="line">	opacity: 0.9;</span><br><span class="line">&#125;</span><br><span class="line">.header-inner&#123;</span><br><span class="line">	opacity: 0.9;</span><br><span class="line">	z-index: 10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="添加本地搜索服务"><a href="#添加本地搜索服务" class="headerlink" title="添加本地搜索服务"></a>添加本地搜索服务</h1><p>使用<code>NexT</code>自带的本地搜索服务，执行如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>在Hexo目录下的配置文件中添加如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
<p>在Next配置文件中进行修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # If auto, trigger search by changing input.</span><br><span class="line">  # If manual, trigger search by pressing enter key or search button.</span><br><span class="line">  trigger: auto</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br></pre></td></tr></table></figure>
<p>把enable的值改为true即可</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>唯品会设备注册及搜索接口逆向分析</title>
    <url>/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.achievo.vipshop</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/appdata.jpg"></p>
<h1 id="设备注册"><a href="#设备注册" class="headerlink" title="设备注册"></a>设备注册</h1><p>抓包找到有关设备注册的接口</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/device_reg.jpg" alt="device_reg"></p>
<p>测试一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;okhttp/4.9.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;authorization&quot;</span>:<span class="string">&quot;OAuth api_sign=fee2a0810c0b9637b6aa0f64b2d91f172dc4e397&quot;</span>,</span><br><span class="line">    <span class="string">&quot;accept-encoding&quot;</span>:<span class="string">&quot;gzip&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parameters = &#123;</span><br><span class="line">    <span class="string">&quot;app_name&quot;</span>:<span class="string">&quot;achievo_ad&quot;</span>,</span><br><span class="line">    <span class="string">&quot;app_version&quot;</span>:<span class="string">&quot;9.39.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;device_token&quot;</span>:<span class="string">&quot;b3aad8e2-2840-39a5-8b51-e5b1c5b16bad&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;warehouse&quot;</span>:<span class="string">&quot;VIP_HZ&quot;</span>,</span><br><span class="line">    <span class="string">&quot;manufacturer&quot;</span>:<span class="string">&quot;Google&quot;</span>,</span><br><span class="line">    <span class="string">&quot;device&quot;</span>:<span class="string">&quot;Pixel 3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;os_version&quot;</span>:<span class="string">&quot;28&quot;</span>,</span><br><span class="line">    <span class="string">&quot;channel&quot;</span>:<span class="string">&quot;yro8nr0d:::&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vipruid&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;regPlat&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;regid&quot;</span>:<span class="string">&quot;null&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rom&quot;</span>:<span class="string">&quot;Dalvik/2.1.0 (Linux; U; Android 9; Pixel 3 Build/PD1A.180720.030)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;skey&quot;</span>:<span class="string">&quot;6692c461c3810ab150c9a980d0c275ec&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://mp.appvipshop.com/apns/device_reg&quot;</span></span><br><span class="line">response = requests.get(url,headers=headers,params=parameters)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">200</span></span><br><span class="line">&#123;<span class="string">&quot;result&quot;</span>:<span class="string">&quot;ok&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;注册成功&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>参数中<code>device_token</code>是变动的，对其进行逆向</p>
<p>反编译app搜索<code>device_token</code></p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/device_token.jpg" alt="device_token"></p>
<h2 id="of"><a href="#of" class="headerlink" title="of"></a>of</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/of.jpg" alt="device_token"></p>
<h2 id="l"><a href="#l" class="headerlink" title="l"></a>l</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/l.jpg" alt="device_token"></p>
<h2 id="a"><a href="#a" class="headerlink" title="a"></a>a</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/a.jpg" alt="device_token"></p>
<h2 id="getMid"><a href="#getMid" class="headerlink" title="getMid"></a>getMid</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/getMid.jpg" alt="device_token"></p>
<p>MidProvider是一个接口，Injector是静态内部类，MidProvider接口定义两个方法<code>String getMid()</code>和<code>String getMidOnly()</code></p>
<h2 id="找MidProvider接口的实现类"><a href="#找MidProvider接口的实现类" class="headerlink" title="找MidProvider接口的实现类"></a>找MidProvider接口的实现类</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/vipmidmanager.jpg" alt="device_token"></p>
<h2 id="VipMidManager"><a href="#VipMidManager" class="headerlink" title="VipMidManager"></a>VipMidManager</h2><p>在vipMidManager类里面找getMid方法，发现jadx并不能反编译这个函数，使用jeb反编译。</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/19.jpg" alt="device_token"></p>
<p>这个方法的解析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getMid()方法根据一些条件生成或获取一个 MID，应该是设备唯一标识符。</span><br><span class="line">stringBuilder0用于构建字符串</span><br><span class="line">application0是当前应用的 Application 实例</span><br><span class="line">s为从 SharedPreferences（应用的配置文件）中获取键为 &quot;VIPS_MID&quot; 的值，假设这个值表示设备的唯一标识符。</span><br><span class="line">判断s是否有效，如果无效，设置 stringBuilder0 为 null，创建一个新的 StringBuilder对象，构造日志信息。</span><br><span class="line">调用 DeviceUuidFactory.getDeviceUuid(application0) 获取设备的唯一标识符（UUID）</span><br><span class="line">将 s 设置为 UUID 的字符串形式，并记录日志信息 | create by androidId。</span><br><span class="line">生成新的 MID：</span><br><span class="line">生成一个新的随机 UUID 并将其赋值给 s ， 同时更新日志，记录生成方式为 | create by uuid。</span><br></pre></td></tr></table></figure>

<h2 id="生成uuid"><a href="#生成uuid" class="headerlink" title="生成uuid"></a>生成uuid</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">random_uuid = uuid.uuid4()</span><br><span class="line"><span class="built_in">print</span>(random_uuid)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">85acb30b-3b28-<span class="number">4975</span>-b8cd-2bb53f08b472</span><br></pre></td></tr></table></figure>

<h2 id="设备注册逆向"><a href="#设备注册逆向" class="headerlink" title="设备注册逆向"></a>设备注册逆向</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">device_token = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;okhttp/4.9.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;authorization&quot;</span>:<span class="string">&quot;OAuth api_sign=fee2a0810c0b9637b6aa0f64b2d91f172dc4e397&quot;</span>,</span><br><span class="line">    <span class="string">&quot;accept-encoding&quot;</span>:<span class="string">&quot;gzip&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parameters = &#123;</span><br><span class="line">    <span class="string">&quot;app_name&quot;</span>:<span class="string">&quot;achievo_ad&quot;</span>,</span><br><span class="line">    <span class="string">&quot;app_version&quot;</span>:<span class="string">&quot;9.39.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;device_token&quot;</span>:device_token,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;warehouse&quot;</span>:<span class="string">&quot;VIP_HZ&quot;</span>,</span><br><span class="line">    <span class="string">&quot;manufacturer&quot;</span>:<span class="string">&quot;Google&quot;</span>,</span><br><span class="line">    <span class="string">&quot;device&quot;</span>:<span class="string">&quot;Pixel 3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;os_version&quot;</span>:<span class="string">&quot;28&quot;</span>,</span><br><span class="line">    <span class="string">&quot;channel&quot;</span>:<span class="string">&quot;yro8nr0d:::&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vipruid&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;regPlat&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;regid&quot;</span>:<span class="string">&quot;null&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rom&quot;</span>:<span class="string">&quot;Dalvik/2.1.0 (Linux; U; Android 9; Pixel 3 Build/PD1A.180720.030)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;skey&quot;</span>:<span class="string">&quot;6692c461c3810ab150c9a980d0c275ec&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://mp.appvipshop.com/apns/device_reg&quot;</span></span><br><span class="line">response = requests.get(url,headers=headers,params=parameters)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">200</span></span><br><span class="line">&#123;<span class="string">&quot;result&quot;</span>:<span class="string">&quot;ok&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;注册成功&quot;</span>&#125;</span><br></pre></td></tr></table></figure>



<h1 id="参数api-sign"><a href="#参数api-sign" class="headerlink" title="参数api_sign"></a>参数api_sign</h1><p>分析数据包，找到Authorization参数的api_sign</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/image-20241217095807281.png" alt="image-20241217095807281"></p>
<h1 id="jadx反编译"><a href="#jadx反编译" class="headerlink" title="jadx反编译"></a>jadx反编译</h1><p>文本搜索api_sign</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/Snipaste_2024-12-17_10-06-59.jpg" alt="Snipaste_2024-12-17_10-06-59"></p>
<p>追踪函数</p>
<h2 id="getApiSign"><a href="#getApiSign" class="headerlink" title="getApiSign"></a>getApiSign</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/getapisign.jpg" alt="getapisign"></p>
<p>分析，<code>getApiSign</code> 函数用于为网络请求生成包含 API 签名的授权头。</p>
<p>猜测<code>VCSPCommonsConfig.getIAppInfo().getUserTokenSecret()</code> 的作用是从应用程序的配置中获取当前用户的令牌密钥，该密钥通常用于生成 API 签名或进行身份验证。</p>
<h2 id="apisign"><a href="#apisign" class="headerlink" title="apisign"></a>apisign</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/apisign.jpg" alt="apisign"></p>
<p>调用 <code>VCSPSecurityConfig.getMapParamsSign(context, treeMap, str, false)</code> 方法生成签名</p>
<h3 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">VCSPSecurityBasicService</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.vip.vcsp.security.api.VCSPSecurityBasicService&quot;</span>);</span><br><span class="line">        <span class="title class_">VCSPSecurityBasicService</span>[<span class="string">&quot;apiSign&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">context, treeMap, str</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`VCSPSecurityBasicService.apiSign is called!`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;context:&quot;</span>,context);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;treeMap:&quot;</span>,treeMap);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str:&quot;</span>,str);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;apiSign&quot;</span>](context, treeMap, str);                                  </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`VCSPSecurityBasicService.apiSign result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_function</span>()</span><br></pre></td></tr></table></figure>

<h3 id="hook结果"><a href="#hook结果" class="headerlink" title="hook结果"></a>hook结果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VCSPSecurityBasicService.apiSign is called!</span><br><span class="line">context: com.achievo.vipshop.common.VipApplicationLike@41bfc24</span><br><span class="line">treeMap: &#123;activity=null, activity_endtime=null, activity_id=7660011, activity_param=&#123;&quot;page_info&quot;:&#123;&quot;source_from&quot;:&#123;&quot;ffp&quot;:&quot;-99&quot;,&quot;s&quot;:&quot;9&quot;,&quot;fp&quot;:&#123;&quot;ot&quot;:&quot;23&quot;,&quot;chi&quot;:&quot;1024&quot;,&quot;f&quot;:&quot;1&quot;,&quot;tsf&quot;:&quot;0&quot;,&quot;pi&quot;:&quot;20180930001&quot;,&quot;page&quot;:&quot;page_channel&quot;,&quot;cn&quot;:&quot;推荐&quot;&#125;,&quot;tp&quot;:&#123;&quot;pi&quot;:&quot;裤子男款&quot;,&quot;page&quot;:&quot;page_te_commodity_search&quot;&#125;,&quot;sp&quot;:&#123;&quot;ot&quot;:&quot;s93&quot;,&quot;of&quot;:&quot;sf1&quot;,&quot;oi&quot;:&quot;裤子男款&quot;,&quot;page&quot;:&quot;page_te_globle_classify_search&quot;&#125;&#125;,&quot;page_id&quot;:&quot;page_commodity_detail_1734423751094&quot;,&quot;page_propety&quot;:&#123;&quot;sale_id&quot;:&quot;1711235467&quot;,&quot;detailStatus&quot;:&quot;0&quot;,&quot;goods_rank&quot;:&quot;1&quot;,&quot;banStatus&quot;:&quot;-99&quot;,&quot;mr&quot;:&quot;-6017890654677737204&quot;,&quot;scene_entry_id&quot;:&quot;-99&quot;,&quot;refer_page_id&quot;:&quot;page_te_commodity_search_1734423543145&quot;,&quot;goods_id&quot;:&quot;6921055391784126923&quot;,&quot;isPreSale&quot;:&quot;0&quot;,&quot;store&quot;:&quot;0&quot;,&quot;type&quot;:&quot;-99&quot;,&quot;direct_buy&quot;:&quot;-99&quot;,&quot;brand_id&quot;:&quot;1711235467&quot;,&quot;has_color&quot;:&quot;1&quot;,&quot;isBgToFront&quot;:&quot;0&quot;,&quot;buy_mode_scene&quot;:&quot;-99&quot;,&quot;module_name&quot;:&quot;com.achievo.vipshop.productdetail&quot;,&quot;with_image&quot;:&quot;0&quot;,&quot;sr&quot;:&quot;-6017890015095286044&quot;,&quot;is_back_page&quot;:&quot;0&quot;&#125;,&quot;page&quot;:&quot;page_commodity_detail&quot;&#125;,&quot;biz_data&quot;:&#123;&quot;sequence&quot;:&quot;-99&quot;,&quot;target_type&quot;:&quot;1&quot;,&quot;target_id&quot;:&quot;9e8b047b52d0&quot;&#125;&#125;, activity_propety=null, activity_starttime=1734423752401, app_name=shop_android, app_version=9.39.4, channel=1, deeplink_cps=, face_flag=0_1, fdc_area_id=104101113, local_time=1734423856870, location=104101, mid=b3aad8e2-2840-39a5-8b51-e5b1c5b16bad, other_cps=, page_id=page_commodity_detail_1734423751094, repeat=0, service=mobile.activityinfo.logger, session_id=b3aad8e2-2840-39a5-8b51-e5b1c5b16bad_shop_android_1734423526867, skey=6692c461c3810ab150c9a980d0c275ec, status=, status_descrit=null, user_class=A1, user_group=20460_【23年新客首页】安卓-5.23-[快应用-独立首页]-[顶部导航-测试-18], user_label=3105,310505, userid=null, vipruid=null, warehouse=VIP_HZ&#125;</span><br><span class="line">str: null</span><br><span class="line">VCSPSecurityBasicService.apiSign result=2ba1c5746ce498722dc8eb444f7170ef7319f848</span><br></pre></td></tr></table></figure>



<h2 id="getMapParamsSign"><a href="#getMapParamsSign" class="headerlink" title="getMapParamsSign"></a>getMapParamsSign</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/getMapParamsSign.jpg" alt="getMapParamsSign"></p>
<p><code>getMapParamsSign</code> 函数用于生成 API 请求的签名</p>
<p>调用 <code>getSignHash(context, treeMap, str2, z10)</code> 方法，生成签名并返回。</p>
<h2 id="getSignHash"><a href="#getSignHash" class="headerlink" title="getSignHash"></a>getSignHash</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/getSignHash.jpg" alt="getSignHash"></p>
<p>调用 <code>gs(context.getApplicationContext(), map, str, z10)</code> 来生成签名哈希值。</p>
<h2 id="gs"><a href="#gs" class="headerlink" title="gs"></a>gs</h2><p>这里jadx不能正常反编译gs函数，使用jeb进行反编译</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/gs.jpg" alt="gs"></p>
<p>调用 <code>VCSPSecurityConfig.initInstance()</code> 方法进行初始化。</p>
<p>通过反射获取 <code>clazz</code> 对应的类中名为 <code>&quot;gs&quot;</code> 的方法，该方法接受 <code>Context</code>、<code>Map</code>、<code>String</code> 和 <code>boolean</code> 类型的参数。</p>
<p>使用反射调用获取到的 <code>gsMethod</code> 方法，传入参数 <code>context0</code>、<code>map0</code>、<code>s</code> 和 <code>z</code>，并将结果转换为 <code>String</code> 类型返回。</p>
<h2 id="initInstance"><a href="#initInstance" class="headerlink" title="initInstance"></a>initInstance</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/instance.jpg"></p>
<p>初始化 <code>VCSPSecurityConfig</code> 类的静态成员 <code>clazz</code> 和 <code>object</code>。</p>
<p><strong><code>clazz = KeyInfo.class</code></strong></p>
<h2 id="KeyInfo-gs"><a href="#KeyInfo-gs" class="headerlink" title="KeyInfo.gs"></a>KeyInfo.gs</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">gs</span><span class="params">(Context context, Map&lt;String, String&gt; map, String str, <span class="type">boolean</span> z10)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> gsNav(context, map, str, z10);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable th2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;KI gs: &quot;</span> + th2.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable unused) &#123;</span><br><span class="line">        SoLoader.load(context, LibName);</span><br><span class="line">        <span class="keyword">return</span> gsNav(context, map, str, z10);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用 <code>gsNav(context, map, str, z10)</code> 来生成签名。</p>
<h2 id="gsNav"><a href="#gsNav" class="headerlink" title="gsNav"></a>gsNav</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">gsNav</span><span class="params">(Context context, Map&lt;String, String&gt; map, String str, <span class="type">boolean</span> z10)</span>;</span><br></pre></td></tr></table></figure>

<p>这是一个native方法</p>
<h2 id="so"><a href="#so" class="headerlink" title="so"></a>so</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;keyinfo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Throwable throwable0) &#123;</span><br><span class="line">        throwable0.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="hook-gsNav"><a href="#hook-gsNav" class="headerlink" title="hook gsNav"></a>hook gsNav</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printMap</span>(<span class="params">param_map</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">HashMap</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.TreeMap&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> arg_map = <span class="title class_">Java</span>.<span class="title function_">cast</span>(param_map,<span class="title class_">HashMap</span>);</span><br><span class="line">    <span class="keyword">return</span> arg_map.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_gsNav</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">KeyInfo</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.vip.vcsp.KeyInfo&quot;</span>);</span><br><span class="line">        <span class="title class_">KeyInfo</span>[<span class="string">&quot;gsNav&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">context, map, str, z10</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----hooked gsNav----&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`KeyInfo.gsNav is called: context=<span class="subst">$&#123;context&#125;</span>, map=<span class="subst">$&#123;map&#125;</span>, str=<span class="subst">$&#123;str&#125;</span>, z10=<span class="subst">$&#123;z10&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;gsNav map:&quot;</span>,<span class="title function_">printMap</span>(map))</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;gsNav&quot;</span>](context, map, str, z10);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`KeyInfo.gsNav result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----hooked over!----&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_gsNav</span>()</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----hooked gsNav----</span><br><span class="line">KeyInfo.gsNav is called: context=com.achievo.vipshop.common.VipApplicationLike@478a323, map=[object Object], str=null, z10=false</span><br><span class="line">gsNav map: &#123;activity=lightart_click, activity_endtime=null, activity_propety=&#123;&quot;obj_data&quot;:&quot;sub_sn=1&amp;id=2085883&amp;code=10052420&amp;slotId=4&amp;source=pcmp&amp;slot_type=84&quot;,&quot;hole_type&quot;:&quot;pcmp&quot;,&quot;obj_id&quot;:&quot;336&quot;,&quot;unique_id&quot;:&quot;10052420:7:2085883&quot;,&quot;content_id&quot;:&quot;mst_100056642&quot;,&quot;content_sn&quot;:&quot;1&quot;,&quot;mr&quot;:&quot;-6009657029902736963&quot;,&quot;hole_id&quot;:&quot;2085883&quot;,&quot;operation_code&quot;:&quot;10052420&quot;,&quot;biz_data&quot;:&quot;tt=url&amp;ti=mst_100056642&quot;,&quot;obj_location&quot;:&quot;3:&quot;,&quot;content_type&quot;:&quot;mst&quot;,&quot;ext_data&quot;:&quot;code=10052420&amp;layout_id=52921&amp;slotType=84&amp;slotAbtestId=4218&amp;goodsId=6920749529361397578&amp;floorId=2085883&amp;slotPoolId=53109357&amp;m_name=AA%E7%89%88C%E4%BD%8D&amp;material=108&amp;brandSn=10000542&amp;product_id=6920749529361397578&amp;recommendImageId=f70c02f25aa57695679&amp;menu_code=20180930001&amp;slotId=4&amp;nodeId=1&quot;,&quot;obj_type&quot;:&quot;5&quot;,&quot;page&quot;:&quot;page_channel&quot;,&quot;cache_data&quot;:&quot;0&quot;&#125;, activity_starttime=1734846844455, app_name=shop_android, app_version=9.39.4, channel=1, deeplink_cps=, face_flag=0_1, fdc_area_id=104101113, local_time=1734846955236, location=104101, mid=b3aad8e2-2840-39a5-8b51-e5b1c5b16bad, other_cps=, page_id=page_channel_1734846541245, repeat=0, service=mobile.activityinfo.logger, session_id=b3aad8e2-2840-39a5-8b51-e5b1c5b16bad_shop_android_1734845336928, skey=6692c461c3810ab150c9a980d0c275ec, status=, status_descrit=null, user_class=A1, user_group=20460_【23年新客首页】安卓-5.23-[快应用-独立首页]-[顶部导航-测试-18], user_label=3105,310505, userid=null, vipruid=null, warehouse=VIP_HZ&#125;</span><br><span class="line">KeyInfo.gsNav result=0aff60c1b478fdafc0ea9700cdd80d1ae4c46f7d</span><br><span class="line">----hooked over!----</span><br></pre></td></tr></table></figure>





<h1 id="分析so"><a href="#分析so" class="headerlink" title="分析so"></a>分析so</h1><p>导出函数中找gsNav</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/exports.jpg"></p>
<h2 id="Java-com-vip-vcsp-KeyInfo-gsNav"><a href="#Java-com-vip-vcsp-KeyInfo-gsNav" class="headerlink" title="Java_com_vip_vcsp_KeyInfo_gsNav"></a>Java_com_vip_vcsp_KeyInfo_gsNav</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">Java_com_vip_vcsp_KeyInfo_gsNav</span><span class="params">(</span></span><br><span class="line"><span class="params">        __int64 a1,</span></span><br><span class="line"><span class="params">        __int64 a2,</span></span><br><span class="line"><span class="params">        __int64 a3,</span></span><br><span class="line"><span class="params">        __int64 a4,</span></span><br><span class="line"><span class="params">        __int64 a5,</span></span><br><span class="line"><span class="params">        <span class="type">unsigned</span> <span class="type">int</span> a6)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v11; <span class="comment">// x20</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)Utils_ima(a1, a2, a3) )</span><br><span class="line">    v11 = Functions_gs(a1, a2, a4, a5, a6);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v11 = <span class="number">0LL</span>;</span><br><span class="line">  Utils_checkJniException(a1);</span><br><span class="line">  <span class="keyword">return</span> v11;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Functions-gs"><a href="#Functions-gs" class="headerlink" title="Functions_gs"></a>Functions_gs</h2><p>关键代码</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/functions_gs.jpg"></p>
<h2 id="getByteHash"><a href="#getByteHash" class="headerlink" title="getByteHash"></a>getByteHash</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *__fastcall <span class="title function_">getByteHash</span><span class="params">(JNIEnv *a1, jobject a2, __int64 a3, <span class="type">unsigned</span> <span class="type">int</span> a4, <span class="type">char</span> *a5)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 i; <span class="comment">// x20</span></span><br><span class="line">  _OWORD v10[<span class="number">4</span>]; <span class="comment">// [xsp+0h] [xbp-E0h] BYREF</span></span><br><span class="line">  _BYTE v11[<span class="number">104</span>]; <span class="comment">// [xsp+40h] [xbp-A0h] BYREF</span></span><br><span class="line">  __int64 v12; <span class="comment">// [xsp+A8h] [xbp-38h]</span></span><br><span class="line"></span><br><span class="line">  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(<span class="number">3</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">2</span>)) + <span class="number">40</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !a3 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  SHA1Reset(v11);</span><br><span class="line">  SHA1Input(v11, a3, a4);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)SHA1Result(v11) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i != <span class="number">20</span>; i += <span class="number">4LL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">memset</span>(v10, <span class="number">0</span>, <span class="keyword">sizeof</span>(v10));</span><br><span class="line">      sub_F2328(v10);</span><br><span class="line">      <span class="built_in">strcat</span>(a5, (<span class="type">const</span> <span class="type">char</span> *)v10);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里看出这是SHA1算法</p>
<h2 id="hook-getByteHash"><a href="#hook-getByteHash" class="headerlink" title="hook getByteHash"></a>hook getByteHash</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_native</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> soAddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libkeyinfo.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> functionaddr = soAddr.<span class="title function_">add</span>(<span class="number">0xF2260</span>)</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(functionaddr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg2&quot;</span>,<span class="title function_">hexdump</span>(args[<span class="number">2</span>],&#123;length : args[<span class="number">3</span>].<span class="title function_">toInt32</span>()&#125;));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg3&quot;</span>,args[<span class="number">3</span>]);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg4&quot;</span>,<span class="title function_">hexdump</span>(args[<span class="number">4</span>]));</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret:&quot;</span>,<span class="title function_">hexdump</span>(ret))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_native</span>()</span><br></pre></td></tr></table></figure>

<h3 id="示例一个hook结果"><a href="#示例一个hook结果" class="headerlink" title="示例一个hook结果"></a>示例一个hook结果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arg2              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">71fb5bdf50  61 65 65 34 63 34 32 35 64 62 62 32 32 38 38 62  aee4c425dbb2288b</span><br><span class="line">71fb5bdf60  38 30 63 37 31 33 34 37 63 63 33 37 64 30 34 62  80c71347cc37d04b</span><br><span class="line">71fb5bdf70  65 66 66 63 38 31 33 35 31 39 36 61 63 30 35 64  effc8135196ac05d</span><br><span class="line">71fb5bdf80  63 64 36 39 64 35 36 39 32 66 32 31 37 34 33 33  cd69d5692f217433</span><br><span class="line">71fb5bdf90  30 39 62 31 38 62 36 63                          09b18b6c</span><br><span class="line">arg3 0x48</span><br><span class="line">arg4              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">71fb5be050  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">71fb5be060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">71fb5be070  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">71fb5be080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">71fb5be090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">71fb5be0a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">71fb5be050  36 61 38 35 66 30 38 65 35 37 66 37 30 38 35 38  6a85f08e57f70858</span><br><span class="line">71fb5be060  33 35 37 32 35 33 61 37 32 34 34 62 33 32 63 65  357253a7244b32ce</span><br><span class="line">71fb5be070  62 36 33 39 62 62 66 39 00 00 00 00 00 00 00 00  b639bbf9........</span><br><span class="line">71fb5be080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">71fb5be090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br></pre></td></tr></table></figure>

<p>如下验证了这是一个标准的SHA1算法</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/tttt.jpg" alt="tttt"></p>
<h3 id="升级一下脚本继续hook"><a href="#升级一下脚本继续hook" class="headerlink" title="升级一下脚本继续hook"></a>升级一下脚本继续hook</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_native</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> soAddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libkeyinfo.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> functionaddr = soAddr.<span class="title function_">add</span>(<span class="number">0xF2260</span>)  </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(functionaddr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----hooked getByteHash----&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg2:&quot;</span>,<span class="title function_">hexdump</span>(args[<span class="number">2</span>],&#123;length : args[<span class="number">3</span>].<span class="title function_">toInt32</span>()&#125;));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg3:&quot;</span>,args[<span class="number">3</span>]);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg4:&quot;</span>,<span class="title function_">hexdump</span>(args[<span class="number">4</span>]));</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg2</span> = args[<span class="number">2</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg3</span> = args[<span class="number">3</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg4</span> = args[<span class="number">4</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret_arg2:&quot;</span>,<span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg2</span>,&#123;length : <span class="variable language_">this</span>.<span class="property">arg3</span>.<span class="title function_">toInt32</span>()&#125;));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret_arg3:&quot;</span>,<span class="variable language_">this</span>.<span class="property">arg3</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret_arg4:&quot;</span>,<span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg4</span>));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret:&quot;</span>,<span class="title function_">hexdump</span>(ret));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----hooked over!----&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_native</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----hooked getByteHash----</span><br><span class="line">arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">724c411400  61 65 65 34 63 34 32 35 64 62 62 32 32 38 38 62  aee4c425dbb2288b</span><br><span class="line">724c411410  38 30 63 37 31 33 34 37 63 63 33 37 64 30 34 62  80c71347cc37d04b</span><br><span class="line">724c411420  61 63 74 69 76 69 74 79 3d 61 63 74 69 76 65 5f  activity=active_</span><br><span class="line">724c411430  74 65 5f 64 79 6e 61 6d 69 63 5f 72 65 73 26 61  te_dynamic_res&amp;a</span><br><span class="line">724c411440  63 74 69 76 69 74 79 5f 65 6e 64 74 69 6d 65 3d  ctivity_endtime=</span><br><span class="line">724c411450  6e 75 6c 6c 26 61 63 74 69 76 69 74 79 5f 70 72  null&amp;activity_pr</span><br><span class="line">724c411460  6f 70 65 74 79 3d 7b 22 61 63 74 69 76 69 74 79  opety=&#123;&quot;activity</span><br><span class="line">724c411470  5f 6e 61 6d 65 22 3a 22 22 2c 22 64 65 70 65 6e  _name&quot;:&quot;&quot;,&quot;depen</span><br><span class="line">724c411480  64 5f 73 74 61 74 75 73 22 3a 2d 31 2c 22 6d 6f  d_status&quot;:-1,&quot;mo</span><br><span class="line">724c411490  64 75 6c 65 22 3a 22 73 6d 61 72 74 52 6f 75 74  dule&quot;:&quot;smartRout</span><br><span class="line">724c4114a0  65 22 2c 22 6d 61 74 63 68 22 3a 31 2c 22 69 73  e&quot;,&quot;match&quot;:1,&quot;is</span><br><span class="line">724c4114b0  5f 64 65 62 75 67 22 3a 22 30 22 2c 22 61 70 6b  _debug&quot;:&quot;0&quot;,&quot;apk</span><br><span class="line">724c4114c0  5f 74 79 70 65 22 3a 22 31 22 2c 22 73 63 65 6e  _type&quot;:&quot;1&quot;,&quot;scen</span><br><span class="line">724c4114d0  65 22 3a 22 61 70 69 22 2c 22 69 73 5f 6d 61 69  e&quot;:&quot;api&quot;,&quot;is_mai</span><br><span class="line">724c4114e0  6e 5f 70 72 6f 63 65 73 73 22 3a 31 2c 22 66 61  n_process&quot;:1,&quot;fa</span><br><span class="line">724c4114f0  69 6c 5f 62 61 63 6b 22 3a 30 2c 22 65 76 65 6e  il_back&quot;:0,&quot;even</span><br><span class="line">724c411500  74 5f 69 64 22 3a 30 2c 22 68 61 73 5f 6d 6f 64  t_id&quot;:0,&quot;has_mod</span><br><span class="line">724c411510  75 6c 65 22 3a 30 2c 22 72 65 6d 6f 76 65 5f 73  ule&quot;:0,&quot;remove_s</span><br><span class="line">724c411520  6f 22 3a 22 30 22 2c 22 61 63 74 69 6f 6e 22 3a  o&quot;:&quot;0&quot;,&quot;action&quot;:</span><br><span class="line">724c411530  22 72 65 73 5f 73 63 65 6e 65 22 2c 22 73 74 61  &quot;res_scene&quot;,&quot;sta</span><br><span class="line">724c411540  74 75 73 22 3a 30 7d 26 61 63 74 69 76 69 74 79  tus&quot;:0&#125;&amp;activity</span><br><span class="line">724c411550  5f 73 74 61 72 74 74 69 6d 65 3d 31 37 33 34 38  _starttime=17348</span><br><span class="line">724c411560  34 37 33 37 31 36 36 38 26 61 70 70 5f 6e 61 6d  47371668&amp;app_nam</span><br><span class="line">724c411570  65 3d 73 68 6f 70 5f 61 6e 64 72 6f 69 64 26 61  e=shop_android&amp;a</span><br><span class="line">724c411580  70 70 5f 76 65 72 73 69 6f 6e 3d 39 2e 33 39 2e  pp_version=9.39.</span><br><span class="line">724c411590  34 26 63 68 61 6e 6e 65 6c 3d 31 26 64 65 65 70  4&amp;channel=1&amp;deep</span><br><span class="line">724c4115a0  6c 69 6e 6b 5f 63 70 73 3d 26 66 61 63 65 5f 66  link_cps=&amp;face_f</span><br><span class="line">724c4115b0  6c 61 67 3d 30 5f 31 26 66 64 63 5f 61 72 65 61  lag=0_1&amp;fdc_area</span><br><span class="line">724c4115c0  5f 69 64 3d 31 30 34 31 30 31 31 31 33 26 6c 6f  _id=104101113&amp;lo</span><br><span class="line">724c4115d0  63 61 6c 5f 74 69 6d 65 3d 31 37 33 34 38 34 37  cal_time=1734847</span><br><span class="line">724c4115e0  33 37 31 36 36 38 26 6c 6f 63 61 74 69 6f 6e 3d  371668&amp;location=</span><br><span class="line">724c4115f0  31 30 34 31 30 31 26 6d 69 64 3d 62 33 61 61 64  104101&amp;mid=b3aad</span><br><span class="line">724c411600  38 65 32 2d 32 38 34 30 2d 33 39 61 35 2d 38 62  8e2-2840-39a5-8b</span><br><span class="line">724c411610  35 31 2d 65 35 62 31 63 35 62 31 36 62 61 64 26  51-e5b1c5b16bad&amp;</span><br><span class="line">724c411620  6f 74 68 65 72 5f 63 70 73 3d 26 70 61 67 65 5f  other_cps=&amp;page_</span><br><span class="line">724c411630  69 64 3d 70 61 67 65 5f 74 65 5f 6c 6f 64 69 6e  id=page_te_lodin</span><br><span class="line">724c411640  67 5f 61 63 74 69 76 69 74 79 5f 31 37 33 34 38  g_activity_17348</span><br><span class="line">724c411650  34 37 33 37 31 34 30 31 26 72 65 70 65 61 74 3d  47371401&amp;repeat=</span><br><span class="line">724c411660  30 26 73 65 72 76 69 63 65 3d 6d 6f 62 69 6c 65  0&amp;service=mobile</span><br><span class="line">724c411670  2e 61 63 74 69 76 69 74 79 69 6e 66 6f 2e 6c 6f  .activityinfo.lo</span><br><span class="line">724c411680  67 67 65 72 26 73 65 73 73 69 6f 6e 5f 69 64 3d  gger&amp;session_id=</span><br><span class="line">724c411690  62 33 61 61 64 38 65 32 2d 32 38 34 30 2d 33 39  b3aad8e2-2840-39</span><br><span class="line">724c4116a0  61 35 2d 38 62 35 31 2d 65 35 62 31 63 35 62 31  a5-8b51-e5b1c5b1</span><br><span class="line">724c4116b0  36 62 61 64 5f 73 68 6f 70 5f 61 6e 64 72 6f 69  6bad_shop_androi</span><br><span class="line">724c4116c0  64 5f 31 37 33 34 38 34 37 33 37 31 33 33 35 26  d_1734847371335&amp;</span><br><span class="line">724c4116d0  73 6b 65 79 3d 36 36 39 32 63 34 36 31 63 33 38  skey=6692c461c38</span><br><span class="line">724c4116e0  31 30 61 62 31 35 30 63 39 61 39 38 30 64 30 63  10ab150c9a980d0c</span><br><span class="line">724c4116f0  32 37 35 65 63 26 73 74 61 74 75 73 3d 26 73 74  275ec&amp;status=&amp;st</span><br><span class="line">724c411700  61 74 75 73 5f 64 65 73 63 72 69 74 3d 6e 75 6c  atus_descrit=nul</span><br><span class="line">724c411710  6c 26 75 73 65 72 5f 63 6c 61 73 73 3d 41 31 26  l&amp;user_class=A1&amp;</span><br><span class="line">724c411720  75 73 65 72 5f 67 72 6f 75 70 3d 32 30 34 36 30  user_group=20460</span><br><span class="line">724c411730  5f e3 80 90 32 33 e5 b9 b4 e6 96 b0 e5 ae a2 e9  _...23..........</span><br><span class="line">724c411740  a6 96 e9 a1 b5 e3 80 91 e5 ae 89 e5 8d 93 2d 35  ..............-5</span><br><span class="line">724c411750  2e 32 33 2d 5b e5 bf ab e5 ba 94 e7 94 a8 2d e7  .23-[.........-.</span><br><span class="line">724c411760  8b ac e7 ab 8b e9 a6 96 e9 a1 b5 5d 2d 5b e9 a1  ...........]-[..</span><br><span class="line">724c411770  b6 e9 83 a8 e5 af bc e8 88 aa 2d e6 b5 8b e8 af  ..........-.....</span><br><span class="line">724c411780  95 2d 31 38 5d 26 75 73 65 72 5f 6c 61 62 65 6c  .-18]&amp;user_label</span><br><span class="line">724c411790  3d 33 31 30 35 2c 33 31 30 35 30 35 26 75 73 65  =3105,310505&amp;use</span><br><span class="line">724c4117a0  72 69 64 3d 6e 75 6c 6c 26 76 69 70 72 75 69 64  rid=null&amp;vipruid</span><br><span class="line">724c4117b0  3d 6e 75 6c 6c 26 77 61 72 65 68 6f 75 73 65 3d  =null&amp;warehouse=</span><br><span class="line">724c4117c0  56 49 50 5f 48 5a                                VIP_HZ</span><br><span class="line">arg3: 0x3c6</span><br><span class="line">arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">72342e4050  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4070  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e40a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e40b0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret_arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">724c411400  61 65 65 34 63 34 32 35 64 62 62 32 32 38 38 62  aee4c425dbb2288b</span><br><span class="line">724c411410  38 30 63 37 31 33 34 37 63 63 33 37 64 30 34 62  80c71347cc37d04b</span><br><span class="line">724c411420  61 63 74 69 76 69 74 79 3d 61 63 74 69 76 65 5f  activity=active_</span><br><span class="line">724c411430  74 65 5f 64 79 6e 61 6d 69 63 5f 72 65 73 26 61  te_dynamic_res&amp;a</span><br><span class="line">724c411440  63 74 69 76 69 74 79 5f 65 6e 64 74 69 6d 65 3d  ctivity_endtime=</span><br><span class="line">724c411450  6e 75 6c 6c 26 61 63 74 69 76 69 74 79 5f 70 72  null&amp;activity_pr</span><br><span class="line">724c411460  6f 70 65 74 79 3d 7b 22 61 63 74 69 76 69 74 79  opety=&#123;&quot;activity</span><br><span class="line">724c411470  5f 6e 61 6d 65 22 3a 22 22 2c 22 64 65 70 65 6e  _name&quot;:&quot;&quot;,&quot;depen</span><br><span class="line">724c411480  64 5f 73 74 61 74 75 73 22 3a 2d 31 2c 22 6d 6f  d_status&quot;:-1,&quot;mo</span><br><span class="line">724c411490  64 75 6c 65 22 3a 22 73 6d 61 72 74 52 6f 75 74  dule&quot;:&quot;smartRout</span><br><span class="line">724c4114a0  65 22 2c 22 6d 61 74 63 68 22 3a 31 2c 22 69 73  e&quot;,&quot;match&quot;:1,&quot;is</span><br><span class="line">724c4114b0  5f 64 65 62 75 67 22 3a 22 30 22 2c 22 61 70 6b  _debug&quot;:&quot;0&quot;,&quot;apk</span><br><span class="line">724c4114c0  5f 74 79 70 65 22 3a 22 31 22 2c 22 73 63 65 6e  _type&quot;:&quot;1&quot;,&quot;scen</span><br><span class="line">724c4114d0  65 22 3a 22 61 70 69 22 2c 22 69 73 5f 6d 61 69  e&quot;:&quot;api&quot;,&quot;is_mai</span><br><span class="line">724c4114e0  6e 5f 70 72 6f 63 65 73 73 22 3a 31 2c 22 66 61  n_process&quot;:1,&quot;fa</span><br><span class="line">724c4114f0  69 6c 5f 62 61 63 6b 22 3a 30 2c 22 65 76 65 6e  il_back&quot;:0,&quot;even</span><br><span class="line">724c411500  74 5f 69 64 22 3a 30 2c 22 68 61 73 5f 6d 6f 64  t_id&quot;:0,&quot;has_mod</span><br><span class="line">724c411510  75 6c 65 22 3a 30 2c 22 72 65 6d 6f 76 65 5f 73  ule&quot;:0,&quot;remove_s</span><br><span class="line">724c411520  6f 22 3a 22 30 22 2c 22 61 63 74 69 6f 6e 22 3a  o&quot;:&quot;0&quot;,&quot;action&quot;:</span><br><span class="line">724c411530  22 72 65 73 5f 73 63 65 6e 65 22 2c 22 73 74 61  &quot;res_scene&quot;,&quot;sta</span><br><span class="line">724c411540  74 75 73 22 3a 30 7d 26 61 63 74 69 76 69 74 79  tus&quot;:0&#125;&amp;activity</span><br><span class="line">724c411550  5f 73 74 61 72 74 74 69 6d 65 3d 31 37 33 34 38  _starttime=17348</span><br><span class="line">724c411560  34 37 33 37 31 36 36 38 26 61 70 70 5f 6e 61 6d  47371668&amp;app_nam</span><br><span class="line">724c411570  65 3d 73 68 6f 70 5f 61 6e 64 72 6f 69 64 26 61  e=shop_android&amp;a</span><br><span class="line">724c411580  70 70 5f 76 65 72 73 69 6f 6e 3d 39 2e 33 39 2e  pp_version=9.39.</span><br><span class="line">724c411590  34 26 63 68 61 6e 6e 65 6c 3d 31 26 64 65 65 70  4&amp;channel=1&amp;deep</span><br><span class="line">724c4115a0  6c 69 6e 6b 5f 63 70 73 3d 26 66 61 63 65 5f 66  link_cps=&amp;face_f</span><br><span class="line">724c4115b0  6c 61 67 3d 30 5f 31 26 66 64 63 5f 61 72 65 61  lag=0_1&amp;fdc_area</span><br><span class="line">724c4115c0  5f 69 64 3d 31 30 34 31 30 31 31 31 33 26 6c 6f  _id=104101113&amp;lo</span><br><span class="line">724c4115d0  63 61 6c 5f 74 69 6d 65 3d 31 37 33 34 38 34 37  cal_time=1734847</span><br><span class="line">724c4115e0  33 37 31 36 36 38 26 6c 6f 63 61 74 69 6f 6e 3d  371668&amp;location=</span><br><span class="line">724c4115f0  31 30 34 31 30 31 26 6d 69 64 3d 62 33 61 61 64  104101&amp;mid=b3aad</span><br><span class="line">724c411600  38 65 32 2d 32 38 34 30 2d 33 39 61 35 2d 38 62  8e2-2840-39a5-8b</span><br><span class="line">724c411610  35 31 2d 65 35 62 31 63 35 62 31 36 62 61 64 26  51-e5b1c5b16bad&amp;</span><br><span class="line">724c411620  6f 74 68 65 72 5f 63 70 73 3d 26 70 61 67 65 5f  other_cps=&amp;page_</span><br><span class="line">724c411630  69 64 3d 70 61 67 65 5f 74 65 5f 6c 6f 64 69 6e  id=page_te_lodin</span><br><span class="line">724c411640  67 5f 61 63 74 69 76 69 74 79 5f 31 37 33 34 38  g_activity_17348</span><br><span class="line">724c411650  34 37 33 37 31 34 30 31 26 72 65 70 65 61 74 3d  47371401&amp;repeat=</span><br><span class="line">724c411660  30 26 73 65 72 76 69 63 65 3d 6d 6f 62 69 6c 65  0&amp;service=mobile</span><br><span class="line">724c411670  2e 61 63 74 69 76 69 74 79 69 6e 66 6f 2e 6c 6f  .activityinfo.lo</span><br><span class="line">724c411680  67 67 65 72 26 73 65 73 73 69 6f 6e 5f 69 64 3d  gger&amp;session_id=</span><br><span class="line">724c411690  62 33 61 61 64 38 65 32 2d 32 38 34 30 2d 33 39  b3aad8e2-2840-39</span><br><span class="line">724c4116a0  61 35 2d 38 62 35 31 2d 65 35 62 31 63 35 62 31  a5-8b51-e5b1c5b1</span><br><span class="line">724c4116b0  36 62 61 64 5f 73 68 6f 70 5f 61 6e 64 72 6f 69  6bad_shop_androi</span><br><span class="line">724c4116c0  64 5f 31 37 33 34 38 34 37 33 37 31 33 33 35 26  d_1734847371335&amp;</span><br><span class="line">724c4116d0  73 6b 65 79 3d 36 36 39 32 63 34 36 31 63 33 38  skey=6692c461c38</span><br><span class="line">724c4116e0  31 30 61 62 31 35 30 63 39 61 39 38 30 64 30 63  10ab150c9a980d0c</span><br><span class="line">724c4116f0  32 37 35 65 63 26 73 74 61 74 75 73 3d 26 73 74  275ec&amp;status=&amp;st</span><br><span class="line">724c411700  61 74 75 73 5f 64 65 73 63 72 69 74 3d 6e 75 6c  atus_descrit=nul</span><br><span class="line">724c411710  6c 26 75 73 65 72 5f 63 6c 61 73 73 3d 41 31 26  l&amp;user_class=A1&amp;</span><br><span class="line">724c411720  75 73 65 72 5f 67 72 6f 75 70 3d 32 30 34 36 30  user_group=20460</span><br><span class="line">724c411730  5f e3 80 90 32 33 e5 b9 b4 e6 96 b0 e5 ae a2 e9  _...23..........</span><br><span class="line">724c411740  a6 96 e9 a1 b5 e3 80 91 e5 ae 89 e5 8d 93 2d 35  ..............-5</span><br><span class="line">724c411750  2e 32 33 2d 5b e5 bf ab e5 ba 94 e7 94 a8 2d e7  .23-[.........-.</span><br><span class="line">724c411760  8b ac e7 ab 8b e9 a6 96 e9 a1 b5 5d 2d 5b e9 a1  ...........]-[..</span><br><span class="line">724c411770  b6 e9 83 a8 e5 af bc e8 88 aa 2d e6 b5 8b e8 af  ..........-.....</span><br><span class="line">724c411780  95 2d 31 38 5d 26 75 73 65 72 5f 6c 61 62 65 6c  .-18]&amp;user_label</span><br><span class="line">724c411790  3d 33 31 30 35 2c 33 31 30 35 30 35 26 75 73 65  =3105,310505&amp;use</span><br><span class="line">724c4117a0  72 69 64 3d 6e 75 6c 6c 26 76 69 70 72 75 69 64  rid=null&amp;vipruid</span><br><span class="line">724c4117b0  3d 6e 75 6c 6c 26 77 61 72 65 68 6f 75 73 65 3d  =null&amp;warehouse=</span><br><span class="line">724c4117c0  56 49 50 5f 48 5a                                VIP_HZ</span><br><span class="line">ret_arg3: 0x3c6</span><br><span class="line">ret_arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">72342e4050  32 31 63 34 63 31 31 63 35 30 36 33 37 64 34 33  21c4c11c50637d43</span><br><span class="line">72342e4060  31 36 65 63 63 31 62 62 66 37 65 36 61 34 61 62  16ecc1bbf7e6a4ab</span><br><span class="line">72342e4070  64 66 36 66 62 65 36 31 00 00 00 00 00 00 00 00  df6fbe61........</span><br><span class="line">72342e4080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e40a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">72342e4050  32 31 63 34 63 31 31 63 35 30 36 33 37 64 34 33  21c4c11c50637d43</span><br><span class="line">72342e4060  31 36 65 63 63 31 62 62 66 37 65 36 61 34 61 62  16ecc1bbf7e6a4ab</span><br><span class="line">72342e4070  64 66 36 66 62 65 36 31 00 00 00 00 00 00 00 00  df6fbe61........</span><br><span class="line">72342e4080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">----hooked over!----</span><br><span class="line">----hooked getByteHash----</span><br><span class="line">arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">72342e3f50  61 65 65 34 63 34 32 35 64 62 62 32 32 38 38 62  aee4c425dbb2288b</span><br><span class="line">72342e3f60  38 30 63 37 31 33 34 37 63 63 33 37 64 30 34 62  80c71347cc37d04b</span><br><span class="line">72342e3f70  32 31 63 34 63 31 31 63 35 30 36 33 37 64 34 33  21c4c11c50637d43</span><br><span class="line">72342e3f80  31 36 65 63 63 31 62 62 66 37 65 36 61 34 61 62  16ecc1bbf7e6a4ab</span><br><span class="line">72342e3f90  64 66 36 66 62 65 36 31                          df6fbe61</span><br><span class="line">arg3: 0x48</span><br><span class="line">arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">72342e4050  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4060  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4070  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e40a0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret_arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">72342e3f50  61 65 65 34 63 34 32 35 64 62 62 32 32 38 38 62  aee4c425dbb2288b</span><br><span class="line">72342e3f60  38 30 63 37 31 33 34 37 63 63 33 37 64 30 34 62  80c71347cc37d04b</span><br><span class="line">72342e3f70  32 31 63 34 63 31 31 63 35 30 36 33 37 64 34 33  21c4c11c50637d43</span><br><span class="line">72342e3f80  31 36 65 63 63 31 62 62 66 37 65 36 61 34 61 62  16ecc1bbf7e6a4ab</span><br><span class="line">72342e3f90  64 66 36 66 62 65 36 31                          df6fbe61</span><br><span class="line">ret_arg3: 0x48</span><br><span class="line">ret_arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">72342e4050  32 33 37 66 32 64 66 62 33 34 64 38 38 34 36 63  237f2dfb34d8846c</span><br><span class="line">72342e4060  61 37 66 31 31 30 37 31 35 38 33 66 62 33 61 66  a7f11071583fb3af</span><br><span class="line">72342e4070  35 66 39 38 62 39 66 65 00 00 00 00 00 00 00 00  5f98b9fe........</span><br><span class="line">72342e4080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">72342e4050  32 33 37 66 32 64 66 62 33 34 64 38 38 34 36 63  237f2dfb34d8846c</span><br><span class="line">72342e4060  61 37 66 31 31 30 37 31 35 38 33 66 62 33 61 66  a7f11071583fb3af</span><br><span class="line">72342e4070  35 66 39 38 62 39 66 65 00 00 00 00 00 00 00 00  5f98b9fe........</span><br><span class="line">72342e4080  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">72342e4090  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">----hooked over!----</span><br></pre></td></tr></table></figure>

<h3 id="主动调用gsNav方法，来观察getByteHash的输出结果"><a href="#主动调用gsNav方法，来观察getByteHash的输出结果" class="headerlink" title="主动调用gsNav方法，来观察getByteHash的输出结果"></a>主动调用gsNav方法，来观察getByteHash的输出结果</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">call_gsNav</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----call gsNav----&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> currentApplication = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>).<span class="title function_">currentApplication</span>();</span><br><span class="line">        <span class="keyword">var</span> context = currentApplication.<span class="title function_">getApplicationContext</span>();</span><br><span class="line">        <span class="keyword">var</span> map = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.TreeMap&quot;</span>).$new();</span><br><span class="line">        map.<span class="title function_">put</span>(<span class="string">&quot;api_key&quot;</span>,<span class="string">&quot;bileton&quot;</span>)</span><br><span class="line">        map.<span class="title function_">put</span>(<span class="string">&quot;app_name&quot;</span>,<span class="string">&quot;shop_android&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> string = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> boolean = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">KeyInfo</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.vip.vcsp.KeyInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="title class_">KeyInfo</span>.<span class="title function_">gsNav</span>(context,map,string,boolean)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;call gsNav result:&quot;</span>,result)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----call gsNav over----&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_native</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> soAddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libkeyinfo.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> functionaddr = soAddr.<span class="title function_">add</span>(<span class="number">0xF2260</span>)  </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(functionaddr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----hooked getByteHash----&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg2:&quot;</span>,<span class="title function_">hexdump</span>(args[<span class="number">2</span>],&#123;length : args[<span class="number">3</span>].<span class="title function_">toInt32</span>()&#125;));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg3:&quot;</span>,args[<span class="number">3</span>]);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg4:&quot;</span>,<span class="title function_">hexdump</span>(args[<span class="number">4</span>]));</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg2</span> = args[<span class="number">2</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg3</span> = args[<span class="number">3</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg4</span> = args[<span class="number">4</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret_arg2:&quot;</span>,<span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg2</span>,&#123;length : <span class="variable language_">this</span>.<span class="property">arg3</span>.<span class="title function_">toInt32</span>()&#125;));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret_arg3:&quot;</span>,<span class="variable language_">this</span>.<span class="property">arg3</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret_arg4:&quot;</span>,<span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg4</span>));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret:&quot;</span>,<span class="title function_">hexdump</span>(ret));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----hooked over!----&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hook_native</span>();</span><br><span class="line">    <span class="title function_">call_gsNav</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----call gsNav----</span><br><span class="line">----hooked getByteHash----</span><br><span class="line">arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7d0246f580  30 82 02 5f 30 82 01 c8 a0 03 02 01 02 02 04 4e  0.._0..........N</span><br><span class="line">7d0246f590  77 18 86 30 0d 06 09 2a 86 48 86 f7 0d 01 01 05  w..0...*.H......</span><br><span class="line">7d0246f5a0  05 00 30 73 31 0b 30 09 06 03 55 04 06 13 02 63  ..0s1.0...U....c</span><br><span class="line">7d0246f5b0  6e 31 12 30 10 06 03 55 04 08 13 09 67 75 61 6e  n1.0...U....guan</span><br><span class="line">7d0246f5c0  67 64 6f 6e 67 31 12 30 10 06 03 55 04 07 13 09  gdong1.0...U....</span><br><span class="line">7d0246f5d0  67 75 61 6e 67 7a 68 6f 75 31 10 30 0e 06 03 55  guangzhou1.0...U</span><br><span class="line">7d0246f5e0  04 0a 13 07 76 69 70 73 68 6f 70 31 18 30 16 06  ....vipshop1.0..</span><br><span class="line">7d0246f5f0  03 55 04 0b 13 0f 77 77 77 2e 76 69 70 73 68 6f  .U....www.vipsho</span><br><span class="line">7d0246f600  70 2e 63 6f 6d 31 10 30 0e 06 03 55 04 03 13 07  p.com1.0...U....</span><br><span class="line">7d0246f610  76 69 70 73 68 6f 70 30 20 17 0d 31 31 30 39 31  vipshop0 ..11091</span><br><span class="line">7d0246f620  39 31 30 32 35 31 30 5a 18 0f 32 32 38 35 30 37  9102510Z..228507</span><br><span class="line">7d0246f630  30 34 31 30 32 35 31 30 5a 30 73 31 0b 30 09 06  04102510Z0s1.0..</span><br><span class="line">7d0246f640  03 55 04 06 13 02 63 6e 31 12 30 10 06 03 55 04  .U....cn1.0...U.</span><br><span class="line">7d0246f650  08 13 09 67 75 61 6e 67 64 6f 6e 67 31 12 30 10  ...guangdong1.0.</span><br><span class="line">7d0246f660  06 03 55 04 07 13 09 67 75 61 6e 67 7a 68 6f 75  ..U....guangzhou</span><br><span class="line">7d0246f670  31 10 30 0e 06 03 55 04 0a 13 07 76 69 70 73 68  1.0...U....vipsh</span><br><span class="line">7d0246f680  6f 70 31 18 30 16 06 03 55 04 0b 13 0f 77 77 77  op1.0...U....www</span><br><span class="line">7d0246f690  2e 76 69 70 73 68 6f 70 2e 63 6f 6d 31 10 30 0e  .vipshop.com1.0.</span><br><span class="line">7d0246f6a0  06 03 55 04 03 13 07 76 69 70 73 68 6f 70 30 81  ..U....vipshop0.</span><br><span class="line">7d0246f6b0  9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00  .0...*.H........</span><br><span class="line">7d0246f6c0  03 81 8d 00 30 81 89 02 81 81 00 93 34 83 f8 c0  ....0.......4...</span><br><span class="line">7d0246f6d0  1a 56 74 4a a3 a0 54 73 95 ca c4 22 ea 07 ae a0  .VtJ..Ts...&quot;....</span><br><span class="line">7d0246f6e0  3f 38 45 90 c1 fc bb eb d3 0c 71 39 5e a8 b6 bd  ?8E.......q9^...</span><br><span class="line">7d0246f6f0  1a 1b 04 84 47 49 0e 4b af 36 5a 4b 49 72 6f 35  ....GI.K.6ZKIro5</span><br><span class="line">7d0246f700  4e 57 96 35 f5 40 7e 63 86 57 49 2f 6c af 66 5c  NW.5.@~c.WI/l.f\</span><br><span class="line">7d0246f710  27 18 11 8c cc ba d9 2f 1f fc ab 62 3c c7 ca 9e  &#x27;....../...b&lt;...</span><br><span class="line">7d0246f720  a8 ca 9a d5 8c 47 ab 21 05 ba 7c 7c 6d 6f fe 46  .....G.!..||mo.F</span><br><span class="line">7d0246f730  6d 7e 94 06 bb f0 28 cb 9b b5 43 3a 74 cb 85 47  m~....(...C:t..G</span><br><span class="line">7d0246f740  d1 b6 de de f8 84 56 a1 67 9d 3d 02 03 01 00 01  ......V.g.=.....</span><br><span class="line">7d0246f750  30 0d 06 09 2a 86 48 86 f7 0d 01 01 05 05 00 03  0...*.H.........</span><br><span class="line">7d0246f760  81 81 00 17 fd cc f7 dd 2f 1a 42 80 92 89 a2 15  ......../.B.....</span><br><span class="line">7d0246f770  9b 64 aa 5a b0 57 91 35 88 18 37 74 3b ca 21 18  .d.Z.W.5..7t;.!.</span><br><span class="line">7d0246f780  0b f3 30 50 75 4b b8 a8 44 90 02 c6 07 5e b6 d7  ..0PuK..D....^..</span><br><span class="line">7d0246f790  1a 65 80 06 a6 b6 00 94 c1 69 f0 77 fb 06 3b 93  .e.......i.w..;.</span><br><span class="line">7d0246f7a0  91 64 d1 64 e6 70 4a ae a1 14 c1 fa ed b4 eb fc  .d.d.pJ.........</span><br><span class="line">7d0246f7b0  25 db ca 96 21 a5 58 d2 8b 87 1c 72 7f ff b6 0e  %...!.X....r....</span><br><span class="line">7d0246f7c0  c7 40 e8 64 01 53 e8 e9 4d a9 da 7b 09 9e 30 82  .@.d.S..M..&#123;..0.</span><br><span class="line">7d0246f7d0  c3 77 e4 6d 2d 4e 9c 4a 25 8a b2 54 99 d1 da 85  .w.m-N.J%..T....</span><br><span class="line">7d0246f7e0  5b 14 ca                                         [..</span><br><span class="line">arg3: 0x263</span><br><span class="line">arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea9c80  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9c90  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9ca0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9cb0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9cc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9cd0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line"></span><br><span class="line">ret_arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7d0246f580  30 82 02 5f 30 82 01 c8 a0 03 02 01 02 02 04 4e  0.._0..........N</span><br><span class="line">7d0246f590  77 18 86 30 0d 06 09 2a 86 48 86 f7 0d 01 01 05  w..0...*.H......</span><br><span class="line">7d0246f5a0  05 00 30 73 31 0b 30 09 06 03 55 04 06 13 02 63  ..0s1.0...U....c</span><br><span class="line">7d0246f5b0  6e 31 12 30 10 06 03 55 04 08 13 09 67 75 61 6e  n1.0...U....guan</span><br><span class="line">7d0246f5c0  67 64 6f 6e 67 31 12 30 10 06 03 55 04 07 13 09  gdong1.0...U....</span><br><span class="line">7d0246f5d0  67 75 61 6e 67 7a 68 6f 75 31 10 30 0e 06 03 55  guangzhou1.0...U</span><br><span class="line">7d0246f5e0  04 0a 13 07 76 69 70 73 68 6f 70 31 18 30 16 06  ....vipshop1.0..</span><br><span class="line">7d0246f5f0  03 55 04 0b 13 0f 77 77 77 2e 76 69 70 73 68 6f  .U....www.vipsho</span><br><span class="line">7d0246f600  70 2e 63 6f 6d 31 10 30 0e 06 03 55 04 03 13 07  p.com1.0...U....</span><br><span class="line">7d0246f610  76 69 70 73 68 6f 70 30 20 17 0d 31 31 30 39 31  vipshop0 ..11091</span><br><span class="line">7d0246f620  39 31 30 32 35 31 30 5a 18 0f 32 32 38 35 30 37  9102510Z..228507</span><br><span class="line">7d0246f630  30 34 31 30 32 35 31 30 5a 30 73 31 0b 30 09 06  04102510Z0s1.0..</span><br><span class="line">7d0246f640  03 55 04 06 13 02 63 6e 31 12 30 10 06 03 55 04  .U....cn1.0...U.</span><br><span class="line">7d0246f650  08 13 09 67 75 61 6e 67 64 6f 6e 67 31 12 30 10  ...guangdong1.0.</span><br><span class="line">7d0246f660  06 03 55 04 07 13 09 67 75 61 6e 67 7a 68 6f 75  ..U....guangzhou</span><br><span class="line">7d0246f670  31 10 30 0e 06 03 55 04 0a 13 07 76 69 70 73 68  1.0...U....vipsh</span><br><span class="line">7d0246f680  6f 70 31 18 30 16 06 03 55 04 0b 13 0f 77 77 77  op1.0...U....www</span><br><span class="line">7d0246f690  2e 76 69 70 73 68 6f 70 2e 63 6f 6d 31 10 30 0e  .vipshop.com1.0.</span><br><span class="line">7d0246f6a0  06 03 55 04 03 13 07 76 69 70 73 68 6f 70 30 81  ..U....vipshop0.</span><br><span class="line">7d0246f6b0  9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00  .0...*.H........</span><br><span class="line">7d0246f6c0  03 81 8d 00 30 81 89 02 81 81 00 93 34 83 f8 c0  ....0.......4...</span><br><span class="line">7d0246f6d0  1a 56 74 4a a3 a0 54 73 95 ca c4 22 ea 07 ae a0  .VtJ..Ts...&quot;....</span><br><span class="line">7d0246f6e0  3f 38 45 90 c1 fc bb eb d3 0c 71 39 5e a8 b6 bd  ?8E.......q9^...</span><br><span class="line">7d0246f6f0  1a 1b 04 84 47 49 0e 4b af 36 5a 4b 49 72 6f 35  ....GI.K.6ZKIro5</span><br><span class="line">7d0246f700  4e 57 96 35 f5 40 7e 63 86 57 49 2f 6c af 66 5c  NW.5.@~c.WI/l.f\</span><br><span class="line">7d0246f710  27 18 11 8c cc ba d9 2f 1f fc ab 62 3c c7 ca 9e  &#x27;....../...b&lt;...</span><br><span class="line">7d0246f720  a8 ca 9a d5 8c 47 ab 21 05 ba 7c 7c 6d 6f fe 46  .....G.!..||mo.F</span><br><span class="line">7d0246f730  6d 7e 94 06 bb f0 28 cb 9b b5 43 3a 74 cb 85 47  m~....(...C:t..G</span><br><span class="line">7d0246f740  d1 b6 de de f8 84 56 a1 67 9d 3d 02 03 01 00 01  ......V.g.=.....</span><br><span class="line">7d0246f750  30 0d 06 09 2a 86 48 86 f7 0d 01 01 05 05 00 03  0...*.H.........</span><br><span class="line">7d0246f760  81 81 00 17 fd cc f7 dd 2f 1a 42 80 92 89 a2 15  ......../.B.....</span><br><span class="line">7d0246f770  9b 64 aa 5a b0 57 91 35 88 18 37 74 3b ca 21 18  .d.Z.W.5..7t;.!.</span><br><span class="line">7d0246f780  0b f3 30 50 75 4b b8 a8 44 90 02 c6 07 5e b6 d7  ..0PuK..D....^..</span><br><span class="line">7d0246f790  1a 65 80 06 a6 b6 00 94 c1 69 f0 77 fb 06 3b 93  .e.......i.w..;.</span><br><span class="line">7d0246f7a0  91 64 d1 64 e6 70 4a ae a1 14 c1 fa ed b4 eb fc  .d.d.pJ.........</span><br><span class="line">7d0246f7b0  25 db ca 96 21 a5 58 d2 8b 87 1c 72 7f ff b6 0e  %...!.X....r....</span><br><span class="line">7d0246f7c0  c7 40 e8 64 01 53 e8 e9 4d a9 da 7b 09 9e 30 82  .@.d.S..M..&#123;..0.</span><br><span class="line">7d0246f7d0  c3 77 e4 6d 2d 4e 9c 4a 25 8a b2 54 99 d1 da 85  .w.m-N.J%..T....</span><br><span class="line">7d0246f7e0  5b 14 ca                                         [..</span><br><span class="line">ret_arg3: 0x263</span><br><span class="line">ret_arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea9c80  31 65 64 35 36 32 65 31 65 39 30 62 32 33 61 65  1ed562e1e90b23ae</span><br><span class="line">7cd7ea9c90  33 66 39 61 34 30 66 38 62 32 61 36 35 33 38 32  3f9a40f8b2a65382</span><br><span class="line">7cd7ea9ca0  62 39 35 61 34 37 35 32 00 00 00 00 00 00 00 00  b95a4752........</span><br><span class="line">7cd7ea9cb0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9cc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9cd0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea9c80  31 65 64 35 36 32 65 31 65 39 30 62 32 33 61 65  1ed562e1e90b23ae</span><br><span class="line">7cd7ea9c90  33 66 39 61 34 30 66 38 62 32 61 36 35 33 38 32  3f9a40f8b2a65382</span><br><span class="line">7cd7ea9ca0  62 39 35 61 34 37 35 32 00 00 00 00 00 00 00 00  b95a4752........</span><br><span class="line">7cd7ea9cb0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9cc0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9cd0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9ce0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">----hooked over!----</span><br><span class="line">----hooked getByteHash----</span><br><span class="line">arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7d02424b30  61 65 65 34 63 34 32 35 64 62 62 32 32 38 38 62  aee4c425dbb2288b</span><br><span class="line">7d02424b40  38 30 63 37 31 33 34 37 63 63 33 37 64 30 34 62  80c71347cc37d04b</span><br><span class="line">7d02424b50  61 70 69 5f 6b 65 79 3d 62 69 6c 65 74 6f 6e 26  api_key=bileton&amp;</span><br><span class="line">7d02424b60  61 70 70 5f 6e 61 6d 65 3d 73 68 6f 70 5f 61 6e  app_name=shop_an</span><br><span class="line">7d02424b70  64 72 6f 69 64                                   droid</span><br><span class="line">arg3: 0x45</span><br><span class="line">arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea99f0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a10  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a30  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret_arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7d02424b30  61 65 65 34 63 34 32 35 64 62 62 32 32 38 38 62  aee4c425dbb2288b</span><br><span class="line">7d02424b40  38 30 63 37 31 33 34 37 63 63 33 37 64 30 34 62  80c71347cc37d04b</span><br><span class="line">7d02424b50  61 70 69 5f 6b 65 79 3d 62 69 6c 65 74 6f 6e 26  api_key=bileton&amp;</span><br><span class="line">7d02424b60  61 70 70 5f 6e 61 6d 65 3d 73 68 6f 70 5f 61 6e  app_name=shop_an</span><br><span class="line">7d02424b70  64 72 6f 69 64                                   droid</span><br><span class="line">ret_arg3: 0x45</span><br><span class="line">ret_arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea99f0  62 30 64 63 61 36 66 31 35 36 66 37 39 30 32 38  b0dca6f156f79028</span><br><span class="line">7cd7ea9a00  62 33 61 36 38 63 31 36 36 32 39 34 30 34 65 34  b3a68c16629404e4</span><br><span class="line">7cd7ea9a10  35 37 39 31 32 30 62 64 00 00 00 00 00 00 00 00  579120bd........</span><br><span class="line">7cd7ea9a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a30  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea99f0  62 30 64 63 61 36 66 31 35 36 66 37 39 30 32 38  b0dca6f156f79028</span><br><span class="line">7cd7ea9a00  62 33 61 36 38 63 31 36 36 32 39 34 30 34 65 34  b3a68c16629404e4</span><br><span class="line">7cd7ea9a10  35 37 39 31 32 30 62 64 00 00 00 00 00 00 00 00  579120bd........</span><br><span class="line">7cd7ea9a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a30  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">----hooked over!----</span><br><span class="line">----hooked getByteHash----</span><br><span class="line">arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea98f0  61 65 65 34 63 34 32 35 64 62 62 32 32 38 38 62  aee4c425dbb2288b</span><br><span class="line">7cd7ea9900  38 30 63 37 31 33 34 37 63 63 33 37 64 30 34 62  80c71347cc37d04b</span><br><span class="line">7cd7ea9910  62 30 64 63 61 36 66 31 35 36 66 37 39 30 32 38  b0dca6f156f79028</span><br><span class="line">7cd7ea9920  62 33 61 36 38 63 31 36 36 32 39 34 30 34 65 34  b3a68c16629404e4</span><br><span class="line">7cd7ea9930  35 37 39 31 32 30 62 64                          579120bd</span><br><span class="line">arg3: 0x48</span><br><span class="line">arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea99f0  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a00  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a10  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a30  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret_arg2:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea98f0  61 65 65 34 63 34 32 35 64 62 62 32 32 38 38 62  aee4c425dbb2288b</span><br><span class="line">7cd7ea9900  38 30 63 37 31 33 34 37 63 63 33 37 64 30 34 62  80c71347cc37d04b</span><br><span class="line">7cd7ea9910  62 30 64 63 61 36 66 31 35 36 66 37 39 30 32 38  b0dca6f156f79028</span><br><span class="line">7cd7ea9920  62 33 61 36 38 63 31 36 36 32 39 34 30 34 65 34  b3a68c16629404e4</span><br><span class="line">7cd7ea9930  35 37 39 31 32 30 62 64                          579120bd</span><br><span class="line">ret_arg3: 0x48</span><br><span class="line">ret_arg4:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea99f0  63 39 31 34 63 39 64 64 32 62 38 36 32 61 37 34  c914c9dd2b862a74</span><br><span class="line">7cd7ea9a00  63 35 65 39 31 61 63 31 65 36 62 37 39 33 32 38  c5e91ac1e6b79328</span><br><span class="line">7cd7ea9a10  36 62 33 63 31 61 63 32 00 00 00 00 00 00 00 00  6b3c1ac2........</span><br><span class="line">7cd7ea9a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a30  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a50  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret:              0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7cd7ea99f0  63 39 31 34 63 39 64 64 32 62 38 36 32 61 37 34  c914c9dd2b862a74</span><br><span class="line">7cd7ea9a00  63 35 65 39 31 61 63 31 65 36 62 37 39 33 32 38  c5e91ac1e6b79328</span><br><span class="line">7cd7ea9a10  36 62 33 63 31 61 63 32 00 00 00 00 00 00 00 00  6b3c1ac2........</span><br><span class="line">7cd7ea9a20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a30  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a40  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a50  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">7cd7ea9a60  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">----hooked over!----</span><br><span class="line">call gsNav result: c914c9dd2b862a74c5e91ac1e6b793286b3c1ac2</span><br><span class="line">----call gsNav over----</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>发现当主动调用gsNav函数的时候，主动调用了三次getByteHash方法，而第一次调用getByteHash方法时的入参和返回值都没有找到相关的信息，在IDA里查看getByteHash交叉引用，发现</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/22.jpg"></p>
<p>发现在其他函数里也调用了getByteHash函数，溯源一下，最后找到是在<code>Utils_ima</code>方法里调用的，并不影响<code>Function_gs</code>函数调用的<code>getByteHash</code>。</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/23.jpg"></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从Functions_gs函数里可以看出来，getByteHash函数被调用了两次，这个函数是标准SHA1算法，那么要分析的话就要拿连续的两个hook结果，从hook结果来看，getByteHash传入的第三个参数是map，但是它的开头加盐了，<code>aee4c425dbb2288b80c71347cc37d04b</code>，这个盐的值是固定的</p>
<p>如下是我对Functions_gs函数变量重命名后的关键代码</p>
<p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/20.jpg"></p>
<p>SaltMap是加盐后的Map的值，经过第一次SHA1签名之后，得到ByteHash，然后在ByteHash前面加盐，再一次进行SHA1签名，得到最终的<code>api_sign</code></p>
<h2 id="验证一下"><a href="#验证一下" class="headerlink" title="验证一下"></a>验证一下</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"> </span><br><span class="line">mapdata = <span class="string">&#x27;activity=active_te_dynamic_res&amp;activity_endtime=null&amp;activity_propety=&#123;&quot;activity_name&quot;:&quot;&quot;,&quot;depend_status&quot;:-1,&quot;module&quot;:&quot;smartRoute&quot;,&quot;match&quot;:1,&quot;is_debug&quot;:&quot;0&quot;,&quot;apk_type&quot;:&quot;1&quot;,&quot;scene&quot;:&quot;api&quot;,&quot;is_main_process&quot;:1,&quot;fail_back&quot;:0,&quot;event_id&quot;:0,&quot;has_module&quot;:0,&quot;remove_so&quot;:&quot;0&quot;,&quot;action&quot;:&quot;res_scene&quot;,&quot;status&quot;:0&#125;&amp;activity_starttime=1734847371668&amp;app_name=shop_android&amp;app_version=9.39.4&amp;channel=1&amp;deeplink_cps=&amp;face_flag=0_1&amp;fdc_area_id=104101113&amp;local_time=1734847371668&amp;location=104101&amp;mid=b3aad8e2-2840-39a5-8b51-e5b1c5b16bad&amp;other_cps=&amp;page_id=page_te_loding_activity_1734847371401&amp;repeat=0&amp;service=mobile.activityinfo.logger&amp;session_id=b3aad8e2-2840-39a5-8b51-e5b1c5b16bad_shop_android_1734847371335&amp;skey=6692c461c3810ab150c9a980d0c275ec&amp;status=&amp;status_descrit=null&amp;user_class=A1&amp;user_group=20460_【23年新客首页】安卓-5.23-[快应用-独立首页]-[顶部导航-测试-18]&amp;user_label=3105,310505&amp;userid=null&amp;vipruid=null&amp;warehouse=VIP_HZ&#x27;</span></span><br><span class="line"></span><br><span class="line">Salt = <span class="string">&quot;aee4c425dbb2288b80c71347cc37d04b&quot;</span></span><br><span class="line">SaltMap = Salt+mapdata</span><br><span class="line">cipher1 = hashlib.sha1()</span><br><span class="line">cipher1.update(SaltMap.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">ByteHash = cipher1.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(ByteHash)</span><br><span class="line">SecondEnc = Salt+ByteHash</span><br><span class="line">cipher2 = hashlib.sha1()</span><br><span class="line">cipher2.update(SecondEnc.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">api_sign = cipher2.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(api_sign)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">21c4c11c50637d4316ecc1bbf7e6a4abdf6fbe61</span><br><span class="line">237f2dfb34d8846ca7f11071583fb3af5f98b9fe</span><br></pre></td></tr></table></figure>

<p>还原完成</p>
<h1 id="设备注册接口复现"><a href="#设备注册接口复现" class="headerlink" title="设备注册接口复现"></a>设备注册接口复现</h1><p>这次我们可以用自己生成的api_sign来进行设备注册</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">def <span class="title function_">sha1</span>(data):</span><br><span class="line">    cipher = hashlib.<span class="title function_">sha1</span>()</span><br><span class="line">    cipher.<span class="title function_">update</span>(data)</span><br><span class="line">    <span class="keyword">return</span> cipher.<span class="title function_">hexdigest</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">device_token = <span class="title function_">str</span>(uuid.<span class="title function_">uuid4</span>())</span><br><span class="line"></span><br><span class="line">parameters = &#123;</span><br><span class="line">    <span class="string">&quot;app_name&quot;</span>:<span class="string">&quot;achievo_ad&quot;</span>,</span><br><span class="line">    <span class="string">&quot;app_version&quot;</span>:<span class="string">&quot;9.39.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;device_token&quot;</span>:device_token,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;warehouse&quot;</span>:<span class="string">&quot;VIP_HZ&quot;</span>,</span><br><span class="line">    <span class="string">&quot;manufacturer&quot;</span>:<span class="string">&quot;Google&quot;</span>,</span><br><span class="line">    <span class="string">&quot;device&quot;</span>:<span class="string">&quot;Pixel 3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;os_version&quot;</span>:<span class="string">&quot;28&quot;</span>,</span><br><span class="line">    <span class="string">&quot;channel&quot;</span>:<span class="string">&quot;yro8nr0d:::&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vipruid&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;regPlat&quot;</span>:<span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;regid&quot;</span>:<span class="string">&quot;null&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rom&quot;</span>:<span class="string">&quot;Dalvik/2.1.0 (Linux; U; Android 9; Pixel 3 Build/PD1A.180720.030)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;skey&quot;</span>:<span class="string">&quot;6692c461c3810ab150c9a980d0c275ec&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://mp.appvipshop.com/apns/device_reg&quot;</span></span><br><span class="line"></span><br><span class="line">mapdata = <span class="string">&quot;&amp;&quot;</span>.<span class="title function_">join</span>([key+<span class="string">&quot;=&quot;</span>+value <span class="keyword">for</span> key,value <span class="keyword">in</span> parameters.<span class="title function_">items</span>()])</span><br><span class="line">salt = <span class="string">&quot;aee4c425dbb2288b80c71347cc37d04b&quot;</span></span><br><span class="line">onesha1 = <span class="title function_">sha1</span>((salt+mapdata).<span class="title function_">encode</span>(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">apisign = <span class="title function_">sha1</span>((salt+onesha1).<span class="title function_">encode</span>(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;okhttp/4.9.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;authorization&quot;</span>:<span class="string">&quot;OAuth api_sign=&quot;</span>+apisign,</span><br><span class="line">    <span class="string">&quot;accept-encoding&quot;</span>:<span class="string">&quot;gzip&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.<span class="title function_">get</span>(url,headers=headers,params=parameters)</span><br><span class="line"><span class="title function_">print</span>(response.<span class="property">status_code</span>)</span><br><span class="line"><span class="title function_">print</span>(response.<span class="property">text</span>)</span><br></pre></td></tr></table></figure>

<h1 id="搜索接口逆向"><a href="#搜索接口逆向" class="headerlink" title="搜索接口逆向"></a>搜索接口逆向</h1><h2 id="搜索接口抓包"><a href="#搜索接口抓包" class="headerlink" title="搜索接口抓包"></a>搜索接口抓包</h2><p><img src="/2024/12/23/%E5%94%AF%E5%93%81%E4%BC%9A%E8%AE%BE%E5%A4%87%E6%B3%A8%E5%86%8C%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/21.jpg"></p>
<h2 id="逆向还原"><a href="#逆向还原" class="headerlink" title="逆向还原"></a>逆向还原</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha1</span>(<span class="params">data</span>):</span><br><span class="line">    cipher = hashlib.sha1()</span><br><span class="line">    cipher.update(data)</span><br><span class="line">    <span class="keyword">return</span> cipher.hexdigest()</span><br><span class="line"></span><br><span class="line">keyword = <span class="built_in">input</span>(<span class="string">&quot;input keyword:&quot;</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://mapi.appvipshop.com/vips-mobile/rest/shopping/search/product/list/v1&quot;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;api_key&quot;</span>: <span class="string">&quot;23e7f28019e8407b98b84cd05b5aef2c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;app_name&quot;</span>: <span class="string">&quot;shop_android&quot;</span>,</span><br><span class="line">    <span class="string">&quot;app_version&quot;</span>: <span class="string">&quot;9.39.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bigSaleTagIds&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brandIds&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;brandStoreSns&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;categoryId&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;channelId&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;channel_flag&quot;</span>: <span class="string">&quot;0_1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;clickFrom&quot;</span>: <span class="string">&quot;userword&quot;</span>,</span><br><span class="line">    <span class="string">&quot;client&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">    <span class="string">&quot;client_type&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">    <span class="string">&quot;couponIds&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;darkmode&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;deeplink_cps&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;device_model&quot;</span>: <span class="string">&quot;Google Pixel 3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;did&quot;</span>: <span class="string">&quot;0.0.7dd2447b686b5292535eeee5df76af4e.e30722&quot;</span>,</span><br><span class="line">    <span class="string">&quot;elder&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;evgid&quot;</span>: <span class="string">&quot;MEPeuS28WvKWWBaORXRayvPD91hpo6rtPhqtYlf9h/sqV/qXMrLitm9X/TxB0xIU0R0HnbOuRkt494w2LedGeuzIt0jR6xdfSfROjGrf92s=&quot;</span>,</span><br><span class="line">    <span class="string">&quot;extParams&quot;</span>: <span class="string">&#x27;&#123;&quot;priceVer&quot;:&quot;2&quot;,&quot;video_playable&quot;:&quot;1&quot;,&quot;mclabel&quot;:&quot;1&quot;,&quot;cmpStyle&quot;:&quot;1&quot;,&quot;statusVer&quot;:&quot;2&quot;,&quot;ic2label&quot;:&quot;1&quot;,&quot;video&quot;:&quot;2&quot;,&quot;uiVer&quot;:&quot;2&quot;,&quot;preheatTipsVer&quot;:&quot;4&quot;,&quot;floatwin&quot;:&quot;1&quot;,&quot;superHot&quot;:&quot;1&quot;,&quot;exclusivePrice&quot;:&quot;1&quot;,&quot;router&quot;:&quot;1&quot;,&quot;coupons&quot;:&quot;4&quot;,&quot;needVideoExplain&quot;:&quot;1&quot;,&quot;rank&quot;:&quot;2&quot;,&quot;needVideoGive&quot;:&quot;1&quot;,&quot;attr&quot;:&quot;2&quot;,&quot;bigBrand&quot;:&quot;2&quot;,&quot;couponVer&quot;:&quot;v2&quot;,&quot;videoExplainUrl&quot;:&quot;1&quot;,&quot;live&quot;:&quot;1&quot;,&quot;sellpoint&quot;:&quot;1&quot;,&quot;reco&quot;:&quot;1&quot;,&quot;vreimg&quot;:&quot;1&quot;,&quot;search_tag&quot;:&quot;2&quot;,&quot;tpl&quot;:&quot;1&quot;,&quot;ads&quot;:&quot;2&quot;,&quot;stdSizeVids&quot;:&quot;&quot;,&quot;labelVer&quot;:&quot;2&quot;,&quot;preheatView&quot;:&quot;1&quot;&#125;&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;fdc_area_id&quot;</span>: <span class="string">&quot;104101113&quot;</span>,</span><br><span class="line">    <span class="string">&quot;functions&quot;</span>: <span class="string">&quot;RTRecomm,flagshipInfo,couponBarV2,lowPriceTabs,discountTabs,feedbackV2,otdAds,zoneCode,slotOp,survey,outfit,aiRealtime,floaterParams,tabGroupV2,bsAndSeason,parallelCall&quot;</span>,</span><br><span class="line">    <span class="string">&quot;harmony_app&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;harmony_os&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>: <span class="string">&quot;2028&quot;</span>,</span><br><span class="line">    <span class="string">&quot;isMultiTab&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;is_default_area&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;keyword&quot;</span>: keyword,</span><br><span class="line">    <span class="string">&quot;lastPageProperty&quot;</span>: <span class="string">&quot;&#123;\&quot;isBgToFront\&quot;:\&quot;0\&quot;,\&quot;scene_entry_id\&quot;:\&quot;-99\&quot;,\&quot;refer_page_id\&quot;:\&quot;page_channel_1734917260119\&quot;,\&quot;text\&quot;:\&quot;女童加绒裤子\&quot;,\&quot;module_name\&quot;:\&quot;com.achievo.vipshop.search\&quot;,\&quot;type\&quot;:\&quot;-99\&quot;,\&quot;is_back_page\&quot;:\&quot;0\&quot;&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;maker&quot;</span>: <span class="string">&quot;GOOGLE&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mars_cid&quot;</span>: <span class="string">&quot;b3aad8e2-2840-39a5-8b51-e5b1c5b16bad&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mobile_channel&quot;</span>: <span class="string">&quot;yro8nr0d:::&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mobile_platform&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;net&quot;</span>: <span class="string">&quot;WIFI&quot;</span>,</span><br><span class="line">    <span class="string">&quot;operator&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;os&quot;</span>: <span class="string">&quot;Android&quot;</span>,</span><br><span class="line">    <span class="string">&quot;osv&quot;</span>: <span class="string">&quot;9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;otddid&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;other_cps&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;page_id&quot;</span>: <span class="string">&quot;page_te_globle_classify_search_1734917270854&quot;</span>,</span><br><span class="line">    <span class="string">&quot;phone_brand&quot;</span>: <span class="string">&quot;google&quot;</span>,</span><br><span class="line">    <span class="string">&quot;phone_model&quot;</span>: <span class="string">&quot;pixel 3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;priceMax&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;priceMin&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;props&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;province_id&quot;</span>: <span class="string">&quot;104101&quot;</span>,</span><br><span class="line">    <span class="string">&quot;referer&quot;</span>: <span class="string">&quot;com.achievo.vipshop.search.activity.TabSearchProductListActivity&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rom&quot;</span>: <span class="string">&quot;Dalvik/2.1.0 (Linux; U; Android 9; Pixel 3 Build/PD1A.180720.030)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sd_tuijian&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;service_provider&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;session_id&quot;</span>: <span class="string">&quot;b3aad8e2-2840-39a5-8b51-e5b1c5b16bad_shop_android_1734917371208&quot;</span>,</span><br><span class="line">    <span class="string">&quot;skey&quot;</span>: <span class="string">&quot;6692c461c3810ab150c9a980d0c275ec&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sort&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;source&quot;</span>: <span class="string">&quot;app&quot;</span>,</span><br><span class="line">    <span class="string">&quot;source_app&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">    <span class="string">&quot;standby_id&quot;</span>: <span class="string">&quot;yro8nr0d:::&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sys_version&quot;</span>: <span class="string">&quot;28&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tabFields&quot;</span>: <span class="string">&quot;gender,tabs,priceTabs,discountTabs,tabGroupV2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;timestamp&quot;</span>: <span class="string">&quot;1734917303&quot;</span>,</span><br><span class="line">    <span class="string">&quot;union_mark&quot;</span>: <span class="string">&quot;blank&amp;_&amp;blank&amp;_&amp;yro8nr0d:::&amp;_&amp;blank&amp;_&amp;blank&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vipService&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;warehouse&quot;</span>: <span class="string">&quot;VIP_HZ&quot;</span>,</span><br><span class="line">    <span class="string">&quot;width&quot;</span>: <span class="string">&quot;1080&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mapdata = <span class="string">&quot;&amp;&quot;</span>.join([key+<span class="string">&quot;=&quot;</span>+value <span class="keyword">for</span> key,value <span class="keyword">in</span> data.items()])</span><br><span class="line">salt = <span class="string">&quot;aee4c425dbb2288b80c71347cc37d04b&quot;</span></span><br><span class="line">onesha1 = sha1((salt+mapdata).encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">apisign = sha1((salt+onesha1).encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">&quot;authorization&quot;</span>: <span class="string">&quot;OAuth api_sign=&quot;</span>+apisign,</span><br><span class="line">  <span class="string">&quot;x-vip-host&quot;</span>: <span class="string">&quot;mapi.appvipshop.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">  <span class="string">&quot;content-length&quot;</span>: <span class="string">&quot;2886&quot;</span>,</span><br><span class="line">  <span class="string">&quot;accept-encoding&quot;</span>: <span class="string">&quot;gzip&quot;</span>,</span><br><span class="line">  <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;okhttp/4.9.1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url=url,data=data,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>唯品会</tag>
      </tags>
  </entry>
  <entry>
    <title>关于ptrace</title>
    <url>/2024/12/22/%E5%85%B3%E4%BA%8Eptrace/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>&emsp;&emsp;<code>ptrace</code> 是一个系统调用，允许一个进程（父进程即调试器）观察和控制另一个进程（子进程即被调试的目标进程）。同时，它还能检查和改变目标进程的内存、寄存器和执行状态。这种机制广泛用于调试器和逆向分析工具。</p>
<h1 id="ptrace-函数原型"><a href="#ptrace-函数原型" class="headerlink" title="ptrace 函数原型"></a>ptrace 函数原型</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="type">long</span> <span class="title function_">ptrace</span><span class="params">(<span class="keyword">enum</span> __ptrace_request request, <span class="type">pid_t</span> pid, <span class="type">void</span> *addr, <span class="type">void</span> *data)</span>;</span><br></pre></td></tr></table></figure>

<p><strong><code>request</code></strong><br>指定执行的操作，决定了 <code>ptrace</code> 的具体功能，比如追踪进程、读取内存、单步执行等。常见值如下：</p>
<ul>
<li><code>PTRACE_TRACEME</code>：表示当前进程希望被其父进程调试。</li>
<li><code>PTRACE_ATTACH</code>：将当前进程附加到目标进程上。</li>
<li><code>PTRACE_CONT</code>：继续运行目标进程。</li>
<li><code>PTRACE_PEEKDATA</code>：读取目标进程的内存。</li>
<li><code>PTRACE_POKEDATA</code>：写入目标进程的内存。</li>
<li><code>PTRACE_SINGLESTEP</code>：让目标进程执行单条指令。</li>
<li><code>PTRACE_GETREGS</code> 和 <code>PTRACE_SETREGS</code>：获取或设置目标进程的寄存器。</li>
<li>其他值：具体见系统调用文档。</li>
</ul>
<p><strong><code>pid</code></strong><br>指定目标进程的 PID（进程 ID）。</p>
<p><strong><code>addr</code></strong><br>表示地址参数：</p>
<ul>
<li>对于内存相关操作（如 <code>PTRACE_PEEKDATA</code> 和 <code>PTRACE_POKEDATA</code>），这是目标进程的内存地址。</li>
<li>对于寄存器操作，可以忽略此参数。</li>
</ul>
<p><strong><code>data</code></strong><br>根据操作的不同，此参数可以用作输入或输出：</p>
<ul>
<li>用于传递写入目标进程的值。</li>
<li>保存读取到的数据（如寄存器内容）。</li>
</ul>
<p>&emsp;&emsp;当一个调试器（如 <code>gdb</code> 或自定义调试器）使用 <code>ptrace(PTRACE_ATTACH)</code> 附加到目标进程时，内核会更新目标进程的 <code>TracerPid</code> 字段，记录调试器的 PID。</p>
<h1 id="TracerPid"><a href="#TracerPid" class="headerlink" title="TracerPid"></a>TracerPid</h1><p>&emsp;&emsp;<code>/proc/&lt;pid&gt;/status</code> 文件中的 <code>TracerPid</code> 字段与 <code>ptrace</code> 密切相关，<code>TracerPid</code> 表示该进程的调试状态。</p>
<ul>
<li><p><code>TracerPid: 0</code> 表示当前进程没有被调试。</p>
</li>
<li><p><code>TracerPid: &lt;pid&gt;</code> 表示该进程正在被调试，且调试器的进程 ID 是 <code>&lt;pid&gt;</code>。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Android系统</category>
      </categories>
      <tags>
        <tag>ptrace</tag>
      </tags>
  </entry>
  <entry>
    <title>抓包</title>
    <url>/2024/12/02/%E6%8A%93%E5%8C%85/</url>
    <content><![CDATA[<h1 id="HTTP抓包"><a href="#HTTP抓包" class="headerlink" title="HTTP抓包"></a>HTTP抓包</h1><p>对于HTTP的包是可以通过抓包工具+配置手机代理直接抓取的。</p>
<h1 id="HTTPS抓包"><a href="#HTTPS抓包" class="headerlink" title="HTTPS抓包"></a>HTTPS抓包</h1><p>HTTPS是有系统证书校验的，需要安装证书之后通过抓包工具+配置手机代理来进行抓包。<br>在安卓上，Android8.0之后，浏览器默认信任用户目录下的证书，而APP默认不再信任用户目录下的证书了，所以需要手动把用户目录下的证书移动到系统目录下（通过面具移动或者手动移动）。</p>
<h1 id="检测代理"><a href="#检测代理" class="headerlink" title="检测代理"></a>检测代理</h1><ul>
<li>APP在发起网络请求前会检测系统是否设置了代理，如果发现有代理，就不发起请求。  </li>
<li>APP 用了No Proxy参数发起网络请求，即使系统设置了代理，也会被直接绕过，APP依然能正常获取网络数据，但抓包工具无法抓到该APP的数据包。</li>
</ul>
<h1 id="单向证书校验"><a href="#单向证书校验" class="headerlink" title="单向证书校验"></a>单向证书校验</h1><p>单向证书校验是指在客户端与服务器之间的通信中，只有服务器需要提供证书，客户端通过验证服务器的证书来确认服务器的身份。<br><strong>原理</strong>  </p>
<ul>
<li>客户端发起连接请求（如通过HTTPS）。  </li>
<li>服务器将其数字证书发送给客户端，数字证书中包含了服务器的公钥和其他信息（如证书的有效期、签发者等）。  </li>
<li>客户端收到证书后，通过信任的证书颁发机构（CA）的公钥来验证证书的有效性。如果证书有效，客户端就信任这个服务器，继续进行后续的加密通信。  </li>
<li>客户端不需要提供任何证书或身份验证。</li>
</ul>
<h1 id="双向证书校验"><a href="#双向证书校验" class="headerlink" title="双向证书校验"></a>双向证书校验</h1><p>双向证书校验则要求客户端和服务器都提供证书，并且相互验证对方的身份。这样不仅服务器要验证客户端的身份，客户端也要验证服务器的身份。<br><strong>原理</strong>  </p>
<ul>
<li>客户端发起连接请求。  </li>
<li>服务器发送其数字证书给客户端，客户端用CA公钥验证服务器证书的合法性。  </li>
<li>服务器要求客户端也提供数字证书。客户端向服务器提供自己的证书，服务器同样使用CA公钥验证客户端证书的合法性。  </li>
<li>双方都确认对方的身份后，开始建立加密通道进行安全通信。</li>
</ul>
<h1 id="SSL-pinning"><a href="#SSL-pinning" class="headerlink" title="SSL pinning"></a>SSL pinning</h1><p>SSL Pinning（SSL证书绑定）是为了增强应用程序对中间人攻击（MITM攻击）的防御的一种技术。它将特定的证书或公钥绑定到客户端应用程序中，使得客户端在建立SSL连接时，仅信任与该证书或公钥匹配的服务器证书，从而确保通信的安全性。</p>
<h2 id="Certificate-Pinning"><a href="#Certificate-Pinning" class="headerlink" title="Certificate Pinning"></a>Certificate Pinning</h2><p>证书绑定是指将服务器的证书（通常是公钥）内置到客户端应用中。客户端在建立SSL连接时，会验证服务器的证书与客户端预定义的证书是否匹配。如果不匹配，连接会被拒绝，防止攻击者使用伪造的证书进行中间人攻击。  </p>
<h2 id="Public-Key-Pinning"><a href="#Public-Key-Pinning" class="headerlink" title="Public Key Pinning"></a>Public Key Pinning</h2><p>公钥绑定是SSL Pinning的一种形式，客户端不直接绑定证书，而是绑定服务器证书中的公钥。这种方式可以避免证书过期或更新时造成的连接问题，因为即便证书发生变化，只要公钥保持不变，客户端仍然可以信任新的证书。  </p>
<h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><h3 id="使用frida进行hook"><a href="#使用frida进行hook" class="headerlink" title="使用frida进行hook"></a>使用frida进行hook</h3><p>frida官方提供的客户端校验绕过脚本如下<br><a href="https://codeshare.frida.re/@akabe1/frida-multiple-unpinning/">https:&#x2F;&#x2F;codeshare.frida.re&#x2F;@akabe1&#x2F;frida-multiple-unpinning&#x2F;</a></p>
<h3 id="JustTrustMe"><a href="#JustTrustMe" class="headerlink" title="JustTrustMe"></a>JustTrustMe</h3><p>利用面具刷入LSPosed框架，然后安装JustTrustMe插件。<br>在LSPosed的模块里打开JustTrustMe，在要选择绕过的App后面方框勾选上即可。</p>
]]></content>
      <categories>
        <category>抓包</category>
      </categories>
      <tags>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2024/02/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>线性表（Linear List）是由一组数据元素按一定的顺序排列组成的集合。<br><strong>线性表的基本操作</strong>  </p>
<ul>
<li>初始化：初始化线性表为空。</li>
<li>插入：在指定位置插入元素。</li>
<li>删除：删除指定位置的元素。</li>
<li>查找：查找某个元素的位置。</li>
<li>访问：通过索引访问指定位置的元素。</li>
<li>遍历：从头到尾依次访问线性表中的每个元素。</li>
<li>长度：获取线性表中的元素个数。</li>
</ul>
<h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>顺序表是一种线性表的实现方式，其核心思想是将线性表中的元素存储在一块连续的内存空间中。<br>顺序表通常是使用数组来实现的，元素可以通过索引直接访问。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 100  <span class="comment">// 假设顺序表最大容量为100</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义顺序表结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data[MAX_SIZE];  <span class="comment">// 存储数据的数组</span></span><br><span class="line">    <span class="type">int</span> length;          <span class="comment">// 顺序表当前长度</span></span><br><span class="line">&#125; SeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化顺序表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initSeqList</span><span class="params">(SeqList* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">list</span>-&gt;length = <span class="number">0</span>;  <span class="comment">// 初始化为空表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断顺序表是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isEmpty</span><span class="params">(SeqList* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>-&gt;length == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断顺序表是否已满</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isFull</span><span class="params">(SeqList* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>-&gt;length == MAX_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入元素到顺序表</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(SeqList* <span class="built_in">list</span>, <span class="type">int</span> index, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="built_in">list</span>-&gt;length || isFull(<span class="built_in">list</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 插入位置不合法或顺序表已满</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将index及其后面的元素右移一位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">list</span>-&gt;length; i &gt; index; --i) &#123;</span><br><span class="line">        <span class="built_in">list</span>-&gt;data[i] = <span class="built_in">list</span>-&gt;data[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">list</span>-&gt;data[index] = value;</span><br><span class="line">    <span class="built_in">list</span>-&gt;length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除顺序表中指定位置的元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(SeqList* <span class="built_in">list</span>, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">list</span>-&gt;length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 删除位置不合法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将index后面的元素左移一位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = index; i &lt; <span class="built_in">list</span>-&gt;length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">list</span>-&gt;data[i] = <span class="built_in">list</span>-&gt;data[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">list</span>-&gt;length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找元素在顺序表中的位置</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(SeqList* <span class="built_in">list</span>, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>-&gt;length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">list</span>-&gt;data[i] == value) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;  <span class="comment">// 找到元素，返回其位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 未找到元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问顺序表中的指定元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">get</span><span class="params">(SeqList* <span class="built_in">list</span>, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">list</span>-&gt;length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 索引越界</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>-&gt;data[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印顺序表中的所有元素</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printSeqList</span><span class="params">(SeqList* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>-&gt;length; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">list</span>-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取顺序表的长度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getLength</span><span class="params">(SeqList* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>-&gt;length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    SeqList <span class="built_in">list</span>;</span><br><span class="line">    initSeqList(&amp;<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入元素</span></span><br><span class="line">    insert(&amp;<span class="built_in">list</span>, <span class="number">0</span>, <span class="number">10</span>);  <span class="comment">// 插入10到位置0</span></span><br><span class="line">    insert(&amp;<span class="built_in">list</span>, <span class="number">1</span>, <span class="number">20</span>);  <span class="comment">// 插入20到位置1</span></span><br><span class="line">    insert(&amp;<span class="built_in">list</span>, <span class="number">2</span>, <span class="number">30</span>);  <span class="comment">// 插入30到位置2</span></span><br><span class="line">    insert(&amp;<span class="built_in">list</span>, <span class="number">1</span>, <span class="number">15</span>);  <span class="comment">// 插入15到位置1</span></span><br><span class="line">    printSeqList(&amp;<span class="built_in">list</span>);    <span class="comment">// 输出：10 15 20 30</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找元素</span></span><br><span class="line">    <span class="type">int</span> index = find(&amp;<span class="built_in">list</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">if</span> (index != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;元素20在顺序表中的位置：%d\n&quot;</span>, index);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未找到元素20\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问元素</span></span><br><span class="line">    <span class="type">int</span> value = get(&amp;<span class="built_in">list</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;顺序表中索引2的元素是：%d\n&quot;</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    delete(&amp;<span class="built_in">list</span>, <span class="number">1</span>);      <span class="comment">// 删除位置1的元素</span></span><br><span class="line">    printSeqList(&amp;<span class="built_in">list</span>);    <span class="comment">// 输出：10 20 30</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>每个节点包含两个部分：</p>
<ul>
<li>数据域 (Data)：存储节点的数据。</li>
<li>指针域 (Next)：指向下一个节点的地址。</li>
</ul>
<p>最后一个节点的 Next 指针通常为 NULL，表示链表的终点。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义节点结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;              <span class="comment">// 数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span>     <span class="comment">// 指针域，指向下一个节点</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新节点</span></span><br><span class="line">Node* <span class="title function_">createNode</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node)); <span class="comment">// 动态分配内存</span></span><br><span class="line">    <span class="keyword">if</span> (!newNode) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;内存分配失败！\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;data = data;  <span class="comment">// 设置节点数据</span></span><br><span class="line">    newNode-&gt;next = <span class="literal">NULL</span>;  <span class="comment">// 初始化指针为空</span></span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表尾部插入节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">appendNode</span><span class="params">(Node** head, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* newNode = createNode(data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (*head == <span class="literal">NULL</span>) &#123; <span class="comment">// 如果链表为空</span></span><br><span class="line">        *head = newNode;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node* temp = *head;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next != <span class="literal">NULL</span>) &#123; <span class="comment">// 遍历到链表的末尾</span></span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    temp-&gt;next = newNode; <span class="comment">// 插入节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表头部插入节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertAtHead</span><span class="params">(Node** head, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* newNode = createNode(data);</span><br><span class="line">    newNode-&gt;next = *head; <span class="comment">// 将新节点的 next 指向原头节点</span></span><br><span class="line">    *head = newNode;       <span class="comment">// 更新头节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除链表中值为 key 的节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteNode</span><span class="params">(Node** head, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    Node* temp = *head;</span><br><span class="line">    Node* prev = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果要删除的是头节点</span></span><br><span class="line">    <span class="keyword">if</span> (temp != <span class="literal">NULL</span> &amp;&amp; temp-&gt;data == key) &#123;</span><br><span class="line">        *head = temp-&gt;next; <span class="comment">// 更新头节点</span></span><br><span class="line">        <span class="built_in">free</span>(temp);         <span class="comment">// 释放原头节点</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 搜索要删除的节点，并记录前驱节点</span></span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span> &amp;&amp; temp-&gt;data != key) &#123;</span><br><span class="line">        prev = temp;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果链表中没有找到该值</span></span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未找到值为 %d 的节点。\n&quot;</span>, key);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    prev-&gt;next = temp-&gt;next; <span class="comment">// 删除节点</span></span><br><span class="line">    <span class="built_in">free</span>(temp);              <span class="comment">// 释放内存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历并打印链表中的所有节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">traverseList</span><span class="params">(Node* head)</span> &#123;</span><br><span class="line">    Node* temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, temp-&gt;data);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索链表中是否包含某个值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNode</span><span class="params">(Node* head, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    Node* temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp-&gt;data == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 找到，返回 1</span></span><br><span class="line">        &#125;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 未找到，返回 0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放链表占用的内存</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeList</span><span class="params">(Node** head)</span> &#123;</span><br><span class="line">    Node* temp = *head;</span><br><span class="line">    Node* next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        next = temp-&gt;next; <span class="comment">// 保存下一个节点</span></span><br><span class="line">        <span class="built_in">free</span>(temp);        <span class="comment">// 释放当前节点</span></span><br><span class="line">        temp = next;       <span class="comment">// 移动到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *head = <span class="literal">NULL</span>; <span class="comment">// 置空头指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Node* head = <span class="literal">NULL</span>; <span class="comment">// 初始化空链表</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入节点</span></span><br><span class="line">    appendNode(&amp;head, <span class="number">10</span>);</span><br><span class="line">    appendNode(&amp;head, <span class="number">20</span>);</span><br><span class="line">    appendNode(&amp;head, <span class="number">30</span>);</span><br><span class="line">    insertAtHead(&amp;head, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历链表</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;链表内容：\n&quot;</span>);</span><br><span class="line">    traverseList(head);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 搜索节点</span></span><br><span class="line">    <span class="type">int</span> key = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">if</span> (searchNode(head, key)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;链表中找到值为 %d 的节点。\n&quot;</span>, key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;链表中未找到值为 %d 的节点。\n&quot;</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除节点</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;删除值为 20 的节点：\n&quot;</span>);</span><br><span class="line">    deleteNode(&amp;head, <span class="number">20</span>);</span><br><span class="line">    traverseList(head);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放链表</span></span><br><span class="line">    freeList(&amp;head);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">链表内容：</span><br><span class="line"><span class="number">5</span> -&gt; <span class="number">10</span> -&gt; <span class="number">20</span> -&gt; <span class="number">30</span> -&gt; <span class="literal">NULL</span></span><br><span class="line">链表中找到值为 <span class="number">20</span> 的节点。</span><br><span class="line">删除值为 <span class="number">20</span> 的节点：</span><br><span class="line"><span class="number">5</span> -&gt; <span class="number">10</span> -&gt; <span class="number">30</span> -&gt; <span class="literal">NULL</span></span><br></pre></td></tr></table></figure>

<h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p>双向链表的每个节点包含两个指针：</p>
<ul>
<li><strong>一个指向前驱节点（prev）</strong>。</li>
<li><strong>一个指向后继节点（next）</strong>。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;               <span class="comment">// 数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">prev</span>;</span>      <span class="comment">// 指向前驱节点的指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span>      <span class="comment">// 指向后继节点的指针</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新节点</span></span><br><span class="line">Node* <span class="title function_">createNode</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node)); <span class="comment">// 动态分配内存</span></span><br><span class="line">    <span class="keyword">if</span> (!newNode) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;内存分配失败！\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;data = data;  <span class="comment">// 设置数据</span></span><br><span class="line">    newNode-&gt;prev = <span class="literal">NULL</span>;  <span class="comment">// 初始化前驱指针为空</span></span><br><span class="line">    newNode-&gt;next = <span class="literal">NULL</span>;  <span class="comment">// 初始化后继指针为空</span></span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在双向链表尾部插入节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">appendNode</span><span class="params">(Node** head, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* newNode = createNode(data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (*head == <span class="literal">NULL</span>) &#123; <span class="comment">// 如果链表为空</span></span><br><span class="line">        *head = newNode;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node* temp = *head;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next != <span class="literal">NULL</span>) &#123; <span class="comment">// 遍历到链表末尾</span></span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    temp-&gt;next = newNode; <span class="comment">// 将新节点连接到链表末尾</span></span><br><span class="line">    newNode-&gt;prev = temp; <span class="comment">// 设置新节点的前驱为当前节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表头部插入节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertAtHead</span><span class="params">(Node** head, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* newNode = createNode(data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (*head == <span class="literal">NULL</span>) &#123; <span class="comment">// 如果链表为空</span></span><br><span class="line">        *head = newNode;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    newNode-&gt;next = *head; <span class="comment">// 新节点指向原头节点</span></span><br><span class="line">    (*head)-&gt;prev = newNode; <span class="comment">// 原头节点的前驱指向新节点</span></span><br><span class="line">    *head = newNode; <span class="comment">// 更新头节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除链表中值为 key 的节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteNode</span><span class="params">(Node** head, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (*head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;链表为空，无法删除节点。\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node* temp = *head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找要删除的节点</span></span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span> &amp;&amp; temp-&gt;data != key) &#123;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果未找到节点</span></span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未找到值为 %d 的节点。\n&quot;</span>, key);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是头节点</span></span><br><span class="line">    <span class="keyword">if</span> (temp == *head) &#123;</span><br><span class="line">        *head = temp-&gt;next; <span class="comment">// 更新头节点</span></span><br><span class="line">        <span class="keyword">if</span> (*head != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            (*head)-&gt;prev = <span class="literal">NULL</span>; <span class="comment">// 更新新头节点的前驱</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果是中间或尾节点</span></span><br><span class="line">        <span class="keyword">if</span> (temp-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            temp-&gt;next-&gt;prev = temp-&gt;prev; <span class="comment">// 更新后继节点的前驱</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp-&gt;prev != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            temp-&gt;prev-&gt;next = temp-&gt;next; <span class="comment">// 更新前驱节点的后继</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(temp); <span class="comment">// 释放内存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从头到尾遍历链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">traverseFromHead</span><span class="params">(Node* head)</span> &#123;</span><br><span class="line">    Node* temp = head;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, temp-&gt;data);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放链表占用的内存</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeList</span><span class="params">(Node** head)</span> &#123;</span><br><span class="line">    Node* temp = *head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        Node* next = temp-&gt;next; <span class="comment">// 保存下一个节点</span></span><br><span class="line">        <span class="built_in">free</span>(temp);             <span class="comment">// 释放当前节点</span></span><br><span class="line">        temp = next;            <span class="comment">// 移动到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *head = <span class="literal">NULL</span>; <span class="comment">// 置空头指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Node* head = <span class="literal">NULL</span>; <span class="comment">// 初始化空链表</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入节点</span></span><br><span class="line">    appendNode(&amp;head, <span class="number">10</span>);</span><br><span class="line">    appendNode(&amp;head, <span class="number">20</span>);</span><br><span class="line">    appendNode(&amp;head, <span class="number">30</span>);</span><br><span class="line">    insertAtHead(&amp;head, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从头到尾遍历链表</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从头到尾遍历链表：\n&quot;</span>);</span><br><span class="line">    traverseFromHead(head);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除节点</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;删除值为 20 的节点：\n&quot;</span>);</span><br><span class="line">    deleteNode(&amp;head, <span class="number">20</span>);</span><br><span class="line">    traverseFromHead(head);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放链表</span></span><br><span class="line">    freeList(&amp;head);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">从头到尾遍历链表：</span><br><span class="line"><span class="number">5</span> -&gt; <span class="number">10</span> -&gt; <span class="number">20</span> -&gt; <span class="number">30</span> -&gt; <span class="literal">NULL</span></span><br><span class="line">删除值为 <span class="number">20</span> 的节点：</span><br><span class="line"><span class="number">5</span> -&gt; <span class="number">10</span> -&gt; <span class="number">30</span> -&gt; <span class="literal">NULL</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓开发</title>
    <url>/2025/01/06/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>安卓开发</category>
      </categories>
      <tags>
        <tag>安卓开发</tag>
      </tags>
  </entry>
  <entry>
    <title>爱库存app参数sign还原</title>
    <url>/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.aikucun.akapp</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/1.jpg"></p>
<h1 id="关于frida反调试"><a href="#关于frida反调试" class="headerlink" title="关于frida反调试"></a>关于frida反调试</h1><p>这个app的反调试我是通过杀线程绕过的，具体过程不再详写，其他文章里有相同的绕过思路。</p>
<h1 id="抓包分析数据"><a href="#抓包分析数据" class="headerlink" title="抓包分析数据"></a>抓包分析数据</h1><p>寻找<code>sign</code>参数</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/2.jpg"></p>
<h1 id="jadx反编译apk"><a href="#jadx反编译apk" class="headerlink" title="jadx反编译apk"></a>jadx反编译apk</h1><p>搜索<code>&quot;sign&quot;</code>，经过一番搜索，并没有找到相关的代码实现位置，换一种思路搜素<code>&quot;svs&quot;</code>，定位到了参数的位置。</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/3.jpg"></p>
<p>双击查看</p>
<h2 id="onAttachQueryParameters"><a href="#onAttachQueryParameters" class="headerlink" title="onAttachQueryParameters"></a>onAttachQueryParameters</h2><p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/4.jpg"></p>
<p>这里我们可以双击<code>b.u</code>，查看其内容即<code>svs</code>的值，发现它是一个定值<code>v3</code></p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/5.jpg"></p>
<p>接着向下浏览找到了<code>&quot;&amp;sign=&quot;</code>，结合上下文发现就是我们要找的<code>sign</code></p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/6.jpg"></p>
<p>很清晰的看出来了<code>sign</code>的值为<code>signV3</code>，是经过<code>signV3</code>函数签名得到的结果。</p>
<h2 id="signV3"><a href="#signV3" class="headerlink" title="signV3"></a>signV3</h2><p>查看signV3的内容，它是一个native函数</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/7.jpg"></p>
<h3 id="hook-signV3"><a href="#hook-signV3" class="headerlink" title="hook signV3"></a>hook signV3</h3><p>我们可以hook signV3函数查看其参数和返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_signV3</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">MXSecurity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.mengxiang.arch.security.MXSecurity&quot;</span>);</span><br><span class="line">        <span class="title class_">MXSecurity</span>[<span class="string">&quot;signV3&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">url, nonceStr, timestamp, body</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`MXSecurity.signV3 is called: url=<span class="subst">$&#123;url&#125;</span>, nonceStr=<span class="subst">$&#123;nonceStr&#125;</span>, timestamp=<span class="subst">$&#123;timestamp&#125;</span>, body=<span class="subst">$&#123;body&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;signV3&quot;</span>](url, nonceStr, timestamp, body);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`MXSecurity.signV3 result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_signV3</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MXSecurity.signV3 is called: url=https://zuul.aikucun.com/akucun-base-data-new/base/address/selectAddrVersion?appid=38741001&amp;did=d545ae984083237bae9a6358ca29910f&amp;noncestr=3f60cc&amp;svs=v3&amp;timestamp=1736605877, nonceStr=3f60cc, timestamp=1736605877, body=</span><br><span class="line">MXSecurity.signV3 is called: url=https://m.xiangdian.com/api/mshop/mshop-aggr-prod/outer/common/bwl/isHitByBatch?appid=38741001&amp;did=d545ae984083237bae9a6358ca29910f&amp;noncestr=bf6c60&amp;svs=v3&amp;timestamp=1736605877, nonceStr=bf6c60, timestamp=1736605877, body=398a40be5a2a6a5a742f35b1b606277a</span><br><span class="line">MXSecurity.signV3 result=508858db8f332eb10fcf604c617229e5ef180f8698e10bd8626d3b9ec67416a4</span><br><span class="line">MXSecurity.signV3 result=a89e326bb0d2fcb6029e3991366ba812ee1deafd6bd0ba81f00850b794fd4a49</span><br><span class="line">MXSecurity.signV3 is called: url=https://m.xiangdian.com/api/mshop/mshop-aggr-prod/outer/v1/material/create/createAuth?appid=38741001&amp;did=d545ae984083237bae9a6358ca29910f&amp;noncestr=2cd903&amp;svs=v3&amp;timestamp=1736605877, nonceStr=2cd903, timestamp=1736605877, body=37a6259cc0c1dae299a7866489dff0bd</span><br><span class="line">MXSecurity.signV3 result=7df7962bdd9a2e5182cbacb123e0f95aba154da8f4499c9dab69b45e90003f17</span><br><span class="line">MXSecurity.signV3 is called: url=https://zuul.aikucun.com/appconfigmgt/api/v1/download/config?appid=38741001&amp;did=d545ae984083237bae9a6358ca29910f&amp;noncestr=63ba42&amp;svs=v3&amp;timestamp=1736605879, nonceStr=63ba42, timestamp=1736605879, body=ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line">MXSecurity.signV3 result=70b90270cefb862185029b36663c9643201f13f790a9b20fd7a31082e30d0fbe</span><br></pre></td></tr></table></figure>

<h2 id="url"><a href="#url" class="headerlink" title="url"></a>url</h2><p>url是signV3的第一个参数，</p>
<p>分析url里的参数，url的第一个参数是<code>appid</code></p>
<p>如下，<code>appid</code>是在so里面获取的，等分析so的时候再去分析它</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/26.jpg"></p>
<p>url的第二个参数是did</p>
<p>如下，调用getDid方法</p>
<h3 id="getDId"><a href="#getDId" class="headerlink" title="getDId"></a>getDId</h3><p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/27.jpg"></p>
<p>在getDid方法里调用了md5String方法，其参数是<code>&quot;micker.cn&quot;</code>拼接<code>getUdid()</code>的返回值，对参数进行md5加密，得到did</p>
<h3 id="getUdid"><a href="#getUdid" class="headerlink" title="getUdid"></a>getUdid</h3><p>获取udid的值</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/28.jpg"></p>
<p>如果udid为空，会重新随机一个uuid，设置为udid</p>
<h2 id="nonceStr"><a href="#nonceStr" class="headerlink" title="nonceStr"></a>nonceStr</h2><p>nonceStr是signV3的第二个参数</p>
<p><strong>substring</strong></p>
<p>传入signV3方法的第二个参数是<code>substring</code>，查找这个参数是怎么生成的</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/8.jpg"></p>
<p>可以看出来，这个参数是<code>replace$default</code>的子字符串，也就是其前六个字符。</p>
<p><strong>replace$default</strong></p>
<p>如下</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/9.jpg"></p>
<p>StringsJVM调用的<code>replace$default</code>方法，里面传入了一个参数uuid，它是随机生成的  </p>
<p>看一下这个方法是怎么实现的，如下</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/10.jpg"></p>
<p>又调用了replace方法，查看其实现</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/11.jpg"></p>
<p>好长一串啊，这里我选择直接hook <code>replace</code>方法分析其参数和返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_replace</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">StringsJVM</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;kotlin.text.StringsKt__StringsJVMKt&quot;</span>);</span><br><span class="line">        <span class="title class_">StringsJVM</span>[<span class="string">&quot;replace&quot;</span>].<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;boolean&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">str, oldValue, newValue, z</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`StringsJVM.replace is called: str=<span class="subst">$&#123;str&#125;</span>, oldValue=<span class="subst">$&#123;oldValue&#125;</span>, newValue=<span class="subst">$&#123;newValue&#125;</span>, z=<span class="subst">$&#123;z&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;replace&quot;</span>](str, oldValue, newValue, z);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`StringsJVM.replace result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_replace</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">StringsJVM.replace is called: str=14d557b1-496b-4daa-ba2f-d7cffe054397, oldValue=-, newValue=, z=false</span><br><span class="line">StringsJVM.replace result=14d557b1496b4daaba2fd7cffe054397</span><br></pre></td></tr></table></figure>

<p>它是把<code>uuid</code>中的<code>-</code>符号给去除了</p>
<p>到这里就知道nonceStr的值就是uuid的前六个字符</p>
<h2 id="timestamp"><a href="#timestamp" class="headerlink" title="timestamp"></a>timestamp</h2><p><code>signV3</code>的第三个参数是timestamp没什么好分析的，是一个时间戳。</p>
<h2 id="body"><a href="#body" class="headerlink" title="body"></a>body</h2><p>接下来分析<code>signV3</code>的第四个参数，<code>body</code></p>
<p>传入<code>signV3</code>的参数是<code>bodyMD5</code>，看名字就与<code>bodyMD5</code>有关系</p>
<p>看这个参数是怎么生成的</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/12.jpg"></p>
<p>调用了bodyMD5()方法，里面传入了一个request参数</p>
<h3 id="bodyMD5"><a href="#bodyMD5" class="headerlink" title="bodyMD5"></a>bodyMD5</h3><p>查看这个方法的具体实现</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/13.jpg"></p>
<p>把请求体进行了一个MD5运算</p>
<h3 id="hook-bodyMD5"><a href="#hook-bodyMD5" class="headerlink" title="hook bodyMD5"></a>hook bodyMD5</h3><p>这里可以把bodyMD5方法和md5标准加密算法同时hook，更清晰</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_md5</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">MD5Utils</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.mengxiang.arch.utils.MD5Utils&quot;</span>);</span><br><span class="line">        <span class="title class_">MD5Utils</span>[<span class="string">&quot;md5&quot;</span>].<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`MD5Utils.md5 is called: value=<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;md5&quot;</span>](value);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`MD5Utils.md5 result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_bodymd5</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">MXV1Sign</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.mengxiang.arch.net.sign.MXV1Sign&quot;</span>);</span><br><span class="line">        <span class="title class_">MXV1Sign</span>[<span class="string">&quot;bodyMD5&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">request</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`MXV1Sign.bodyMD5 is called: request=<span class="subst">$&#123;request&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;bodyMD5&quot;</span>](request);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`MXV1Sign.bodyMD5 result=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_bodymd5</span>()</span><br><span class="line"><span class="title function_">hook_md5</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MXV1Sign.bodyMD5 is called: request=Request&#123;method=GET, url=https://zuul.aikucun.com/akucun-base-data-new/base/address/selectAddrVersion, tags=&#123;class retrofit2.Invocation=com.aikucun.akapp.business.address.service.AddressService.selectAddressVersion() []&#125;&#125;</span><br><span class="line">MXV1Sign.bodyMD5 result=</span><br><span class="line"></span><br><span class="line">MXV1Sign.bodyMD5 is called: request=Request&#123;method=POST, url=https://m.xiangdian.com/api/mshop/mshop-aggr-prod/outer/common/bwl/isHitByBatch, tags=&#123;class retrofit2.Invocation=com.aikucun.akapp.common.gray.GrayService$GrayServiceApi.grayControl() [&#123;bwlCodes=[B-MATERIAL-CREATE-V2, B-MATERIAL-CREATE-V3, B-MATERIAL-INCOME]&#125;]&#125;&#125;</span><br><span class="line"></span><br><span class="line">MD5Utils.md5 is called: value=&#123;&quot;bwlCodes&quot;:[&quot;B-MATERIAL-CREATE-V2&quot;,&quot;B-MATERIAL-CREATE-V3&quot;,&quot;B-MATERIAL-INCOME&quot;]&#125;</span><br><span class="line">MD5Utils.md5 result=398a40be5a2a6a5a742f35b1b606277a</span><br><span class="line">MXV1Sign.bodyMD5 result=398a40be5a2a6a5a742f35b1b606277a</span><br><span class="line"></span><br><span class="line">MXV1Sign.bodyMD5 is called: request=Request&#123;method=POST, url=https://m.xiangdian.com/api/mshop/mshop-aggr-prod/outer/v1/material/create/createAuth, headers=[app-cache-strategy:1], tags=&#123;class retrofit2.Invocation=com.mengxiang.arch.channel.impl.network.NetChannel$APIService.postRequest() [/api/mshop/mshop-aggr-prod/outer/v1/material/create/createAuth, &#123;app-cache-strategy=1&#125;, null]&#125;&#125;</span><br><span class="line">MD5Utils.md5 is called: value=null</span><br><span class="line">MD5Utils.md5 result=37a6259cc0c1dae299a7866489dff0bd</span><br><span class="line">MXV1Sign.bodyMD5 result=37a6259cc0c1dae299a7866489dff0bd</span><br><span class="line"></span><br><span class="line">MXV1Sign.bodyMD5 is called: request=Request&#123;method=POST, url=https://zuul.aikucun.com/appconfigmgt/api/v1/download/config, tags=&#123;class retrofit2.Invocation=com.aikucun.akapp.business.update.service.UpdateService.checkAppUpgrade() [&#123;configKey=[Ljava.lang.String;@61048d9, system=1, isShowUpdate=false, appId=com.aikucun.akapp, channel=2010, deviceModel=google-Pixel 3, buildCode=76302, version=7.63.2, userCode=, deviceBrand=Google&#125;]&#125;&#125;</span><br><span class="line">MD5Utils.md5 is called: value=&#123;&quot;configKey&quot;:[&quot;versionUpdate&quot;],&quot;system&quot;:1,&quot;isShowUpdate&quot;:false,&quot;appId&quot;:&quot;com.aikucun.akapp&quot;,&quot;channel&quot;:&quot;2010&quot;,&quot;deviceModel&quot;:&quot;google-Pixel 3&quot;,&quot;buildCode&quot;:76302,&quot;version&quot;:&quot;7.63.2&quot;,&quot;userCode&quot;:&quot;&quot;,&quot;deviceBrand&quot;:&quot;Google&quot;&#125;</span><br><span class="line">MD5Utils.md5 result=ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line">MXV1Sign.bodyMD5 result=ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line"></span><br><span class="line">MXV1Sign.bodyMD5 is called: request=Request&#123;method=POST, url=https://zuul.aikucun.com/appconfigmgt/api/v1/download/config, tags=&#123;class retrofit2.Invocation=com.aikucun.akapp.business.update.service.UpdateService.checkAppUpgrade() [&#123;configKey=[Ljava.lang.String;@f07dfd1, system=1, isShowUpdate=false, appId=com.aikucun.akapp, channel=2010, deviceModel=google-Pixel 3, buildCode=76302, version=7.63.2, userCode=, deviceBrand=Google&#125;]&#125;&#125;</span><br><span class="line">MD5Utils.md5 is called: value=&#123;&quot;configKey&quot;:[&quot;versionUpdate&quot;],&quot;system&quot;:1,&quot;isShowUpdate&quot;:false,&quot;appId&quot;:&quot;com.aikucun.akapp&quot;,&quot;channel&quot;:&quot;2010&quot;,&quot;deviceModel&quot;:&quot;google-Pixel 3&quot;,&quot;buildCode&quot;:76302,&quot;version&quot;:&quot;7.63.2&quot;,&quot;userCode&quot;:&quot;&quot;,&quot;deviceBrand&quot;:&quot;Google&quot;&#125;</span><br><span class="line">MD5Utils.md5 result=ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line">MXV1Sign.bodyMD5 result=ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line">MXV1Sign.bodyMD5 is called: request=Request&#123;method=POST, url=https://zuul.aikucun.com/appconfigmgt/api/v1/download/config, tags=&#123;class retrofit2.Invocation=com.aikucun.akapp.business.update.service.UpdateService.checkAppUpgrade() [&#123;configKey=[Ljava.lang.String;@cf2f91a, system=1, isShowUpdate=false, appId=com.aikucun.akapp, channel=2010, deviceModel=google-Pixel 3, buildCode=76302, version=7.63.2, userCode=, deviceBrand=Google&#125;]&#125;&#125;</span><br><span class="line">MD5Utils.md5 is called: value=&#123;&quot;configKey&quot;:[&quot;versionUpdate&quot;],&quot;system&quot;:1,&quot;isShowUpdate&quot;:false,&quot;appId&quot;:&quot;com.aikucun.akapp&quot;,&quot;channel&quot;:&quot;2010&quot;,&quot;deviceModel&quot;:&quot;google-Pixel 3&quot;,&quot;buildCode&quot;:76302,&quot;version&quot;:&quot;7.63.2&quot;,&quot;userCode&quot;:&quot;&quot;,&quot;deviceBrand&quot;:&quot;Google&quot;&#125;</span><br><span class="line">MD5Utils.md5 result=ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line">MXV1Sign.bodyMD5 result=ce10a5623f4ce537c8cbd4e306504860</span><br></pre></td></tr></table></figure>



<p>好了，这里就把<code>signV3</code>方法的参数和返回值分析完成了，接下来就到so里面具体分析这个函数的实现过程了。</p>
<h1 id="so分析"><a href="#so分析" class="headerlink" title="so分析"></a>so分析</h1><p>signV3的实现在<code>mx</code>里</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/14.jpg"></p>
<h2 id="定位signV3"><a href="#定位signV3" class="headerlink" title="定位signV3"></a>定位signV3</h2><p>IDA打开so文件，在导出函数表里搜索<code>Java</code>，直接就定位到了，双击跳转到函数地址</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/15.jpg"></p>
<p>对反汇编的内容稍作处理，得到如下内容</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">Java_com_mengxiang_arch_security_MXSecurity_signV3</span><span class="params">(</span></span><br><span class="line"><span class="params">        JNIEnv *env,</span></span><br><span class="line"><span class="params">        jobject obj,</span></span><br><span class="line"><span class="params">        <span class="type">char</span> *url,</span></span><br><span class="line"><span class="params">        <span class="type">char</span> *noncestr,</span></span><br><span class="line"><span class="params">        <span class="type">char</span> *timestamp,</span></span><br><span class="line"><span class="params">        <span class="type">char</span> *body)</span></span><br><span class="line">&#123;</span><br><span class="line">  JNIEnv v6; <span class="comment">// x8</span></span><br><span class="line">  <span class="type">size_t</span> v11; <span class="comment">// x28</span></span><br><span class="line">  <span class="type">size_t</span> v12; <span class="comment">// x25</span></span><br><span class="line">  <span class="type">size_t</span> v13; <span class="comment">// x26</span></span><br><span class="line">  <span class="type">size_t</span> v14; <span class="comment">// x27</span></span><br><span class="line">  <span class="type">size_t</span> v15; <span class="comment">// x20</span></span><br><span class="line">  <span class="type">size_t</span> v16; <span class="comment">// x21</span></span><br><span class="line">  <span class="type">size_t</span> v17; <span class="comment">// x22</span></span><br><span class="line">  <span class="type">size_t</span> v18; <span class="comment">// x23</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v19; <span class="comment">// x20</span></span><br><span class="line">  _QWORD *v20; <span class="comment">// x24</span></span><br><span class="line">  __int64 v21; <span class="comment">// x8</span></span><br><span class="line">  <span class="type">char</span> *v22; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">char</span> *v23; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">char</span> *v24; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">char</span> *v25; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">char</span> *v26; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">char</span> *v27; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">char</span> *v28; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">char</span> *v29; <span class="comment">// x0</span></span><br><span class="line">  __int64 v30; <span class="comment">// x8</span></span><br><span class="line">  <span class="type">char</span> *v31; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">char</span> *v32; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">char</span> *v33; <span class="comment">// x0</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v34; <span class="comment">// w20</span></span><br><span class="line">  jbyteArray sha256_data; <span class="comment">// x21</span></span><br><span class="line">  <span class="type">char</span> *v36; <span class="comment">// x1</span></span><br><span class="line">  jstring (*NewStringUTF)(JNIEnv *, <span class="type">const</span> <span class="type">char</span> *); <span class="comment">// x2</span></span><br><span class="line">  <span class="type">size_t</span> v39; <span class="comment">// [xsp+8h] [xbp-78h]</span></span><br><span class="line">  <span class="type">char</span> *timestamp_char; <span class="comment">// [xsp+10h] [xbp-70h]</span></span><br><span class="line">  <span class="type">char</span> *noncestr_char; <span class="comment">// [xsp+18h] [xbp-68h]</span></span><br><span class="line">  <span class="type">char</span> *url_char; <span class="comment">// [xsp+20h] [xbp-60h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *body_char; <span class="comment">// [xsp+28h] [xbp-58h]</span></span><br><span class="line"></span><br><span class="line">  v6 = *env;</span><br><span class="line">  <span class="keyword">if</span> ( (byte_32051 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    noncestr_char = v6-&gt;GetStringUTFChars(env, noncestr, <span class="number">0LL</span>);</span><br><span class="line">    timestamp_char = (*env)-&gt;GetStringUTFChars(env, timestamp, <span class="number">0LL</span>);</span><br><span class="line">    url_char = (*env)-&gt;GetStringUTFChars(env, url, <span class="number">0LL</span>);</span><br><span class="line">    body_char = (*env)-&gt;GetStringUTFChars(env, body, <span class="number">0LL</span>);</span><br><span class="line">    v39 = __strlen_chk(<span class="string">&quot;appid=&quot;</span>, <span class="number">7uLL</span>);</span><br><span class="line">    v11 = __strlen_chk(<span class="string">&quot;&amp;svs=&quot;</span>, <span class="number">6uLL</span>);</span><br><span class="line">    v12 = __strlen_chk(<span class="string">&quot;v3&quot;</span>, <span class="number">3uLL</span>);</span><br><span class="line">    v13 = __strlen_chk(<span class="string">&quot;&amp;noncestr=&quot;</span>, <span class="number">0xB</span>uLL);</span><br><span class="line">    v14 = <span class="built_in">strlen</span>(noncestr_char);</span><br><span class="line">    v15 = __strlen_chk(<span class="string">&quot;&amp;timestamp=&quot;</span>, <span class="number">0xC</span>uLL);</span><br><span class="line">    v16 = <span class="built_in">strlen</span>(timestamp_char);</span><br><span class="line">    v17 = __strlen_chk(<span class="string">&quot;&amp;secret=&quot;</span>, <span class="number">9uLL</span>);</span><br><span class="line">    v18 = __strlen_chk(<span class="string">&quot;&amp;url=&quot;</span>, <span class="number">6uLL</span>);</span><br><span class="line">    v19 = v39 + v11 + v12 + v13 + v14 + v15 + v16 + v17 + v18 + <span class="built_in">strlen</span>(url_char) + <span class="number">74</span>;</span><br><span class="line">    v20 = operator new[](v19);</span><br><span class="line">    <span class="built_in">memset</span>(v20, <span class="number">0</span>, v19);</span><br><span class="line">    *v20 = <span class="number">0LL</span>;</span><br><span class="line">    <span class="built_in">strcat</span>(v20, <span class="string">&quot;appid=&quot;</span>);</span><br><span class="line">    v21 = <span class="number">32LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( isDebug )</span><br><span class="line">      v21 = <span class="number">16LL</span>;</span><br><span class="line">    v22 = <span class="built_in">strcat</span>(v20, *(lpAppInfo + v21));</span><br><span class="line">    v23 = <span class="built_in">strcat</span>(v22, <span class="string">&quot;&amp;svs=&quot;</span>);</span><br><span class="line">    v24 = <span class="built_in">strcat</span>(v23, <span class="string">&quot;v3&quot;</span>);</span><br><span class="line">    v25 = <span class="built_in">strcat</span>(v24, <span class="string">&quot;&amp;noncestr=&quot;</span>);</span><br><span class="line">    v26 = <span class="built_in">strcat</span>(v25, noncestr_char);</span><br><span class="line">    v27 = <span class="built_in">strcat</span>(v26, <span class="string">&quot;&amp;timestamp=&quot;</span>);</span><br><span class="line">    v28 = <span class="built_in">strcat</span>(v27, timestamp_char);</span><br><span class="line">    v29 = <span class="built_in">strcat</span>(v28, <span class="string">&quot;&amp;secret=&quot;</span>);</span><br><span class="line">    v30 = <span class="number">40LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( isDebug )</span><br><span class="line">      v30 = <span class="number">24LL</span>;</span><br><span class="line">    v31 = <span class="built_in">strcat</span>(v29, *(lpAppInfo + v30));</span><br><span class="line">    v32 = <span class="built_in">strcat</span>(v31, <span class="string">&quot;&amp;url=&quot;</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(v32, url_char);</span><br><span class="line">    <span class="keyword">if</span> ( body_char &amp;&amp; <span class="built_in">strlen</span>(body_char) )</span><br><span class="line">    &#123;</span><br><span class="line">      v33 = <span class="built_in">strcat</span>(v20, <span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">      <span class="built_in">strcat</span>(v33, body_char);</span><br><span class="line">    &#125;</span><br><span class="line">    v34 = <span class="built_in">strlen</span>(v20);</span><br><span class="line">    sha256_data = (*env)-&gt;NewByteArray(env, v34);</span><br><span class="line">    (*env)-&gt;SetByteArrayRegion(env, sha256_data, <span class="number">0LL</span>, v34, v20);</span><br><span class="line">    v36 = digest(env, ALGORITHM_SHA256, sha256_data);</span><br><span class="line">    NewStringUTF = (*env)-&gt;NewStringUTF;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    NewStringUTF = v6-&gt;NewStringUTF;</span><br><span class="line">    v36 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> NewStringUTF(env, v36);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用了digest方法，是SHA256签名算法，参数是<code>sha256_data</code>，分析这个参数是怎么生成的</p>
<p>它是由<code>appid</code>，<code>svs</code>、<code>noncestr</code>、<code>timestamp</code>、<code>secret</code>、<code>url</code>、<code>body</code>这些内容拼接而成的</p>
<p>目前还有两个未知参数<code>appid</code>和<code>secret</code></p>
<h3 id="appid"><a href="#appid" class="headerlink" title="appid"></a>appid</h3><p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/16.jpg"></p>
<p>这里看到appid的值是<code>lpAppInfo</code>加上一个偏移，偏移与<code>isDebug</code>有关</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/18.jpg"></p>
<p>可以直接用frida直接打印内存中的数据</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/17.jpg"></p>
<p><code>isDebug</code>的值为0，所以<code>v21</code>的值为32</p>
<p>接下来打印<code>lpAppInfo</code>的值</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/19.jpg"></p>
<p><code>lpAppInfo</code>的值为<code>773f4e8b70</code>，<code>lpAppInfo</code>是个二级指针，加上偏移，打印它在内存中的数据</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/20.jpg"></p>
<p>还是指向一个地址，继续打印</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/21.jpg"></p>
<p>这里就得到appid的值为<code>38741001</code></p>
<h3 id="secret"><a href="#secret" class="headerlink" title="secret"></a>secret</h3><p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/22.jpg"></p>
<p>这里和<code>appid</code>参数一样，只需要修改偏移就可以打印<code>secret</code>的值</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/23.jpg"></p>
<p>继续打印</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/24.jpg"></p>
<p>这里得到<code>secret</code>的值为<code>04fdc5e4d9c7420e896ee92b17c68e9f</code></p>
<h3 id="hook-digest"><a href="#hook-digest" class="headerlink" title="hook digest"></a>hook digest</h3><p>参数分析完成了，接下来hook digest函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//Android8.0之后加载so通过android_dlopen_ext函数</span></span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="keyword">var</span> islibmx = <span class="literal">false</span>;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;libmx.so&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    islibmx = <span class="literal">true</span>;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="comment">//console.log(&quot;leave!&quot;);</span></span><br><span class="line">            <span class="keyword">if</span>(islibmx)&#123;</span><br><span class="line">                islibmx=<span class="literal">false</span>;</span><br><span class="line">                <span class="title function_">hook_digest</span>()</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_digest</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> digest_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libmx.so&quot;</span>,<span class="string">&quot;_Z6digestP7_JNIEnvPKcP11_jbyteArray&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr:&quot;</span>,digest_addr);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(digest_addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hooked&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args[1]:&quot;</span>,args[<span class="number">1</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args[2]:&quot;</span>,args[<span class="number">2</span>]);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval:&quot;</span>,retval.<span class="title function_">readCString</span>())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">hook_dlopen</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hooked</span><br><span class="line">args[1]: SHA256</span><br><span class="line">args[2]: 0x15</span><br><span class="line">retval: 580ef777f37fbb91dc13afa7cf6c2cd40db25286898f79af7ee4d707a2776a5b</span><br><span class="line">hooked</span><br><span class="line">args[1]: SHA256</span><br><span class="line">args[2]: 0x19</span><br><span class="line">retval: 06c3972159e698bec75632ecf9dd3e03ef47414f4cb22ec963effa10764a526e</span><br><span class="line">hooked</span><br><span class="line">args[1]: SHA256</span><br><span class="line">args[2]: 0x15</span><br><span class="line">retval: de46725478edde6cc051dcdab7d0cd762678999038fa010d7188e7340c530932</span><br><span class="line">hooked</span><br><span class="line">args[1]: SHA256</span><br><span class="line">args[2]: 0x15</span><br><span class="line">retval: b1eabf65340dd48a7e3d2855ffe38c4b21461f2a5688a7abbdfe970c30799ae2</span><br></pre></td></tr></table></figure>

<p>这里有些小疑惑，<code>args[2]</code>是加密的数据，应该是一个指针，指向一个字符串，而这里是一个数值</p>
<p>找到这个变量定义的地方，原来它的类型是<code>jbyteArray</code>类型，打印出来的值实际上是<code>jbyteArray</code>的句柄值。</p>
<p><img src="/2025/01/13/%E7%88%B1%E5%BA%93%E5%AD%98app%E5%8F%82%E6%95%B0sign%E8%BF%98%E5%8E%9F/25.jpg"></p>
<p>打印<code>jbyteArray</code>，我们可以调用如下方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jbyteArray2Array</span>(<span class="params">jbyteArray</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ret;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;[B&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> buffer = <span class="title class_">Java</span>.<span class="title function_">cast</span>(jbyteArray, b);</span><br><span class="line">        ret = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;byte&#x27;</span>, buffer);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加入到hook代码中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//Android8.0之后加载so通过android_dlopen_ext函数</span></span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="keyword">var</span> islibmx = <span class="literal">false</span>;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;libmx.so&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    islibmx = <span class="literal">true</span>;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="comment">//console.log(&quot;leave!&quot;);</span></span><br><span class="line">            <span class="keyword">if</span>(islibmx)&#123;</span><br><span class="line">                islibmx=<span class="literal">false</span>;</span><br><span class="line">                <span class="title function_">hook_digest</span>()</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_digest</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> digest_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libmx.so&quot;</span>,<span class="string">&quot;_Z6digestP7_JNIEnvPKcP11_jbyteArray&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr:&quot;</span>,digest_addr);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(digest_addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hooked&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args[1]:&quot;</span>,args[<span class="number">1</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="keyword">let</span> arrayStr = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="title function_">jbyteArray2Array</span>(args[<span class="number">2</span>]))</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args[2]&quot;</span>,arrayStr);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval:&quot;</span>,retval.<span class="title function_">readCString</span>())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">jbyteArray2Array</span>(<span class="params">jbyteArray</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ret;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;[B&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> buffer = <span class="title class_">Java</span>.<span class="title function_">cast</span>(jbyteArray, b);</span><br><span class="line">        ret = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;byte&#x27;</span>, buffer);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">hook_dlopen</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果如下</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hooked</span><br><span class="line">args[1]: SHA256</span><br><span class="line">args[2] appid=38741001&amp;svs=v3&amp;noncestr=52d7e0&amp;timestamp=1736841686&amp;secret=04fdc5e4d9c7420e896ee92b17c68e9f&amp;url=https://m.xiangdian.com/api/mshop/mshop-aggr-prod/outer/v1/material/create/createAuth?appid=38741001&amp;did=cf05095e7e5c4492023833c88e4701bd&amp;noncestr=52d7e0&amp;svs=v3&amp;timestamp=1736841686&amp;37a6259cc0c1dae299a7866489dff0bd</span><br><span class="line">retval: c8a8920fdb192fbff509a3fcc02a574387bba8387b3699c3b523f6b9a5f1a9bb</span><br><span class="line">hooked</span><br><span class="line">args[1]: SHA256</span><br><span class="line">args[2] appid=38741001&amp;svs=v3&amp;noncestr=dc5f62&amp;timestamp=1736841687&amp;secret=04fdc5e4d9c7420e896ee92b17c68e9f&amp;url=https://zuul.aikucun.com/appconfigmgt/api/v1/download/config?appid=38741001&amp;did=cf05095e7e5c4492023833c88e4701bd&amp;noncestr=dc5f62&amp;svs=v3&amp;timestamp=1736841687&amp;ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line">retval: 374c820993d895d427540bc5a0416a20c0813b0050f9f2d547b6557531b587e3</span><br><span class="line">hooked</span><br><span class="line">args[1]: SHA256</span><br><span class="line">args[2] appid=38741001&amp;svs=v3&amp;noncestr=0446f5&amp;timestamp=1736841688&amp;secret=04fdc5e4d9c7420e896ee92b17c68e9f&amp;url=https://zuul.aikucun.com/appconfigmgt/api/v1/download/config?appid=38741001&amp;did=cf05095e7e5c4492023833c88e4701bd&amp;noncestr=0446f5&amp;svs=v3&amp;timestamp=1736841688&amp;ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line">retval: cf733458b1142b469afbee61529ca5e37730c551ada13e8839cc390660c773db</span><br><span class="line">hooked</span><br><span class="line">args[1]: SHA256</span><br><span class="line">args[2] appid=38741001&amp;svs=v3&amp;noncestr=e8e90a&amp;timestamp=1736841688&amp;secret=04fdc5e4d9c7420e896ee92b17c68e9f&amp;url=https://zuul.aikucun.com/appconfigmgt/api/v1/download/config?appid=38741001&amp;did=cf05095e7e5c4492023833c88e4701bd&amp;noncestr=e8e90a&amp;svs=v3&amp;timestamp=1736841688&amp;ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line">retval: 8af4d51e17d8d8c1d9b3a0da22796ea52871bbeb27a630e74db97befce039814</span><br></pre></td></tr></table></figure>

<h1 id="参数还原"><a href="#参数还原" class="headerlink" title="参数还原"></a>参数还原</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_digest</span>(<span class="params">data</span>):</span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    result = md5.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://zuul.aikucun.com/appconfigmgt/api/v1/download/config&quot;</span></span><br><span class="line"></span><br><span class="line">body = <span class="string">&#x27;&#123;&quot;configKey&quot;:[&quot;versionUpdate&quot;],&quot;system&quot;:1,&quot;isShowUpdate&quot;:false,&quot;appId&quot;:&quot;com.aikucun.akapp&quot;,&quot;channel&quot;:&quot;2010&quot;,&quot;deviceModel&quot;:&quot;google-Pixel 3&quot;,&quot;buildCode&quot;:76302,&quot;version&quot;:&quot;7.63.2&quot;,&quot;userCode&quot;:&quot;&quot;,&quot;deviceBrand&quot;:&quot;Google&quot;&#125;&#x27;</span></span><br><span class="line">bodymd5 = md5_digest(body)</span><br><span class="line"></span><br><span class="line">uuid = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line">appid = <span class="string">&quot;38741001&quot;</span></span><br><span class="line">svs = <span class="string">&quot;v3&quot;</span></span><br><span class="line">noncestr = uuid[<span class="number">0</span>:<span class="number">6</span>]</span><br><span class="line">timestamp = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time()))</span><br><span class="line">secret = <span class="string">&quot;04fdc5e4d9c7420e896ee92b17c68e9f&quot;</span></span><br><span class="line">did = md5_digest(<span class="string">&quot;micker.cn&quot;</span>+uuid)</span><br><span class="line">cat_url = url+<span class="string">&quot;?&quot;</span>+<span class="string">&quot;appid=&quot;</span>+appid+<span class="string">&quot;&amp;did=&quot;</span>+did+<span class="string">&quot;&amp;noncestr=&quot;</span>+noncestr+<span class="string">&quot;&amp;svs=v3&quot;</span>+<span class="string">&quot;&amp;timestamp=&quot;</span>+timestamp+<span class="string">&quot;&amp;&quot;</span>+bodymd5</span><br><span class="line">sha256_str = <span class="string">&quot;appid=&quot;</span>+appid+<span class="string">&quot;&amp;svs=&quot;</span>+svs+<span class="string">&quot;&amp;noncestr=&quot;</span>+noncestr+<span class="string">&quot;&amp;timestamp=&quot;</span>+timestamp+<span class="string">&quot;&amp;secret=&quot;</span>+secret+<span class="string">&quot;&amp;url=&quot;</span>+cat_url</span><br><span class="line">sha256 = hashlib.sha256()</span><br><span class="line">sha256.update(sha256_str.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">sign = sha256.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(sha256_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">&quot;Auth-Token&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Pixel3 android 9 7.63.2 2.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;token&quot;</span>: <span class="string">&quot;477c33c6-2f38-4363-a670-314393b47c1b&quot;</span>,</span><br><span class="line">  <span class="string">&quot;AKC-MODEL&quot;</span>: <span class="string">&quot;Pixel3&quot;</span>,</span><br><span class="line">  <span class="string">&quot;AKC-OS&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">  <span class="string">&quot;AKC-OS-VERSION&quot;</span>: <span class="string">&quot;9&quot;</span>,</span><br><span class="line">  <span class="string">&quot;AKC-APP-VERSION&quot;</span>: <span class="string">&quot;7.63.2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;AKC-APP-API-VERSION&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;AKC-APP-BUILD-VERSION&quot;</span>: <span class="string">&quot;76302&quot;</span>,</span><br><span class="line">  <span class="string">&quot;AKC-DID&quot;</span>: <span class="string">&quot;bedf28c355443e1f695fad8bed68fb62&quot;</span>,</span><br><span class="line">  <span class="string">&quot;AKC-APP-CHANNEL&quot;</span>: <span class="string">&quot;2010&quot;</span>,</span><br><span class="line">  <span class="string">&quot;applicationId&quot;</span>: <span class="string">&quot;com.aikucun.akapp&quot;</span>,</span><br><span class="line">  <span class="string">&quot;x-auth-token&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;live-channel&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dtdToken&quot;</span>: <span class="string">&quot;6784f1da9Lvio98PqHQ7NhCTS4TB4ruXU4mwxoe3&quot;</span>,</span><br><span class="line">  <span class="string">&quot;app2H5Token&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;uid&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;subUid&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;APP-LOGIN-CHANNEL&quot;</span>: <span class="string">&quot;akcApp&quot;</span>,</span><br><span class="line">  <span class="string">&quot;app-request-id&quot;</span>: <span class="string">&quot;120883481161481b9ab275208092d108&quot;</span>,</span><br><span class="line">  <span class="string">&quot;PAGE-NAME&quot;</span>: <span class="string">&quot;%E7%99%BB%E5%BD%95&quot;</span>,</span><br><span class="line">  <span class="string">&quot;TRACKER-SESSION-ID&quot;</span>: <span class="string">&quot;0be8b952d15b980a&quot;</span>,</span><br><span class="line">  <span class="string">&quot;APP-USER-TYPE&quot;</span>: <span class="string">&quot;6&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json; charset=UTF-8&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;213&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;zuul.aikucun.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;Keep-Alive&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">  <span class="string">&quot;appid&quot;</span>: appid,</span><br><span class="line">  <span class="string">&quot;did&quot;</span>: did,</span><br><span class="line">  <span class="string">&quot;noncestr&quot;</span>: noncestr,</span><br><span class="line">  <span class="string">&quot;svs&quot;</span>: svs,</span><br><span class="line">  <span class="string">&quot;timestamp&quot;</span>: timestamp,</span><br><span class="line">  <span class="string">&quot;sign&quot;</span>: sign</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;configKey&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;versionUpdate&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;system&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;isShowUpdate&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">  <span class="string">&quot;appId&quot;</span>: <span class="string">&quot;com.aikucun.akapp&quot;</span>,</span><br><span class="line">  <span class="string">&quot;channel&quot;</span>: <span class="string">&quot;2010&quot;</span>,</span><br><span class="line">  <span class="string">&quot;deviceModel&quot;</span>: <span class="string">&quot;google-Pixel 3&quot;</span>,</span><br><span class="line">  <span class="string">&quot;buildCode&quot;</span>: <span class="number">76302</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;7.63.2&quot;</span>,</span><br><span class="line">  <span class="string">&quot;userCode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;deviceBrand&quot;</span>: <span class="string">&quot;Google&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url=url,headers=headers,params=params,json=data)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">appid=<span class="number">38741001</span>&amp;svs=v3&amp;noncestr=ade8eb&amp;timestamp=<span class="number">1736844173</span>&amp;secret=04fdc5e4d9c7420e896ee92b17c68e9f&amp;url=https://zuul.aikucun.com/appconfigmgt/api/v1/download/config?appid=<span class="number">38741001</span>&amp;did=eb3be18635dec1ae73f3a0b86e81c982&amp;noncestr=ade8eb&amp;svs=v3&amp;timestamp=<span class="number">1736844173</span>&amp;ce10a5623f4ce537c8cbd4e306504860</span><br><span class="line"><span class="number">200</span></span><br><span class="line">&#123;<span class="string">&quot;code&quot;</span>:<span class="number">200</span>,<span class="string">&quot;data&quot;</span>:&#123;&#125;,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;success&quot;</span>,<span class="string">&quot;status&quot;</span>:<span class="string">&quot;success&quot;</span>,<span class="string">&quot;success&quot;</span>:true&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>爱库存</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转Python</title>
    <url>/2024/12/05/%E7%8E%A9%E8%BD%ACPython/</url>
    <content><![CDATA[<h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p>需要配置的环境变量是python的安装路径和它的Scripts目录。<br><img src="/2024/12/05/%E7%8E%A9%E8%BD%ACPython/1.jpg"><br>python的安装路径下有python.exe。<br>Scripts目录下有pip.exe和我们安装的第三方库。</p>
<h1 id="python-exe"><a href="#python-exe" class="headerlink" title="python.exe"></a>python.exe</h1><h2 id="HTTP服务器"><a href="#HTTP服务器" class="headerlink" title="HTTP服务器"></a>HTTP服务器</h2><p>命令行运行<code>python -m http.server [port]</code>，创建http服务器，默认端口是8000。</p>
<h1 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h1><p>使用<code>virtualenv</code>来创建虚拟环境。  </p>
<h2 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure>
<h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">virtualenv &lt;envName&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;envName&gt;是我们给虚拟环境起的名字</span></span><br></pre></td></tr></table></figure>
<p>会在当前目录下创建一个文件夹，里面包含了Python解释器的副本和一套标准库。  </p>
<h2 id="激活虚拟机环境"><a href="#激活虚拟机环境" class="headerlink" title="激活虚拟机环境"></a>激活虚拟机环境</h2><p>在虚拟环境目录下的Scripts目录里，有一个activate.exe，运行它，虚拟环境就生效了。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">activate</span><br></pre></td></tr></table></figure>
<p>激活虚拟环境后，你会看到命令行提示符前出现环境名称，表明当前是在该虚拟环境中操作。</p>
<h2 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h2><p>执行<code>deactivate</code>退出虚拟环境。</p>
<h1 id="pip-exe"><a href="#pip-exe" class="headerlink" title="pip.exe"></a>pip.exe</h1><h2 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install xxx</span><br></pre></td></tr></table></figure>

<h2 id="卸载第三方库"><a href="#卸载第三方库" class="headerlink" title="卸载第三方库"></a>卸载第三方库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip uninstall xxx</span><br></pre></td></tr></table></figure>

<h2 id="更新pip"><a href="#更新pip" class="headerlink" title="更新pip"></a>更新pip</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<h2 id="freeze"><a href="#freeze" class="headerlink" title="freeze"></a>freeze</h2><p>列出当前Python环境中已经安装的所有包及其版本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip freeze</span><br></pre></td></tr></table></figure>

<p><strong>生成依赖文件</strong></p>
<p>将信息输出保存到一个文件里。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>

<p><strong>安装依赖</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>玩转Python</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转Windows</title>
    <url>/2024/12/01/%E7%8E%A9%E8%BD%ACWindows/</url>
    <content><![CDATA[<h1 id="新机跳过联网"><a href="#新机跳过联网" class="headerlink" title="新机跳过联网"></a>新机跳过联网</h1><p>在连接网络的界面输入<code>Shift+F10</code>打开命令行，然后输入<code>oobe\bypassnro</code>然后会重启，重启后，在联网的界面会出现跳过的选项。</p>
<h1 id="关于编码"><a href="#关于编码" class="headerlink" title="关于编码"></a>关于编码</h1><p>在中国大陆Windows使用的编码是GBK编码。</p>
<h1 id="与Win相关的快捷键"><a href="#与Win相关的快捷键" class="headerlink" title="与Win相关的快捷键"></a>与Win相关的快捷键</h1><h2 id="Win-R"><a href="#Win-R" class="headerlink" title="Win+R"></a>Win+R</h2><p>打开”运行”对话框</p>
<h2 id="Win-I"><a href="#Win-I" class="headerlink" title="Win+I"></a>Win+I</h2><p>打开设置</p>
<h2 id="Win-D"><a href="#Win-D" class="headerlink" title="Win+D"></a>Win+D</h2><p>最小化所有的打开的窗口，显示桌面。</p>
<p>再次按下可恢复之前最小化的所有窗口。</p>
<h2 id="Win-E"><a href="#Win-E" class="headerlink" title="Win+E"></a>Win+E</h2><p>打开文件资源管理器。</p>
<h1 id="“运行”对话框"><a href="#“运行”对话框" class="headerlink" title="“运行”对话框"></a>“运行”对话框</h1><p>通过按下Win（Windows徽标键）和R键的组合来快速打开运行对话框，然后输入特定的命令或程序路径来运行程序或打开文件。</p>
<ul>
<li><p><code>cmd</code><br>终端</p>
</li>
<li><p><code>winver</code><br>查看系统版本</p>
</li>
<li><p><code>control</code><br>控制面板</p>
</li>
<li><p><code>calc</code><br>计算器</p>
</li>
<li><p><code>mspaint</code></p>
<p>画图工具</p>
</li>
<li><p><code>devmgmt.msc</code></p>
<p>设备管理器</p>
</li>
</ul>
<h1 id="Terminal（终端）"><a href="#Terminal（终端）" class="headerlink" title="Terminal（终端）"></a>Terminal（终端）</h1><h2 id="关机命令"><a href="#关机命令" class="headerlink" title="关机命令"></a>关机命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown /s 		#关机</span><br><span class="line"></span><br><span class="line">shutdown /r			#重启</span><br><span class="line"></span><br><span class="line">shutdown /s /t &lt;second&gt;	# 延迟关机</span><br><span class="line"></span><br><span class="line">shutdown /a 		#取消关机</span><br><span class="line"></span><br><span class="line">shutdown /s /f		#强制关机</span><br><span class="line"></span><br><span class="line">shutdown /l			#注销</span><br></pre></td></tr></table></figure>



<h1 id="控制面板"><a href="#控制面板" class="headerlink" title="控制面板"></a>控制面板</h1><h2 id="默认程序"><a href="#默认程序" class="headerlink" title="默认程序"></a>默认程序</h2><p>可在这里更改默认程序</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>玩转Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>编程语言的发展轨迹</title>
    <url>/2024/12/31/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E5%8F%91%E5%B1%95%E8%BD%A8%E8%BF%B9/</url>
    <content><![CDATA[<h1 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h1><p>机器语言是计算机能够直接识别和执行的二进制代码。它是计算机最底层的编程语言，由 0 和 1 组成，可以与计算机硬件直接交互。</p>
<h1 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h1><p>汇编语言是机器指令的助记符，具有很高的执行效率，可读性较高。 </p>
<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h1 id="C-1"><a href="#C-1" class="headerlink" title="C#"></a>C#</h1><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><p>&emsp;&emsp;Go语言原生支持并发，通过轻量级的<strong>goroutine</strong>和<strong>channel</strong>机制，极大地简化了并发编程的复杂性。goroutine相比线程更加高效，资源占用低，可以支持大规模并发任务，非常适合构建高性能的服务器和分布式系统。</p>
<p>&emsp;&emsp;Go语言的并发是基于 <code>goroutine</code> 的，<code>goroutine</code> 类似于线程，但并非线程。可以将 <code>goroutine</code> 理解为一种虚拟线程。Go 语言运行时会参与调度 <code>goroutine</code>，并将 <code>goroutine</code> 合理地分配到每个 CPU 中，最大限度地使用CPU性能。</p>
<p>&emsp;&emsp;自动内存管理，开发者无需手动释放内存，Go 的 GC 会自动回收不再使用的对象，避免内存泄漏和悬垂指针（dangling pointer）等问题。</p>
]]></content>
      <categories>
        <category>见多识广</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯游戏安全移动赛题Tencent2016A</title>
    <url>/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.tencent.tencent2016a</p>
<p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/1.jpg"></p>
<h1 id="Java层分析"><a href="#Java层分析" class="headerlink" title="Java层分析"></a>Java层分析</h1><h2 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h2><p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/2.jpg"></p>
<h2 id="c"><a href="#c" class="headerlink" title="c"></a>c</h2><p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/3.jpg"></p>
<h2 id="NativeCheckRegister"><a href="#NativeCheckRegister" class="headerlink" title="NativeCheckRegister"></a>NativeCheckRegister</h2><p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/4.jpg"></p>
<h1 id="so分析"><a href="#so分析" class="headerlink" title="so分析"></a>so分析</h1><h2 id="定位NativeCheckRegister函数位置"><a href="#定位NativeCheckRegister函数位置" class="headerlink" title="定位NativeCheckRegister函数位置"></a>定位NativeCheckRegister函数位置</h2><p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/5.jpg"></p>
<h2 id="NativeCheckRegister-1"><a href="#NativeCheckRegister-1" class="headerlink" title="NativeCheckRegister"></a>NativeCheckRegister</h2><p>类型修复及函数重命名之后的NativeCheckRegister函数如下</p>
<p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/6.jpg"></p>
<h2 id="check"><a href="#check" class="headerlink" title="check"></a>check</h2><p>类型修复及函数重命名后的check函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> __fastcall <span class="title function_">check</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name, <span class="type">char</span> *code)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> namelength; <span class="comment">// r5</span></span><br><span class="line">  _BOOL4 result; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// r4</span></span><br><span class="line">  _DWORD *nametempaddr; <span class="comment">// r7</span></span><br><span class="line">  <span class="type">int</span> nametempresult; <span class="comment">// r3</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// r4</span></span><br><span class="line">  <span class="type">int</span> codetemp; <span class="comment">// r1</span></span><br><span class="line">  _DWORD nameresultarray[<span class="number">5</span>]; <span class="comment">// [sp+18h] [bp-458h] BYREF</span></span><br><span class="line">  _DWORD coderesultarray[<span class="number">5</span>]; <span class="comment">// [sp+2Ch] [bp-444h] BYREF</span></span><br><span class="line">  _BYTE namemix[<span class="number">20</span>]; <span class="comment">// [sp+40h] [bp-430h] BYREF</span></span><br><span class="line">  _BYTE codeResult[<span class="number">1052</span>]; <span class="comment">// [sp+54h] [bp-41Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  namelength = j_strlen(name);</span><br><span class="line">  <span class="keyword">if</span> ( (namelength - <span class="number">6</span>) &gt; <span class="number">0xE</span> )                 <span class="comment">// 校验name长度范围[6:20]</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  j_memset(namemix, <span class="number">0</span>, <span class="keyword">sizeof</span>(namemix));</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">16</span>; ++i )                   <span class="comment">// 基于name生成一个混淆数据</span></span><br><span class="line">  &#123;</span><br><span class="line">    nametempaddr = &amp;namemix[i];</span><br><span class="line">    nametempresult = name[i % namelength] * (i + <span class="number">20160126</span>) * namelength;<span class="comment">// 基于 name 的字符生成一个与 name 相关的混淆数据，存入namemix</span></span><br><span class="line">    *nametempaddr += nametempresult;</span><br><span class="line">  &#125;</span><br><span class="line">  j_memset(codeResult, <span class="number">0</span>, <span class="number">0x400</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( codeEnc1(code) &gt; <span class="number">1024</span> || codeEnc2(codeResult, code) != <span class="number">20</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  j_memset(nameresultarray, <span class="number">0</span>, <span class="keyword">sizeof</span>(nameresultarray));</span><br><span class="line">  j_memset(coderesultarray, <span class="number">0</span>, <span class="keyword">sizeof</span>(coderesultarray));</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j != <span class="number">5</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    codetemp = *&amp;codeResult[j * <span class="number">4</span>];</span><br><span class="line">    nameresultarray[j] = *&amp;namemix[j * <span class="number">4</span>] / <span class="number">10</span>;</span><br><span class="line">    coderesultarray[j] = codetemp;</span><br><span class="line">  &#125;</span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( coderesultarray[<span class="number">4</span>] + nameresultarray[<span class="number">0</span>] == coderesultarray[<span class="number">2</span>]</span><br><span class="line">    &amp;&amp; coderesultarray[<span class="number">4</span>] + nameresultarray[<span class="number">0</span>] + nameresultarray[<span class="number">1</span>] == <span class="number">2</span> * coderesultarray[<span class="number">4</span>]</span><br><span class="line">    &amp;&amp; nameresultarray[<span class="number">2</span>] + coderesultarray[<span class="number">3</span>] == coderesultarray[<span class="number">0</span>]</span><br><span class="line">    &amp;&amp; nameresultarray[<span class="number">2</span>] + coderesultarray[<span class="number">3</span>] + nameresultarray[<span class="number">3</span>] == <span class="number">2</span> * coderesultarray[<span class="number">3</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> nameresultarray[<span class="number">4</span>] + coderesultarray[<span class="number">1</span>] == <span class="number">3</span> * nameresultarray[<span class="number">2</span>];  <span class="comment">// 返回值为1则验证成功</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据以上信息，当满足以下条件，程序验证成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">coderesultarray[4] + nameresultarray[0] == coderesultarray[2]</span><br><span class="line">coderesultarray[4] + nameresultarray[0] + nameresultarray[1] == 2 * coderesultarray[4]</span><br><span class="line">nameresultarray[2] + coderesultarray[3] == coderesultarray[0]</span><br><span class="line">nameresultarray[2] + coderesultarray[3] + nameresultarray[3] == 2 * coderesultarray[3]</span><br><span class="line">nameresultarray[4] + coderesultarray[1] == 3 * nameresultarray[2]</span><br></pre></td></tr></table></figure>

<p>变换，整理得到如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">coderesultarray[4] + nameresultarray[0] == coderesultarray[2]</span><br><span class="line">nameresultarray[0] + nameresultarray[1] == coderesultarray[4]</span><br><span class="line">nameresultarray[2] + coderesultarray[3] == coderesultarray[0]</span><br><span class="line">nameresultarray[2] + nameresultarray[3] == coderesultarray[3]</span><br><span class="line">nameresultarray[4] + coderesultarray[1] == 3 * nameresultarray[2]</span><br></pre></td></tr></table></figure>

<p>由此可知：</p>
<ul>
<li>coderesultarray[0]可由nameresultarray[2]+nameresultarray[2]+nameresultarray[3]得到</li>
<li>coderesultarray[1]可由3 * nameresultarray[2]-nameresultarray[4]]得到</li>
<li>coderesultarray[2]可由nameresultarray[0] + nameresultarray[1]+nameresultarray[0]]得到</li>
<li>coderesultarray[3]可由nameresultarray[2] + nameresultarray[3]]得到</li>
<li>coderesultarray[4]可由nameresultarray[0] + nameresultarray[1]]得到</li>
</ul>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>由以上信息，我们可以知道，由<code>name-&gt;namemix-&gt;nameresultarray-&gt;coderesultarray</code></p>
<p>还知道<code>code-&gt;codeResult-&gt;coderesultarray</code></p>
<p>猜测可通过coderesultarray还原code</p>
<p>接下来分析code的两个处理函数codeEnc1和codeEnc2</p>
<h2 id="codeEnc1"><a href="#codeEnc1" class="headerlink" title="codeEnc1"></a>codeEnc1</h2><p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/7.jpg"></p>
<h3 id="a456789"><a href="#a456789" class="headerlink" title="a456789"></a>a456789</h3><p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/8.jpg"></p>
<p><strong>观察数据窗口</strong></p>
<p>发现末尾有一串Base64表，盲猜会出现Base64编码</p>
<p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/9.jpg"></p>
<p>经过分析，codeEnc1函数的功能是对输入的code进行校验，返回一个与字符串长度和规则相关的值，然后与1024进行比较。</p>
<h2 id="codeEnc2"><a href="#codeEnc2" class="headerlink" title="codeEnc2"></a>codeEnc2</h2><p>处理过后的codeEnc2函数如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">codeEnc2</span><span class="params">(<span class="type">char</span> *codeResult, <span class="type">char</span> *code)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *Cocode; <span class="comment">// r3</span></span><br><span class="line">  <span class="type">int</span> Cocode_code; <span class="comment">// r3</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r2</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r5</span></span><br><span class="line">  <span class="type">char</span> *codeResultTemp; <span class="comment">// r3</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// r3</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r6</span></span><br><span class="line"></span><br><span class="line">  Cocode = code;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    ++Cocode;</span><br><span class="line">  <span class="keyword">while</span> ( a456789[*(Cocode - <span class="number">1</span>)] &lt;= <span class="number">63u</span> );</span><br><span class="line">  Cocode_code = Cocode - code;                  <span class="comment">// Cocode_code是Cocode-code</span></span><br><span class="line">  v4 = Cocode_code - <span class="number">1</span>;</span><br><span class="line">  v5 = <span class="number">3</span> * ((Cocode_code + <span class="number">2</span>) / <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    codeResultTemp = codeResult;</span><br><span class="line">    <span class="keyword">if</span> ( v4 &lt;= <span class="number">4</span> )                              <span class="comment">// 判断剩余字符是否小于4字节</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v4 -= <span class="number">4</span>;</span><br><span class="line">    *codeResult = (a456789[code[<span class="number">1</span>]] &gt;&gt; <span class="number">4</span>) | (<span class="number">4</span> * a456789[*code]);</span><br><span class="line">    codeResult[<span class="number">1</span>] = (a456789[code[<span class="number">2</span>]] &gt;&gt; <span class="number">2</span>) | (<span class="number">16</span> * a456789[code[<span class="number">1</span>]]);</span><br><span class="line">    v7 = code[<span class="number">2</span>];</span><br><span class="line">    v8 = code[<span class="number">3</span>];</span><br><span class="line">    code += <span class="number">4</span>;</span><br><span class="line">    codeResult[<span class="number">2</span>] = (a456789[v7] &lt;&lt; <span class="number">6</span>) | a456789[v8];</span><br><span class="line">    codeResult += <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v4 &gt; <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *codeResult = (a456789[code[<span class="number">1</span>]] &gt;&gt; <span class="number">4</span>) | (<span class="number">4</span> * a456789[*code]);</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      codeResultTemp = codeResult + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      codeResult[<span class="number">1</span>] = (a456789[code[<span class="number">2</span>]] &gt;&gt; <span class="number">2</span>) | (<span class="number">16</span> * a456789[code[<span class="number">1</span>]]);</span><br><span class="line">      <span class="keyword">if</span> ( v4 == <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        codeResultTemp = codeResult + <span class="number">3</span>;</span><br><span class="line">        codeResult[<span class="number">2</span>] = (a456789[code[<span class="number">2</span>]] &lt;&lt; <span class="number">6</span>) | a456789[code[<span class="number">3</span>]];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        codeResultTemp = codeResult + <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;                                             <span class="comment">// 自实现过Base64编码的人在这里就不难看出来这里是Base64解码算法</span></span><br><span class="line">  *codeResultTemp = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v5 - (-v4 &amp; <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个Base64解码算法</p>
<h3 id="hook验证"><a href="#hook验证" class="headerlink" title="hook验证"></a>hook验证</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_native</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> soAddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libCheckRegister.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> codeEnc2 = soAddr.<span class="title function_">add</span>(<span class="number">0x1499</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(codeEnc2)</span><br><span class="line">    <span class="title class_">Memory</span>.<span class="title function_">protect</span>(codeEnc2, <span class="number">0x1000</span>, <span class="string">&#x27;rwx&#x27;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(codeEnc2,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg0:&quot;</span>,<span class="title function_">hexdump</span>(args[<span class="number">0</span>]));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg1:&quot;</span>,<span class="title function_">hexdump</span>(args[<span class="number">1</span>]));</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">codeResult</span> = args[<span class="number">0</span>];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;codeResult:&quot;</span>,<span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">codeResult</span>));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret:&quot;</span>,ret)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ret</span>=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_native</span>()</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arg0:            </span><br><span class="line">0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">ffdc62f4  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ffdc6304  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ffdc6314  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">arg1:</span><br><span class="line">0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">deb247a0  31 32 33 34 35 36 37 38 00 00 00 00 00 00 00 00  12345678........</span><br><span class="line">deb247b0  00 00 00 00 28 00 00 00 00 00 00 00 00 00 00 00  ....(...........</span><br><span class="line">codeResult: </span><br><span class="line">0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">ffdc62f4  d7 6d f8 e7 ae fc 00 00 00 00 00 00 00 00 00 00  .m..............</span><br><span class="line">ffdc6304  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ffdc6314  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">ret: 0x6</span><br></pre></td></tr></table></figure>

<p>如下证明codeEnc2是标准的Base64解码算法</p>
<p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/10.jpg"></p>
<h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>这里弄明白了，code经过Base64解码得到codeResult，codeResult部分数据经过Base64解码得到coderesultarray。</p>
<h3 id="重新捋一遍流程"><a href="#重新捋一遍流程" class="headerlink" title="重新捋一遍流程"></a>重新捋一遍流程</h3><p>首先，我们输入name，name经过混淆得到namemix，namemix的前20字节经过处理得到nameresultarray，然后由nameresultarray推导出coderesultarray，coderesultarray经过Base64编码得到code。</p>
<h1 id="C-还原"><a href="#C-还原" class="headerlink" title="C++还原"></a>C++还原</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 Base64 编码字符表</span></span><br><span class="line">string base64_chars =</span><br><span class="line">        <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line">        <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line">        <span class="string">&quot;0123456789+/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Base64 编码函数，将字节数组编码为 Base64 格式的字符串</span></span><br><span class="line"><span class="function">string <span class="title">base64_encode</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* bytes_to_encode, <span class="type">unsigned</span> <span class="type">int</span> in_len)</span> </span>&#123;</span><br><span class="line">    std::string ret; <span class="comment">// 存储编码后的结果</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> char_array_3[<span class="number">3</span>]; <span class="comment">// 临时存储3个字节</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> char_array_4[<span class="number">4</span>]; <span class="comment">// 临时存储4个编码后的字符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理输入数据，3个字节一组进行编码</span></span><br><span class="line">    <span class="keyword">while</span> (in_len--) &#123;</span><br><span class="line">        char_array_3[i++] = *(bytes_to_encode++);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="comment">// 将3个字节转换为4个6位的Base64字符索引</span></span><br><span class="line">            char_array_4[<span class="number">0</span>] = (char_array_3[<span class="number">0</span>] &amp; <span class="number">0xfc</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">            char_array_4[<span class="number">1</span>] = ((char_array_3[<span class="number">0</span>] &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">4</span>) + ((char_array_3[<span class="number">1</span>] &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">            char_array_4[<span class="number">2</span>] = ((char_array_3[<span class="number">1</span>] &amp; <span class="number">0x0f</span>) &lt;&lt; <span class="number">2</span>) + ((char_array_3[<span class="number">2</span>] &amp; <span class="number">0xc0</span>) &gt;&gt; <span class="number">6</span>);</span><br><span class="line">            char_array_4[<span class="number">3</span>] = char_array_3[<span class="number">2</span>] &amp; <span class="number">0x3f</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据索引从Base64字符表中获取字符</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; (i &lt; <span class="number">4</span>); i++)</span><br><span class="line">                ret += base64_chars[char_array_4[i]];</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理剩余的不足3字节的数据</span></span><br><span class="line">    <span class="keyword">if</span> (i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">            char_array_3[j] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 用\0填充</span></span><br><span class="line"></span><br><span class="line">        char_array_4[<span class="number">0</span>] = (char_array_3[<span class="number">0</span>] &amp; <span class="number">0xfc</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        char_array_4[<span class="number">1</span>] = ((char_array_3[<span class="number">0</span>] &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">4</span>) + ((char_array_3[<span class="number">1</span>] &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">        char_array_4[<span class="number">2</span>] = ((char_array_3[<span class="number">1</span>] &amp; <span class="number">0x0f</span>) &lt;&lt; <span class="number">2</span>) + ((char_array_3[<span class="number">2</span>] &amp; <span class="number">0xc0</span>) &gt;&gt; <span class="number">6</span>);</span><br><span class="line">        char_array_4[<span class="number">3</span>] = char_array_3[<span class="number">2</span>] &amp; <span class="number">0x3f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; (j &lt; i + <span class="number">1</span>); j++)</span><br><span class="line">            ret += base64_chars[char_array_4[j]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((i++ &lt; <span class="number">3</span>))</span><br><span class="line">            ret += <span class="string">&#x27;=&#x27;</span>; <span class="comment">// 用=填充</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 用于存储用户输入的姓名</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input name:&quot;</span>);</span><br><span class="line">    cin &gt;&gt; name; <span class="comment">// 输入姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> namelength = <span class="built_in">strlen</span>(name); <span class="comment">// 计算姓名长度</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;namelength:&quot;</span> &lt;&lt; namelength &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* temppointer = <span class="literal">NULL</span>; <span class="comment">// 临时指针</span></span><br><span class="line">    <span class="type">int</span> namemix[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 混淆后的结果数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成混淆数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">        temppointer = (<span class="type">char</span>*)namemix + i; <span class="comment">// 将指针指向namemix数组中的第i字节</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据姓名字符和索引计算一个混淆数</span></span><br><span class="line">        <span class="type">int</span> tempnumber = name[i % namelength] * (i + <span class="number">20160126</span>) * namelength;</span><br><span class="line"></span><br><span class="line">        *(<span class="type">int</span>*)temppointer += tempnumber; <span class="comment">// 将计算结果写入对应位置</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出混淆数据</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;namemix:&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i != <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; namemix[i] &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对混淆数据进一步处理，生成结果数组</span></span><br><span class="line">    <span class="type">int</span> nameresultarray[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        nameresultarray[i] = namemix[i] / <span class="number">10</span>; <span class="comment">// 每个值缩小10倍</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果数组</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;nameresultarrat&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; nameresultarray[i] &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据结果数组生成编码数组</span></span><br><span class="line">    <span class="type">int</span> coderesultarray[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    coderesultarray[<span class="number">0</span>] = nameresultarray[<span class="number">2</span>] + nameresultarray[<span class="number">2</span>] + nameresultarray[<span class="number">3</span>];</span><br><span class="line">    coderesultarray[<span class="number">1</span>] = <span class="number">3</span> * nameresultarray[<span class="number">2</span>] - nameresultarray[<span class="number">4</span>];</span><br><span class="line">    coderesultarray[<span class="number">2</span>] = nameresultarray[<span class="number">0</span>] + nameresultarray[<span class="number">1</span>] + nameresultarray[<span class="number">0</span>];</span><br><span class="line">    coderesultarray[<span class="number">3</span>] = nameresultarray[<span class="number">2</span>] + nameresultarray[<span class="number">3</span>];</span><br><span class="line">    coderesultarray[<span class="number">4</span>] = nameresultarray[<span class="number">0</span>] + nameresultarray[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出编码数组</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;coderesultarray:&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 输出为16进制格式</span></span><br><span class="line">        <span class="comment">//printf(&quot;%x\n&quot;, coderesultarray[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 Base64 对编码数组进行编码</span></span><br><span class="line">    string encodeStr = <span class="built_in">base64_encode</span>((<span class="type">unsigned</span> <span class="type">char</span>*)coderesultarray, <span class="number">20</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Code is :&quot;</span> &lt;&lt; encodeStr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="验证成功"><a href="#验证成功" class="headerlink" title="验证成功"></a>验证成功</h2><p><img src="/2024/12/21/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%A7%BB%E5%8A%A8%E8%B5%9B%E9%A2%98Tencent2016A/11.jpg"></p>
]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>Tencent2016A</tag>
      </tags>
  </entry>
  <entry>
    <title>编码与加解密</title>
    <url>/2025/01/06/%E7%BC%96%E7%A0%81%E4%B8%8E%E5%8A%A0%E8%A7%A3%E5%AF%86/</url>
    <content><![CDATA[<h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><h2 id="Hex"><a href="#Hex" class="headerlink" title="Hex"></a>Hex</h2><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><h3 id="Python实现Base64的加解密"><a href="#Python实现Base64的加解密" class="headerlink" title="Python实现Base64的加解密"></a>Python实现Base64的加解密</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">data = <span class="string">&quot;Bielton&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;data:&quot;</span>,data)</span><br><span class="line">data_b64encode = base64.b64encode(data.encode())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b64编码：&quot;</span>,data_b64encode.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">data_b64decode = base64.b64decode(data_b64encode)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b64解码&quot;</span>,data_b64decode.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">data: Bielton</span><br><span class="line">b64编码： QmllbHRvbg==</span><br><span class="line">b64解码 Bielton</span><br></pre></td></tr></table></figure>

<h3 id="Java实现Base64的加解密"><a href="#Java实现Base64的加解密" class="headerlink" title="Java实现Base64的加解密"></a>Java实现Base64的加解密</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;Bielton&quot;</span>;</span><br><span class="line">      Base64.Encoder  encoder=  Base64.getEncoder();</span><br><span class="line">      <span class="type">byte</span>[] encoded = encoder.encode(data.getBytes());</span><br><span class="line">      <span class="type">String</span> <span class="variable">encodedToString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(encoded);</span><br><span class="line">      System.out.println(encodedToString); <span class="comment">// QmllbHRvbg==</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] decoded = Base64.getDecoder().decode(encodedToString);</span><br><span class="line">      <span class="type">String</span> <span class="variable">decodedToString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(decoded);</span><br><span class="line">      System.out.println(decodedToString);  <span class="comment">// Bielton</span></span><br></pre></td></tr></table></figure>

<h3 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">B64_en</span> <span class="operator">=</span> findViewById(R.id.b64encode);</span><br><span class="line">B64_en.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;Bileton&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data_encode</span> <span class="operator">=</span> Base64.encodeToString(data.getBytes(), Base64.DEFAULT);</span><br><span class="line">        Toast.makeText(MainActivity.<span class="built_in">this</span>,data_encode,Toast.LENGTH_SHORT).show();  <span class="comment">// QmllbHRvbg==</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">Button</span> <span class="variable">B64_de</span> <span class="operator">=</span> findViewById(R.id.b64decode);</span><br><span class="line">B64_de.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;Bileton&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data_encode</span> <span class="operator">=</span> Base64.encodeToString(data.getBytes(), Base64.DEFAULT);</span><br><span class="line">        <span class="type">byte</span>[] data_decode = Base64.decode(data_encode,Base64.DEFAULT);</span><br><span class="line">        <span class="type">String</span> <span class="variable">decodeString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(data_decode);</span><br><span class="line">        Toast.makeText(MainActivity.<span class="built_in">this</span>,decodeString,Toast.LENGTH_SHORT).show();  <span class="comment">// Bielton</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="消息摘要算法"><a href="#消息摘要算法" class="headerlink" title="消息摘要算法"></a>消息摘要算法</h1><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p><strong>消息处理</strong></p>
<p>对输入消息进行分块，每个分块的长度为512位（32字节），不足512位的进行填充，先填充一个1，然后补0，直到长度为448位，然后在最后的64位中添加原始消息的长度。</p>
<p><strong>初始化常量</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A = 0x67452301</span><br><span class="line">B = 0xEFCDAB89</span><br><span class="line">C = 0x98BADCFE</span><br><span class="line">D = 0x10325476</span><br></pre></td></tr></table></figure>

<p><strong>生成结果</strong></p>
<p>最终生成128位（16字节）长度的哈希值。</p>
<h3 id="Python实现MD5"><a href="#Python实现MD5" class="headerlink" title="Python实现MD5"></a>Python实现MD5</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要加密的字符串</span></span><br><span class="line">md5_str = <span class="string">&quot;Bileton&quot;</span></span><br><span class="line"><span class="comment"># 创建md5对象</span></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line"><span class="comment"># 更新要加密的数据，参数要是字节类型</span></span><br><span class="line">md5.update(md5_str.encode(<span class="string">&#x27;UTF-8&#x27;</span>))</span><br><span class="line"><span class="comment"># 获取加密后的数据，以16进制表示</span></span><br><span class="line">md5_hash = md5.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(md5_str,<span class="string">&quot;的哈希值为：&quot;</span>,md5_hash)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">Bileton 的哈希值为： 1483ab1f77ea828faa5f78514d2765c1</span><br></pre></td></tr></table></figure>



<h2 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h2><p><strong>消息处理</strong></p>
<p>SHA1的消息处理方式与MD5基本相同，区别是最后的消息长度使用的是大端字节序。</p>
<p><strong>初始化常量</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">H0 = 0x67452301</span><br><span class="line">H1 = 0xEFCDAB89</span><br><span class="line">H2 = 0x98BADCFE</span><br><span class="line">H3 = 0x10325476</span><br><span class="line">H4 = 0xC3D2E1F0</span><br></pre></td></tr></table></figure>

<p><strong>生成结果</strong></p>
<p>最终生成160位（20字节）长度的哈希值。(这里的结果使用的是大端字节序。)</p>
<h2 id="SHA256"><a href="#SHA256" class="headerlink" title="SHA256"></a>SHA256</h2><p><strong>消息处理</strong></p>
<p>与SHA1相同。</p>
<p><strong>初始化常量</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">H0 = 0x6a09e667</span><br><span class="line">H1 = 0xbb67ae85</span><br><span class="line">H2 = 0x3c6ef372</span><br><span class="line">H3 = 0xa54ff53a</span><br><span class="line">H4 = 0x510e527f</span><br><span class="line">H5 = 0x9b05688c</span><br><span class="line">H6 = 0x1f83d9ab</span><br><span class="line">H7 = 0x5be0cd19</span><br></pre></td></tr></table></figure>



<p><strong>生成结果</strong></p>
<p>最终生成256位（32字节）长度的哈希值。(这里的结果使用的是大端字节序。)</p>
<h2 id="MAC算法"><a href="#MAC算法" class="headerlink" title="MAC算法"></a>MAC算法</h2><p><strong>MAC公式</strong></p>
<p><img src="/2025/01/06/%E7%BC%96%E7%A0%81%E4%B8%8E%E5%8A%A0%E8%A7%A3%E5%AF%86/1.jpg"></p>
<p><code>message</code>是消息m<br><code>key</code>是密钥<br><code>||</code>是级联，其实就是拼接操作<br><code>ipad</code>值为0x36<br><code>opad</code>值为0x5c<br><code>⊕</code>代表异或</p>
<p><strong>密钥扩展</strong></p>
<ul>
<li>若密钥长度小于Hash的分组长度<br>在密钥末尾填充0，直到长度达到Hash的分组长度</li>
<li>若密钥长度大于Hash的分组长度<br>将密钥进行哈希运算，然后补充0，直到长度达到Hash的分组长度</li>
</ul>
<h3 id="HmacMD5"><a href="#HmacMD5" class="headerlink" title="HmacMD5"></a>HmacMD5</h3><p>与MD5不同的是，HmacMD5结合了密钥。</p>
<p>生成128位（16字节）长度的哈希值。</p>
<h3 id="HmacSHA1"><a href="#HmacSHA1" class="headerlink" title="HmacSHA1"></a>HmacSHA1</h3><p>与HmacSHA1不同的是，HmacSHA1结合了密钥。</p>
<p>生成256位（32字节）长度的哈希值。</p>
<h3 id="HmacSHA256"><a href="#HmacSHA256" class="headerlink" title="HmacSHA256"></a>HmacSHA256</h3><p>与HmacSHA256不同的是，HmacSHA256结合了密钥。</p>
<h1 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h1><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><h2 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h2><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><h1 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h1><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2>]]></content>
      <categories>
        <category>编码与加解密</category>
      </categories>
      <tags>
        <tag>编码与加解密</tag>
      </tags>
  </entry>
  <entry>
    <title>自毁程序密码—阿里聚安全</title>
    <url>/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.yaotong.crackme</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/1.jpg"></p>
<h2 id="Java层分析"><a href="#Java层分析" class="headerlink" title="Java层分析"></a>Java层分析</h2><h3 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h3><p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/2.jpg"></p>
<p>很容易就能看出来是在securityCheck函数里进行安全校验。securityCheck是一个native函数，到so中进行分析。</p>
<h1 id="SO层分析"><a href="#SO层分析" class="headerlink" title="SO层分析"></a>SO层分析</h1><h2 id="定位函数位置"><a href="#定位函数位置" class="headerlink" title="定位函数位置"></a>定位函数位置</h2><p>在导出函数里搜索</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/3.jpg"></p>
<h2 id="securityCheck"><a href="#securityCheck" class="headerlink" title="securityCheck"></a>securityCheck</h2><p>数据类型修复和重命名后的securityCheck</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">Java_com_yaotong_crackme_MainActivity_securityCheck</span><span class="params">(JNIEnv *a1, jobject a2, <span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *inputStr; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> *wojiushidaan; <span class="comment">// r2</span></span><br><span class="line">  <span class="type">int</span> tempResult; <span class="comment">// r3</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r1</span></span><br><span class="line">​</span><br><span class="line">  <span class="keyword">if</span> ( !byte_6359 )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_2494(byte_6304, <span class="number">8</span>, &amp;unk_446B, &amp;unk_4468, <span class="number">2</span>, <span class="number">7</span>);</span><br><span class="line">    byte_6359 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !byte_635A )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_24F4(byte_636C, <span class="number">25</span>, &amp;unk_4530, &amp;unk_4474, <span class="number">3</span>, <span class="number">117</span>);</span><br><span class="line">    byte_635A = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _android_log_print(<span class="number">4</span>, byte_6304, byte_636C);</span><br><span class="line">  inputStr = (*a1)-&gt;GetStringUTFChars(a1, str, <span class="number">0</span>);</span><br><span class="line">  wojiushidaan = off_628C;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    tempResult = *wojiushidaan;</span><br><span class="line">    <span class="keyword">if</span> ( tempResult != *inputStr )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++wojiushidaan;</span><br><span class="line">    ++inputStr;</span><br><span class="line">    v8 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !tempResult )</span><br><span class="line">      <span class="keyword">return</span> v8;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="off-628C"><a href="#off-628C" class="headerlink" title="off_628C"></a>off_628C</h3><p>进入off_628C偏移查看，它的内容是”wojiushidaan”</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/4.jpg"></p>
<p>数据查看</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/5.jpg"></p>
<p>结合securityCheck函数分析，我觉得这就是正确答案了。</p>
<p>可是输入之后，还是校验失败。</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/6.jpg"></p>
<p>无奈只能动态调试</p>
<h1 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h1><p>IDA动态调试环境配置这里不再介绍。</p>
<h2 id="附加进程"><a href="#附加进程" class="headerlink" title="附加进程"></a>附加进程</h2><p>重新启动程序</p>
<p>在IDA里选择附加到进程</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/7.jpg"></p>
<p>附加进程之后，我们运行一下，会发现，程序崩了，IDA也崩了，说明这个so是有反调试的。</p>
<h2 id="反调试绕过"><a href="#反调试绕过" class="headerlink" title="反调试绕过"></a>反调试绕过</h2><p>猜测反调试是通过线程进行循环检测的。</p>
<p>打开线程窗口</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/8.jpg"></p>
<p>发现一个线程<code>yaotong.crackme</code>，有点可疑，右键这个线程，将状态改为suspend，暂停这个线程。</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/9.jpg"></p>
<p>然后运行，程序没有挂掉，可以进行调试。</p>
<h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><p>打开Modules窗口，找到libcrackme.so，双击进去，找到securityCheck函数，双击该函数跳转到函数的位置。</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/10.jpg"></p>
<p>在这个函数起始的位置下一个断点，将光标移动到断点位置，按下快捷键F，然后在输入框输入任意数据，点击输入密码，程序就会运行到断点位置。</p>
<p>F5查看反汇编，找到原来的变量偏移地址处，发现数据变了，变成了<code>aiyou,bucuoo</code></p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/11.jpg"></p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/12.jpg"></p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>将<code>aiyou,bucuoo</code>放进输入框，点击输入密码，跳转到成功界面。</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/13.jpg"></p>
<h1 id="使用frida-hook内存"><a href="#使用frida-hook内存" class="headerlink" title="使用frida hook内存"></a>使用frida hook内存</h1><p>找到存储答案的变量的内存地址</p>
<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/14.jpg"></p>
<p>在程序启动之后，使用frida直接对内存进行hook</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_yaotong</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> soAddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libcrackme.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> hookAddr = soAddr.<span class="title function_">add</span>(<span class="number">0x4450</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(hookAddr.<span class="title function_">readCString</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/15.jpg"></p>
<h1 id="使用unidbg模拟执行"><a href="#使用unidbg模拟执行" class="headerlink" title="使用unidbg模拟执行"></a>使用unidbg模拟执行</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yaotong.crackme;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.backend.DynarmicFactory;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DalvikModule dalvikModule;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    MainActivity() &#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().setProcessName(<span class="string">&quot;com.yaotong.crackme&quot;</span>).addBackendFactory(<span class="keyword">new</span> <span class="title class_">DynarmicFactory</span>(<span class="literal">true</span>)).build();</span><br><span class="line">        memory = emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/java/com/yaotong/crackme/alijuanquan.apk&quot;</span>));</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);</span><br><span class="line">        dalvikModule = vm.loadLibrary(<span class="string">&quot;crackme&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">module</span> = dalvikModule.getModule();</span><br><span class="line">        vm.callJNI_OnLoad(emulator,<span class="keyword">module</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MainActivity</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MainActivity</span>();</span><br><span class="line">        System.out.println(test.Check());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">Check</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DvmClass</span> <span class="variable">dvmClass</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com.yaotong.crackme.MainActivity&quot;</span>);</span><br><span class="line">        <span class="type">DvmObject</span> <span class="variable">dvmObject</span> <span class="operator">=</span> dvmClass.newObject(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">input</span> <span class="operator">=</span> <span class="string">&quot;aiyou,bucuoo&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> dvmObject.callJniMethodBoolean(emulator,<span class="string">&quot;securityCheck(Ljava.lang.sring;)Z&quot;</span>,input);</span><br><span class="line">        System.out.println(<span class="string">&quot;result=&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/2024/12/22/%E8%87%AA%E6%AF%81%E7%A8%8B%E5%BA%8F%E5%AF%86%E7%A0%81%E2%80%94%E9%98%BF%E9%87%8C%E8%81%9A%E5%AE%89%E5%85%A8/16.jpg"></p>
<p>待完善…</p>
<p>参考文章：<a href="https://mp.weixin.qq.com/s/r-XXZQImgRc-Lce5B7x60w">https://mp.weixin.qq.com/s/r-XXZQImgRc-Lce5B7x60w</a></p>
]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>自毁程序密码</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2025/01/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h1 id="网络设备"><a href="#网络设备" class="headerlink" title="网络设备"></a>网络设备</h1><h2 id="集线器"><a href="#集线器" class="headerlink" title="集线器"></a>集线器</h2><p>将多个网络设备连接在一起，构成一个局域网。</p>
<p>集线器将接收到的信号广播到所有连接到它的设备上，而不是发送给特定的设备。</p>
<p>集线器无法识别数据包的目标设备，它只是简单地转发数据包给所有的连接设备，直到目标设备接收到该数据。</p>
<p>集线器工作在物理层。</p>
<h2 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h2><p>交换机可以把数据包仅转发给目标设备。</p>
<p>交换机内部维护者一张MAC地址表，记录每一台设备的MAC地址。</p>
<p>交换机工作在数据链路层。</p>
<h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p>路由器的主要功能是转发数据包，使不同网络之间可以通信。</p>
<p>路由器根据目的IP地址，查找路由表（Routing Table）来决定将数据包发送到哪个网络或设备。</p>
<p>路由器工作在网络层。</p>
<h1 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h1><h2 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h2><p>MAC地址是网络接口卡（NIC）在局域网（LAN）中用于唯一标识设备的硬件地址。它是由硬件制造商在设备生产时分配的，通常嵌入在设备的网卡中。MAC地址通常是不可更改的。</p>
<p>MAC地址用于在局域网内唯一标识一台设备。</p>
<h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>IP地址是一个用于标识网络中设备的逻辑地址，它由网络层协议（如IPv4或IPv6）定义。IP地址不依赖于硬件，而是可以通过配置修改。它用于跨越不同网络之间的设备间通信。</p>
<h3 id="特殊IP地址"><a href="#特殊IP地址" class="headerlink" title="特殊IP地址"></a>特殊IP地址</h3><ul>
<li><p><strong>127.0.0.1</strong></p>
<p>本地回环地址，允许计算机与自己的网络进行通信，运行在同一台计算机上的Web服务器和浏览器可以通过127.0.0.1进行通信，不需要访问外部网络。</p>
</li>
<li><p><strong>0.0.0.0</strong></p>
<p>0.0.0.0 用作路由表中的默认路由地址。它代表“所有未知的目标地址”，即当路由器或设备不知道如何将数据包发送到目标网络时，数据包会发送到默认路由。</p>
</li>
</ul>
<h1 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h1><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>地址解析协议（Address Resolution Protocol）</p>
<p>ARP协议用于在局域网内根据IP地址查找MAC地址。</p>
]]></content>
      <categories>
        <category>网络通信</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>见多识广</title>
    <url>/2024/12/26/%E8%A7%81%E5%A4%9A%E8%AF%86%E5%B9%BF/</url>
    <content><![CDATA[<h1 id="AIGC"><a href="#AIGC" class="headerlink" title="AIGC"></a>AIGC</h1><p>人工智能生成内容（Artificial Intelligence Generated Content），是指由人工智能（AI）技术创建、生成的各种内容，涵盖了文本、图像、视频、音频、代码等多种形式。</p>
<h1 id="LLM"><a href="#LLM" class="headerlink" title="LLM"></a>LLM</h1><p>大预言模型（Large Language Model），是指一种基于深度学习技术，尤其是通过神经网络训练而成的自然语言处理模型。</p>
<h1 id="HCI"><a href="#HCI" class="headerlink" title="HCI"></a>HCI</h1><p>人机交互（Human-Computer Interaction），是指人与计算机之间的交互过程和相关技术研究领域。</p>
<h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><p>远程过程调用（Remote Procedure Call），RPC 是一种计算机通信协议，允许程序在不同的地址空间（例如不同的计算机或同一台计算机的不同进程）之间调用函数或子程序，就像在本地调用一样，而无需了解底层的网络通信细节。</p>
<h1 id="AWD"><a href="#AWD" class="headerlink" title="AWD"></a>AWD</h1><p>攻防兼备（Attack With Defence）。</p>
<h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><p>二进制漏洞挖掘与利用</p>
<h1 id="ABI"><a href="#ABI" class="headerlink" title="ABI"></a>ABI</h1><p>应用程序二进制接口（Application Binary Interface），它定义了程序在运行时的二进制接口。ABI 主要用于描述操作系统和硬件平台如何协同工作，以及编译后的程序如何与系统或其他程序交互。</p>
<ul>
<li><p><strong>Linux 上的 x86_64 ABI</strong>：<br>定义了 64 位 Linux 系统上如何调用函数，参数如何传递。</p>
</li>
<li><p><strong>Android NDK 中的 ABI</strong>：</p>
<p>Android 平台支持多种 ABI，比如：</p>
<ul>
<li><code>armeabi-v7a</code>（32 位 ARM 架构）</li>
<li><code>arm64-v8a</code>（64 位 ARM 架构）</li>
<li><code>x86</code> 和 <code>x86_64</code>（Intel 架构）</li>
</ul>
<p>这些 ABI 直接决定了编译出来的二进制程序是否能在目标设备上运行。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>见多识广</category>
      </categories>
      <tags>
        <tag>见多识广</tag>
      </tags>
  </entry>
  <entry>
    <title>高效率工具集合</title>
    <url>/2025/01/08/%E9%AB%98%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h1><p>一个强大的文件搜索工具，快速定位计算机上的文件和文件夹。</p>
<h1 id="Snipast"><a href="#Snipast" class="headerlink" title="Snipast"></a>Snipast</h1><p>一个简单但强大的截图工具，也可以让你将截图贴回到屏幕上！</p>
<h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><p>一款 Markdown 编辑器和阅读器。</p>
<h1 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h1><p>轻量级代码编辑器。</p>
]]></content>
      <categories>
        <category>高效率工具合集</category>
      </categories>
      <tags>
        <tag>高效率工具合集</tag>
      </tags>
  </entry>
  <entry>
    <title>豆瓣frida检测绕过及搜索接口参数还原</title>
    <url>/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/</url>
    <content><![CDATA[<h1 id="App信息"><a href="#App信息" class="headerlink" title="App信息"></a>App信息</h1><p>包名：com.douban.frodo</p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/1.png" alt="1"></p>
<h1 id="frida反调试绕过"><a href="#frida反调试绕过" class="headerlink" title="frida反调试绕过"></a>frida反调试绕过</h1><p>首先尝试注入frida，发现直接就挂掉了，说明frida被检测到了</p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/2.jpg" alt="1"></p>
<h2 id="定位检测frida的so"><a href="#定位检测frida的so" class="headerlink" title="定位检测frida的so"></a>定位检测frida的so</h2><p>hook dlopen查看so加载流程，看在加载哪一个so的时候挂掉的，说明检测frida的函数在那个so里。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//Android8.0之后加载so通过android_dlopen_ext函数</span></span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;leave!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_dlopen</span>()</span><br></pre></td></tr></table></figure>

<p>根据hook的输出可以知道，在加载<code>libmsaoaidsec.so</code>之后，frida就挂掉了，说明是在<code>libmsaoaidsec.so</code>里检测的frida。</p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/3.jpg" alt="1"></p>
<h2 id="定位检测frida的函数地址，并进行替换"><a href="#定位检测frida的函数地址，并进行替换" class="headerlink" title="定位检测frida的函数地址，并进行替换"></a>定位检测frida的函数地址，并进行替换</h2><p>根据so的加载流程，<code>call_construction()</code>函数用来确保动态库中的函数得到加载并执行，在<code>call_construction()</code>函数里会调用一个<code>init_array()</code>函数，它包含了一组指向函数的指针，用于对函数进行初始化，在so加载完成之后，会调用<code>JNI_OnLoad()</code>函数，用于进行 JNI 环境的初始化、注册本地方法。</p>
<h3 id="hook-pthread-create"><a href="#hook-pthread-create" class="headerlink" title="hook pthread_create()"></a>hook pthread_create()</h3><p>检测frida的函数通常不会在主线程中，我们可以通过hook pthread_create()函数来打印线程中创建的函数的地址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//Android8.0之后加载so通过android_dlopen_ext函数</span></span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                    <span class="title function_">hook_pthread</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="comment">// console.log(&quot;leave!&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_pthread</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> pth_create = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[pth_create]&quot;</span>, pth_create);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pth_create, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(args[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address&quot;</span>, <span class="variable language_">module</span>.<span class="property">name</span>, args[<span class="number">2</span>].<span class="title function_">sub</span>(<span class="variable language_">module</span>.<span class="property">base</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hook_dlopen</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>

<p>结果如下，在<code>libmsaoaidsec.so</code>里创建了三个函数</p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/4.jpg" alt="1"></p>
<h3 id="hook-call-construction"><a href="#hook-call-construction" class="headerlink" title="hook call_construction()"></a>hook call_construction()</h3><p>可以通过hook call_construction()这个函数来对pthread_create()中创建的函数进行替换</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//Android8.0之后加载so通过android_dlopen_ext函数</span></span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>,<span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addr_android_dlopen_ext&quot;</span>,android_dlopen_ext);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(pathptr!=<span class="literal">null</span> &amp;&amp; pathptr != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> path = <span class="title function_">ptr</span>(pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="keyword">if</span>(path.<span class="title function_">indexOf</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>,path);</span><br><span class="line">                    <span class="title function_">hook_call_constructors</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retvel</span>)&#123;</span><br><span class="line">            <span class="comment">//console.log(&quot;leave!&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_call_constructors</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> linker64_base_addr = <span class="title class_">Module</span>.<span class="title function_">getBaseAddress</span>(<span class="string">&quot;linker64&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> call_constructors_func_off = <span class="number">0x2C274</span> <span class="comment">//这个地址是从手机上把linker64 pull出来，然后到IDA中找到的，不同的机型，地址可能不一样</span></span><br><span class="line">    <span class="keyword">var</span> call_constructors_func_addr = linker64_base_addr.<span class="title function_">add</span>(call_constructors_func_off)</span><br><span class="line">    <span class="keyword">var</span> listener = <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(call_constructors_func_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hooked call_constructors&quot;</span>)</span><br><span class="line">            <span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libmsaoaidsec.so&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">module</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x1c544</span>), <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0x1c544:替换成功&quot;</span>)</span><br><span class="line">                &#125;, <span class="string">&quot;void&quot;</span>, []))</span><br><span class="line">                <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x1b924</span>), <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0x1B924:替换成功&quot;</span>)</span><br><span class="line">                &#125;, <span class="string">&quot;void&quot;</span>, []))</span><br><span class="line">                <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(<span class="variable language_">module</span>.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x26e5c</span>), <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0x26e5c:替换成功&quot;</span>)</span><br><span class="line">                &#125;, <span class="string">&quot;void&quot;</span>, []))</span><br><span class="line">                listener.<span class="title function_">detach</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hook_dlopen</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>

<p>结果如下，frida反调试绕过成功了！</p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/5.jpg" alt="1"></p>
<h1 id="sign参数还原"><a href="#sign参数还原" class="headerlink" title="_sign参数还原"></a>_sign参数还原</h1><h2 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h2><p>通过抓包找到有关<code>_sig</code>参数的数据包</p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/6.jpg" alt="1"></p>
<h2 id="jadx反编译apk"><a href="#jadx反编译apk" class="headerlink" title="jadx反编译apk"></a>jadx反编译apk</h2><p>搜索字符串<code>&quot;_sig&quot;</code></p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/7.jpg" alt="1"></p>
<h2 id="intercept"><a href="#intercept" class="headerlink" title="intercept"></a>intercept</h2><p>定位到intercept函数，如下可以看出来<code>sig</code>的值为F3.first，F3的值为<code>i0.d.F(request)</code></p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/8.jpg" alt="1"></p>
<p>跟进到F方法里</p>
<h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><p>F方法内容如下</p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/9.jpg" alt="1"></p>
<p>返回值是E方法</p>
<p>跟进到E方法</p>
<h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><p>E方法内容如下</p>
<p><img src="/2025/01/07/%E8%B1%86%E7%93%A3frida%E6%A3%80%E6%B5%8B%E7%BB%95%E8%BF%87%E5%8F%8A%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BF%98%E5%8E%9F/10.jpg" alt="1"></p>
<p><strong>分析流程</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.判断str是否为空	（TextUtils.isEmpty(str)）</span><br><span class="line">   ↓</span><br><span class="line">2.获取str2	（StringBuilder l10 = android.support.v4.media.e.l(str2)）</span><br><span class="line">   ↓</span><br><span class="line">3.获取URL的路径部分，并进行url编码	（String encodedPath = HttpUrl.parse(str).encodedPath()）</span><br><span class="line">   ↓</span><br><span class="line">4.对进行过URL解码的路径部分进行URL解码	（decode = Uri.decode(encodedPath)）</span><br><span class="line">   ↓</span><br><span class="line">5.如果路径URL的路径部分的末尾有/符号，则删除它</span><br><span class="line">   ↓</span><br><span class="line">6.在l10末尾追加一个&amp;符号</span><br><span class="line">   ↓</span><br><span class="line">7.对解码的URL路径部分进行url编码，然后追加到l10末尾</span><br><span class="line">   ↓</span><br><span class="line">8.在l10末尾追加一个&amp;符号</span><br><span class="line">   ↓</span><br><span class="line">9.在l10末尾追加当前时间戳</span><br><span class="line">   ↓</span><br><span class="line">10.进行HmacSHA1签名</span><br><span class="line">   ↓</span><br><span class="line">11.进行Base64编码</span><br></pre></td></tr></table></figure>

<h2 id="hook-doFinal"><a href="#hook-doFinal" class="headerlink" title="hook doFinal"></a>hook doFinal</h2><p>hook doFinal方法来查看参与加密的参数的格式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">ByteString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">toBase64</span>(<span class="params">tag, data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(tag + <span class="string">&quot; Base64: &quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(data).<span class="title function_">base64</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params">tag, data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(tag + <span class="string">&quot; Hex: &quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(data).<span class="title function_">hex</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">toUtf8</span>(<span class="params">tag, data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(tag + <span class="string">&quot; Utf8: &quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(data).<span class="title function_">utf8</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mac = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.crypto.Mac&quot;</span>);</span><br><span class="line">    mac.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.security.Key&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.init(&#x27;java.security.Key&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> algorithm = <span class="variable language_">this</span>.<span class="title function_">getAlgorithm</span>();</span><br><span class="line">        <span class="keyword">var</span> tag = algorithm + <span class="string">&quot; init Key&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> keyBytes = key.<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="title function_">toUtf8</span>(tag, keyBytes);</span><br><span class="line">        <span class="title function_">toHex</span>(tag, keyBytes);</span><br><span class="line">        <span class="title function_">toBase64</span>(tag, keyBytes);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">init</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">doFinal</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mac.doFinal.overload(&#x27;[B&#x27;) is called!&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data:&quot;</span>,<span class="title function_">toUtf8</span>(<span class="string">&quot;data:&quot;</span>,data))</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">doFinal</span>(data)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>,<span class="title function_">toBase64</span>(<span class="string">&quot;result&quot;</span>,result))</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=======================================================&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mac.init(&#x27;java.security.Key&#x27;) is called!</span><br><span class="line">HmacSHA1 init Key Utf8: bf7dddc7c9cfe6f7</span><br><span class="line">HmacSHA1 init Key Hex: 62663764646463376339636665366637</span><br><span class="line">HmacSHA1 init Key Base64: YmY3ZGRkYzdjOWNmZTZmNw==</span><br><span class="line">Mac.doFinal.overload(&#x27;[B&#x27;) is called!</span><br><span class="line">data: Utf8: GET&amp;%2Fapi%2Fv2%2Fsearch&amp;1736261466</span><br><span class="line">data: undefined</span><br><span class="line">result Base64: S6+RLmdsNP1NdjQghxJebsST7Tc=</span><br><span class="line">result: undefined</span><br><span class="line">=======================================================</span><br></pre></td></tr></table></figure>



<h2 id="hook-E"><a href="#hook-E" class="headerlink" title="hook E"></a>hook E</h2><p>对E方法进行hook，可以查看参数和返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_E</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> d = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;i0.d&quot;</span>);</span><br><span class="line">        d.<span class="property">E</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">str1,str2,str3</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----E----&quot;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str1:&quot;</span>,str1);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str2:&quot;</span>,str2);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str3:&quot;</span>,str3);</span><br><span class="line">            <span class="keyword">let</span> result = <span class="variable language_">this</span>.<span class="title function_">E</span>(str1,str2,str3);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>,result)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----over----&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_E</span>()</span><br></pre></td></tr></table></figure>

<p><strong>hook 结果</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----E----</span><br><span class="line">str1: https://frodo.douban.com/api/v2/search/suggestion?q=%E8%AF%AF%E6%9D%80&amp;loc_id=108288&amp;apikey=0dad551ec0f84ed02907ff5c42e8ec70&amp;channel=ali_market&amp;udid=ce0fb355c7f98012b1d6716853b6841ba7e35819&amp;os_rom=android&amp;timezone=Asia%2FShanghai</span><br><span class="line">str2: GET</span><br><span class="line">str3: null</span><br><span class="line">result: Pair&#123;idc8eWIGKhtP6hTr9piPi5OSadQ= 1736098880&#125;</span><br><span class="line">----over----</span><br><span class="line">----E----</span><br><span class="line">str1: https://frodo.douban.com/api/v2/search/found_words?screen_width=1080&amp;screen_height=2028&amp;wx_api_ver=0&amp;opensdk_ver=638058496&amp;webview_ua=Mozilla%2F5.0%20%28Linux%3B%20Android%209%3B%20Pixel%203%20Build%2FPD1A.180720.030%3B%20wv%29%20AppleWebKit%2F537.36%20%28KHTML%2C%20like%20Gecko%29%20Version%2F4.0%20Chrome%2F66.0.3359.158%20Mobile%20Safari%2F537.36&amp;sugar=0&amp;update_mark=1709887761.853333336&amp;network=wifi&amp;enable_sdk_bidding=1&amp;timezone=Asia%2FShanghai</span><br><span class="line">str2: POST</span><br><span class="line">str3: null</span><br><span class="line">result: Pair&#123;gYm5pJeYn7Wh/uv2QxJF6sh6sfA= 1736098863&#125;</span><br><span class="line">----over----</span><br></pre></td></tr></table></figure>

<h2 id="hook-SecretKeySpec"><a href="#hook-SecretKeySpec" class="headerlink" title="hook SecretKeySpec"></a>hook SecretKeySpec</h2><p>对于hmacsha1算法，我们得知道密钥才行，可以hook SecretKeySpec得到密钥</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_SecretKeySpec</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> secretkeyspec = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.crypto.spec.SecretKeySpec&quot;</span>);</span><br><span class="line">        secretkeyspec.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">str5,sha1</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> stringdata = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(str5);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str5:&quot;</span>,stringdata);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sha1:&quot;</span>,sha1);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;====+++====&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">hook_SecretKeySpec</span>()</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="attr">str5</span>: bf7dddc7c9cfe6f7</span><br><span class="line"><span class="attr">sha1</span>: <span class="title class_">HmacSHA1</span></span><br></pre></td></tr></table></figure>

<p>得到hmacsha1的密钥为<code>bf7dddc7c9cfe6f7</code></p>
<h2 id="参数还原"><a href="#参数还原" class="headerlink" title="参数还原"></a>参数还原</h2><p>这里拿一份hook到的数据进行分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----E----</span><br><span class="line">str1: https://frodo.douban.com/api/v2/search/suggestion?q=%E8%AF%AF%E6%9D%80&amp;loc_id=108288&amp;apikey=0dad551ec0f84ed02907ff5c42e8ec70&amp;channel=ali_market&amp;udid=ce0fb355c7f98012b1d6716853b6841ba7e35819&amp;os_rom=android&amp;timezone=Asia%2FShanghai</span><br><span class="line">str2: GET</span><br><span class="line">str3: null</span><br><span class="line">result: Pair&#123;idc8eWIGKhtP6hTr9piPi5OSadQ= 1736098880&#125;</span><br><span class="line">----over----</span><br></pre></td></tr></table></figure>

<p>首先需要的是请求方式，这里是<code>GET</code></p>
<p>其次是URL的路径部分，还要进行url编码，这里拿到的是<code>%2Fapi%2Fv2%2Fsearch%2Fsuggestion</code></p>
<p>然后是时间戳<code>1736098880</code></p>
<p>进行HmacSHA1签名，在进行Base64编码</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hmacsha1</span>(<span class="params">key,data</span>):</span><br><span class="line">    key_bytes = key.encode()</span><br><span class="line">    data_bytes = data.encode()</span><br><span class="line">    mac = hmac.new(key_bytes,data_bytes,hashlib.sha1)</span><br><span class="line">    sha1_result = mac.digest()</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(sha1_result).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    </span><br><span class="line">key = <span class="string">&quot;bf7dddc7c9cfe6f7&quot;</span></span><br><span class="line">data = <span class="string">&quot;GET&amp;%2Fapi%2Fv2%2Fsearch%2Fsuggestion&amp;1736098880&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sig:&quot;</span>+hmacsha1(key,data))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">sig:idc8eWIGKhtP6hTr9piPi5OSadQ=</span><br></pre></td></tr></table></figure>

<h1 id="搜索接口"><a href="#搜索接口" class="headerlink" title="搜索接口"></a>搜索接口</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hmacsha1</span>(<span class="params">key,data</span>):</span><br><span class="line">    key_bytes = key.encode()</span><br><span class="line">    data_bytes = data.encode()</span><br><span class="line">    mac = hmac.new(key_bytes,data_bytes,hashlib.sha1)</span><br><span class="line">    sha1_result = mac.digest()</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(sha1_result).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://frodo.douban.com/api/v2/search&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;api-client/1 com.douban.frodo/7.89.0(307) Android/28 product/blueline vendor/Google model/Pixel 3 brand/google  rom/android  network/wifi  udid/ce0fb355c7f98012b1d6716853b6841ba7e35819  platform/mobile&quot;</span>,</span><br><span class="line">  <span class="string">&quot;accept-encoding&quot;</span>: <span class="string">&quot;br,gzip&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timestamp = <span class="built_in">int</span>(time.time())</span><br><span class="line">encode_data = <span class="string">&quot;GET&quot;</span>+<span class="string">&quot;&amp;&quot;</span>+<span class="string">&quot;%2Fapi%2Fv2%2Fsearch&quot;</span>+<span class="string">&quot;&amp;&quot;</span>+<span class="built_in">str</span>(timestamp)</span><br><span class="line">key = <span class="string">&quot;bf7dddc7c9cfe6f7&quot;</span></span><br><span class="line">sig = hmacsha1(key,encode_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sig:&quot;</span>,sig)</span><br><span class="line"></span><br><span class="line">query = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>)</span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">  <span class="string">&quot;q&quot;</span>: query,</span><br><span class="line">  <span class="string">&quot;sort&quot;</span>: <span class="string">&quot;relevance&quot;</span>,</span><br><span class="line">  <span class="string">&quot;count&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">  <span class="string">&quot;screen_width&quot;</span>: <span class="string">&quot;1080&quot;</span>,</span><br><span class="line">  <span class="string">&quot;screen_height&quot;</span>: <span class="string">&quot;2028&quot;</span>,</span><br><span class="line">  <span class="string">&quot;wx_api_ver&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;opensdk_ver&quot;</span>: <span class="string">&quot;638058496&quot;</span>,</span><br><span class="line">  <span class="string">&quot;webview_ua&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PD1A.180720.030; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.158 Mobile Safari/537.36&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sugar&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;update_mark&quot;</span>: <span class="string">&quot;1709887761.853333336&quot;</span>,</span><br><span class="line">  <span class="string">&quot;network&quot;</span>: <span class="string">&quot;wifi&quot;</span>,</span><br><span class="line">  <span class="string">&quot;enable_sdk_bidding&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;loc_id&quot;</span>: <span class="string">&quot;108288&quot;</span>,</span><br><span class="line">  <span class="string">&quot;apikey&quot;</span>: <span class="string">&quot;0dad551ec0f84ed02907ff5c42e8ec70&quot;</span>,</span><br><span class="line">  <span class="string">&quot;channel&quot;</span>: <span class="string">&quot;ali_market&quot;</span>,</span><br><span class="line">  <span class="string">&quot;udid&quot;</span>: <span class="string">&quot;ce0fb355c7f98012b1d6716853b6841ba7e35819&quot;</span>,</span><br><span class="line">  <span class="string">&quot;os_rom&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">  <span class="string">&quot;oaid&quot;</span>: <span class="string">&quot;EdGi3zYQCRzmwwB1YR7WKg==\n&quot;</span>,</span><br><span class="line">  <span class="string">&quot;timezone&quot;</span>: <span class="string">&quot;Asia/Shanghai&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_sig&quot;</span>:sig,</span><br><span class="line">  <span class="string">&quot;_ts&quot;</span>: timestamp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url,headers=headers,params=params)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="comment"># print(response.text)</span></span><br><span class="line">text = json.loads(response.text)</span><br><span class="line"><span class="built_in">print</span>(text)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>逆向实战案例</category>
      </categories>
      <tags>
        <tag>豆瓣</tag>
      </tags>
  </entry>
</search>
